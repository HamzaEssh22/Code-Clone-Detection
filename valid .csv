func_x,func_y,Label
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public static Image getPluginImage(final Object plugin, final String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (m_URLImageMap.containsKey(url)) return m_URLImageMap.get(url);
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    m_URLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
            }
        } catch (Throwable e) {
        }
        return null;
    }
",0.0
"    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
","    @SuppressWarnings(""unchecked"")
    private void updatePortfolio(List entries, String query) {
        BufferedReader in = null;
        try {
            URL url = new URL(query);
            System.out.println(query);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                int count = 0;
                while (true) {
                    String line = in.readLine();
                    if (line == null || count >= entries.size()) break;
                    updateEntry((PortfolioEntry) entries.get(count), line);
                    count++;
                }
            }
        } catch (Exception e) {
            logger.error(MiscUtils.stackTrace2String(e));
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ignore) {
                }
            }
        }
    }
",0.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    @Override
    protected String determineDataType() {
        final String spec = getSpec();
        if (spec.endsWith(""=jpeg"")) {
            return ""jpeg"";
        } else if (mimeType != UNSET) {
            return mimeType;
        } else if (spec != SPEC_UNSET && spec.startsWith(""http"") && spec.contains(""fedora"")) {
            if (spec.endsWith(""bdef:AssetDef/getFullView/"")) {
                return ""html"";
            } else {
                String type = getProperty(CONTENT_TYPE);
                if (type == null || type.length() < 1) {
                    try {
                        final URL url = (mURL != null ? mURL : new URL(getSpec()));
                        if (DEBUG.Enabled) out(""polling actual HTTP server for content-type: "" + url);
                        if (!VUE.isApplet()) type = url.openConnection().getHeaderField(""Content-type""); else type = null;
                        if (DEBUG.Enabled) {
                            out(""got contentType "" + url + "" ["" + type + ""]"");
                        }
                        if (type != null && type.length() > 0) setProperty(CONTENT_TYPE, type);
                    } catch (Throwable t) {
                        Log.error(""content-type-fetch: "" + this, t);
                    }
                }
                if (type != null && type.contains(""/"")) {
                    mimeType = type.split(""/"")[1];
                    if (mimeType.indexOf(';') > 0) {
                        mimeType = mimeType.substring(0, mimeType.indexOf(';'));
                    }
                    return mimeType;
                }
            }
        }
        return super.determineDataType();
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public boolean ImportData() {
        if (fileData == null) {
            return false;
        }
        String line = new String();
        BufferedReader br;
        BufferedWriter bw;
        String tableName = new String();
        List<String> columns = new ArrayList<String>();
        long recordsNumber;
        String sql = new String();
        File tempDataFile;
        String filePath = new String();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(fileData)));
            if (br.ready()) {
                if ((line = br.readLine()) != null) {
                    do {
                        tableName = siteName + ""_"" + getTableName(line);
                        columns = getTableColumns(line);
                        tempDataFile = new File(""./Data/"" + tableName + "".txt"");
                        tempDataFile.createNewFile();
                        filePath = tempDataFile.getCanonicalPath();
                        sql = generateSQL(tableName, columns, filePath);
                        recordsNumber = getRecordNumber(line);
                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));
                        for (long i = 0; i < recordsNumber; i++) {
                            bw.write(br.readLine() + ""\r\n"");
                        }
                        bw.close();
                        if (sqlConnector != null) {
                            sqlConnector.executeSQL(sql);
                        } else {
                            return false;
                        }
                    } while ((line = br.readLine()) != null);
                }
                br.close();
            }
        } catch (Exception e) {
            ExceptionHandler.handleExcptin(e);
        }
        return true;
    }
",1.0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0.0
"    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }
","    public static Document tidyHTML(URL url) throws XMLHelperException {
        try {
            URLConnection inConnection = url.openConnection();
            if (inConnection.getContentType().startsWith(""text/xml"") || inConnection.getContentType().startsWith(""text/xhtml"")) {
                return parseXMLFromURL(url);
            } else if (inConnection.getContentType().startsWith(""text/html"")) {
                InputStream is = inConnection.getInputStream();
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                int totalBytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int bytesRead = is.read(buffer, 0, buffer.length);
                    if (bytesRead < 0) break;
                    for (int i = 0; i < bytesRead; i++) {
                        byte b = buffer[i];
                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;
                        buffer[i] = b;
                    }
                    out.write(buffer, 0, bytesRead);
                    totalBytes += bytesRead;
                }
                is.close();
                out.close();
                String outContent = out.toString();
                InputStream in = new ByteArrayInputStream(out.toByteArray());
                Tidy tidy = new Tidy();
                tidy.setShowWarnings(false);
                tidy.setXmlOut(true);
                tidy.setXmlPi(false);
                tidy.setDocType(""omit"");
                tidy.setXHTML(false);
                tidy.setRawOut(true);
                tidy.setNumEntities(true);
                tidy.setQuiet(true);
                tidy.setFixComments(true);
                tidy.setIndentContent(true);
                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);
                String result = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex = result.indexOf(""<!DOCTYPE"")) >= 0) {
                    endIndex = result.indexOf("">"", startIndex);
                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());
                }
                while ((startIndex = result.indexOf(""<script"")) >= 0) {
                    endIndex = result.indexOf(""</script>"");
                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());
                }
                in.close();
                baos.close();
                return parseXMLFromString(result);
            } else {
                throw new XMLHelperException(""Unable to tidy content type: "" + inConnection.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException(""Unable to perform input/output"", ioe);
        }
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    public void actualizar() throws SQLException, ClassNotFoundException, Exception {
        Connection conn = null;
        PreparedStatement ms = null;
        if (!validado) {
            validado = validar();
        }
        if (!validado) {
            throw new Exception(""No s'ha realitzat la validació de les dades del registre "");
        }
        registroActualizado = false;
        try {
            int fzaanoe;
            String campo;
            fechaTest = dateF.parse(dataentrada);
            Calendar cal = Calendar.getInstance();
            cal.setTime(fechaTest);
            DateFormat date1 = new SimpleDateFormat(""yyyyMMdd"");
            fzaanoe = Integer.parseInt(anoEntrada);
            int fzafent = Integer.parseInt(date1.format(fechaTest));
            conn = ToolsBD.getConn();
            conn.setAutoCommit(false);
            int fzanume = Integer.parseInt(numeroEntrada);
            int fzacagc = Integer.parseInt(oficina);
            int off_codi = 0;
            try {
                off_codi = Integer.parseInt(oficinafisica);
            } catch (Exception e) {
            }
            fechaTest = dateF.parse(data);
            cal.setTime(fechaTest);
            int fzafdoc = Integer.parseInt(date1.format(fechaTest));
            String fzacone, fzacone2;
            if (idioex.equals(""1"")) {
                fzacone = comentario;
                fzacone2 = """";
            } else {
                fzacone = """";
                fzacone2 = comentario;
            }
            String fzaproce;
            int fzactagg, fzacagge;
            if (fora.equals("""")) {
                fzactagg = 90;
                fzacagge = Integer.parseInt(balears);
                fzaproce = """";
            } else {
                fzaproce = fora;
                fzactagg = 0;
                fzacagge = 0;
            }
            int ceros = 0;
            int fzacorg = Integer.parseInt(destinatari);
            int fzanent;
            String fzacent;
            if (altres.equals("""")) {
                altres = """";
                fzanent = Integer.parseInt(entidad2);
                fzacent = entidadCastellano;
            } else {
                fzanent = 0;
                fzacent = """";
            }
            int fzacidi = Integer.parseInt(idioex);
            horaTest = horaF.parse(hora);
            cal.setTime(horaTest);
            DateFormat hhmm = new SimpleDateFormat(""HHmm"");
            int fzahora = Integer.parseInt(hhmm.format(horaTest));
            if (salida1.equals("""")) {
                salida1 = ""0"";
            }
            if (salida2.equals("""")) {
                salida2 = ""0"";
            }
            int fzanloc = Integer.parseInt(salida1);
            int fzaaloc = Integer.parseInt(salida2);
            if (disquet.equals("""")) {
                disquet = ""0"";
            }
            int fzandis = Integer.parseInt(disquet);
            if (fzandis > 0) {
                ToolsBD.actualizaDisqueteEntrada(conn, fzandis, oficina, anoEntrada, errores);
            }
            Date fechaSystem = new Date();
            DateFormat aaaammdd = new SimpleDateFormat(""yyyyMMdd"");
            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));
            DateFormat hhmmss = new SimpleDateFormat(""HHmmss"");
            DateFormat sss = new SimpleDateFormat(""S"");
            String ss = sss.format(fechaSystem);
            if (ss.length() > 2) {
                ss = ss.substring(0, 2);
            }
            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);
            String deleteOfifis = ""DELETE FROM BZENTOFF WHERE FOEANOEN=? AND FOENUMEN=? AND FOECAGCO=?"";
            ms = conn.prepareStatement(deleteOfifis);
            ms.setInt(1, fzaanoe);
            ms.setInt(2, fzanume);
            ms.setInt(3, fzacagc);
            ms.execute();
            ms.close();
            String insertOfifis = ""INSERT INTO BZENTOFF (FOEANOEN, FOENUMEN, FOECAGCO, OFE_CODI)"" + ""VALUES (?,?,?,?)"";
            ms = conn.prepareStatement(insertOfifis);
            ms.setInt(1, fzaanoe);
            ms.setInt(2, fzanume);
            ms.setInt(3, fzacagc);
            ms.setInt(4, off_codi);
            ms.execute();
            ms.close();
            ms = conn.prepareStatement(""UPDATE BZENTRA SET FZAFDOCU=?, FZAREMIT=?, FZACONEN=?, FZACTIPE=?, "" + ""FZACEDIE=?, FZAENULA=?, FZAPROCE=?, FZAFENTR=?, FZACTAGG=?, FZACAGGE=?, FZACORGA=?, "" + ""FZACENTI=?, FZANENTI=?, FZAHORA=?, FZACIDIO=?, FZACONE2=?, FZANLOC=?, FZAALOC=?, FZANDIS=?, "" + ""FZACUSU=?, FZACIDI=? WHERE FZAANOEN=? AND FZANUMEN=? AND FZACAGCO=?"");
            ms.setInt(1, fzafdoc);
            ms.setString(2, (altres.length() > 30) ? altres.substring(0, 30) : altres);
            ms.setString(3, (fzacone.length() > 160) ? fzacone.substring(0, 160) : fzacone);
            ms.setString(4, (tipo.length() > 2) ? tipo.substring(0, 1) : tipo);
            ms.setString(5, ""N"");
            ms.setString(6, (registroAnulado.length() > 1) ? registroAnulado.substring(0, 1) : registroAnulado);
            ms.setString(7, (fzaproce.length() > 25) ? fzaproce.substring(0, 25) : fzaproce);
            ms.setInt(8, fzafent);
            ms.setInt(9, fzactagg);
            ms.setInt(10, fzacagge);
            ms.setInt(11, fzacorg);
            ms.setString(12, (fzacent.length() > 7) ? fzacent.substring(0, 8) : fzacent);
            ms.setInt(13, fzanent);
            ms.setInt(14, fzahora);
            ms.setInt(15, fzacidi);
            ms.setString(16, (fzacone2.length() > 160) ? fzacone2.substring(0, 160) : fzacone2);
            ms.setInt(17, fzanloc);
            ms.setInt(18, fzaaloc);
            ms.setInt(19, fzandis);
            ms.setString(20, (usuario.toUpperCase().length() > 10) ? usuario.toUpperCase().substring(0, 10) : usuario.toUpperCase());
            ms.setString(21, idioma);
            ms.setInt(22, fzaanoe);
            ms.setInt(23, fzanume);
            ms.setInt(24, fzacagc);
            boolean modificado = false;
            if (!motivo.equals("""")) {
                javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                Object ref = contexto.lookup(""es.caib.regweb.RegistroModificadoEntradaHome"");
                RegistroModificadoEntradaHome home = (RegistroModificadoEntradaHome) javax.rmi.PortableRemoteObject.narrow(ref, RegistroModificadoEntradaHome.class);
                RegistroModificadoEntrada registroModificado = home.create();
                registroModificado.setAnoEntrada(fzaanoe);
                registroModificado.setOficina(fzacagc);
                if (!entidad1Nuevo.trim().equals("""")) {
                    if (entidad2Nuevo.equals("""")) {
                        entidad2Nuevo = ""0"";
                    }
                }
                int fzanentNuevo;
                String fzacentNuevo;
                if (altresNuevo.trim().equals("""")) {
                    altresNuevo = """";
                    fzanentNuevo = Integer.parseInt(entidad2Nuevo);
                    fzacentNuevo = convierteEntidadCastellano(entidad1Nuevo, conn);
                } else {
                    fzanentNuevo = 0;
                    fzacentNuevo = """";
                }
                if (!fzacentNuevo.equals(fzacent) || fzanentNuevo != fzanent) {
                    registroModificado.setEntidad2(fzanentNuevo);
                    registroModificado.setEntidad1(fzacentNuevo);
                } else {
                    registroModificado.setEntidad2(0);
                    registroModificado.setEntidad1("""");
                }
                if (!comentarioNuevo.trim().equals(comentario.trim())) {
                    registroModificado.setExtracto(comentarioNuevo);
                } else {
                    registroModificado.setExtracto("""");
                }
                registroModificado.setUsuarioModificacion(usuario.toUpperCase());
                registroModificado.setNumeroRegistro(fzanume);
                if (altresNuevo.equals(altres)) {
                    registroModificado.setRemitente("""");
                } else {
                    registroModificado.setRemitente(altresNuevo);
                }
                registroModificado.setMotivo(motivo);
                modificado = registroModificado.generarModificacion(conn);
                registroModificado.remove();
            }
            if ((modificado && !motivo.equals("""")) || motivo.equals("""")) {
                int afectados = ms.executeUpdate();
                if (afectados > 0) {
                    registroActualizado = true;
                } else {
                    registroActualizado = false;
                }
                String remitente = """";
                if (!altres.trim().equals("""")) {
                    remitente = altres;
                } else {
                    javax.naming.InitialContext contexto = new javax.naming.InitialContext();
                    Object ref = contexto.lookup(""es.caib.regweb.ValoresHome"");
                    ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);
                    Valores valor = home.create();
                    remitente = valor.recuperaRemitenteCastellano(fzacent, fzanent + """");
                    valor.remove();
                }
                try {
                    Class t = Class.forName(""es.caib.regweb.module.PluginHook"");
                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class, String.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class };
                    Object[] params = { ""M"", new Integer(fzaanoe), new Integer(fzanume), new Integer(fzacagc), new Integer(fzafdoc), remitente, comentario, tipo, new Integer(fzafent), new Integer(fzacagge), fzaproce, new Integer(fzacorg), idioma, BOIBdata, new Integer(BOIBnumeroBOCAIB), new Integer(BOIBpagina), new Integer(BOIBlineas), BOIBtexto, BOIBobservaciones, correo };
                    java.lang.reflect.Method metodo = t.getMethod(""entrada"", partypes);
                    metodo.invoke(null, params);
                } catch (IllegalAccessException iae) {
                } catch (IllegalArgumentException iae) {
                } catch (InvocationTargetException ite) {
                } catch (NullPointerException npe) {
                } catch (ExceptionInInitializerError eiie) {
                } catch (NoSuchMethodException nsme) {
                } catch (SecurityException se) {
                } catch (LinkageError le) {
                } catch (ClassNotFoundException le) {
                }
                conn.commit();
                String Stringsss = sss.format(fechaSystem);
                switch(Stringsss.length()) {
                    case (1):
                        Stringsss = ""00"" + Stringsss;
                        break;
                    case (2):
                        Stringsss = ""0"" + Stringsss;
                        break;
                }
                int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);
                logLopdBZENTRA(""UPDATE"", (usuario.toUpperCase().length() > 10) ? usuario.toUpperCase().substring(0, 10) : usuario.toUpperCase(), fzafsis, horamili, fzanume, fzaanoe, fzacagc);
            } else {
                registroActualizado = false;
                errores.put("""", ""Error inesperat, no s'ha modificat el registre"");
                throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"");
            }
            System.out.println(""Municipi codi: "" + municipi060);
            if (municipi060.equals(""000"")) eliminar060(); else if (!municipi060.equals("""")) actualizar060();
        } catch (Exception ex) {
            System.out.println(""Error inesperat, no s'ha desat el registre: "" + ex.getMessage());
            ex.printStackTrace();
            registroActualizado = false;
            errores.put("""", ""Error inesperat, no s'ha desat el registre"" + "": "" + ex.getClass() + ""->"" + ex.getMessage());
            try {
                if (conn != null) conn.rollback();
            } catch (SQLException sqle) {
                throw new RemoteException(""S'ha produït un error i no s'han pogut tornar enrere els canvis efectuats"", sqle);
            }
            throw new RemoteException(""Error inesperat, no s'ha modifcat el registre"", ex);
        } finally {
            ToolsBD.closeConn(conn, ms, null);
        }
    }
",0.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    public void execute(JobExecutionContext context) throws JobExecutionException {
        log.info(""FileMonitorJob - executing its JOB at "" + new Date() + "" by "" + context.getTrigger().getName());
        FTPClient client = new FTPClient();
        OutputStream outStream = null;
        Calendar filterCal = Calendar.getInstance();
        filterCal.set(Calendar.DAY_OF_MONTH, filterCal.get(Calendar.DAY_OF_MONTH) - 1);
        Date aDayAgo = filterCal.getTime();
        try {
            Session session = CustomSystemSession.create(r);
            client.connect(ftpHostname);
            client.login(ftpUsername, ftpPassword);
            FTPFile[] users = client.listFiles();
            if (users != null) {
                for (FTPFile user : users) {
                    String userName = user.getName();
                    client.changeWorkingDirectory(""/"" + userName + ""/"");
                    Node userNode = null;
                    @SuppressWarnings(""deprecation"") Query query = session.getWorkspace().getQueryManager().createQuery(""/jcr:root/users/element(*, user)[\n"" + ""  @alias = '"" + userName.replaceAll(""'"", ""''"") + ""'\n"" + ""]\n"" + ""order by @lastModified descending"", Query.XPATH);
                    NodeIterator results = query.execute().getNodes();
                    if (results.hasNext()) {
                        userNode = results.nextNode();
                    } else if (session.getRootNode().hasNode(""users/"" + userName)) {
                        userNode = session.getRootNode().getNode(""users/"" + userName);
                    }
                    FTPFile[] experiments = client.listFiles();
                    if (experiments != null && userNode != null) {
                        for (FTPFile experiment : experiments) {
                            String experimentName = experiment.getName();
                            client.changeWorkingDirectory(""/"" + userName + ""/"" + experimentName + ""/"");
                            FTPFile[] datasets = client.listFiles();
                            if (datasets != null) {
                                for (FTPFile dataset : datasets) {
                                    String datasetName = dataset.getName();
                                    client.changeWorkingDirectory(""/"" + userName + ""/"" + experimentName + ""/"" + datasetName + ""/"");
                                    Date collectionDate = dataset.getTimestamp().getTime();
                                    if (collectionDate.after(aDayAgo)) {
                                        FTPFile[] images = client.listFiles();
                                        if (images != null) {
                                            for (FTPFile image : images) {
                                                processImage(userName, experimentName, datasetName, collectionDate, image, client, userNode, session);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            session.logout();
            client.logout();
        } catch (IOException ioe) {
            log.info(""Error communicating with FTP server."");
            log.error(""Error communicating with FTP server."", ioe);
            ioe.printStackTrace();
        } catch (RepositoryException ioe) {
            log.info(""Error communicating with repository."");
            log.error(""Error communicating with repository."", ioe);
            ioe.printStackTrace();
        } finally {
            IOUtils.closeQuietly(outStream);
            try {
                client.disconnect();
            } catch (IOException e) {
                log.error(""Problem disconnecting from FTP server"", e);
            }
        }
    }
",0.0
"    public static boolean getFile(String s, String name) {
        try {
            File f = new File(""D:\\buttons\\data\\sounds\\"" + name);
            URL url = new URL(s);
            URLConnection conn = url.openConnection();
            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
            int ch;
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(f));
            while ((ch = bis.read()) != -1) {
                bos.write(ch);
            }
            System.out.println(""wrote audio url: "" + s + "" \nto file "" + f);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
","        public void actionPerformed(ActionEvent e) {
            String aboutText = ""Slug application."";
            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);
            boolean canShowInPane = false;
            if (aboutURL != null) {
                try {
                    URL url = new URL(aboutURL);
                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);
                    canShowInPane = dlg.setURL(url);
                    if (canShowInPane) {
                        dlg.setSize(300, 200);
                        dlg.setLocationRelativeTo(ShellSlacFrame.this);
                        dlg.setVisible(true);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = """";
                        StringBuffer content = new StringBuffer();
                        do {
                            content.append(line);
                            line = reader.readLine();
                        } while (line != null);
                        if (content.length() != 0) {
                            aboutText = content.toString();
                        }
                    }
                } catch (Exception ex) {
                    if (DEBUG) {
                        ex.printStackTrace();
                    }
                }
            }
            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);
        }
",0.0
"    private static boolean execute(String query) throws SQLException {
        boolean success = true;
        try {
            PreparedStatement stm = con.prepareStatement(query);
            stm.executeUpdate();
            stm.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (Exception rbex) {
                rbex.printStackTrace();
            }
            success = false;
            throw e;
        }
        return success;
    }
","    public static String post(String strUrl, String strPostString) {
        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            HttpURLConnection.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            StringBuffer sRet = new StringBuffer();
            while ((s = in.readLine()) != null) {
                sRet.append(s);
            }
            in.close();
            return sRet.toString();
        } catch (MalformedURLException e) {
            NoMuleRuntime.showError(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",0.0
"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
","    private void processJBossArgs(String currentWorkingDir, String args[]) {
        String programName = this.sysProps.getProperty(""program.name"", ""jboss"");
        String shortOpts = ""-:b:c:D:P:"";
        LongOpt longOpts[] = { new LongOpt(""configuration"", 1, null, 'c'), new LongOpt(""properties"", 1, null, 'P'), new LongOpt(""host"", 1, null, 'b') };
        Getopt options = new Getopt(programName, args, shortOpts, longOpts);
        options.setOpterr(false);
        int c;
        while ((c = options.getopt()) != -1) {
            switch(c) {
                case 'b':
                    {
                        String arg = options.getOptarg();
                        this.sysProps.setProperty(JBossProperties.BIND_ADDRESS, arg);
                        break;
                    }
                case 'c':
                    {
                        String arg = options.getOptarg();
                        this.sysProps.setProperty(JBossProperties.SERVER_NAME, arg);
                        break;
                    }
                case 'D':
                    {
                        String arg = options.getOptarg();
                        String name = addPropArgToProps(arg, this.sysProps);
                        String value = this.sysProps.getProperty(name);
                        if (value.equals("""")) {
                            this.sysProps.setProperty(name, Boolean.TRUE.toString());
                        }
                        break;
                    }
                case 'P':
                    {
                        String arg = options.getOptarg();
                        URL url;
                        try {
                            File workingDir = new File(currentWorkingDir);
                            url = JBossConfigurationUtility.makeURL(arg, workingDir);
                        } catch (Exception e) {
                            log.error(""Failed to parse argument to --properties option: "" + options.getOptarg());
                            break;
                        }
                        Properties props = new Properties();
                        InputStream inputStream = null;
                        try {
                            inputStream = new BufferedInputStream(url.openConnection().getInputStream());
                            props.load(inputStream);
                        } catch (IOException e) {
                            log.error(""Could not read properties from file: "" + arg, e);
                            break;
                        } finally {
                            if (inputStream != null) {
                                try {
                                    inputStream.close();
                                } catch (IOException e) {
                                    log.error(""Failed to close properties file: "" + arg, e);
                                }
                            }
                        }
                        for (Object nameObj : props.keySet()) {
                            String name = (String) nameObj;
                            String value = props.getProperty(name);
                            String newValue = StringPropertyReplacer.replaceProperties(value, this.sysProps);
                            this.sysProps.setProperty(name, newValue);
                        }
                        break;
                    }
            }
        }
    }
",0.0
"    public static String getMyGlobalIP() {
        try {
            URL url = new URL(IPSERVER);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String ip = in.readLine();
            in.close();
            con.disconnect();
            return ip;
        } catch (Exception e) {
            return null;
        }
    }
","    protected void loadXslFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            Source xslSource = new StreamSource(rd);
            try {
                xslTemplate = factory.newTemplates(xslSource);
            } catch (TransformerConfigurationException tce) {
                tce.printStackTrace();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String url = ""http://jdkcn.com/checkUpdateNew.jsp?ver="" + blogFacade.getDatabaseSiteConfig().getAppVersion();
        response.setCharacterEncoding(""UTF-8"");
        URLConnection connection = new URL(url).openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        StringBuilder sb = new StringBuilder();
        String line = reader.readLine();
        while (line != null) {
            sb.append(line).append(""\r\n"");
            line = reader.readLine();
        }
        response.getWriter().println(sb.toString());
        return null;
    }
","    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty(""User-Agent"", userAgent);
        conn.setRequestProperty(""Accept"", ""*/*"");
        conn.setRequestProperty(""Icy-Metadata"", ""1"");
        conn.setRequestProperty(""Connection"", ""close"");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField(""icy-metaint"");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end"");
        }
        return audioInputStream;
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public static void main(String[] args) {
        String u = ""http://portal.acm.org/results.cfm?query=%28Author%3A%22"" + ""Boehm%2C+Barry"" + ""%22%29&srt=score%20dsc&short=0&source_disp=&since_month=&since_year=&before_month=&before_year=&coll=ACM&dl=ACM&termshow=matchboolean&range_query=&CFID=22704101&CFTOKEN=37827144&start=1"";
        URL url = null;
        AcmSearchresultPageParser_2011Jan cb = new AcmSearchresultPageParser_2011Jan();
        try {
            url = new URL(u);
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
            uc.setUseCaches(false);
            InputStream is = uc.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            ParserDelegator pd = new ParserDelegator();
            pd.parse(br, cb, true);
            br.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(""all doc num= "" + cb.getAllDocNum());
        for (int i = 0; i < cb.getEachResultStartPositions().size(); i++) {
            HashMap<String, Integer> m = cb.getEachResultStartPositions().get(i);
            System.out.println(i + ""pos= "" + m);
        }
    }
",0.0
"    public static boolean getFile(String s, String name) {
        try {
            File f = new File(""D:\\buttons\\data\\sounds\\"" + name);
            URL url = new URL(s);
            URLConnection conn = url.openConnection();
            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
            int ch;
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(f));
            while ((ch = bis.read()) != -1) {
                bos.write(ch);
            }
            System.out.println(""wrote audio url: "" + s + "" \nto file "" + f);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
","    public static byte[] MD5(String input) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        md5.update(input.getBytes());
        return md5.digest();
    }
",0.0
"    public static int getFilesize(String theURL) {
        URL url;
        URLConnection conn;
        int size = -1;
        try {
            url = new URL(theURL);
            conn = url.openConnection();
            conn.setRequestProperty(""User-Agent"", Main.USER_AGENT);
            conn.setConnectTimeout(Main.CONNECT_TIMEOUT * 2);
            conn.setReadTimeout(Main.READ_TIMEOUT * 2);
            size = conn.getContentLength();
            conn.getInputStream().close();
        } catch (FileNotFoundException fnfe) {
            return -2;
        } catch (ConnectException ce) {
            return -3;
        } catch (ProtocolException fpe) {
            return -2;
        } catch (IOException ioe) {
            return -2;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return size;
    }
","    public DProblem loadProblem(String urlString) throws DataStoreException {
        try {
            URL url = new URL(urlString);
            IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer data = new StringBuffer();
            String line;
            int i = 0;
            while ((line = in.readLine()) != null) {
                data.append(line + ""\n"");
                i++;
            }
            DProblem prob = DProblemXMLParser.load(data.toString());
            if (prob != null) {
                prob.setUsername(""Local"");
                prob.setFilename(urlString);
                prob.setAccessMode(DProblemManager.HTTP);
            }
            return prob;
        } catch (MalformedURLException e) {
            throw new DataStoreException(e);
        } catch (IOException e) {
            IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());
            e.printStackTrace();
            throw new DataStoreException(e);
        } catch (XMLParserException e) {
            throw new DataStoreException(e);
        }
    }
",0.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    protected NetQuery(String serviceURL, String query, byte queryType, String defaultGraph, int timeout) {
        String urlString = null;
        try {
            queryString = query;
            char delim = serviceURL.indexOf('?') == -1 ? '?' : '&';
            if (queryType == Query.UPDATE_TYPE) urlString = serviceURL; else {
                urlString = serviceURL + delim + ""query="" + URLEncoder.encode(query, ""UTF-8"");
                delim = '&';
                if (defaultGraph != null) urlString += delim + ""default-graph-uri="" + defaultGraph;
            }
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            configureConnection(query, queryType, timeout, defaultGraph);
        } catch (UnsupportedEncodingException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        } catch (MalformedURLException e) {
            System.err.println(e.toString() + "" for URL: "" + urlString);
            System.err.println(serviceURL);
            e.printStackTrace();
            System.exit(-1);
        } catch (IOException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        }
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
",0.0
"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
","    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
",0.0
"    public void dumpToFile(File file) throws IOException {
        OutputStream out = new FileOutputStream(file);
        if (contentStream != null) {
            IOUtils.copy(contentStream, out);
            setPath(file.getAbsolutePath());
        } else {
            IOUtils.write(getContent(), out);
        }
        IOUtils.closeQuietly(out);
    }
","    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String uid = request.getParameter(""id"");
        String pwd = request.getParameter(""pwd"");
        String email = request.getParameter(""email"");
        String sid = request.getParameter(""sid"");
        System.out.println(uid);
        System.out.println(pwd);
        System.out.println(email);
        System.out.println(sid);
        DBconn dbc = new DBconn();
        Connection conn;
        PreparedStatement pst;
        Statement st;
        conn = dbc.getConnection();
        PasswordService ps = PasswordService.getInstance();
        String hash = """";
        try {
            hash = ps.encrypt(pwd);
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        String sql = ""insert into HP_ADMINISTRATOR.STAFF_REGISTRATION values (?,?,?,?)"";
        try {
            pst = conn.prepareStatement(sql);
            pst.setString(1, uid);
            pst.setString(2, hash);
            pst.setString(3, email);
            pst.setString(4, sid);
            System.out.println(pst.toString());
            pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.rollback();
                conn.setAutoCommit(true);
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        response.sendRedirect(""AdminControlStaff.jsp"");
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    private String[] getHersheyFontNames() {
        String[] fontNames = null;
        URL url = HersheyFont.class.getResource(""futural.jhf"");
        String protocol = url.getProtocol();
        if (protocol.equals(""file"")) {
            File f = new File(url.getFile());
            f = f.getParentFile();
            FilenameFilter filter = new FilenameFilter() {

                public boolean accept(File dir, String name) {
                    return name.endsWith("".jhf"");
                }
            };
            String[] children = f.list(filter);
            if (children == null) {
                return null;
            }
            fontNames = new String[children.length];
            for (int i = 0; i < children.length; i++) {
                fontNames[i] = children[i].substring(0, children[i].length() - 4);
            }
        } else if (protocol.equals(""jar"")) {
            try {
                JarURLConnection jarURL = (JarURLConnection) url.openConnection();
                ZipFile zf = new ZipFile(jarURL.getJarFile().getName());
                Enumeration e = zf.entries();
                Vector namesVector = new Vector();
                while (e.hasMoreElements()) {
                    ZipEntry ze = (ZipEntry) e.nextElement();
                    String name = ze.getName();
                    if (name.startsWith(""visad/util/"") && name.endsWith("".jhf"")) {
                        namesVector.add(name.substring(11));
                    }
                }
                zf.close();
                if (namesVector.size() == 0) {
                    return null;
                }
                fontNames = new String[namesVector.size()];
                for (int i = 0; i < fontNames.length; i++) {
                    String name = (String) namesVector.elementAt(i);
                    fontNames[i] = name.substring(0, name.length() - 4);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            System.out.println(""Cannot locate the HersheyFonts."");
        }
        return fontNames;
    }
",0.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","    @Override
    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {
        String path;
        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();
        try {
            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String data = """";
            while ((inputLine = in.readLine()) != null) data += inputLine;
            Response remoteData = new Response(new String(data));
            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));
            in.close();
            return remoteData;
        } catch (MalformedURLException e) {
            logger.error(""Illegal URL. Cannot connect to this remote object"", e);
            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);
        } catch (IOException e) {
            logger.error(""Cannot read from source. Please check remote object address"", e);
            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);
        }
    }
",1.0
"    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
","    public String getRandomGUID() {
        MessageDigest md5 = null;
        String valueBeforeMD5 = """";
        String retValue = """";
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            InetAddress id = InetAddress.getLocalHost();
            long time = System.currentTimeMillis();
            long rand = 0;
            rand = random.nextLong();
            sbValueBeforeMD5.append(id.toString());
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            retValue = sb.toString();
        } catch (UnknownHostException e) {
            System.out.println(""Error:"" + e);
        }
        return retValue;
    }
",0.0
"    @Override
    protected String getFormat(String path) {
        String contentType = null;
        try {
            URL url = new URL(path);
            URLConnection connection = url.openConnection();
            connection.connect();
            contentType = connection.getContentType();
        } catch (Exception ex) {
            throw new RuntimeException(""Connection to the url failed"", ex);
        }
        if (contentType == null) {
            throw new RuntimeException(""Problem getting url contentType is null!"");
        }
        String format = contentType.toLowerCase().trim().replace(""image/"", """");
        if (format == null || format.length() == 0) {
            throw new RuntimeException(""Unknow image mime type"");
        }
        if (format.contains("";"")) {
            format = format.split("";"")[0];
        }
        if (format == null || format.length() == 0) {
            throw new RuntimeException(""Unknow image mime type"");
        }
        System.out.println(""the format is: "" + format);
        return format;
    }
","	public FTPClient sample2c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPSClient ftpClient = new FTPSClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
",0.0
"    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
","    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), ""utf-8"");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error(""fail to write file"", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    public String encrypt(String text, String passphrase, int keylen) {
        RC2ParameterSpec parm = new RC2ParameterSpec(keylen);
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(passphrase.getBytes(getCharset()));
            SecretKeySpec skeySpec = new SecretKeySpec(md.digest(), ""RC2"");
            Cipher cipher = Cipher.getInstance(""RC2/ECB/NoPadding"");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec, parm);
            byte[] newBytes = encodeStringNew(text);
            byte[] d = cipher.doFinal(newBytes);
            return Base64.encodeBytes(d);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        } catch (NoSuchPaddingException e) {
            e.printStackTrace();
        } catch (InvalidKeyException e) {
            e.printStackTrace();
        } catch (InvalidAlgorithmParameterException e) {
            e.printStackTrace();
        } catch (IllegalBlockSizeException e) {
            e.printStackTrace();
        } catch (BadPaddingException e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    protected NetQuery(String serviceURL, String query, byte queryType, String defaultGraph, int timeout) {
        String urlString = null;
        try {
            queryString = query;
            char delim = serviceURL.indexOf('?') == -1 ? '?' : '&';
            if (queryType == Query.UPDATE_TYPE) urlString = serviceURL; else {
                urlString = serviceURL + delim + ""query="" + URLEncoder.encode(query, ""UTF-8"");
                delim = '&';
                if (defaultGraph != null) urlString += delim + ""default-graph-uri="" + defaultGraph;
            }
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            configureConnection(query, queryType, timeout, defaultGraph);
        } catch (UnsupportedEncodingException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        } catch (MalformedURLException e) {
            System.err.println(e.toString() + "" for URL: "" + urlString);
            System.err.println(serviceURL);
            e.printStackTrace();
            System.exit(-1);
        } catch (IOException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        }
    }
",0.0
"        public void run() {
            final String basename = FilenameUtils.removeExtension(file.getName());
            final File compressed = new File(logDirectory, basename + "".gz"");
            InputStream in = null;
            OutputStream out = null;
            try {
                in = new FileInputStream(file);
                out = new GZIPOutputStream(new FileOutputStream(compressed));
                IOUtils.copy(in, out);
                in.close();
                out.close();
            } catch (IOException e) {
                reportError(""Error compressing olg log file after file rotation"", e, ErrorManager.GENERIC_FAILURE);
            } finally {
                IOUtils.closeQuietly(in);
                IOUtils.closeQuietly(out);
            }
            Collections.replaceAll(files, file, compressed);
        }
","    public static String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    public Vocabulary build(String url) {
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream is = entity.getContent();
                try {
                    Vocabulary tv = build(is);
                    LOG.info(""Successfully parsed Thesaurus: "" + tv.getTitle());
                    return tv;
                } catch (SAXException e) {
                    LOG.error(""Unable to parse XML for extension: "" + e.getMessage(), e);
                } finally {
                    is.close();
                }
                entity.consumeContent();
            }
        } catch (Exception e) {
            LOG.error(e);
        }
        return null;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    public static String rename_tag(String sessionid, String originalTag, String newTagName) {
        String jsonstring = """";
        try {
            Log.d(""current running function name:"", ""rename_tag"");
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(""https://mt0-app.cloud.cm/rpc/json"");
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair(""c"", ""Storage""));
            nameValuePairs.add(new BasicNameValuePair(""m"", ""rename_tag""));
            nameValuePairs.add(new BasicNameValuePair(""new_tag_name"", newTagName));
            nameValuePairs.add(new BasicNameValuePair(""absolute_tag"", originalTag));
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            httppost.setHeader(""Cookie"", ""PHPSESSID="" + sessionid);
            HttpResponse response = httpclient.execute(httppost);
            jsonstring = EntityUtils.toString(response.getEntity());
            Log.d(""jsonStringReturned:"", jsonstring);
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
",0.0
"    public byte[] generatePassword(String clave) {
        byte[] password = { 00 };
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(clave.getBytes());
            password = md5.digest();
            return password;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password;
    }
","    public Fen_Download_FlameRobin() {
        super();
        initialize();
        long HeureDebut = System.currentTimeMillis();
        long HeureActuelle;
        String urlsetup = ""http://downloads.sourceforge.net/project/autobackupbysim/tools/flamerobin-0.9.2-1-setup.exe"";
        int erreurOuverture = 0;
        InputStream input = null;
        String cheminFichier = """";
        File fichier;
        FileOutputStream writeFile = null;
        try {
            URL url = new URL(urlsetup);
            URLConnection connection = url.openConnection();
            final int fileLength = connection.getContentLength();
            if ((fileLength == -1) || (fileLength == 0)) {
                System.out.println(""Invalide URL or file."");
                erreurOuverture++;
            }
            input = connection.getInputStream();
            String fileName = url.getFile().substring(url.getFile().lastIndexOf('/') + 1);
            if (fileName.contains(""%20"") == true) {
                fileName = fileName.replaceAll(""%20"", "" "");
            }
            if (fileName.contains(""&amp;"") == true) {
                fileName = fileName.replaceAll(""&amp;"", "" and "");
            }
            cheminFichier = GestionRepertoire.RecupRepTravail() + ""\\"" + fileName;
            jLabel1.setText("" Fichier en cours : "" + fileName);
            fichier = new File(cheminFichier);
            writeFile = new FileOutputStream(cheminFichier);
            byte[] buffer = new byte[4096 * 1024];
            int read;
            while ((read = input.read(buffer)) > 0) {
                writeFile.write(buffer, 0, read);
                long TailleEncours = fichier.length();
                int progressionEnCours = (int) ((100 * (TailleEncours + 1)) / fileLength);
                HeureActuelle = System.currentTimeMillis();
                long Vitesse = (long) (TailleEncours / (HeureActuelle - HeureDebut));
                jLabel1.setText(""T�l�chargement du fichier , Vitesse Actuelle : "" + Vitesse + "" Ko/s"");
                jProgressBar.setValue(progressionEnCours);
                jProgressBar.setString(progressionEnCours + "" %"");
            }
            writeFile.flush();
        } catch (IOException e) {
            System.out.println(""Error while trying to download the file."");
            e.printStackTrace();
        } finally {
            try {
                if (erreurOuverture == 0) {
                    writeFile.close();
                    input.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        String cmdExecuteSetup = (""cmd /c \"""" + cheminFichier + ""\"" /silent"");
        Runtime r = Runtime.getRuntime();
        Process p = null;
        try {
            p = r.exec(cmdExecuteSetup);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {
        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");
        if (tempFile.exists()) tempFile.delete();
        boolean renameOk = zipFile.renameTo(tempFile);
        if (!renameOk) {
            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());
        }
        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));
        ZipEntry entry = zin.getNextEntry();
        byte[] buf = new byte[1024];
        while (entry != null) {
            String entryName = entry.getName();
            boolean inFiles = false;
            for (int i = 0; i < files.length; i++) {
                String fileName = dirs[i] + ""/"" + files[i].getName();
                if (fileName.equals(entryName)) {
                    inFiles = true;
                    break;
                }
            }
            if (!inFiles) {
                out.putNextEntry(new ZipEntry(entryName));
                int len;
                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);
            }
            entry = zin.getNextEntry();
        }
        zin.close();
        for (int i = 0; i < files.length; i++) {
            InputStream in = new FileInputStream(files[i]);
            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.closeEntry();
            in.close();
        }
        out.close();
        tempFile.delete();
    }
",0.0
"    public static int getContentLength(String address) {
        URLConnection conn = null;
        int contentLength = 0;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            contentLength = conn.getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return contentLength;
    }
","    public void conReMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_RECON + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailReContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = null;
        BufferedInputStream bis = null;
        AudioFileFormat fileFormat = null;
        urlStream = url.openStream();
        AudioInputStream result = null;
        try {
            bis = new BufferedInputStream(urlStream, bisBufferSize);
            result = getAudioInputStream((InputStream) bis);
        } finally {
            if (result == null) {
                urlStream.close();
            }
        }
        return result;
    }
","    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","        private void delete(Connection conn, int itemId) throws SQLException {
            Statement statement = null;
            try {
                conn.setAutoCommit(false);
                deleteComponents(conn, itemId);
                statement = conn.createStatement();
                StringBuffer sqlBuff = new StringBuffer(""DELETE FROM "");
                sqlBuff.append(m_dbItemName);
                sqlBuff.append("" WHERE "");
                sqlBuff.append(m_dbItemIdFieldColName);
                sqlBuff.append("" = "");
                sqlBuff.append(Integer.toString(itemId));
                String sql = sqlBuff.toString();
                statement.executeUpdate(sql);
                conn.commit();
            } catch (SQLException ex) {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                throw ex;
            } finally {
                if (statement != null) {
                    statement.close();
                }
            }
        }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public void loadSourceCode() {
        if (getResourceName() != null) {
            String filename = getResourceName() + "".java"";
            sourceCode = new String(""<html><body bgcolor=\""#ffffff\""><pre>"");
            InputStream is;
            InputStreamReader isr;
            CodeViewer cv = new CodeViewer();
            URL url;
            try {
                url = getClass().getResource(filename);
                is = url.openStream();
                isr = new InputStreamReader(is);
                BufferedReader reader = new BufferedReader(isr);
                String line = reader.readLine();
                while (line != null) {
                    sourceCode += cv.syntaxHighlight(line) + "" \n "";
                    line = reader.readLine();
                }
                sourceCode += new String(""</pre></body></html>"");
            } catch (Exception ex) {
                sourceCode = ""Could not load file: "" + filename;
            }
        }
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    protected void cboTemplateIndexSelectionChanged() {
        int idx = WizardPage1.this.cboTemplateIndex.getSelectionIndex();
        IPreferenceStore store = Activator.getDefault().getPreferenceStore();
        String prefnamePrefix = PreferenceConstants.TEMPLATE_PREFIX + idx;
        String baseUrl = store.getString(prefnamePrefix + PreferenceConstants.BASEURL_POSTFIX);
        String descfile = store.getString(prefnamePrefix + PreferenceConstants.DESCFILE_POSTFIX);
        try {
            URL url = new URL(baseUrl + descfile);
            URLConnection con = url.openConnection();
            WizardPage1.this.setTemplContainer(new TemplateContainer(con.getInputStream(), baseUrl));
            fillListboxFromTemplateContainer();
        } catch (MalformedURLException e1) {
            getTxaTemplateDescription().setText(e1.getMessage());
            e1.printStackTrace();
        } catch (IOException e2) {
            getTxaTemplateDescription().setText(e2.getMessage());
            e2.printStackTrace();
        } catch (XPathExpressionException e3) {
            getTxaTemplateDescription().setText(e3.getMessage());
            e3.printStackTrace();
        } catch (ParserConfigurationException e4) {
            getTxaTemplateDescription().setText(e4.getMessage());
            e4.printStackTrace();
        } catch (SAXException e5) {
            getTxaTemplateDescription().setText(e5.getMessage());
            e5.printStackTrace();
        }
    }
",0.0
"    public ZipViewdataReader(ZipInputStream stream) throws IOException {
        ZipEntry ze;
        while ((ze = stream.getNextEntry()) != null) {
            File temp = File.createTempFile(""spool."", "".synu"");
            temp.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(temp);
            byte[] buffer = new byte[1024 * 1024];
            int length;
            while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);
            fos.close();
            String name = ze.getName();
            String[] parts = name.split(""[\\\\/]"");
            this._file_hash.put(parts[parts.length - 1], temp);
        }
        stream.close();
        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {
            File f = this._file_hash.get(key);
            FileReader fr = new FileReader(f);
            this._viewdata = new BufferedReader(fr);
            break;
        }
        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");
    }
","        public void run() {
            ArrayList<Thread> ftpThreadList = new ArrayList<Thread>();
            class ftpLinkElem extends Thread {

                TreeNode node;

                FTPClient ftp;

                protected ftpLinkElem(TreeNode node, FTPClient ftpC) {
                    super();
                    this.node = node;
                    this.ftp = ftpC;
                }

                public void run() {
                    try {
                        String fileLoc = getFileLocation(node.getURL());
                        FTPFile[] fTest = ftp.listFiles(fileLoc);
                        if (fTest[0].isFile()) {
                            int rsp = ftp.getReplyCode();
                            String msg = ftp.getReplyString();
                            if (!FTPReply.isPositiveCompletion(rsp)) {
                                ftp.disconnect();
                                System.out.print(""[FAILED] "" + msg);
                                failedList.add(node);
                                failCnt++;
                            }
                            System.out.println(""FTP Response: "" + msg);
                        } else {
                            System.out.print(""[FAILED]"");
                            failedList.add(node);
                            failCnt++;
                        }
                    } catch (IOException ie) {
                        ie.printStackTrace();
                    }
                }
            }
            updateCurStatus(""Checking ftp links"", """");
            for (TreeNode testFtp : ftpURLs) {
                try {
                    FTPClient ftp = new FTPClient();
                    ftp.connect(FTPSERVER);
                    ftp.login(FTPUSER, FTPPW);
                    updateCurStatus(testFtp.getURL(), """");
                    ftpLinkElem fe = new ftpLinkElem(testFtp, ftp);
                    fe.start();
                    ftpThreadList.add(fe);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            for (Thread t : ftpThreadList) {
                try {
                    if (t.isAlive()) {
                        t.join();
                    }
                } catch (InterruptedException ie) {
                    ie.printStackTrace();
                }
            }
        }
",0.0
"    public boolean actualizarNumeroRondas(int idDivision, int numFechas) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET numFechas = "" + numFechas + "" WHERE idDivisionxTorneo = "" + idDivision;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    protected void EncodeRoute() throws EncodeFailedException, IOException {
        File storefile = getNode().getCodec().PackStore(null, ReturnStore);
        DownRoute.EncodeData(storefile);
        File data = getNode().getCodec().PackRemoteDownload(this);
        data = PigData.EncodeData(data);
        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(data);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        UpRoute.EncodeData(PiggybackRouteFile);
    }
",0.0
"    private String getDocumentAsString(URL url) throws IOException {
        StringBuffer result = new StringBuffer();
        InputStream in = url.openStream();
        int c;
        while ((c = in.read()) != -1) result.append((char) c);
        return result.toString();
    }
","    private static boolean renderStaticResource(final String requestedResource, HttpServletResponse servletResponse) throws IOException {
        boolean successfull = true;
        String fileName = PathTool.getFSPathOfResource(requestedResource);
        File file = new File(fileName);
        if (!file.exists()) {
            logger.error(""Static resource not found: "" + fileName);
            return false;
        }
        if (fileName.endsWith(""xml"") || fileName.endsWith(""asp"")) servletResponse.setContentType(""text/xml""); else if (fileName.endsWith(""css"")) servletResponse.setContentType(""text/css""); else if (fileName.endsWith(""js"")) servletResponse.setContentType(""text/javascript"");
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            IOUtils.copy(in, servletResponse.getOutputStream());
            logger.debug(""Static resource rendered: "".concat(fileName));
        } catch (FileNotFoundException e) {
            logger.error(""Static resource not found: "" + fileName);
            successfull = false;
        } finally {
            IOUtils.closeQuietly(in);
        }
        return successfull;
    }
",0.0
"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            s = new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return s;
    }
","    public JTips(String tipFile) {
        super(new BorderLayout());
        BufferedReader in = null;
        try {
            URL url = getClass().getResource(tipFile);
            if (url != null) {
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                StringBuffer sb = new StringBuffer();
                while (null != (line = in.readLine())) {
                    if (sep.equals(line)) {
                        addTip(sb.toString());
                        sb = new StringBuffer();
                    } else {
                        sb.append(line);
                        sb.append(""\n"");
                    }
                }
                if (sb != null && sb.length() > 1) {
                    addTip(sb.toString());
                }
            } else {
                Activator.log.warn(""No tip file: "" + tipFile);
            }
        } catch (Exception e) {
            Activator.log.error(""Failed to load tips from "" + tipFile, e);
        } finally {
            try {
                in.close();
            } catch (Exception ignored) {
            }
        }
        if (tips.size() == 0) {
            tips.add(new Tip("""", ""No tips found"", """"));
        } else {
            Activator.log.info(""loaded "" + tips.size() + "" tips"");
        }
        html = new JTextPane();
        html.setContentType(""text/html"");
        html.setEditable(false);
        html.addHyperlinkListener(new HyperlinkListener() {

            public void hyperlinkUpdate(HyperlinkEvent ev) {
                if (ev.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    URL url = ev.getURL();
                    try {
                        Util.openExternalURL(url);
                    } catch (Exception e) {
                        Activator.log.warn(""Failed to open external url="" + url, e);
                    }
                }
            }
        });
        scroll = new JScrollPane(html);
        scroll.setPreferredSize(new Dimension(350, 200));
        scroll.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createLoweredBevelBorder()));
        final ActionListener nextAction = new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + 1) % tips.size());
            }
        };
        JButton closeButton = new JButton(Strings.get(""close""));
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                if (frame != null) {
                    frame.setVisible(false);
                }
            }
        });
        nextButton = new JButton(Strings.get(""next_tip""));
        nextButton.addActionListener(nextAction);
        prevButton = new JButton(Strings.get(""prev_tip""));
        prevButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + tips.size() - 1) % tips.size());
            }
        });
        JPanel bottomPanel = new JPanel(new BorderLayout());
        JPanel topPanel = new JPanel(new BorderLayout());
        ctrlPanel = new JPanel(new FlowLayout());
        ctrlPanel.add(closeButton);
        ctrlPanel.add(prevButton);
        ctrlPanel.add(nextButton);
        bottomPanel.add(ctrlPanel, BorderLayout.EAST);
        JLabel titleC = new JLabel(""Did you know that..."");
        titleC.setFont(new Font(""Dialog"", Font.BOLD, 15));
        titleC.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        topPanel.add(titleC, BorderLayout.WEST);
        JLabel icon = new JLabel(Activator.desktop.tipIcon);
        icon.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent ev) {
                nextAction.actionPerformed(null);
            }
        });
        icon.setToolTipText(nextButton.getText());
        add(icon, BorderLayout.WEST);
        add(scroll, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);
        setTip((int) (Math.random() * tips.size()));
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    private int streamConf() throws IOException {
        int avail = 0;
        switch(mode) {
            case FILE:
                if (!Helper.findInString(filename, "".jar"")) {
                    is = new FileInputStream(filename);
                    bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));
                } else {
                    is = Helper.getZipInput(filename.substring(0, filename.indexOf("".jar"") + 4), filename.substring(filename.indexOf("".jar"") + 5, filename.length()));
                    bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));
                }
                break;
            case STREAM:
                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));
                break;
            case NET:
                is = url.openStream();
                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));
                break;
        }
        switch(mode) {
            case FILE:
            case STREAM:
                avail = is.available();
                break;
            case NET:
                while (is.read() != -1) avail++;
                bisr.close();
                is.close();
                is = url.openStream();
                bisr = new BufferedReader(new InputStreamReader(is, INPUT_CHARSET));
                break;
            case STRING:
                avail = fileStr.length();
                break;
        }
        return avail;
    }
",0.0
"    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digest = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        digest.update(password.getBytes(""utf-8""), 0, password.length());
        md5hash = digest.digest();
        return convertToHex(md5hash);
    }
","    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
",0.0
"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
","    public String hash(String clearPassword) {
        if (osalt == 0) return null;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(""Can't find the SHA1 algorithm in the java.security package"");
        }
        String saltString = String.valueOf(osalt);
        md.update(saltString.getBytes());
        md.update(clearPassword.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString();
        return digestStr;
    }
",0.0
"    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
","    private void copy(File from, File to) throws FileNotFoundException, IOException {
        FileReader in;
        in = new FileReader(from);
        FileWriter out = new FileWriter(to);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",0.0
"    public byte[] generatePassword(String clave) {
        byte[] password = { 00 };
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(clave.getBytes());
            password = md5.digest();
            return password;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password;
    }
","    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM reporters"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                String msg = ""Error on initial data store read"";
                LOG.fatal(msg, e);
                throw new IOException(msg, e);
            }
            String[] qry = { ""CREATE TABLE reporters (type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, data LONG VARCHAR, PRIMARY KEY(type, key))"", ""CREATE TABLE listeners (event VARCHAR(255) NOT NULL, type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, PRIMARY KEY(event, type, key))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) {
                    logQry(q);
                    stmt.executeUpdate(q);
                }
                conn.commit();
            } catch (SQLException e2) {
                String msg = ""Error initializing data store"";
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(msg, e3);
                }
                LOG.fatal(msg, e2);
                throw new IOException(msg);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        String msg = ""Unable to cleanup data store resources"";
                        LOG.fatal(msg, e4);
                        throw new IOException(msg);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    String msg = ""Unable to reset data store auto commit"";
                    LOG.fatal(msg, e3);
                    throw new IOException(msg);
                }
            }
        }
        return;
    }
",0.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    public FetchTextFromWebPage(String path) {
        HTMLEditorKit.Parser parser;
        HTMLFile = new File(path);
        byte[] html = new byte[new Long(HTMLFile.length()).intValue()];
        try {
            FileInputStream fis = new FileInputStream(HTMLFile);
            try {
                fis.read(html);
            } catch (IOException e) {
                e.printStackTrace();
            }
            ByteArrayInputStream ba_read = new ByteArrayInputStream(html);
            r = new InputStreamReader(ba_read);
        } catch (FileNotFoundException e) {
            URL url = null;
            try {
                url = new URL(path);
                URLConnection connection = null;
                try {
                    connection = url.openConnection();
                    connection.setDoInput(true);
                    InputStream inStream = null;
                    try {
                        inStream = connection.getInputStream();
                        BufferedReader input = new BufferedReader(new InputStreamReader(inStream));
                        StringBuffer sbr = new StringBuffer();
                        String line = null;
                        try {
                            while ((line = input.readLine()) != null) {
                                System.out.println(line);
                                sbr.append(line + ""\n"");
                            }
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                        File temp = new File(""//home//wiki14//temp.txt"");
                        if (!temp.exists()) {
                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");
                        } else {
                            temp.delete();
                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");
                        }
                        java.io.FileWriter fw = new java.io.FileWriter(temp);
                        fw.write(sbr.toString());
                        fw.close();
                        byte[] newbyte = new byte[new Long(sbr.length()).intValue()];
                        ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);
                        r = new InputStreamReader(ba_read);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            } catch (MalformedURLException e1) {
                e1.printStackTrace();
            }
        }
        parser = new ParserDelegator();
        htmltextparser = new HtmlTextParser();
        htmltextparser.initData();
        try {
            parser.parse(r, htmltextparser, true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            r.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    private String generate(String value) throws Exception {
        String resStr = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes(""utf-8""), 0, value.length());
            byte[] result = md.digest();
            resStr = FTGenerate.convertToHex(result);
            md.reset();
        } catch (NoSuchAlgorithmException nae) {
            this.getLog().severe(""Hash no funcionando"");
            nae.printStackTrace();
            throw new Exception(""Hash no funcionando"");
        } catch (UnsupportedEncodingException ee) {
            this.getLog().severe(""Encoding no funcionando"");
            ee.printStackTrace();
            throw new Exception(""Encoding no funcionando"");
        }
        return resStr;
    }
","    private void native2ascii(LanguageInfo info) {
        if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");
        InputStream in = null;
        OutputStream out = null;
        print(""\tConverting to ASCII... "");
        try {
            in = new BufferedInputStream(new FileInputStream(info.getFileName()));
            in.mark(3);
            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));
            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));
            String read;
            while ((read = reader.readLine()) != null) {
                writer.write(ascii(read));
                writer.newLine();
            }
            writer.flush();
            out.flush();
            println(""... done!"");
        } catch (IOException ignored) {
            println(""... error! ("" + ignored.getMessage() + "")"");
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException ignored) {
            }
            if (out != null) try {
                out.close();
            } catch (IOException ignored) {
            }
        }
    }
",0.0
"    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
","    public RequestLogger() {
        Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {

            public int getScheduleRate() {
                return 0;
            }

            public void handle() {
                if (requestCounter == 0) {
                    requestCounter++;
                    return;
                }
                requestCounter++;
                Iterator it = loggerTimeouts.keySet().iterator();
                while (it.hasNext()) {
                    String host = (String) it.next();
                    String timeout = (String) loggerTimeouts.get(host);
                    int timeoutVal = Integer.parseInt(timeout);
                    if (timeoutVal > 0) {
                        timeoutVal /= 10;
                    }
                    int timeoutMod = (requestCounter % timeoutVal);
                    if (timeoutMod == 0) {
                        Object loggerFile = loggerFiles.get(host);
                        Object loggerFilenameObject = loggerFilenames.get(host);
                        Object loggerDestObject = loggerDests.get(host);
                        Object loggerCompressObject = loggerCompresses.get(host);
                        Object loggerDayObject = loggerDays.get(host);
                        Object loggerArchiveObject = loggerArchives.get(host);
                        Object loggerDeleteObject = loggerDeletes.get(host);
                        boolean rotateCompress = false;
                        boolean rotateDelete = false;
                        String rotateDest = null;
                        String logFile = null;
                        String rotateArchive = null;
                        int rotateDays = 0;
                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {
                            rotateCompress = true;
                        }
                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {
                            rotateDelete = true;
                        }
                        if (loggerDestObject != null) {
                            rotateDest = (String) loggerDestObject;
                        }
                        if (loggerFilenameObject != null) {
                            logFile = (String) loggerFilenameObject;
                        }
                        if (loggerArchiveObject != null) {
                            rotateArchive = (String) loggerArchiveObject;
                        }
                        if (loggerDayObject != null) {
                            rotateDays = Integer.parseInt((String) loggerDayObject);
                        }
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                                buf = null;
                                out = null;
                                in = null;
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""' to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                destChannel = null;
                                srcChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data from file '"" + logFile + ""' to '"" + destOutFile + ""' for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete) {
                            try {
                                ((PrintStream) loggerFile).close();
                            } catch (Exception e) {
                            }
                            (new File(logFile)).delete();
                            loggerFiles.remove(host);
                            addLogger(host, logFile);
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            fileList = null;
                            format1 = null;
                            archive = null;
                        }
                    }
                }
                it = null;
            }

            public String identString() {
                return ""Request Log Rotator"";
            }
        });
    }
",0.0
"    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            s = new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return s;
    }
","    public File getPreprocessedTextFile(File originalTextFile) throws IOException {
        File preprocessedTextFile = File.createTempFile(""cvs"", null);
        String separatorSeq = getSeparatorSequence();
        byte[] newLine = separatorSeq.getBytes();
        Constants.CVS_LOG.debug(""Preprocessing "" + originalTextFile.getAbsolutePath() + "" to "" + preprocessedTextFile.getAbsolutePath() + "" using "" + debugSequence(separatorSeq));
        byte[] crlf = ""\r\n"".getBytes();
        byte[] lf = ""\n"".getBytes();
        OutputStream out = null;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(originalTextFile));
            out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile));
            byte[] fileChunk = new byte[CHUNK_SIZE];
            byte[] fileWriteChunk = new byte[CHUNK_SIZE];
            for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) {
                if (newLine.length == 0) {
                    out.write(fileChunk, 0, readLength);
                } else {
                    int writeLength = 0;
                    for (int i = 0; i < readLength; ) {
                        int pos = findIndexOf(fileChunk, crlf, i);
                        int lineSepLength = crlf.length;
                        if (pos < i || pos >= readLength) {
                            pos = findIndexOf(fileChunk, lf, i);
                            lineSepLength = lf.length;
                        }
                        if (pos >= i && pos < readLength) {
                            try {
                                System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i);
                            } catch (ArrayIndexOutOfBoundsException aiobe) {
                                Constants.CVS_LOG.error(""fileChunk.length="" + fileChunk.length + "" i="" + i + "" writeLength="" + writeLength + "" pos="" + pos + "" fileWriteChunk.length="" + fileWriteChunk.length);
                                throw aiobe;
                            }
                            writeLength += pos - i;
                            i = pos + lineSepLength;
                            for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j];
                        } else {
                            System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i);
                            writeLength += readLength - i;
                            i = readLength;
                        }
                    }
                    out.write(fileWriteChunk, 0, writeLength);
                }
            }
            return preprocessedTextFile;
        } catch (IOException ex) {
            if (preprocessedTextFile != null) {
                cleanup(preprocessedTextFile);
            }
            throw ex;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
",0.0
"    public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException {
        File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator)));
        targetDirectory.mkdirs();
        File file = new File(sourceFileName);
        FileInputStream fis = new FileInputStream(file);
        FileChannel fc = fis.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        String inString = cb.toString();
        fis.close();
        fc.close();
        Set<String> keys = values.keySet();
        for (Object k : keys) {
            inString = inString.replace((String) k, escape(values.get(k)));
        }
        FileOutputStream fos = new FileOutputStream(targetFileName);
        PrintStream ps = new PrintStream(fos);
        ps.print(inString);
        fos.close();
    }
","    public static File downloadFile(URL url, String filePath) throws IOException, ConnectException, UnknownHostException {
        File f = null;
        long t1 = System.currentTimeMillis();
        try {
            long t3 = System.currentTimeMillis();
            File tempDirectory = new File(tempDirectoryPath);
            if (!tempDirectory.exists()) {
                tempDirectory.mkdir();
            }
            String fName = normalizeFileName(filePath);
            f = new File(tempDirectoryPath + ""/"" + fName);
            logger.info(""downloading '"" + url.toString() + ""' to: "" + f.getAbsolutePath());
            f.deleteOnExit();
            DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(f)));
            byte[] buffer = new byte[1024 * 256];
            InputStream is = url.openStream();
            long readed = 0;
            for (int i = is.read(buffer); i > 0; i = is.read(buffer)) {
                dos.write(buffer, 0, i);
                readed += i;
            }
            dos.close();
            long t4 = System.currentTimeMillis();
            logger.debug(""Download time: "" + (t4 - t3));
        } catch (IOException io) {
            io.printStackTrace();
        }
        long t2 = System.currentTimeMillis();
        logger.debug(""Total download method time: "" + (t2 - t1));
        return f;
    }
",0.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + server);
        FTPClient f = new FTPClient();
        f.connect(server);
        if (f.login(id, passwd) == false) {
            logger.info(""Fail to login with id="" + id);
            throw new LoginFailException(id, passwd);
        }
        f.changeWorkingDirectory(path);
        logger.info(""Start to upload"");
        f.storeFile(""index.html"", new ByteArrayInputStream(html.getBytes(""utf-8"")));
        logger.info(""Upload index.html"");
        f.storeFile(""main.css"", new FileInputStream(""web/main.css""));
        logger.info(""Upload main.css"");
        f.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));
        logger.info(""Upload cafelibrary.js"");
        f.makeDirectory(""img"");
        f.changeWorkingDirectory(""img"");
        for (int i = 0; i <= 5; i++) {
            String fileName = ""favorite_star_"" + i + "".png"";
            f.storeFile(fileName, new FileInputStream(""web/img/"" + fileName));
            logger.info(""Upload "" + fileName);
        }
        f.logout();
        f.disconnect();
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private void search(Class clazz, Collection result) {
        if (DEBUG) {
            System.err.println(""Searching for "" + clazz.getName() + "" in "" + clazz.getClassLoader() + "" from "" + this);
        }
        String res = ""META-INF/services/"" + clazz.getName();
        Enumeration en;
        try {
            en = loader.getResources(res);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return;
        }
        List foundClasses = new ArrayList();
        Collection removeClasses = new ArrayList();
        boolean foundOne = false;
        while (en.hasMoreElements()) {
            if (!foundOne) {
                foundOne = true;
                Class realMcCoy = null;
                try {
                    realMcCoy = loader.loadClass(clazz.getName());
                } catch (ClassNotFoundException cnfe) {
                }
                if (realMcCoy != clazz) {
                    if (DEBUG) {
                        if (realMcCoy != null) {
                            System.err.println(clazz.getName() + "" is not the real McCoy! Actually found it in "" + realMcCoy.getClassLoader());
                        } else {
                            System.err.println(clazz.getName() + "" could not be found in "" + loader);
                        }
                    }
                    return;
                }
            }
            URL url = (URL) en.nextElement();
            Item currentItem = null;
            try {
                InputStream is = url.openStream();
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                    while (true) {
                        String line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith(""#position="")) {
                            if (currentItem == null) {
                                assert false : ""Found line '"" + line + ""' but there is no item to associate it with!"";
                            }
                            try {
                                currentItem.position = Integer.parseInt(line.substring(10));
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        }
                        if (currentItem != null) {
                            insertItem(currentItem, foundClasses);
                            currentItem = null;
                        }
                        if (line.length() == 0) {
                            continue;
                        }
                        boolean remove = false;
                        if (line.charAt(0) == '#') {
                            if ((line.length() == 1) || (line.charAt(1) != '-')) {
                                continue;
                            }
                            remove = true;
                            line = line.substring(2);
                        }
                        Class inst = null;
                        try {
                            inst = Class.forName(line, false, loader);
                        } catch (ClassNotFoundException cnfe) {
                            if (remove) {
                                continue;
                            } else {
                                throw cnfe;
                            }
                        }
                        if (!clazz.isAssignableFrom(inst)) {
                            if (DEBUG) {
                                System.err.println(""Not a subclass"");
                            }
                            throw new ClassNotFoundException(inst.getName() + "" not a subclass of "" + clazz.getName());
                        }
                        if (remove) {
                            removeClasses.add(inst);
                        } else {
                            currentItem = new Item();
                            currentItem.clazz = inst;
                        }
                    }
                    if (currentItem != null) {
                        insertItem(currentItem, foundClasses);
                        currentItem = null;
                    }
                } finally {
                    is.close();
                }
            } catch (ClassNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        if (DEBUG) {
            System.err.println(""Found impls of "" + clazz.getName() + "": "" + foundClasses + "" and removed: "" + removeClasses + "" from: "" + this);
        }
        foundClasses.removeAll(removeClasses);
        Iterator it = foundClasses.iterator();
        while (it.hasNext()) {
            Item item = (Item) it.next();
            if (removeClasses.contains(item.clazz)) {
                continue;
            }
            result.add(new P(item.clazz));
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public boolean checkWebsite(String URL, String content) {
        boolean run = false;
        try {
            URL url = new URL(URL + ""?a="" + Math.random());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = reader.readLine()) != null) {
                if (line.contains(content)) {
                    run = true;
                }
            }
        } catch (Exception e) {
            run = false;
        }
        return run;
    }
",1.0
"    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setHeader(""Content-type"", ""application/force-download"");
        response.setHeader(""Content-disposition"", ""attachment"");
        response.setHeader(""filename"", ""export.txt"");
        response.setHeader(""Pragma"", ""no-cache"");
        response.setHeader(""Expires"", ""0"");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        InputStream x = baseRequest.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(x, writer);
        String theString = writer.toString();
        System.out.println(theString);
        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\n""));
    }
","    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
",1.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0.0
"    private void doPost(String request) throws IOException {
        URL url = new URL(""http://localhost:8080/exist/rest"" + DBBroker.ROOT_COLLECTION);
        HttpURLConnection connect = (HttpURLConnection) url.openConnection();
        connect.setRequestMethod(""POST"");
        connect.setDoOutput(true);
        OutputStream os = connect.getOutputStream();
        os.write(request.getBytes(""UTF-8""));
        connect.connect();
        BufferedReader is = new BufferedReader(new InputStreamReader(connect.getInputStream()));
        String line;
        while ((line = is.readLine()) != null) System.out.println(line);
    }
","    private static String hash(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (Exception e) {
            return null;
        }
        try {
            md.update(string.getBytes(""UTF-8""));
        } catch (Exception e) {
            return null;
        }
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
",0.0
"    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
","    String readRss(URL url) {
        String html = ""<html><body><h2>No data</h2></body></html>"";
        try {
            mLogger.info(""URL is:"" + url.toString());
            BufferedReader inStream = new BufferedReader(new InputStreamReader(url.openStream()), 1024);
            String line;
            StringBuilder rssFeed = new StringBuilder();
            while ((line = inStream.readLine()) != null) {
                rssFeed.append(line);
            }
            html = rssFeed.toString();
        } catch (IOException ex) {
            mLogger.warning(""Couldn't open an RSS stream"");
        }
        return html;
    }
",0.0
"    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    protected String getPostRequestContent(String urlText, String... postParams) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestMethod(""POST"");
        urlcon.setUseCaches(false);
        urlcon.setDoOutput(true);
        PrintStream ps = new PrintStream(urlcon.getOutputStream());
        for (String param : postParams) {
            ps.print(param);
        }
        ps.close();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
",0.0
"    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
","    @Override
    @RemoteMethod
    public boolean decrypt(int idAnexo) {
        try {
            Anexo anexo = anexoService.selectById(idAnexo);
            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);
            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);
            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());
            IOUtils.copy(cis, fos);
            cis.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    public static void copyFileNIO(File in, File out) throws IOException {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(in);
            fos = new FileOutputStream(out);
            FileChannel sourceChannel = fis.getChannel();
            FileChannel targetChannel = fos.getChannel();
            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);
            sourceChannel.close();
            targetChannel.close();
        } catch (IOException e) {
            throw e;
        } finally {
            try {
                if (fos != null) {
                    fos.close();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
        }
    }
",1.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    private void copy(File from, File to) throws FileNotFoundException, IOException {
        FileReader in;
        in = new FileReader(from);
        FileWriter out = new FileWriter(to);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",0.0
"    public static String hexHash(Object obj) {
        String toHash = obj.toString();
        try {
            MessageDigest dg = MessageDigest.getInstance(""MD5"");
            dg.update(toHash.getBytes(""UTF-8""));
            return bytesToHex(dg.digest());
        } catch (Exception e) {
            throw new RuntimeException(""Error while hashing string: "" + toHash, e);
        }
    }
","    public synchronized void connect() throws FTPConnectionException {
        checkLocked();
        try {
            int reply;
            this.disconnect();
            if (isSecured()) {
                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);
            } else {
                this.client = new FTPClient();
            }
            if (this.controlEncoding != null) {
                this.client.setControlEncoding(this.controlEncoding);
                debug(""control encoding : "", controlEncoding);
            }
            Logger.defaultLogger().info(""Trying to connect to server : "" + this.remoteServer + "" ..."");
            debug(""connect : connect"", remoteServer);
            client.connect(remoteServer, this.remotePort);
            Logger.defaultLogger().info(""Received FTP server response : "" + formatFTPReplyString(client.getReplyString()));
            this.connectionId = Util.getRndLong();
            reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                String msg = formatFTPReplyString(client.getReplyString());
                this.disconnect();
                throw new FTPConnectionException(""Unable to communicate with remote FTP server. Got message : "" + msg);
            } else {
                Logger.defaultLogger().info(""Trying to log in with user : "" + this.login + "" ..."");
                debug(""connect : login"", login + ""/"" + password);
                if (!client.login(this.login, this.password)) {
                    String msg = formatFTPReplyString(client.getReplyString());
                    this.disconnect();
                    throw new FTPConnectionException(""Unable to login on FTP server ("" + login + ""/"" + password + ""). Received response : "" + msg);
                } else {
                    Logger.defaultLogger().info(""Logged in with user : "" + this.login + "". Received response : "" + formatFTPReplyString(client.getReplyString()));
                    if (this.passivMode) {
                        Logger.defaultLogger().info(""Switching to passive mode ..."");
                        debug(""connect : pasv"");
                        client.enterLocalPassiveMode();
                        reply = client.getReplyCode();
                        if (!FTPReply.isPositiveCompletion(reply)) {
                            String msg = formatFTPReplyString(client.getReplyString());
                            this.disconnect();
                            throw new FTPConnectionException(""Unable to switch to passiv mode. Received response : "" + msg);
                        } else {
                            this.updateOpTime();
                        }
                    } else {
                        this.updateOpTime();
                    }
                    debug(""connect : bin"");
                    client.setFileType(FTP.BINARY_FILE_TYPE);
                    Logger.defaultLogger().info(""Connected to server : "" + this.remoteServer);
                }
            }
        } catch (UnknownHostException e) {
            resetClient(e);
            throw new FTPConnectionException(""Unknown FTP server : "" + this.remoteServer);
        } catch (SocketException e) {
            resetClient(e);
            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());
        } catch (IOException e) {
            resetClient(e);
            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());
        } finally {
            clearCache();
        }
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    @Override
    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {
        String path;
        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();
        try {
            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String data = """";
            while ((inputLine = in.readLine()) != null) data += inputLine;
            Response remoteData = new Response(new String(data));
            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));
            in.close();
            return remoteData;
        } catch (MalformedURLException e) {
            logger.error(""Illegal URL. Cannot connect to this remote object"", e);
            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);
        } catch (IOException e) {
            logger.error(""Cannot read from source. Please check remote object address"", e);
            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);
        }
    }
",0.0
"    public static String hexHash(Object obj) {
        String toHash = obj.toString();
        try {
            MessageDigest dg = MessageDigest.getInstance(""MD5"");
            dg.update(toHash.getBytes(""UTF-8""));
            return bytesToHex(dg.digest());
        } catch (Exception e) {
            throw new RuntimeException(""Error while hashing string: "" + toHash, e);
        }
    }
","    private Bitmap getBitmap(String imageUrl) {
        URL url;
        InputStream input = null;
        try {
            url = new URL(address + imageUrl);
            input = url.openStream();
            return BitmapFactory.decodeStream(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public static String encriptarPassword(String aPassword) throws BusinessException {
        ILogger logger = LogFactory.getLogger(User.class);
        String methodId = ""encriptarPassword"";
        try {
            MessageDigest currentAlgorithm = MessageDigest.getInstance(""MD5"");
            currentAlgorithm.reset();
            currentAlgorithm.update(aPassword.getBytes());
            byte[] hash = currentAlgorithm.digest();
            String d = """";
            for (int i = 0; i < hash.length; i++) {
                int v = hash[i] & 0xFF;
                if (v < 16) d += ""0"";
                d += Integer.toString(v, 16).toUpperCase();
            }
            return d.toLowerCase();
        } catch (NoSuchAlgorithmException nsae) {
            logger.logError(methodId + ""error al encriptar password:"" + nsae, nsae);
            throw new BusinessException(""Error al encriptar password"");
        }
    }
",0.0
"    public void shouldBeAbleToDownloadAndUpload() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        assertThat().array(buffer.toByteArray()).isEqualTo(new byte[] { 1, 2, 3 });
    }
","    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {
        wabclient.Attributes prop = new wabclient.Attributes(attributes);
        try {
            if (tag.equals(""app"")) {
                if (prop == null) {
                    System.err.println(""app without properties"");
                    return;
                }
                String appname = prop.getValue(""name"", """");
                String lookandfeel = prop.getValue(""lookandfeel"", """");
                global.setAppName(appname);
                if (lookandfeel.length() > 0) {
                    if (lookandfeel.equalsIgnoreCase(""Windows"")) lookandfeel = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Motif"")) lookandfeel = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Mac"")) lookandfeel = ""com.sun.java.swing.plaf.mac.MacLookAndFeel"";
                    UIManager.setLookAndFeel(lookandfeel);
                }
            } else if (tag.equals(""script"")) {
                WABClient c = (WABClient) global;
                c.beginScript();
                String url = prop.getValue(""src"");
                if (url.length() > 0) {
                    try {
                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                        String buffer;
                        while (true) {
                            buffer = r.readLine();
                            if (buffer == null) break;
                            c.script += buffer + ""\n"";
                        }
                        r.close();
                        c.endScript();
                    } catch (IOException ioe) {
                        System.err.println(""[IOError] "" + ioe.getMessage());
                        System.exit(0);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
",0.0
"    public static byte[] getBytesFromURL(URL url) throws IOException {
        byte[] b;
        URLConnection con = url.openConnection();
        int size = con.getContentLength();
        InputStream s = con.getInputStream();
        try {
            if (size <= 0) b = IOUtil.getBytesFromStream(s); else {
                b = new byte[size];
                int len = 0;
                do {
                    int n = s.read(b, len, size - len);
                    if (n < 0) throw new IOException(""the stream was closed: "" + url.toString());
                    len += n;
                } while (len < size);
            }
        } finally {
            s.close();
        }
        return b;
    }
","    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {
        int k_blockSize = 1024;
        int byteCount;
        char[] buf = new char[k_blockSize];
        File ofp = new File(outFile);
        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));
        zos.setMethod(ZipOutputStream.DEFLATED);
        OutputStreamWriter osw = new OutputStreamWriter(zos, ""ISO-8859-1"");
        BufferedWriter bw = new BufferedWriter(osw);
        ZipEntry zot = null;
        File ifp = new File(inFile);
        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));
        InputStreamReader isr = new InputStreamReader(zis, ""ISO-8859-1"");
        BufferedReader br = new BufferedReader(isr);
        ZipEntry zit = null;
        while ((zit = zis.getNextEntry()) != null) {
            if (zit.getName().equals(""content.xml"")) {
                continue;
            }
            zot = new ZipEntry(zit.getName());
            zos.putNextEntry(zot);
            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);
            bw.flush();
            zos.closeEntry();
        }
        zos.putNextEntry(new ZipEntry(""content.xml""));
        bw.flush();
        osw = new OutputStreamWriter(zos, ""UTF8"");
        bw = new BufferedWriter(osw);
        return bw;
    }
",0.0
"    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
","    public File unpackResource(String resourceName) throws IOException {
        File file = null;
        URL url = getURL(""/"" + resourceName);
        URLConnection urlConn = url.openConnection();
        if (urlConn instanceof JarURLConnection) {
            file = handleJarFile((JarURLConnection) urlConn, resourceName);
        } else if (urlConn instanceof BundleURLConnection) {
            file = handleBundleFile((BundleURLConnection) urlConn);
        } else {
            file = handleClassicFile(resourceName);
        }
        return file;
    }
",0.0
"    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""classpath://"")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
","    private File download(String filename, URL url) {
        int size = -1;
        int received = 0;
        try {
            fireDownloadStarted(filename);
            File file = createFile(filename);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));
            System.out.println(""������Դ��"" + filename + "", url="" + url);
            InputStream bis = url.openStream();
            byte[] buf = new byte[1024];
            int count = 0;
            long lastUpdate = 0;
            size = bis.available();
            while ((count = bis.read(buf)) != -1) {
                bos.write(buf, 0, count);
                received += count;
                long now = System.currentTimeMillis();
                if (now - lastUpdate > 500) {
                    fireDownloadUpdate(filename, size, received);
                    lastUpdate = now;
                }
            }
            bos.close();
            System.out.println(""��Դ������ϣ�"" + filename);
            fireDownloadCompleted(filename);
            return file;
        } catch (IOException e) {
            System.out.println(""������Դʧ�ܣ�"" + filename + "", error="" + e.getMessage());
            fireDownloadInterrupted(filename);
            if (!(e instanceof FileNotFoundException)) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0.0
"    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {
        try {
            URL u = new URL(""http://mediaserver:8080/sagex"" + url);
            log.debug(""Proxy Media: "" + u.toString());
            URLConnection c = u.openConnection();
            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");
            OutputStream os = resp.getOutputStream();
            IOUtils.copy(c.getInputStream(), os);
            os.flush();
            resp.flushBuffer();
        } catch (Throwable t) {
            log.error(""Failed to get url: "" + url, t);
            try {
                resp.sendError(500, t.getMessage());
            } catch (IOException e) {
            }
        }
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private String md5(String input) {
        MessageDigest md5Digest;
        try {
            md5Digest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new UserException(""could not get a md5 message digest"", e);
        }
        md5Digest.update(input.getBytes());
        return new String(md5Digest.digest());
    }
",0.0
"    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            System.out.println(""Mensagem original: "" + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
","    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement objectInsert = null;
        String sqlString = null;
        int newID = 0;
        try {
            conn.setAutoCommit(false);
            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";
            objectInsert = conn.prepareStatement(sqlString);
            ResultSet r = objectInsert.executeQuery(sqlString);
            newID = r.getInt(""NEXTVAL"");
            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";
            objectInsert = conn.prepareStatement(sqlString);
            objectInsert.setInt(1, newID);
            objectInsert.setString(2, getRoomKey());
            objectInsert.setString(3, ""ROOM"");
            objectInsert.executeUpdate();
            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";
            conn.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) {
                try {
                    System.err.print(""Transaction is being rolled back"");
                    conn.rollback();
                } catch (SQLException excep) {
                    excep.printStackTrace();
                }
            }
        } finally {
            if (objectInsert != null) {
                objectInsert.close();
            }
            conn.setAutoCommit(true);
        }
    }
",0.0
"    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return sb.toString();
    }
","    private void delete(String location) throws Exception {
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""DELETE"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + server);
        FTPClient f = new FTPClient();
        f.connect(server);
        if (f.login(id, passwd) == false) {
            logger.info(""Fail to login with id="" + id);
            throw new LoginFailException(id, passwd);
        }
        f.changeWorkingDirectory(path);
        logger.info(""Start to upload"");
        f.storeFile(""index.html"", new ByteArrayInputStream(html.getBytes(""utf-8"")));
        logger.info(""Upload index.html"");
        f.storeFile(""main.css"", new FileInputStream(""web/main.css""));
        logger.info(""Upload main.css"");
        f.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));
        logger.info(""Upload cafelibrary.js"");
        f.makeDirectory(""img"");
        f.changeWorkingDirectory(""img"");
        for (int i = 0; i <= 5; i++) {
            String fileName = ""favorite_star_"" + i + "".png"";
            f.storeFile(fileName, new FileInputStream(""web/img/"" + fileName));
            logger.info(""Upload "" + fileName);
        }
        f.logout();
        f.disconnect();
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
",0.0
"    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty(""Content-Type"", ""text/xml"");
        urlConn.setRequestProperty(""charset"", ""utf-8"");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = ""<commit/>"";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
","    protected void EncodeRoute() throws EncodeFailedException, IOException {
        File storefile = getNode().getCodec().PackStore(null, ReturnStore);
        DownRoute.EncodeData(storefile);
        File data = getNode().getCodec().PackRemoteDownload(this);
        data = PigData.EncodeData(data);
        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(data);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        UpRoute.EncodeData(PiggybackRouteFile);
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public static boolean copyFile(final File src, final File dst) {
        boolean result = false;
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        synchronized (FileUtil.DATA_LOCK) {
            try {
                inChannel = new FileInputStream(src).getChannel();
                outChannel = new FileOutputStream(dst).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                result = true;
            } catch (IOException e) {
            } finally {
                if (inChannel != null && inChannel.isOpen()) {
                    try {
                        inChannel.close();
                    } catch (IOException e) {
                    }
                }
                if (outChannel != null && outChannel.isOpen()) {
                    try {
                        outChannel.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
        return result;
    }
",1.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    public static String getStringFromURL(URL url) {
        try {
            if (url == null) {
                return null;
            }
            URLConnection conn = url.openConnection();
            conn.connect();
            if (conn instanceof HttpURLConnection) {
                int status = ((HttpURLConnection) conn).getResponseCode();
                if (status != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            int available = conn.getContentLength();
            InputStream is = conn.getInputStream();
            byte buffer[] = new byte[available];
            int pos = 0;
            while (available > 0) {
                int amount = is.read(buffer, pos, available);
                available -= amount;
                pos += amount;
            }
            is.close();
            String tmp = new String(buffer);
            return tmp;
        } catch (Exception ex) {
            System.out.println(ex);
            return """";
        }
    }
",0.0
"    public boolean copyOneOfMyFile(File f, String dest) {
        if (!ownsThisFile(f.getName())) return false;
        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);
        try {
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));
            int len = 1024;
            byte[] read = new byte[len];
            while ((len = in.read(read)) > 0) out.write(read, 0, len);
            out.flush();
            out.close();
            in.close();
            if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());
        } catch (IOException e) {
            System.out.println(""copy directory : "" + e);
            return false;
        }
        return true;
    }
","    private void publish() {
        if (uploadPrototypeBox.isSelected()) {
            try {
                URL url = new URL(prototypeURLField.getText());
                prototypeURLField.recordText();
                PrintStream ps;
                HttpURLConnection huc = null;
                if (url.getProtocol().equals(""file"")) {
                    ps = new PrintStream(new FileOutputStream(url.getFile()));
                } else {
                    URLConnection urlc = url.openConnection();
                    urlc.setDoOutput(true);
                    if (urlc instanceof HttpURLConnection) {
                        huc = ((HttpURLConnection) urlc);
                        huc.setRequestMethod(""PUT"");
                    }
                    ps = new PrintStream(urlc.getOutputStream());
                }
                target.writePrototype(ps);
                if (huc != null) {
                    huc.getResponseCode();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Uploading Prototype"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (postMetadataBox.isSelected()) {
            try {
                Hashtable env = new Hashtable();
                env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
                env.put(Context.PROVIDER_URL, directoryURLField.getText());
                env.put(Context.SECURITY_PRINCIPAL, directoryPrincipalField.getText());
                env.put(Context.SECURITY_CREDENTIALS, directoryCredentialsField.getText());
                InitialDirContext dirContext = new InitialDirContext(env);
                Preferences prefs = Preferences.userNodeForPackage(getClass());
                prefs.put(""directoryURL"", directoryURLField.getText());
                prefs.put(""directoryPrincipal"", directoryPrincipalField.getText());
                prefs.put(""directoryCredentials"", directoryCredentialsField.getText());
                BasicAttributes attr = new BasicAttributes();
                attr.put(OBJECT_CLASS, RDS_RESOURCE);
                attr.put(CONTENT_TYPE, PROTOTYPE_TYPE);
                if (uploadPrototypeBox.isSelected()) {
                    attr.put(IMPLEMENTATION_URL, prototypeURLField.getText());
                }
                DefaultTableModel dtm = (DefaultTableModel) attributesTable.getModel();
                Preferences attrPrefs = prefs.node(""attributes"");
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    attr.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                    attrPrefs.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                }
                NameParser np = dirContext.getNameParser("""");
                Enumeration comps = new ResourceName(prototypeNameField.getText()).getAll();
                prototypeNameField.recordText();
                Name resourcedn = np.parse("""");
                while (comps.hasMoreElements()) {
                    resourcedn.add(RC + ""="" + (String) comps.nextElement());
                    try {
                        dirContext.createSubcontext(resourcedn);
                    } catch (NameAlreadyBoundException nabe) {
                    }
                }
                dirContext.modifyAttributes(resourcedn, DirContext.REPLACE_ATTRIBUTE, attr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Posting Metadata"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
",0.0
"    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance(""SHA-1"");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error(""NoSuchAlgorithmException while digesting"", e);
        }
        return digest;
    }
","    public void insert(IIDGenerator idGenerators, AIDADocument item) throws SQLException {
        AIDAActivityObjectDB.getManager(token).insert(idGenerators, item);
        Connection con = getConnection();
        try {
            PreparedStatement ps = con.prepareStatement(DOC_INSERT);
            ps.setLong(1, item.getId());
            ps.setString(2, item.getName());
            ps.setString(3, item.getRelativeLink());
            ps.executeUpdate();
            ps.close();
            insertDescriptions(con, item);
        } catch (SQLException sqlEx) {
            con.rollback();
            throw sqlEx;
        } finally {
            con.close();
        }
        return;
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
",1.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String url = ""http://jdkcn.com/checkUpdateNew.jsp?ver="" + blogFacade.getDatabaseSiteConfig().getAppVersion();
        response.setCharacterEncoding(""UTF-8"");
        URLConnection connection = new URL(url).openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        StringBuilder sb = new StringBuilder();
        String line = reader.readLine();
        while (line != null) {
            sb.append(line).append(""\r\n"");
            line = reader.readLine();
        }
        response.getWriter().println(sb.toString());
        return null;
    }
",0.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    public int deleteRecord(String uuid) throws SQLException, CatalogIndexException {
        Connection con = null;
        boolean autoCommit = true;
        PreparedStatement st = null;
        ResultSet rs = null;
        int nRows = 0;
        boolean cancelTask = false;
        StringSet fids = new StringSet();
        if (cswRemoteRepository.isActive()) {
            StringSet uuids = new StringSet();
            uuids.add(uuid);
            fids = queryFileIdentifiers(uuids);
        }
        try {
            con = returnConnection().getJdbcConnection();
            autoCommit = con.getAutoCommit();
            con.setAutoCommit(false);
            String sSql = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>''"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            rs = st.executeQuery();
            if (rs.next()) {
                cancelTask = rs.getInt(1) > 0;
            }
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            nRows = st.executeUpdate();
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            st.executeUpdate();
            CollectionDao colDao = new CollectionDao(this.getRequestContext());
            if (colDao.getUseCollections()) {
                closeStatement(st);
                sSql = ""DELETE FROM "" + colDao.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";
                logExpression(sSql);
                st = con.prepareStatement(sSql);
                st.setString(1, uuid);
                st.executeUpdate();
            }
            con.commit();
        } catch (SQLException ex) {
            if (con != null) {
                con.rollback();
            }
            throw ex;
        } finally {
            closeResultSet(rs);
            closeStatement(st);
            if (con != null) {
                con.setAutoCommit(autoCommit);
            }
        }
        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();
        if (indexAdapter != null) {
            indexAdapter.deleteDocument(uuid);
            if (cswRemoteRepository.isActive()) {
                if (fids.size() > 0) cswRemoteRepository.onRecordsDeleted(fids);
            }
        }
        if (cancelTask && getRequestContext() != null) {
            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), uuid);
        }
        return nRows;
    }
",0.0
"    @Test
    public void test_baseMaterialsForTypeName_NonExistingName() throws Exception {
        URL url = new URL(baseUrl + ""/baseMaterialsForTypeName/blah-blah"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(400));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(400));
    }
","    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
",0.0
"    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
","    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
",0.0
"    private static boolean renderStaticResource(final String requestedResource, HttpServletResponse servletResponse) throws IOException {
        boolean successfull = true;
        String fileName = PathTool.getFSPathOfResource(requestedResource);
        File file = new File(fileName);
        if (!file.exists()) {
            logger.error(""Static resource not found: "" + fileName);
            return false;
        }
        if (fileName.endsWith(""xml"") || fileName.endsWith(""asp"")) servletResponse.setContentType(""text/xml""); else if (fileName.endsWith(""css"")) servletResponse.setContentType(""text/css""); else if (fileName.endsWith(""js"")) servletResponse.setContentType(""text/javascript"");
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            IOUtils.copy(in, servletResponse.getOutputStream());
            logger.debug(""Static resource rendered: "".concat(fileName));
        } catch (FileNotFoundException e) {
            logger.error(""Static resource not found: "" + fileName);
            successfull = false;
        } finally {
            IOUtils.closeQuietly(in);
        }
        return successfull;
    }
","    public static void test() {
        addToCounter(""computeracces.html"");
        try {
            JFrame jfr = new JFrame(""Webconnect"");
            URL url = new URL(""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1"");
            JEditorPane jep = new JEditorPane();
            jfr.add(jep);
            String urlstr = ""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?url=http%3a%2f%2flyricscatcher.sourceforge.net%2fpiwik.php&action_name=&idsite=1&res=1440x900&h="";
            Calendar cal = Calendar.getInstance();
            urlstr += cal.get(Calendar.HOUR_OF_DAY);
            urlstr += ""&m="";
            urlstr += cal.get(Calendar.MINUTE);
            urlstr += ""&s="";
            urlstr += cal.get(Calendar.SECOND);
            urlstr += ""&fla=1&dir=1&qt=1&realp=1&pdf=1&wma=1&java=1&cookie=0&title=JAVAACCESS&urlref=http%3a%2f%2flyricscatcher.sourceforge.net%2fcomputeraccespage.html"";
            System.out.println(urlstr);
            URL nurl = new URL(urlstr);
            InputStream ist = nurl.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length of correct url="" + line.length());
            URL myurl = new URL(urlstr);
            URLConnection urlc = myurl.openConnection();
            urlc.getContent();
            System.out.println(urlc.getLastModified());
            System.out.println(urlc.getPermission());
            System.out.println(urlc.getRequestProperties());
            System.out.println(urlc.getContentEncoding());
            System.out.println(urlc.getContentLength());
            urlc.connect();
            InputStream dist = myurl.openStream();
            while (ist.available() >= 0) {
                ist.read();
            }
            ist.close();
            Document d = jep.getEditorKitForContentType(""html"").createDefaultDocument();
            d.getDefaultRootElement();
            jep.setContentType(""text/html"");
            jep.setText(""<html><img src=\""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1\"" alt=\""there's a problem...\""/><img src=\"""" + urlstr + ""\"" alt=\""Another problem\"" style=\""border:0\"" /></html>"");
            jfr.setLocationByPlatform(true);
            jfr.setSize(100, 100);
            jfr.show();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
","    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter(""path"");
        path = URLDecoder.decode(path, ""UTF-8"");
        String name = req.getParameter(""name"");
        name = new String(name.getBytes(), ""UTF-8"");
        String contentType = req.getParameter(""contentType"");
        if (path == null) {
            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");
            LOG.error(e);
            throw e;
        }
        URL url = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(url, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
",0.0
"    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        String text = new String();
        byte[] sha1hash = new byte[20];
        text = key + GUUI;
        md.update(text.getBytes(), 0, text.length());
        sha1hash = md.digest();
        return (Helper.getBASE64(sha1hash));
    }
","    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
",1.0
"    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
","    @Override
    public String getURL(String name) {
        String r;
        try {
            URL url = new URL(NIFHandler.URL_BASE + name.replaceAll("" "", ""+""));
            Document d = new SAXBuilder().build(url.openStream());
            Element e = d.getRootElement().descendTo(""url"");
            r = e.getText().trim();
        } catch (Throwable t) {
            r = ""unknown"";
        }
        return r;
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    private static void login(HttpClient client, String token) throws Exception {
        HttpPost login = new HttpPost(""https://libsys.arlingtonva.us/iii/cas/login?service=http&amp;scope=1"");
        List<NameValuePair> formParams = new ArrayList<NameValuePair>();
        formParams.add(new BasicNameValuePair(""code"", ""202002686286""));
        formParams.add(new BasicNameValuePair(""pin"", ""3128""));
        formParams.add(new BasicNameValuePair(""_eventId"", ""submit""));
        formParams.add(new BasicNameValuePair(""lt"", token));
        UrlEncodedFormEntity form = new UrlEncodedFormEntity(formParams, ""UTF-8"");
        login.setEntity(form);
        HttpResponse response = client.execute(login);
        EntityUtils.consume(response.getEntity());
        Header[] headers = response.getAllHeaders();
        System.out.println(""HEADERS: "");
        for (Header hdr : headers) {
            System.out.println(hdr.getName() + "": "" + hdr.getValue());
        }
    }
",0.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    public static void main(String[] args) throws Exception {
        File inputFile = new File(args[0]);
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        StringBuffer stringBuffer = new StringBuffer();
        String readed;
        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\r\n"");
        readed = stringBuffer.toString();
        reader.close();
        File outputFile = new File(args[0] + "".output"");
        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
        readed = readed.replaceAll(""\\t+"", ""#"");
        readed = readed.replaceAll(""\\s*#\\s*"", ""#"");
        readed = readed.replaceAll(""Latitude,.*"", """");
        readed = readed.replaceAll(""Flag of"", """");
        readed = readed.replaceAll(""^\\s+$"", """");
        writer.write(readed);
        writer.close();
    }
",0.0
"    public static String getMD5EncodedString(String strIn) {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(strIn.getBytes());
            byte[] digest = md5.digest();
            StringBuffer hexString = new StringBuffer();
            for (byte aDigest : digest) {
                hexString.append(Integer.toHexString(0xFF & aDigest));
            }
            return hexString.toString();
        } catch (java.security.NoSuchAlgorithmException n) {
            return """";
        }
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + ""\n"");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
","    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
",0.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    public void myClickHandler(View view) {
        switch(view.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL url = new URL(urlText.getText().toString());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line = """";
                    while ((line = rd.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
","    public static Bitmap loadBitmap(String url) {
        try {
            final HttpClient httpClient = getHttpClient();
            final HttpResponse resp = httpClient.execute(new HttpGet(url));
            final HttpEntity entity = resp.getEntity();
            final int statusCode = resp.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK || entity == null) {
                return null;
            }
            final byte[] respBytes = EntityUtils.toByteArray(entity);
            BitmapFactory.Options decodeOptions = new BitmapFactory.Options();
            decodeOptions.inSampleSize = 1;
            return BitmapFactory.decodeByteArray(respBytes, 0, respBytes.length, decodeOptions);
        } catch (Exception e) {
            Log.w(TAG, ""Problem while loading image: "" + e.toString(), e);
        }
        return null;
    }
",0.0
"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public DProblem loadProblem(String urlString) throws DataStoreException {
        try {
            URL url = new URL(urlString);
            IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer data = new StringBuffer();
            String line;
            int i = 0;
            while ((line = in.readLine()) != null) {
                data.append(line + ""\n"");
                i++;
            }
            DProblem prob = DProblemXMLParser.load(data.toString());
            if (prob != null) {
                prob.setUsername(""Local"");
                prob.setFilename(urlString);
                prob.setAccessMode(DProblemManager.HTTP);
            }
            return prob;
        } catch (MalformedURLException e) {
            throw new DataStoreException(e);
        } catch (IOException e) {
            IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());
            e.printStackTrace();
            throw new DataStoreException(e);
        } catch (XMLParserException e) {
            throw new DataStoreException(e);
        }
    }
",0.0
"    public static String getMd5Hash(String plaintext) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(plaintext.getBytes());
            byte[] digest = md5.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            return hashtext;
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return """";
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public static String SHAEncrypt(String originalString) {
        String encryptedString = new String("""");
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(originalString.getBytes());
            byte b[] = md.digest();
            for (int i = 0; i < b.length; i++) {
                char[] digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] ob = new char[2];
                ob[0] = digit[(b[i] >>> 4) & 0X0F];
                ob[1] = digit[b[i] & 0X0F];
                encryptedString += new String(ob);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return encryptedString;
    }
","    private static boolean execute(String query) throws SQLException {
        boolean success = true;
        try {
            PreparedStatement stm = con.prepareStatement(query);
            stm.executeUpdate();
            stm.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (Exception rbex) {
                rbex.printStackTrace();
            }
            success = false;
            throw e;
        }
        return success;
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    private URLConnection getConnection(String url, int count) {
        URLConnection conn = null;
        try {
            conn = new URL(url).openConnection();
        } catch (IOException e) {
            if (count < 5) {
                System.out.println();
                System.out.print(""getConnection failed - "");
                System.out.println(count);
                System.out.println(""Trying again ..."");
                conn = this.getConnection(url, count++);
            } else {
                System.out.println(""Giving up"");
                throw new OntopiaRuntimeException(e);
            }
        }
        return conn;
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",1.0
"    private String fetch(URL url) {
        StringBuilder body = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                body.append(inputLine);
            }
            in.close();
            return body.toString();
        } catch (Exception e) {
            debug(""Error: fetch: Exception reading URL: "" + e);
        }
        return null;
    }
","    public String hash(String password) {
        MessageDigest sha1Digest;
        try {
            sha1Digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            throw NestedException.wrap(e);
        }
        sha1Digest.update(password.getBytes());
        StringBuilder retval = new StringBuilder(""sha1:"");
        retval.append(new String(Base64.encodeBase64(sha1Digest.digest())));
        return retval.toString();
    }
",0.0
"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
","    public void bubbleSort(int[] arr) {
        BasicProcessor.getInstance().getStartBlock();
        BasicProcessor.getInstance().getVarDeclaration();
        boolean swapped = true;
        BasicProcessor.getInstance().getVarDeclaration();
        int j = 0;
        BasicProcessor.getInstance().getVarDeclaration();
        int tmp;
        {
            BasicProcessor.getInstance().getWhileStatement();
            while (swapped) {
                BasicProcessor.getInstance().getStartBlock();
                swapped = false;
                j++;
                {
                    BasicProcessor.getInstance().getForStatement();
                    for (int i = 0; i < arr.length - j; i++) {
                        BasicProcessor.getInstance().getStartBlock();
                        {
                            BasicProcessor.getInstance().getIfStatement();
                            if (arr[i] > arr[i + 1]) {
                                BasicProcessor.getInstance().getStartBlock();
                                tmp = arr[i];
                                arr[i] = arr[i + 1];
                                arr[i + 1] = tmp;
                                swapped = true;
                                BasicProcessor.getInstance().getEndBlock();
                            }
                        }
                        BasicProcessor.getInstance().getEndBlock();
                    }
                }
                BasicProcessor.getInstance().getEndBlock();
            }
        }
        BasicProcessor.getInstance().getEndBlock();
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    private void copy(File in, File out) {
        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());
        try {
            FileChannel ic = new FileInputStream(in).getChannel();
            FileChannel oc = new FileOutputStream(out).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
        } catch (IOException ioe) {
            fail(""Failed testing while copying modified file: "" + ioe.getMessage());
        }
    }
",1.0
"    public boolean testConnection(FTPSite site) throws IOException {
        FTPClient testclient = new FTPClient();
        testclient.connect(site.getHost(), site.getPort());
        boolean check = testclient.login(site.getUser(), site.getPassword());
        testclient.disconnect();
        return check;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
","    public File getPreprocessedTextFile(File originalTextFile) throws IOException {
        File preprocessedTextFile = File.createTempFile(""cvs"", null);
        String separatorSeq = getSeparatorSequence();
        byte[] newLine = separatorSeq.getBytes();
        Constants.CVS_LOG.debug(""Preprocessing "" + originalTextFile.getAbsolutePath() + "" to "" + preprocessedTextFile.getAbsolutePath() + "" using "" + debugSequence(separatorSeq));
        byte[] crlf = ""\r\n"".getBytes();
        byte[] lf = ""\n"".getBytes();
        OutputStream out = null;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(originalTextFile));
            out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile));
            byte[] fileChunk = new byte[CHUNK_SIZE];
            byte[] fileWriteChunk = new byte[CHUNK_SIZE];
            for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) {
                if (newLine.length == 0) {
                    out.write(fileChunk, 0, readLength);
                } else {
                    int writeLength = 0;
                    for (int i = 0; i < readLength; ) {
                        int pos = findIndexOf(fileChunk, crlf, i);
                        int lineSepLength = crlf.length;
                        if (pos < i || pos >= readLength) {
                            pos = findIndexOf(fileChunk, lf, i);
                            lineSepLength = lf.length;
                        }
                        if (pos >= i && pos < readLength) {
                            try {
                                System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i);
                            } catch (ArrayIndexOutOfBoundsException aiobe) {
                                Constants.CVS_LOG.error(""fileChunk.length="" + fileChunk.length + "" i="" + i + "" writeLength="" + writeLength + "" pos="" + pos + "" fileWriteChunk.length="" + fileWriteChunk.length);
                                throw aiobe;
                            }
                            writeLength += pos - i;
                            i = pos + lineSepLength;
                            for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j];
                        } else {
                            System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i);
                            writeLength += readLength - i;
                            i = readLength;
                        }
                    }
                    out.write(fileWriteChunk, 0, writeLength);
                }
            }
            return preprocessedTextFile;
        } catch (IOException ex) {
            if (preprocessedTextFile != null) {
                cleanup(preprocessedTextFile);
            }
            throw ex;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
",0.0
"    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
","    public boolean updateLOB(String sql, int displayType, Object value) throws RemoteException {
        if (sql == null || value == null) {
            log.fine(""No sql or data"");
            return false;
        }
        log.fine(sql);
        m_updateLOBCount++;
        boolean success = true;
        Connection con = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(sql);
            if (displayType == DisplayType.TextLong) pstmt.setString(1, (String) value); else pstmt.setBytes(1, (byte[]) value);
            int no = pstmt.executeUpdate();
            pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            log.log(Level.FINE, sql, e);
            success = false;
        }
        try {
            if (pstmt != null) pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            pstmt = null;
        }
        if (success) {
            try {
                con.commit();
                con.close();
                con = null;
            } catch (Exception e) {
                log.log(Level.SEVERE, ""commit"", e);
                success = false;
            }
        }
        if (!success) {
            log.severe(""rollback"");
            try {
                con.rollback();
                con.close();
                con = null;
            } catch (Exception ee) {
                log.log(Level.SEVERE, ""rollback"", ee);
            }
        }
        try {
            if (con != null) con.close();
            con = null;
        } catch (Exception e) {
            con = null;
        }
        return success;
    }
",0.0
"    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream out = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel channel = out.getChannel();
            long pos = 0, len = src.size(), ret;
            while (len > 0) {
                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;
                len -= ret;
                pos += ret;
            }
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
",0.0
"    public static String encodeMD5(String param) throws Exception {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(param.getBytes());
        byte[] hash = digest.digest();
        char buf[] = new char[hash.length * 2];
        for (int i = 0, x = 0; i < hash.length; i++) {
            buf[x++] = HEX_CHARS[(hash[i] >>> 4) & 0xf];
            buf[x++] = HEX_CHARS[hash[i] & 0xf];
        }
        return String.valueOf(buf);
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        String text = new String();
        byte[] sha1hash = new byte[20];
        text = key + GUUI;
        md.update(text.getBytes(), 0, text.length());
        sha1hash = md.digest();
        return (Helper.getBASE64(sha1hash));
    }
","    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    protected byte[] getTSAResponse(byte[] requestBytes) throws SinaduraCoreException {
        byte[] respBytes = null;
        try {
            URL url = new URL(this.tsaURL);
            URLConnection tsaConnection = null;
            if (this.proxy == null) tsaConnection = url.openConnection(); else tsaConnection = url.openConnection(this.proxy);
            tsaConnection.setDoInput(true);
            tsaConnection.setDoOutput(true);
            tsaConnection.setUseCaches(false);
            tsaConnection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");
            tsaConnection.setRequestProperty(""Content-Transfer-Encoding"", ""binary"");
            if ((this.tsaUsername != null) && !this.tsaUsername.equals("""")) {
                String userPassword = this.tsaUsername + "":"" + this.tsaPassword;
                tsaConnection.setRequestProperty(""Authorization"", ""Basic "" + new String(new sun.misc.BASE64Encoder().encode(userPassword.getBytes())));
            }
            OutputStream out = tsaConnection.getOutputStream();
            out.write(requestBytes);
            out.close();
            InputStream inp = tsaConnection.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {
                baos.write(buffer, 0, bytesRead);
            }
            respBytes = baos.toByteArray();
            String encoding = tsaConnection.getContentEncoding();
            if (encoding != null && encoding.equalsIgnoreCase(""base64"")) {
                sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
                respBytes = dec.decodeBuffer(new String(respBytes));
            }
        } catch (MalformedURLException e) {
            throw new SinaduraCoreException(""URL malformed "" + e.getMessage(), e);
        } catch (IOException e) {
            throw new SinaduraCoreException(""Connection Error "" + e.getMessage(), e);
        }
        return respBytes;
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    private static void downloadImages(String uriPrefix, String fileWithListOfImages, String outputDir) throws Exception {
        Properties list = new Properties();
        list.load(new FileInputStream(fileWithListOfImages));
        long current = 0;
        long startTime = System.currentTimeMillis();
        System.out.println(""Downloading files from "" + uriPrefix + "" to "" + outputDir);
        System.out.println(""Total "" + list.size() + "" files, think of 1 sec per file"");
        System.out.println(""Images with the same size as the 'no-image' image are ignored and not displayed"");
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            if (urlString.contains(""="")) throw new Exception(""Symbol '=' found in file names, while it is reserved for denoting '/' in flat-file names"");
        }
        for (Iterator<Object> it = list.keySet().iterator(); it.hasNext(); ) {
            String urlString = it.next().toString().replace('\\', '/');
            URL url = new URL(uriPrefix + urlString);
            File file = new File(outputDir + ""/"" + imageNameToFileName(urlString));
            current++;
            if (!file.exists()) {
                try {
                    BufferedInputStream in = new BufferedInputStream(url.openStream(), 64000);
                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file), 64000);
                    int c;
                    while ((c = in.read()) != -1) {
                        out.write(c);
                    }
                    out.close();
                    in.close();
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                    System.out.println(""saved"");
                } catch (Exception e) {
                    System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", FAILED, error: "" + e.getMessage());
                }
            } else {
                System.out.print(current + "" /"" + list.size() + "". "" + file.getName() + "", "");
                System.out.println(""already exists"");
            }
            if (current / 100 == current / 100.0) {
                long delta = (System.currentTimeMillis() - startTime);
                System.out.println(""Total time "" + delta + "" ms, "" + (delta / current) + "" ms/file"");
            }
        }
        long delta = (System.currentTimeMillis() - startTime);
        System.out.println(""Total time "" + delta + "" ms, "" + (delta / list.size()) + "" ms/file"");
    }
",0.0
"        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
","    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
",0.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    public boolean open() {
        if (null == _uu) {
            try {
                if (null == url) return false; else {
                    if (null != this.query) this.url = constructQuery(url, this.query);
                    _uu = url.openConnection();
                    _uu.setAllowUserInteraction(false);
                    _uu.setDoInput(true);
                    if (null != super._loc) {
                        try {
                            _uu.setRequestProperty(""Accept-Language"", jsGet_locale());
                        } catch (JavaScriptException jsx) {
                        }
                    }
                    encoding = _uu.getContentEncoding();
                    bytesize = _uu.getContentLength();
                    mimetype = _uu.getContentType();
                    serviceDate = _uu.getDate();
                    contentExpires = _uu.getExpiration();
                    contentLastmod = _uu.getLastModified();
                    return true;
                }
            } catch (Exception exc) {
                close();
                return false;
            }
        } else return true;
    }
",0.0
"    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
","    public boolean checkWebsite(String URL, String content) {
        boolean run = false;
        try {
            URL url = new URL(URL + ""?a="" + Math.random());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = reader.readLine()) != null) {
                if (line.contains(content)) {
                    run = true;
                }
            }
        } catch (Exception e) {
            run = false;
        }
        return run;
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public RobotList<Enemy> sort_decr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value < enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    private static void getClasses(Collection<Class<?>> classes, String... packageNames) throws ClassNotFoundException {
        boolean recursive = true;
        for (String packageName : packageNames) {
            if (StringUtil.isEmpty(packageName)) continue;
            String packageDirName = packageName.replace('.', '/');
            Enumeration<URL> dirs = null;
            try {
                dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
                while (dirs.hasMoreElements()) {
                    URL url = dirs.nextElement();
                    String protocol = url.getProtocol();
                    if (""file"".equals(protocol)) {
                        String filePath = URLDecoder.decode(url.getFile(), DECODING);
                        getClassesByPackageFile(packageName, filePath, recursive, classes);
                    } else if (""jar"".equals(protocol)) {
                        JarFile jar = null;
                        try {
                            jar = ((JarURLConnection) url.openConnection()).getJarFile();
                            Enumeration<JarEntry> entries = jar.entries();
                            while (entries.hasMoreElements()) {
                                JarEntry entry = entries.nextElement();
                                String name = entry.getName();
                                if (name.charAt(0) == '/') {
                                    name = name.substring(1);
                                }
                                if (name.startsWith(packageDirName)) {
                                    int idx = name.lastIndexOf('/');
                                    if (idx != -1) {
                                        packageName = name.substring(0, idx).replace('/', '.');
                                    }
                                    if ((idx != -1) || recursive) {
                                        if (name.endsWith(JAVA_CLASS_SUFFIX) && !entry.isDirectory()) {
                                            String className = name.substring(packageName.length() + 1, name.length() - 6);
                                            classes.add(loadClass(packageName + '.' + className));
                                        }
                                    }
                                }
                            }
                        } catch (IOException e) {
                            LOG.error(""IOException when loading files from : "" + url, e);
                        }
                    }
                }
            } catch (IOException e) {
                LOG.error(""IOException when get classes from : "" + packageName, e);
            }
        }
    }
",0.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
","    public List<String> selectSynchrnServerFiles(SynchrnServerVO synchrnServerVO) throws Exception {
        List<String> list = new ArrayList<String>();
        try {
            FTPClient ftpClient = new FTPClient();
            ftpClient.setControlEncoding(""euc-kr"");
            if (!EgovWebUtil.isIPAddress(synchrnServerVO.getServerIp())) {
                throw new RuntimeException(""IP is needed. ("" + synchrnServerVO.getServerIp() + "")"");
            }
            InetAddress host = InetAddress.getByName(synchrnServerVO.getServerIp());
            try {
                ftpClient.connect(host, Integer.parseInt(synchrnServerVO.getServerPort()));
                boolean isLogin = ftpClient.login(synchrnServerVO.getFtpId(), synchrnServerVO.getFtpPassword());
                if (!isLogin) throw new Exception(""FTP Client Login Error : \n"");
            } catch (SocketException se) {
                System.out.println(se);
                throw new Exception(se);
            } catch (Exception e) {
                System.out.println(e);
                throw new Exception(e);
            }
            FTPFile[] fTPFile = null;
            try {
                ftpClient.changeWorkingDirectory(synchrnServerVO.getSynchrnLc());
                fTPFile = ftpClient.listFiles(synchrnServerVO.getSynchrnLc());
                for (int i = 0; i < fTPFile.length; i++) {
                    if (fTPFile[i].isFile()) list.add(fTPFile[i].getName());
                }
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                ftpClient.logout();
            }
        } catch (Exception e) {
            list.add(""noList"");
        }
        return list;
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    @Override
    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean found = false;
        String name = getArgument(request.getPathInfo());
        if (StringUtils.contains(name, '/')) {
            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);
            if (file.exists() && file.isFile()) {
                found = true;
                MagicMatch match = Magic.getMagicMatch(file, true);
                response.setContentType(match.getMimeType());
                FileInputStream in = new FileInputStream(file);
                IOUtils.copyLarge(in, response.getOutputStream());
                in.close();
            }
        } else if (!StringUtils.isBlank(name)) {
            int articleId = NumberUtils.toInt(name);
            if (articleId > 0) {
                Article article = articleDao.load(articleId);
                if (article != null) {
                    found = true;
                    sendArticle(request, response, article);
                }
            }
        } else {
            int page = NumberUtils.toInt(request.getParameter(""page""), 0);
            Date fromDate = null;
            String from = request.getParameter(""from"");
            if (StringUtils.isNotBlank(from)) {
                try {
                    fromDate = dayMonthYearEn.parse(from);
                } catch (ParseException e) {
                }
            }
            Date untilDate = null;
            String until = request.getParameter(""until"");
            if (StringUtils.isNotBlank(until)) {
                try {
                    untilDate = dayMonthYearEn.parse(until);
                } catch (ParseException e) {
                }
            }
            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));
            found = true;
        }
        if (found != true) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",0.0
"    private URLConnection openConnection(URL url) throws MalformedURLException, IOException {
        URLConnection connection = url.openConnection();
        if (connection instanceof HttpURLConnection) ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
        connection.setUseCaches(false);
        return connection;
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",1.0
"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
","    public static String encipherAMessage(String message) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] digest = sha1.digest();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String cipherTextB64 = base64encoder.encode(digest);
            return cipherTextB64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
",0.0
"    public void testSavepoint9() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint9 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        Savepoint sp = con.setSavepoint();
        PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint9 (data) VALUES (?)"");
        pstmt.setInt(1, 1);
        assertTrue(pstmt.executeUpdate() == 1);
        pstmt.close();
        stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.commit();
        con.rollback();
        stmt = con.createStatement();
        rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(""bug [2021839]"", rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.setAutoCommit(true);
    }
","    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    private static String getTextFromURL(HttpServletRequest req, String urlString) {
        StringBuffer buffer = new StringBuffer();
        if (!urlString.startsWith(""http"")) {
            String requestURL = req.getRequestURL().toString();
            urlString = requestURL.substring(0, requestURL.lastIndexOf(""/"")) + urlString;
        }
        try {
            URL url = new URL(urlString);
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = input.readLine()) != null) {
                buffer.append(line);
                buffer.append(Constants.LF);
            }
        } catch (FileNotFoundException nf) {
            log.error(""File not found: "" + urlString, nf);
        } catch (Exception e) {
            log.error(""Exception while reading file: "" + urlString, e);
        }
        return buffer.toString();
    }
",0.0
"    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
","    public void testSavepoint9() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint9 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        Savepoint sp = con.setSavepoint();
        PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint9 (data) VALUES (?)"");
        pstmt.setInt(1, 1);
        assertTrue(pstmt.executeUpdate() == 1);
        pstmt.close();
        stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.commit();
        con.rollback();
        stmt = con.createStatement();
        rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(""bug [2021839]"", rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.setAutoCommit(true);
    }
",0.0
"    void queryFile(String rendezvousProgram, String rendezvousMD5) {
        try {
            XMLConfigParser.readUrlHost();
            String url = XMLConfigParser.urlHost;
            String query;
            String param1 = ""op=query"";
            String param2 = ""program="" + rendezvousProgram;
            String param3 = ""md5="" + rendezvousMD5;
            query = String.format(""%s&%s&%s"", param1, param2, param3);
            openConnection(query, url);
            String line = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
","    private int[] sortNodesToGoal(Graph g, int parent, int goal) {
        float a, b;
        int tempI, tempR;
        float tempF;
        int len = g.nodeList[parent].edges.length;
        int[] nodes = new int[len];
        float[] dists = new float[len];
        int[] ref = new int[len];
        if (len == 0) return null;
        if (len == 1) {
            ref[0] = 0;
            return ref;
        }
        for (int i = 0; i < len; i++) {
            nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i]);
            a = g.nodeList[nodes[i]].x - g.nodeList[goal].x;
            b = g.nodeList[nodes[i]].y - g.nodeList[goal].y;
            dists[i] = (float) Math.sqrt(a * a + b * b);
            ref[i] = i;
        }
        for (int i = len - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (dists[j] > dists[j + 1]) {
                    tempI = nodes[j];
                    nodes[j] = nodes[j + 1];
                    nodes[j + 1] = tempI;
                    tempF = dists[j];
                    dists[j] = dists[j + 1];
                    dists[j + 1] = tempF;
                    tempR = ref[j];
                    ref[j] = ref[j + 1];
                    ref[j + 1] = tempR;
                }
            }
        }
        return ref;
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    String readRss(URL url) {
        String html = ""<html><body><h2>No data</h2></body></html>"";
        try {
            mLogger.info(""URL is:"" + url.toString());
            BufferedReader inStream = new BufferedReader(new InputStreamReader(url.openStream()), 1024);
            String line;
            StringBuilder rssFeed = new StringBuilder();
            while ((line = inStream.readLine()) != null) {
                rssFeed.append(line);
            }
            html = rssFeed.toString();
        } catch (IOException ex) {
            mLogger.warning(""Couldn't open an RSS stream"");
        }
        return html;
    }
",0.0
"    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
","    public static void creme_connect(String email, String username, String password, String IDnumber, TRP[] trp_array, GTRN[] gtrn_array, FLUX[] flux_array, TRANS[] trans_array, LETSPEC[] letspec_array, PUP[] pup_array, HUP[] hup_array, DOSE[] dose_array) {
        int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length + dose_array.length;
        int index = 0;
        String[] files_to_upload = new String[num_of_files];
        for (int a = 0; a < trp_array.length; a++) {
            files_to_upload[index] = trp_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < gtrn_array.length; a++) {
            files_to_upload[index] = gtrn_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < flux_array.length; a++) {
            files_to_upload[index] = flux_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < trans_array.length; a++) {
            files_to_upload[index] = trans_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < letspec_array.length; a++) {
            files_to_upload[index] = letspec_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < pup_array.length; a++) {
            files_to_upload[index] = pup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < hup_array.length; a++) {
            files_to_upload[index] = hup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < dose_array.length; a++) {
            files_to_upload[index] = dose_array[a].getThisFileName();
            index++;
        }
        Logger log = Logger.getLogger(CreateAStudy.class);
        String host = ""creme96.nrl.navy.mil"";
        String user = ""anonymous"";
        String ftppass = email;
        Logger.setLevel(Level.ALL);
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setRemoteHost(host);
            FTPMessageCollector listener = new FTPMessageCollector();
            ftp.setMessageListener(listener);
            log.info(""Connecting"");
            ftp.connect();
            log.info(""Logging in"");
            ftp.login(user, ftppass);
            log.debug(""Setting up passive, ASCII transfers"");
            ftp.setConnectMode(FTPConnectMode.ACTIVE);
            ftp.setType(FTPTransferType.BINARY);
            log.info(""Putting file"");
            for (int u = 0; u < files_to_upload.length; u++) {
                ftp.put(files_to_upload[u], files_to_upload[u]);
            }
            log.info(""Quitting client"");
            ftp.quit();
            log.debug(""Listener log:"");
            log.info(""Test complete"");
        } catch (Exception e) {
            log.error(""Demo failed"", e);
            e.printStackTrace();
        }
        System.out.println(""Finished FTPing User Request Files to common directory"");
        Upload_Files.upload(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished transfering User Request Files to your CREME96 personal directory"");
        RunRoutines.routines(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished running all of your uploaded routines"");
    }
",0.0
"    public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException {
        codebase = url;
        InputStream in;
        if (connect != null) {
            in = connect.getInputStream();
        } else {
            in = url.openStream();
        }
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputSource source = new InputSource(in);
        Document document = builder.parse(source);
        in.close();
        QDataSet result = null;
        NodeList kids = document.getChildNodes();
        for (int i = 0; i < kids.getLength(); i++) {
            Node n = kids.item(i);
            if (n.getNodeName().equals(""netcdf"")) {
                result = netcdf(n);
            }
        }
        return result;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public static long[] getUidsNearMe(String myUid, double lat, double lon) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(UIDS_NEARME_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""latitude"", Double.toString(lat)));
        parameters.add(new BasicNameValuePair(""longitude"", Double.toString(lon)));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            long[] friends = new long[result.length()];
            int uid = Integer.parseInt(myUid);
            for (int i = 0; i < result.length(); i++) {
                if (uid != result.getInt(i)) {
                    friends[i] = result.getInt(i);
                }
            }
            return friends;
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
","    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {
        String sessionUrl = getSessionTokenUrl(protocol, domain);
        URL url = new URL(sessionUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");
        httpConn.setRequestProperty(""Authorization"", header);
        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());
        }
        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));
        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\n"", ""="", true);
        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);
        return parsedTokens.get(""token"");
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",0.0
"    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug(""File does not exist: "" + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException {
        if (params == null) params = new DjatokaEncodeParam();
        if (params.getLevels() == 0) params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()));
        File in = null;
        File out = null;
        try {
            in = IOUtils.createTempTiff(bi);
            out = File.createTempFile(""tmp"", "".jp2"");
            compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params);
            IOUtils.copyStream(new FileInputStream(out), output);
        } catch (IOException e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        } catch (Exception e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        }
        if (in != null) in.delete();
        if (out != null) out.delete();
    }
",1.0
"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
","    private void publish() {
        if (uploadPrototypeBox.isSelected()) {
            try {
                URL url = new URL(prototypeURLField.getText());
                prototypeURLField.recordText();
                PrintStream ps;
                HttpURLConnection huc = null;
                if (url.getProtocol().equals(""file"")) {
                    ps = new PrintStream(new FileOutputStream(url.getFile()));
                } else {
                    URLConnection urlc = url.openConnection();
                    urlc.setDoOutput(true);
                    if (urlc instanceof HttpURLConnection) {
                        huc = ((HttpURLConnection) urlc);
                        huc.setRequestMethod(""PUT"");
                    }
                    ps = new PrintStream(urlc.getOutputStream());
                }
                target.writePrototype(ps);
                if (huc != null) {
                    huc.getResponseCode();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Uploading Prototype"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (postMetadataBox.isSelected()) {
            try {
                Hashtable env = new Hashtable();
                env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
                env.put(Context.PROVIDER_URL, directoryURLField.getText());
                env.put(Context.SECURITY_PRINCIPAL, directoryPrincipalField.getText());
                env.put(Context.SECURITY_CREDENTIALS, directoryCredentialsField.getText());
                InitialDirContext dirContext = new InitialDirContext(env);
                Preferences prefs = Preferences.userNodeForPackage(getClass());
                prefs.put(""directoryURL"", directoryURLField.getText());
                prefs.put(""directoryPrincipal"", directoryPrincipalField.getText());
                prefs.put(""directoryCredentials"", directoryCredentialsField.getText());
                BasicAttributes attr = new BasicAttributes();
                attr.put(OBJECT_CLASS, RDS_RESOURCE);
                attr.put(CONTENT_TYPE, PROTOTYPE_TYPE);
                if (uploadPrototypeBox.isSelected()) {
                    attr.put(IMPLEMENTATION_URL, prototypeURLField.getText());
                }
                DefaultTableModel dtm = (DefaultTableModel) attributesTable.getModel();
                Preferences attrPrefs = prefs.node(""attributes"");
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    attr.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                    attrPrefs.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                }
                NameParser np = dirContext.getNameParser("""");
                Enumeration comps = new ResourceName(prototypeNameField.getText()).getAll();
                prototypeNameField.recordText();
                Name resourcedn = np.parse("""");
                while (comps.hasMoreElements()) {
                    resourcedn.add(RC + ""="" + (String) comps.nextElement());
                    try {
                        dirContext.createSubcontext(resourcedn);
                    } catch (NameAlreadyBoundException nabe) {
                    }
                }
                dirContext.modifyAttributes(resourcedn, DirContext.REPLACE_ATTRIBUTE, attr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Posting Metadata"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
",0.0
"    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
","    public static void copy(String path1, String path2) throws IOException {
        FileReader in = new FileReader(path1);
        FileWriter out = new FileWriter(path2);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",1.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    @Validations(requiredFields = { @RequiredFieldValidator(fieldName = ""paymentType"", message = ""参数错误！"") })
    @InputConfig(resultName = ""error"")
    public String gateway() throws Exception {
        paymentConfig = paymentConfigService.load(paymentConfig.getId());
        if (paymentType == PaymentType.recharge) {
            if (amountPayable == null) {
                addActionError(""请输入充值金额！"");
                return ERROR;
            }
            if (amountPayable.compareTo(new BigDecimal(""0"")) <= 0) {
                addActionError(""充值金额必须大于0！"");
                return ERROR;
            }
            if (amountPayable.scale() > getSystemConfig().getOrderScale()) {
                addActionError(""充值金额小数位超出限制！"");
                return ERROR;
            }
            if (paymentConfig == null || StringUtils.isEmpty(paymentConfig.getId())) {
                addActionError(""请选择支付方式！"");
                return ERROR;
            }
            paymentConfig = paymentConfigService.load(paymentConfig.getId());
            if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit || paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = paymentConfig.getPaymentFee(amountPayable);
        } else if (paymentType == PaymentType.deposit) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() != PaymentConfigType.deposit) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            if (order.getOrderStatus() == OrderStatus.completed || order.getOrderStatus() == OrderStatus.invalid) {
                addActionError(""订单状态错误！"");
                return ERROR;
            }
            if (order.getPaymentStatus() == com.nodeshop.entity.Order.PaymentStatus.paid) {
                addActionError(""订单付款状态错误！"");
                return ERROR;
            }
            if (getLoginMember().getDeposit().compareTo(order.getTotalAmount().subtract(order.getPaidAmount())) < 0) {
                paymentResult = PaymentResult.failure;
                setResponseNoCache();
                return ""deposit_result"";
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getTotalAmount().subtract(paymentFee).subtract(order.getPaidAmount());
        } else if (paymentType == PaymentType.offline) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            if (order.getOrderStatus() == OrderStatus.completed || order.getOrderStatus() == OrderStatus.invalid) {
                addActionError(""订单状态错误！"");
                return ERROR;
            }
            if (order.getPaymentStatus() == com.nodeshop.entity.Order.PaymentStatus.paid) {
                addActionError(""订单付款状态错误！"");
                return ERROR;
            }
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() != PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getProductTotalPrice().add(order.getDeliveryFee()).subtract(order.getPaidAmount());
        } else if (paymentType == PaymentType.online) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit || paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getTotalAmount().subtract(paymentFee).subtract(order.getPaidAmount());
        }
        BigDecimal totalAmount = amountPayable.add(paymentFee);
        String description = null;
        String paymentUrl = null;
        if (paymentType == PaymentType.recharge) {
            description = getSystemConfig().getShopName() + ""预存款充值"";
        } else {
            description = getSystemConfig().getShopName() + ""订单支付（"" + order.getOrderSn() + ""）"";
        }
        Member loginMember = getLoginMember();
        if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit) {
            if (totalAmount.compareTo(order.getTotalAmount().subtract(order.getPaidAmount())) == 0) {
                order.setPaymentStatus(com.nodeshop.entity.Order.PaymentStatus.paid);
                order.setPaidAmount(order.getPaidAmount().add(totalAmount));
            } else if (totalAmount.compareTo(order.getTotalAmount()) < 0) {
                order.setPaymentStatus(com.nodeshop.entity.Order.PaymentStatus.partPayment);
                order.setPaidAmount(order.getPaidAmount().add(totalAmount));
            } else {
                addActionError(""交易金额错误！"");
                return ERROR;
            }
            orderService.update(order);
            loginMember.setDeposit(loginMember.getDeposit().subtract(totalAmount));
            memberService.update(loginMember);
            Deposit deposit = new Deposit();
            deposit.setDepositType(DepositType.memberPayment);
            deposit.setCredit(new BigDecimal(""0""));
            deposit.setDebit(amountPayable);
            deposit.setBalance(loginMember.getDeposit());
            deposit.setMember(loginMember);
            depositService.save(deposit);
            Payment payment = new Payment();
            payment.setPaymentType(paymentType);
            payment.setPaymentConfigName(paymentConfig.getName());
            payment.setBankName(null);
            payment.setBankAccount(null);
            payment.setTotalAmount(totalAmount);
            payment.setPaymentFee(paymentFee);
            payment.setPayer(getLoginMember().getUsername());
            payment.setOperator(null);
            payment.setMemo(null);
            payment.setPaymentStatus(PaymentStatus.success);
            payment.setPaymentConfig(paymentConfig);
            payment.setDeposit(deposit);
            payment.setOrder(order);
            paymentService.save(payment);
            if (getSystemConfig().getStoreFreezeTime() == StoreFreezeTime.payment) {
                for (OrderItem orderItem : order.getOrderItemSet()) {
                    Product product = orderItem.getProduct();
                    if (product.getStore() != null) {
                        product.setFreezeStore(product.getFreezeStore() + orderItem.getProductQuantity());
                        if (product.getIsOutOfStock()) {
                            Hibernate.initialize(orderItem.getProduct().getProductAttributeMapStore());
                        }
                        productService.update(product);
                        if (product.getIsOutOfStock()) {
                            flushCache();
                            htmlService.productContentBuildHtml(product);
                        }
                    }
                }
            }
            OrderLog orderLog = new OrderLog();
            orderLog.setOrderLogType(OrderLogType.payment);
            orderLog.setOrderSn(order.getOrderSn());
            orderLog.setOperator(null);
            orderLog.setInfo(""支付总金额："" + payment.getTotalAmount());
            orderLog.setOrder(order);
            orderLogService.save(orderLog);
            paymentResult = PaymentResult.success;
            setResponseNoCache();
            return ""deposit_result"";
        } else if (paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
            paymentResult = PaymentResult.success;
            return ""offline_result"";
        } else if (paymentConfig.getPaymentConfigType() == PaymentConfigType.tenpay) {
            TenpayConfig tenpayConfig = (TenpayConfig) paymentConfig.getConfigObject();
            Payment payment = new Payment();
            payment.setPaymentType(paymentType);
            payment.setPaymentConfigName(paymentConfig.getName());
            payment.setBankName(getText(""PaymentConfigType.tenpay""));
            payment.setBankAccount(tenpayConfig.getBargainorId());
            payment.setTotalAmount(totalAmount);
            payment.setPaymentFee(paymentFee);
            payment.setPayer(getLoginMember().getUsername());
            payment.setOperator(null);
            payment.setMemo(null);
            payment.setPaymentStatus(PaymentStatus.ready);
            payment.setPaymentConfig(paymentConfig);
            payment.setDeposit(null);
            if (paymentType == PaymentType.recharge) {
                payment.setOrder(null);
            } else {
                payment.setOrder(order);
            }
            paymentService.save(payment);
            String ip = getRequest().getRemoteAddr();
            if (tenpayConfig.getTenpayType() == TenpayType.direct) {
                paymentUrl = paymentConfigService.buildTenpayDirectPaymentUrl(paymentConfig, payment.getPaymentSn(), totalAmount, description, ip);
            } else {
                paymentUrl = paymentConfigService.buildTenpayPartnerPaymentUrl(paymentConfig, payment.getPaymentSn(), totalAmount, description);
            }
            setResponseNoCache();
            getResponse().sendRedirect(paymentUrl);
        }
        try {
            String urlString = ""123efakiaHR0cDovL3d3dy5zaG9weHgubmV0L2NlcnRpZmljYXRlLmFjdGlvbj9zaG9wVXJsPQ"";
            BASE64Decoder bASE64Decoder = new BASE64Decoder();
            urlString = new String(bASE64Decoder.decodeBuffer(StringUtils.substring(urlString, 8) + ""==""));
            URL url = new URL(urlString + SystemConfigUtil.getSystemConfig().getShopUrl());
            URLConnection urlConnection = url.openConnection();
            HttpURLConnection httpConnection = (HttpURLConnection) urlConnection;
            httpConnection.getResponseCode();
        } catch (IOException e) {
        }
        return null;
    }
",0.0
"    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty(""Content-Type"", ""text/xml"");
        urlConn.setRequestProperty(""charset"", ""utf-8"");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = ""<commit/>"";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",0.0
"    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setHeader(""Content-type"", ""application/force-download"");
        response.setHeader(""Content-disposition"", ""attachment"");
        response.setHeader(""filename"", ""export.txt"");
        response.setHeader(""Pragma"", ""no-cache"");
        response.setHeader(""Expires"", ""0"");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        InputStream x = baseRequest.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(x, writer);
        String theString = writer.toString();
        System.out.println(theString);
        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\n""));
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",1.0
"    public static final void copyFile(File source, File target) {
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(target).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (java.io.IOException e) {
        }
    }
","    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
",1.0
"    public static long[] getUidsNearMe(String myUid, double lat, double lon) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(UIDS_NEARME_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""latitude"", Double.toString(lat)));
        parameters.add(new BasicNameValuePair(""longitude"", Double.toString(lon)));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            long[] friends = new long[result.length()];
            int uid = Integer.parseInt(myUid);
            for (int i = 0; i < result.length(); i++) {
                if (uid != result.getInt(i)) {
                    friends[i] = result.getInt(i);
                }
            }
            return friends;
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
","    private String urlConnectionTranslate(String word) {
        try {
            URL url = new URL(""http://ajax.googleapis.com/ajax/services/"" + ""language/translate?v=1.0&q="" + word + ""&langpair=is%7Cen"");
            URLConnection connection = url.openConnection();
            connection.addRequestProperty(""Referer"", ""http://www.hi.is"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            JSONObject json = new JSONObject(builder.toString());
            return json.getJSONObject(""responseData"").getString(""translatedText"");
        } catch (Exception e) {
            Log.e(TranslatorApplication.tag, e.toString());
        }
        return null;
    }
",0.0
"        @Override
        public long getLastModified(final Resource arg0) {
            try {
                final ServletContext context = CContext.getInstance().getContext();
                final URL url = context.getResource(arg0.getName());
                final URLConnection conn = url.openConnection();
                final long lm = conn.getLastModified();
                try {
                    conn.getInputStream().close();
                } catch (final Exception ignore) {
                    ;
                }
                return lm;
            } catch (final Exception e) {
                return 0;
            }
        }
","    public byte[] generatePassword(String clave) {
        byte[] password = { 00 };
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(clave.getBytes());
            password = md5.digest();
            return password;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password;
    }
",0.0
"    @Test
    public void test_baseMaterialsForTypeName_NonExistingName() throws Exception {
        URL url = new URL(baseUrl + ""/baseMaterialsForTypeName/blah-blah"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(400));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(400));
    }
","    private String[] getHersheyFontNames() {
        String[] fontNames = null;
        URL url = HersheyFont.class.getResource(""futural.jhf"");
        String protocol = url.getProtocol();
        if (protocol.equals(""file"")) {
            File f = new File(url.getFile());
            f = f.getParentFile();
            FilenameFilter filter = new FilenameFilter() {

                public boolean accept(File dir, String name) {
                    return name.endsWith("".jhf"");
                }
            };
            String[] children = f.list(filter);
            if (children == null) {
                return null;
            }
            fontNames = new String[children.length];
            for (int i = 0; i < children.length; i++) {
                fontNames[i] = children[i].substring(0, children[i].length() - 4);
            }
        } else if (protocol.equals(""jar"")) {
            try {
                JarURLConnection jarURL = (JarURLConnection) url.openConnection();
                ZipFile zf = new ZipFile(jarURL.getJarFile().getName());
                Enumeration e = zf.entries();
                Vector namesVector = new Vector();
                while (e.hasMoreElements()) {
                    ZipEntry ze = (ZipEntry) e.nextElement();
                    String name = ze.getName();
                    if (name.startsWith(""visad/util/"") && name.endsWith("".jhf"")) {
                        namesVector.add(name.substring(11));
                    }
                }
                zf.close();
                if (namesVector.size() == 0) {
                    return null;
                }
                fontNames = new String[namesVector.size()];
                for (int i = 0; i < fontNames.length; i++) {
                    String name = (String) namesVector.elementAt(i);
                    fontNames[i] = name.substring(0, name.length() - 4);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
        } else {
            System.out.println(""Cannot locate the HersheyFonts."");
        }
        return fontNames;
    }
",0.0
"    public static InputStream gzip(final InputStream inputStream) throws IOException {
        Assert.notNull(inputStream, ""inputStream"");
        InputOutputStream inputOutputStream = new InputOutputStream();
        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);
        IOUtils.copy(inputStream, gzipOutputStream);
        gzipOutputStream.close();
        return inputOutputStream.getInputStream();
    }
","    @Override
    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean found = false;
        String name = getArgument(request.getPathInfo());
        if (StringUtils.contains(name, '/')) {
            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);
            if (file.exists() && file.isFile()) {
                found = true;
                MagicMatch match = Magic.getMagicMatch(file, true);
                response.setContentType(match.getMimeType());
                FileInputStream in = new FileInputStream(file);
                IOUtils.copyLarge(in, response.getOutputStream());
                in.close();
            }
        } else if (!StringUtils.isBlank(name)) {
            int articleId = NumberUtils.toInt(name);
            if (articleId > 0) {
                Article article = articleDao.load(articleId);
                if (article != null) {
                    found = true;
                    sendArticle(request, response, article);
                }
            }
        } else {
            int page = NumberUtils.toInt(request.getParameter(""page""), 0);
            Date fromDate = null;
            String from = request.getParameter(""from"");
            if (StringUtils.isNotBlank(from)) {
                try {
                    fromDate = dayMonthYearEn.parse(from);
                } catch (ParseException e) {
                }
            }
            Date untilDate = null;
            String until = request.getParameter(""until"");
            if (StringUtils.isNotBlank(until)) {
                try {
                    untilDate = dayMonthYearEn.parse(until);
                } catch (ParseException e) {
                }
            }
            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));
            found = true;
        }
        if (found != true) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",1.0
"    public String encryptToSHA(String info) {
        byte[] digesta = null;
        try {
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String rs = byte2hex(digesta);
        return rs;
    }
","    public MoteDeploymentConfiguration deleteMoteDeploymentConfiguration(int id) throws AdaptationException {
        MoteDeploymentConfiguration mdc = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""SELECT * FROM MoteDeploymentConfigurations "" + ""WHERE id = "" + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                String msg = ""Unable to select config to delete."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            mdc = getMoteDeploymentConfiguration(resultSet);
            query = ""DELETE FROM MoteDeploymentConfigurations "" + ""WHERE id = "" + id;
            statement.executeUpdate(query);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in deleteMoteDeploymentConfiguration"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return mdc;
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
",0.0
"    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
","    public static String[] getHints(String query) {
        try {
            URL url = new URL(""http://www.ebi.ac.uk/integr8/OrganismSearch.do?action=orgNames&orgName="" + query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String dest = new String();
            while ((inputLine = in.readLine()) != null) dest = dest.concat(inputLine);
            in.close();
            Matcher m = taxonPattern.matcher(dest);
            ArrayList<String> strings = new ArrayList<String>();
            while (m.find()) {
                strings.add(m.group(1));
            }
            return strings.toArray(new String[] {});
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new String[0];
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","        public void perform(Context context) {
            Long workflowIdParentProcess;
            SimpleProvider config;
            VariablesContext var;
            String xmldocument;
            Service service;
            Object[] param;
            String method;
            String wsurl;
            Object ret;
            Call call;
            URL url;
            try {
                var = Variables.getContext();
                if (var.get(""wsurl"") == null || var.get(""method"") == null) {
                    System.out.println(""----- Need the url of the webservice and the method! -----"");
                    log_.error(""Need the url of the webservice and the method!"");
                    return;
                }
                method = var.get(""method"");
                wsurl = var.get(""wsurl"");
                url = new java.net.URL(wsurl);
                try {
                    url.openConnection().connect();
                } catch (IOException ex) {
                    System.out.println(""----- Could not connect to the webservice! -----"");
                    log_.error(""Could not connect to the webservice!"");
                    return;
                }
                if (var.get(""param0"") == null || var.get(""param1"") == null) {
                    System.out.println(""----- Need parameters! -----"");
                    log_.error(""Need parameters!"");
                    return;
                }
                xmldocument = var.get(""param0"");
                workflowIdParentProcess = new Long(var.get(""param1""));
                param = new Object[] { xmldocument, workflowIdParentProcess };
                config = new SimpleProvider();
                config.deployTransport(""http"", new HTTPSender());
                service = new Service(config);
                call = (Call) service.createCall();
                call.setTargetEndpointAddress(new java.net.URL(wsurl));
                call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));
                try {
                    ret = call.invoke(param);
                    context.set(CTX_ANSW, ""=> notifyIhk invoked - Result: "" + ret);
                    System.out.println(""----- notifyIhk invoked! -----"");
                    log_.info(""notifyIhk invoked!"");
                } catch (RemoteException ex) {
                    System.out.println(""----- Could not invoke the method! -----"");
                    log_.error(""Could not invoke the method!"");
                }
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
",0.0
"    public static boolean Copy(String __from, String __to) {
        try {
            int bytesum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(__from);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(__from);
                FileOutputStream fs = new FileOutputStream(__to);
                byte[] buffer = new byte[1024];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
","    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
",0.0
"    private void updateHoraatendo(Integer codemp, Integer codfilial, Integer codatendo, String horaatendo, String horaatendofin) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(""update atatendimento set horaatendo=?, horaatendofin=? "");
        sql.append(""where codemp=? and codfilial=? and codatendo=?"");
        PreparedStatement ps = getConn().prepareStatement(sql.toString());
        ps.setTime(1, Funcoes.strTimeToSqlTime(horaatendo, false));
        ps.setTime(2, Funcoes.strTimeToSqlTime(horaatendofin, false));
        ps.setInt(3, codemp);
        ps.setInt(4, codfilial);
        ps.setInt(5, codatendo);
        ps.executeUpdate();
        ps.close();
        try {
            getConn().commit();
        } catch (SQLException e) {
            getConn().rollback();
        }
    }
","    private void native2ascii(LanguageInfo info) {
        if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");
        InputStream in = null;
        OutputStream out = null;
        print(""\tConverting to ASCII... "");
        try {
            in = new BufferedInputStream(new FileInputStream(info.getFileName()));
            in.mark(3);
            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));
            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));
            String read;
            while ((read = reader.readLine()) != null) {
                writer.write(ascii(read));
                writer.newLine();
            }
            writer.flush();
            out.flush();
            println(""... done!"");
        } catch (IOException ignored) {
            println(""... error! ("" + ignored.getMessage() + "")"");
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException ignored) {
            }
            if (out != null) try {
                out.close();
            } catch (IOException ignored) {
            }
        }
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private void copy(final File file) throws IOException {
        String targetFilename = targetFilename(file);
        FileInputStream fis = new FileInputStream(file);
        try {
            FileChannel source = fis.getChannel();
            try {
                FileOutputStream fos = new FileOutputStream(targetFilename);
                try {
                    FileChannel target = fos.getChannel();
                    try {
                        target.transferFrom(source, 0, source.size());
                    } finally {
                        target.close();
                    }
                } finally {
                    fos.close();
                }
            } finally {
                source.close();
            }
        } finally {
            fis.close();
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","        private String findTitle(URL url) {
            HTMLEditorKit.ParserCallback callback;
            try {
                URLConnection conn = url.openConnection();
                Reader rd = new InputStreamReader(conn.getInputStream());
                ParserDelegator parser = new ParserDelegator();
                callback = new Callback();
                parser.parse(rd, callback, true);
            } catch (Exception exp) {
                System.err.println(exp);
            }
            return title;
        }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    private static String digest(String val) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(val.trim().getBytes());
            byte[] digest = md.digest();
            StringBuffer buf = new StringBuffer();
            for (byte b : digest) {
                String hexString = Integer.toHexString(b);
                int length = hexString.length();
                if (length > 2) {
                    hexString = hexString.substring(length - 2, length);
                } else if (length < 2) {
                    hexString = ""0"" + hexString;
                }
                buf.append(hexString);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new EnerjyException(""Could not create digest: MD5"", e);
        }
    }
",0.0
"    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim().toLowerCase();
            if ((name.indexOf(""file:"") >= 0) || (name.indexOf("":/"") > 0)) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
","    public HogsCustomizer() {
        m_filename = PathFinder.getCustsFile();
        m_currenttaunts = new String[10];
        m_textfields = new JTextField[10];
        m_color = new Color(255, 255, 255);
        boolean exists = (new File(m_filename)).exists();
        m_inverted = false;
        m_chooser = new JColorChooser();
        AbstractColorChooserPanel[] panels = m_chooser.getChooserPanels();
        m_chooser.removeChooserPanel(panels[0]);
        m_chooser.removeChooserPanel(panels[2]);
        m_chooser.setPreviewPanel(new JPanel());
        Reader reader = null;
        if (exists) {
            try {
                reader = new FileReader(m_filename);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        } else {
            Object[] options = { ""Yes"", ""No, Thanks"" };
            int n = JOptionPane.showOptionDialog(this, ""You do not have a customization file in your home directory.\n                 "" + ""Would you like to create one?"", ""Hogs Customization"", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
            if (n == 0) {
                try {
                    FileChannel srcChannel = new FileInputStream(HogsConstants.CUSTS_TEMPLATE).getChannel();
                    FileChannel dstChannel = new FileOutputStream(m_filename).getChannel();
                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
                    srcChannel.close();
                    dstChannel.close();
                } catch (IOException e) {
                    e.printStackTrace();
                    System.exit(0);
                }
            } else {
                System.exit(0);
            }
            try {
                reader = new FileReader(m_filename);
            } catch (FileNotFoundException e1) {
                e1.printStackTrace();
                System.exit(0);
            }
        }
        try {
            readFromFile(reader);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }
        Box mainpanel = Box.createVerticalBox();
        mainpanel.add(buildTauntsPanel());
        mainpanel.add(buildMouseStylePanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildColorPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        mainpanel.add(buildButtonsPanel());
        mainpanel.add(Box.createVerticalStrut(10));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setContentPane(mainpanel);
        this.pack();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - (this.getWidth() / 2), dim.height / 2 - (this.getHeight() / 2));
        this.setTitle(""Hogs Customizer"");
        this.setVisible(true);
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",0.0
"    public static String sha1(String input) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(input.getBytes(""UTF-8""), 0, input.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {
        InputStream is = null;
        try {
            URL url = new URL(jad.getJarURL());
            URLConnection conn = url.openConnection();
            if (url.getUserInfo() != null) {
                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes(""UTF-8"")));
                conn.setRequestProperty(""Authorization"", ""Basic "" + userInfo);
            }
            is = conn.getInputStream();
            File tmpDir = null;
            String systemTmpDir = MIDletSystemProperties.getSystemProperty(""java.io.tmpdir"");
            if (systemTmpDir != null) {
                tmpDir = new File(systemTmpDir, ""microemulator-apps"");
                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {
                    tmpDir = null;
                }
            }
            File tmp = File.createTempFile(""me2-app-"", "".jar"", tmpDir);
            tmp.deleteOnExit();
            IOUtils.copyToFile(is, tmp);
            return IOUtils.getCanonicalFileClassLoaderURL(tmp);
        } catch (IOException e) {
            if (reportError) {
                Message.error(""Unable to open jar "" + jarUrl, e);
            }
            return null;
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
",0.0
"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest encript = MessageDigest.getInstance(""MD5"");
        encript.update(password.getBytes());
        byte[] b = encript.digest();
        int size = b.length;
        StringBuffer h = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            h.append(b[i]);
        }
        return h.toString();
    }
","    @Override
    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException {
        String context = request.getContextPath();
        String resource = request.getRequestURI().replace(context, """");
        resource = resource.replaceAll(RESOURCES_PATH + ""/"", """");
        if ((StringUtils.isEmpty(resource)) || (resource.endsWith(""/""))) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        this.getLogger().info(""Getting resource: "" + resource);
        URL url = ClassLoaderUtils.getResource(resource);
        if (url == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        InputStream input = url.openStream();
        OutputStream output = response.getOutputStream();
        URLConnection connection = url.openConnection();
        String contentEncoding = connection.getContentEncoding();
        int contentLength = connection.getContentLength();
        String contentType = connection.getContentType();
        if (contentEncoding != null) {
            response.setCharacterEncoding(contentEncoding);
        }
        response.setContentLength(contentLength);
        response.setContentType(contentType);
        IOUtils.copy(input, output, true);
    }
",0.0
"    public boolean actualizarRondaActual(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    protected void loadText(final Element elem) {
        final String urlAttr = elem.getAttributeValue(""url"");
        if (urlAttr != null) {
            String result = """";
            try {
                final URL url = new URL(DatabaseViewerManager.baseURL, urlAttr);
                final BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = reader.readLine();
                while (line != null) {
                    result += line + ""\n"";
                    line = reader.readLine();
                }
                elem.addContent(result);
                elem.removeAttribute(""url"");
            } catch (final Exception e) {
                throw new RuntimeException(""Could not insert text template for database viewer from file"", e);
            }
        }
    }
",0.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {
        long mgr = Constants.MANAGER;
        Data data, response;
        try {
            response = sendAndWait(new Request(mgr)).get(0);
            MessageDigest md;
            try {
                md = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""MD5 hash not supported."");
            }
            byte[] challenge = response.getBytes();
            md.update(challenge);
            md.update(password.getBytes(Data.STRING_ENCODING));
            try {
                data = Data.valueOf(md.digest());
                response = sendAndWait(new Request(mgr).add(0, data)).get(0);
            } catch (ExecutionException ex) {
                throw new IncorrectPasswordException();
            }
            loginMessage = response.getString();
            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);
            ID = response.getWord();
        } catch (InterruptedException ex) {
            throw new LoginFailedException(ex);
        } catch (ExecutionException ex) {
            throw new LoginFailedException(ex);
        } catch (IOException ex) {
            throw new LoginFailedException(ex);
        }
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    private void loadDDL() throws IOException {
        try {
            conn.createStatement().executeQuery(""SELECT * FROM reporters"").close();
        } catch (SQLException e) {
            Statement stmt = null;
            if (!e.getMessage().matches(ERR_MISSING_TABLE)) {
                String msg = ""Error on initial data store read"";
                LOG.fatal(msg, e);
                throw new IOException(msg, e);
            }
            String[] qry = { ""CREATE TABLE reporters (type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, data LONG VARCHAR, PRIMARY KEY(type, key))"", ""CREATE TABLE listeners (event VARCHAR(255) NOT NULL, type LONG VARCHAR NOT NULL, key LONG VARCHAR NOT NULL, PRIMARY KEY(event, type, key))"", ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))"", ""INSERT INTO settings (var, val) VALUES ('schema', '1')"" };
            try {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                for (String q : qry) {
                    logQry(q);
                    stmt.executeUpdate(q);
                }
                conn.commit();
            } catch (SQLException e2) {
                String msg = ""Error initializing data store"";
                try {
                    conn.rollback();
                } catch (SQLException e3) {
                    LOG.fatal(msg, e3);
                }
                LOG.fatal(msg, e2);
                throw new IOException(msg);
            } finally {
                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException e4) {
                        String msg = ""Unable to cleanup data store resources"";
                        LOG.fatal(msg, e4);
                        throw new IOException(msg);
                    }
                }
                try {
                    conn.setAutoCommit(true);
                } catch (SQLException e3) {
                    String msg = ""Unable to reset data store auto commit"";
                    LOG.fatal(msg, e3);
                    throw new IOException(msg);
                }
            }
        }
        return;
    }
",0.0
"    private void copy(File from, File to) throws FileNotFoundException, IOException {
        FileReader in;
        in = new FileReader(from);
        FileWriter out = new FileWriter(to);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    public HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        String url = getTileUrl(zoom, tilex, tiley);
        if (url == null) return null;
        return (HttpURLConnection) new URL(url).openConnection();
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",1.0
"    public boolean copyOneOfMyFile(File f, String dest) {
        if (!ownsThisFile(f.getName())) return false;
        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);
        try {
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));
            int len = 1024;
            byte[] read = new byte[len];
            while ((len = in.read(read)) > 0) out.write(read, 0, len);
            out.flush();
            out.close();
            in.close();
            if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());
        } catch (IOException e) {
            System.out.println(""copy directory : "" + e);
            return false;
        }
        return true;
    }
","    private void makeQuery(String query) {
        System.out.println("" Querying for "" + query);
        try {
            query = URLEncoder.encode(query, ""UTF-8"");
            for (int k = 0; k < 100; k++) {
                System.out.println(query);
                URL url = new URL(""http://ajax.googleapis.com/ajax/services/search/web?start="" + k * 8 + ""&rsz=large&v=1.0&q="" + query);
                URLConnection connection = url.openConnection();
                connection.addRequestProperty(""Referer"", HTTP_REFERER);
                String line;
                StringBuilder builder = new StringBuilder();
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    builder.append(line);
                }
                String response = builder.toString();
                JSONObject json = new JSONObject(response);
                if (k == 0) {
                    result = ""Total results = "" + json.getJSONObject(""responseData"").getJSONObject(""cursor"").getString(""estimatedResultCount"") + ""\n"";
                }
                JSONArray ja = json.getJSONObject(""responseData"").getJSONArray(""results"");
                jsonres = ja;
                for (int i = 0; i < ja.length(); i++) {
                    System.out.print((i + 1) + "". "");
                    JSONObject j = ja.getJSONObject(i);
                    result = result + j.getString(""titleNoFormatting"") + "" "";
                    result = result + j.getString(""url"") + ""\n"";
                    result = result + j.getString(""content"") + ""\n\n"";
                }
            }
        } catch (Exception e) {
            System.err.println(""Something went wrong..."");
            e.printStackTrace();
        }
    }
",0.0
"    public String getSHA1Hex(String original) {
        MessageDigest digest;
        String result = """";
        try {
            digest = MessageDigest.getInstance(""sha1"");
            digest.reset();
            digest.update(original.getBytes());
            byte[] dig = digest.digest();
            String hexStr = """";
            for (int i = 0; i < dig.length; i++) {
                hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);
            }
            result = hexStr;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return result;
    }
","    public DBAccess(String pathToDb) {
        if (instance != null) {
            throw new IllegalStateException();
        }
        System.setProperty(""derby.system.home"", pathToDb);
        try {
            boolean exists = new File(pathToDb).exists();
            new EmbeddedDriver();
            Properties props = new Properties();
            if (exists) {
                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);
                connection.setAutoCommit(true);
                Statement statement = connection.createStatement();
                try {
                } finally {
                    statement.close();
                }
            } else {
                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);
                connection.setAutoCommit(true);
                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuilder query = new StringBuilder();
                for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                    if (query.length() > 0) {
                        query.append('\n');
                    }
                    query.append(s);
                }
                reader.close();
                Statement statement = connection.createStatement();
                try {
                    String[] statements = query.toString().split("";(\\s)*"");
                    for (String s : statements) {
                        statement.execute(s);
                    }
                } finally {
                    statement.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        instance = this;
    }
",0.0
"    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        String text = new String();
        byte[] sha1hash = new byte[20];
        text = key + GUUI;
        md.update(text.getBytes(), 0, text.length());
        sha1hash = md.digest();
        return (Helper.getBASE64(sha1hash));
    }
","    public void connect(final URLConnectAdapter urlAdapter) {
        if (this.connectSettings == null) {
            throw new IllegalStateException(""Invalid Connect Settings (is null)"");
        }
        final HttpURLConnection httpConnection = (HttpURLConnection) urlAdapter.openConnection();
        BufferedReader in;
        try {
            in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream()));
            final StringBuilder buf = new StringBuilder(200);
            String str;
            while ((str = in.readLine()) != null) {
                buf.append(str);
                buf.append('\n');
            }
            final ConnectResult result = new ConnectResult(httpConnection.getResponseCode(), buf.toString());
            final Map<String, List<String>> headerFields = httpConnection.getHeaderFields();
            for (Map.Entry<String, List<String>> entry : headerFields.entrySet()) {
                final String key = entry.getKey();
                final List<String> val = entry.getValue();
                if ((val != null) && (val.size() > 1)) {
                    System.out.println(""WARN: Invalid header value : "" + key + "" url="" + this.connectSettings.getUrl());
                }
                if (key != null) {
                    result.addHeader(key, val.get(0), val);
                } else {
                    result.addHeader(""Status"", val.get(0), val);
                }
            }
            this.lastResult = result;
        } catch (IOException e) {
            throw new ConnectException(e);
        }
    }
",0.0
"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
","    private void copySon(File parent) {
        System.out.println(""parent---"" + parent.getAbsolutePath());
        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {
            File cases = new File(parent, ""cases"");
            if (cases.exists()) {
                File answers = new File(parent, ""answers"");
                if (!answers.exists()) {
                    answers.mkdir();
                    File answers_linux = new File(parent, ""answers_linux"");
                    for (File file : answers_linux.listFiles()) {
                        if (file.isDirectory()) {
                            continue;
                        }
                        File target = new File(answers, file.getName());
                        try {
                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));
                        } catch (Throwable t) {
                            t.printStackTrace();
                        }
                    }
                }
            } else {
                for (File son : parent.listFiles()) {
                    System.out.println(""parent---"" + son.getAbsolutePath());
                    copySon(son);
                }
            }
        }
    }
",1.0
"    public QDataSet doRead(URL url, URLConnection connect) throws IOException, ParserConfigurationException, SAXException {
        codebase = url;
        InputStream in;
        if (connect != null) {
            in = connect.getInputStream();
        } else {
            in = url.openStream();
        }
        DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputSource source = new InputSource(in);
        Document document = builder.parse(source);
        in.close();
        QDataSet result = null;
        NodeList kids = document.getChildNodes();
        for (int i = 0; i < kids.getLength(); i++) {
            Node n = kids.item(i);
            if (n.getNodeName().equals(""netcdf"")) {
                result = netcdf(n);
            }
        }
        return result;
    }
","    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    private void getEventHeapsFromWeb() {
        try {
            URL url = getServersURL();
            InputStream in = url.openStream();
            Document doc = factory.newDocumentBuilder().parse(in);
            readFromDocument(doc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",0.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public static boolean insert(final PedidoSituacao pedidoSituacao) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = ""insert into pedido_situacao (id_pedido, id_situacao, em, observacao, id_funcionario) "" + ""values (?, ? , now(), ?, ?) "";
            pst = c.prepareStatement(sql);
            pst.setInt(1, pedidoSituacao.getPedido().getCodigo());
            pst.setInt(2, pedidoSituacao.getSituacao().getCodigo());
            pst.setString(3, pedidoSituacao.getObservacao());
            pst.setInt(4, pedidoSituacao.getFuncionario().getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[PedidoSituacaoDAO.insert] Erro ao inserir -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
",1.0
"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
","    public static String readFromURL(String sURL) {
        logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");
        String sWebPage = """";
        try {
            URL url = new URL(sURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                sWebPage += inputLine;
            }
            in.close();
        } catch (Exception e) {
            logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);
        }
        logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");
        return sWebPage;
    }
",1.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public void saveFile(final InputStream inputStream, final String fileName) {
        final File file = new File(System.getProperty(""java.io.tmpdir"") + File.separator + fileName);
        FileOutputStream fileOut = null;
        try {
            fileOut = new FileOutputStream(file);
            IOUtils.copy(inputStream, fileOut);
        } catch (FileNotFoundException e) {
            LOGGER.error(""saveFile() - File Not Found."" + e);
        } catch (IOException e) {
            LOGGER.error(""saveFile() - Error while saving file."" + e);
        } finally {
            try {
                inputStream.close();
                if (fileOut != null) {
                    fileOut.close();
                }
            } catch (IOException e) {
                LOGGER.error(e);
            }
        }
    }
",0.0
"    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel ic = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
","    public void run_two() {
        System.out.println(""Waiting to see if server has logged in"");
        if (rept != null) {
            rept.post(""Checking if RegServer is online.."");
        }
        try {
            boolean waiting = true;
            while (waiting) {
                String con = """";
                String s;
                URL url = new URL(where);
                BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
                System.out.print(""Checking for xRegistry.."");
                if (rept != null) {
                    rept.post(""Searching for xRegistryServer.."");
                }
                while ((s = br.readLine()) != null) {
                    con = con + s;
                }
                err_catch = con;
                try {
                    br.close();
                } catch (IOException ioe) {
                    System.out.print(""..b_r wouldn't close.."");
                }
                servers = xls.split(""SERVER"", con);
                if (servers.length < 1) {
                    System.out.println(""-->Server not available yet."");
                    if (rept != null) {
                        rept.post(""-->Server currently unavailable.."");
                    }
                    try {
                        Thread.sleep(read_delay);
                    } catch (Exception inter) {
                    }
                    if (read_delay < 20000) {
                        read_delay = read_delay * 2;
                        if (debug == true) {
                            System.out.println(""Set read_delay to:"" + read_delay);
                        }
                    } else {
                        read_delay = read_delay + 3000;
                    }
                    if (read_delay > 90000) {
                        waiting = false;
                    }
                }
                if (servers.length > 0) {
                    waiting = false;
                }
            }
            String[] regip = xls.split(""IP"", servers[0]);
            String[] regport = xls.split(""PORT"", servers[0]);
            int rp = 0;
            try {
                rp = Integer.parseInt(regport[0]);
            } catch (NumberFormatException nfe) {
                rp = 0;
            }
            System.out.println(""Trying for socket on "" + regip[0] + "", port:"" + rp);
            if (rept != null) {
                rept.post(""Connecting to RegServer"");
            }
            int f = 0;
            Socket client = new Socket(InetAddress.getByName(regip[0]), rp);
            System.out.println(""Socket connected to xRegistry"");
            if (rept != null) {
                rept.post(""Connected to RegServer"");
            }
            xcc = new xClientConn(client);
            xcc.set_IP(ipad);
            xcc.set_Port(port);
            xcc.setListen(this);
            new Thread(xcc).start();
        } catch (Exception e) {
            System.out.println(""Failed client connection to registry, 'Java' errorcodes:\n"" + e.toString() + ""\n\nMessage from server?:\n"" + err_catch);
            if (rept != null) {
                rept.post(""Failed at registry connect!"");
            }
            if (debug == true) {
                e.printStackTrace();
            }
            term();
        }
    }
",0.0
"    public String accessURL_Post(String url, Map<String, String> keyValue, String encoding) throws Throwable {
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        for (String key : keyValue.keySet()) {
            formparams.add(new BasicNameValuePair(key, keyValue.get(key)));
        }
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, encoding);
        HttpPost httpPost = new HttpPost(url);
        httpPost.setEntity(entity);
        HttpResponse response = client.execute(httpPost);
        String entuity = EntityUtils.toString(response.getEntity());
        handleHeaders(response.getAllHeaders());
        return entuity;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",0.0
"    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
","    public static String hashSourceCode(String source) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            return new sun.misc.BASE64Encoder().encode(md.digest());
        } catch (NoSuchAlgorithmException e) {
            _log.error(""Failed to generate hashcode."", e);
        }
        return null;
    }
",0.0
"    protected void loadXmlFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            xmlSource = new StreamSource(rd);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
","    public static final boolean copyFileNio(File src, File dst) throws IOException {
        FileChannel srcChannel = null, dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            {
                int safe_max = (64 * 1024 * 1024) / 4;
                long size = srcChannel.size();
                long position = 0;
                while (position < size) {
                    position += srcChannel.transferTo(position, safe_max, dstChannel);
                }
            }
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            return true;
        } finally {
            try {
                if (srcChannel != null) srcChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
            try {
                if (dstChannel != null) dstChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
        }
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
",0.0
"    public static SlimModCollection parseSlimModification(URL url) {
        try {
            Scanner scanner = new Scanner(url.openStream());
            return parseSlimModification(scanner);
        } catch (IOException e) {
            throw new IllegalStateException(""Error reading slim file: "" + e.getMessage(), e);
        }
    }
","    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",0.0
"    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
","    public String getSHA1Hex(String original) {
        MessageDigest digest;
        String result = """";
        try {
            digest = MessageDigest.getInstance(""sha1"");
            digest.reset();
            digest.update(original.getBytes());
            byte[] dig = digest.digest();
            String hexStr = """";
            for (int i = 0; i < dig.length; i++) {
                hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);
            }
            result = hexStr;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return result;
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    private void upgradeSchema() {
        Statement stmt = null;
        boolean updatedSchema = false;
        try {
            int i = getSchema();
            if (i < SCHEMA_VERSION) {
                conn.setAutoCommit(false);
                stmt = conn.createStatement();
                updatedSchema = true;
            }
            while (i < SCHEMA_VERSION) {
                String qry;
                switch(i) {
                    case 0:
                        qry = ""CREATE TABLE settings (var VARCHAR(32) NOT NULL, val LONG VARCHAR)"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO settings (var, val) VALUES ('schema', '1')"";
                        stmt.executeUpdate(qry);
                        qry = ""ALTER TABLE recordings ADD COLUMN exe LONG VARCHAR NOT NULL DEFAULT '%UNKNOWN%'"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE files (id INT NOT NULL, file LONG VARCHAR NOT NULL, finished INT NOT NULL)"";
                        stmt.executeUpdate(qry);
                        updateFilesTable();
                        break;
                    case 1:
                        qry = ""ALTER TABLE files ADD COLUMN type VARCHAR(32) NOT NULL DEFAULT '%UNKNOWN%'"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '2' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 2:
                        qry = ""CREATE UNIQUE INDEX IF NOT EXISTS recordings_history ON recordings(id,type)"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE INDEX IF NOT EXISTS files_history ON files(id,type)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '3' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 3:
                        qry = ""CREATE TABLE log (id INTEGER PRIMARY KEY, context VARCHAR(16) NOT NULL, level VARCHAR(16) NOT NULL, time LONG INT NOT NULL, msg LONG VARCHAR NOT NULL, parent INT)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '4' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 4:
                        qry = ""CREATE UNIQUE INDEX IF NOT EXISTS log_id ON log(id)"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE INDEX IF NOT EXISTS log_parent ON log(parent)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '5' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 5:
                        qry = ""CREATE TABLE tmp_settings (var varchar(32) NOT NULL PRIMARY KEY, val varchar(128) NOT NULL)"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO tmp_settings SELECT var,val FROM settings"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE settings"";
                        stmt.executeUpdate(qry);
                        qry = ""ALTER TABLE tmp_settings RENAME TO settings"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '6' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 6:
                        qry = ""DROP TABLE log"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE log (id INTEGER PRIMARY KEY, mediaid varchar(32) NOT NULL, taskid varchar(32) NOT NULL, msg LONG VARCHAR NOT NULL)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '7' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 7:
                        qry = ""CREATE TABLE client (host varchar(255) PRIMARY KEY, conf LONG VARCHAR)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '8' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 8:
                        qry = ""DROP INDEX files_history"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP INDEX recordings_history"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE files"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE new_rec (id INT NOT NULL, type VARCHAR(32) NOT NULL, start INT NOT NULL DEFAULT 0, finish INT NOT NULL DEFAULT 0, state INT NOT NULL DEFAULT 1, PRIMARY KEY(id, type))"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO new_rec SELECT id, type, 0, 0, 1 FROM recordings"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE recordings"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE recordings (id INT NOT NULL, type VARCHAR(32) NOT NULL, start INT NOT NULL DEFAULT 0, finish INT NOT NULL DEFAULT 0, state INT NOT NULL DEFAULT 1, PRIMARY KEY(id, type))"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO recordings SELECT * FROM new_rec"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE new_rec"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE UNIQUE INDEX recordings_history on recordings(id,type)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '9' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 9:
                        qry = ""ALTER TABLE recordings ADD COLUMN host VARCHAR(255) NOT NULL DEFAULT ''"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '10' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 10:
                        qry = ""ALTER TABLE recordings ADD COLUMN airing VARCHAR(64) NOT NULL DEFAULT '0'"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '11' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 11:
                        PreparedStatement pstmt = null;
                        try {
                            MessageDigest msg = MessageDigest.getInstance(""MD5"");
                            msg.update(""sjqadmin"".getBytes());
                            String pwd = new String(msg.digest());
                            pstmt = conn.prepareStatement(""REPLACE INTO settings (var, val) VALUES ('password', ?)"");
                            pstmt.setString(1, pwd);
                            pstmt.executeUpdate();
                        } catch (NoSuchAlgorithmException e) {
                            throw new SQLException(e);
                        } finally {
                            if (pstmt != null) pstmt.close();
                        }
                        stmt.executeUpdate(""UPDATE settings SET val = '12' WHERE var = 'schema'"");
                        break;
                    case 12:
                        qry = ""CREATE INDEX logs_for_tasks ON log(mediaid, taskid)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '13' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 13:
                        qry = ""DELETE FROM log"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '14' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 14:
                        qry = ""DROP TABLE log"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE log (id INTEGER PRIMARY KEY, mediaid varchar(32) NOT NULL, taskid varchar(32) NOT NULL, msg LONG VARCHAR NOT NULL, ts INTEGER NOT NULL DEFAULT 0)"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE INDEX logs_by_date ON log(ts)"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE INDEX IF NOT EXISTS logs_for_tasks ON log(mediaid, taskid)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '15' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 15:
                        qry = ""DELETE FROM log WHERE mediaid = 0 AND taskid = '0'"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '16' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 16:
                        qry = ""CREATE TEMPORARY TABLE rec_tmp (objtype varchar(64) NOT NULL DEFAULT 'media', id INT NOT NULL, type VARCHAR(32) NOT NULL, start INT NOT NULL DEFAULT 0, finish INT NOT NULL DEFAULT 0, state INT NOT NULL DEFAULT 1, host VARCHAR(255) NOT NULL DEFAULT '', airing VARCHAR(64) NOT NULL DEFAULT '0', PRIMARY KEY (objtype, id, type))"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO rec_tmp SELECT 'media', id, type, start, finish, state, host, airing FROM recordings"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE recordings"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE TABLE recordings (objtype varchar(64) NOT NULL DEFAULT 'media', id INT NOT NULL, type VARCHAR(32) NOT NULL, start INT NOT NULL DEFAULT 0, finish INT NOT NULL DEFAULT 0, state INT NOT NULL DEFAULT 1, host VARCHAR(255) NOT NULL DEFAULT '', airing VARCHAR(64) NOT NULL DEFAULT '0', PRIMARY KEY (objtype, id, type))"";
                        stmt.executeUpdate(qry);
                        qry = ""INSERT INTO recordings SELECT * FROM rec_tmp"";
                        stmt.executeUpdate(qry);
                        qry = ""DROP TABLE rec_tmp"";
                        stmt.executeUpdate(qry);
                        qry = ""ALTER TABLE log ADD COLUMN objtype varchar(64) NOT NULL DEFAULT 'media'"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '17' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                    case 17:
                        qry = ""DROP INDEX logs_for_tasks"";
                        stmt.executeUpdate(qry);
                        qry = ""CREATE INDEX logs_for_tasks ON log(mediaid, taskid, objtype)"";
                        stmt.executeUpdate(qry);
                        qry = ""UPDATE settings SET val = '18' WHERE var = 'schema'"";
                        stmt.executeUpdate(qry);
                        break;
                }
                i++;
            }
            if (updatedSchema) conn.commit();
        } catch (SQLException e) {
            try {
                if (updatedSchema) conn.rollback();
            } catch (SQLException x) {
                LOG.fatal(""SQL error"", x);
            }
            LOG.fatal(""SQL error"", e);
            throw new RuntimeException(e);
        } finally {
            try {
                if (stmt != null) stmt.close();
                if (updatedSchema) conn.setAutoCommit(true);
            } catch (SQLException e) {
                LOG.fatal(""SQL error"", e);
                throw new RuntimeException(e);
            }
        }
    }
",1.0
"    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
","    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",1.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public static int[] simplex_reverse_sort(int[] vertices) {
        if (vertices.length <= 1) return vertices;
        for (int j = vertices.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                if (vertices[i + 1] > vertices[i]) {
                    int dummy = vertices[i];
                    vertices[i] = vertices[i + 1];
                    vertices[i + 1] = dummy;
                }
            }
        }
        return vertices;
    }
",0.0
"    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
","    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",0.0
"    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    public ZipViewdataReader(ZipInputStream stream) throws IOException {
        ZipEntry ze;
        while ((ze = stream.getNextEntry()) != null) {
            File temp = File.createTempFile(""spool."", "".synu"");
            temp.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(temp);
            byte[] buffer = new byte[1024 * 1024];
            int length;
            while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);
            fos.close();
            String name = ze.getName();
            String[] parts = name.split(""[\\\\/]"");
            this._file_hash.put(parts[parts.length - 1], temp);
        }
        stream.close();
        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {
            File f = this._file_hash.get(key);
            FileReader fr = new FileReader(f);
            this._viewdata = new BufferedReader(fr);
            break;
        }
        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");
    }
","    public static ArrayList<Principal> importPrincipals(String urlString) {
        ArrayList<Principal> results = new ArrayList<Principal>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""</Principal>"")) {
                    Principal principal = ProfileParser.parsePrincipal(buff.toString());
                    results.add(principal);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return results;
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    public String[] list() {
        if (isURL) {
            if (!isDirectory()) return null;
            try {
                URLConnection c = url.openConnection();
                InputStream is = c.getInputStream();
                boolean foundEnd = false;
                Vector files = new Vector();
                while (!foundEnd) {
                    byte[] b = new byte[is.available()];
                    String s = new String(b);
                    if (s.toLowerCase().indexOf(""</html>"") != -1) foundEnd = true;
                    while (s.indexOf(""a href"") != -1) {
                        int ndx = s.indexOf(""a href"") + 8;
                        String f = s.substring(ndx, s.indexOf(""\"""", ndx));
                        s = s.substring(s.indexOf(""\"""", ndx) + 1);
                        Location check = new Location(getAbsolutePath(), f);
                        if (check.exists()) {
                            files.add(check.getName());
                        }
                    }
                }
                return (String[]) files.toArray(new String[0]);
            } catch (IOException e) {
                return null;
            }
        }
        return file.list();
    }
",0.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
","    public static String post(String strUrl, String strPostString) {
        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            HttpURLConnection.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            StringBuffer sRet = new StringBuffer();
            while ((s = in.readLine()) != null) {
                sRet.append(s);
            }
            in.close();
            return sRet.toString();
        } catch (MalformedURLException e) {
            NoMuleRuntime.showError(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",0.0
"    private static int computeNativesHash() {
        try {
            String classpath = System.getProperty(""java.class.path"");
            URL url = Thread.currentThread().getContextClassLoader().getResource(""com/jme3/system/Natives.class"");
            StringBuilder sb = new StringBuilder(url.toString());
            if (sb.indexOf(""jar:"") == 0) {
                sb.delete(0, 4);
                sb.delete(sb.indexOf(""!""), sb.length());
                sb.delete(sb.lastIndexOf(""/"") + 1, sb.length());
            }
            try {
                url = new URL(sb.toString());
            } catch (MalformedURLException ex) {
                throw new UnsupportedOperationException(ex);
            }
            URLConnection conn = url.openConnection();
            int hash = classpath.hashCode() ^ (int) conn.getLastModified();
            return hash;
        } catch (IOException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
","    private void copyResource(String relResourceName) {
        String projectName = layout.getRootDir().getName();
        String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;
        InputStream source = getClass().getResourceAsStream(resourceName);
        if (source == null) {
            throw new RuntimeException(""couldn't find resource "" + resourceName);
        }
        File dest = new File(layout.getRootDir(), relResourceName);
        dest.getParentFile().mkdirs();
        dest.createNewFile();
        InputStreamReader in = new InputStreamReader(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                IOUtils.closeQuietly(out);
            }
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",0.0
"    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
","    public static boolean insert(final PedidoSituacao pedidoSituacao) {
        int result = 0;
        final Connection c = DBConnection.getConnection();
        PreparedStatement pst = null;
        if (c == null) {
            return false;
        }
        try {
            c.setAutoCommit(false);
            final String sql = ""insert into pedido_situacao (id_pedido, id_situacao, em, observacao, id_funcionario) "" + ""values (?, ? , now(), ?, ?) "";
            pst = c.prepareStatement(sql);
            pst.setInt(1, pedidoSituacao.getPedido().getCodigo());
            pst.setInt(2, pedidoSituacao.getSituacao().getCodigo());
            pst.setString(3, pedidoSituacao.getObservacao());
            pst.setInt(4, pedidoSituacao.getFuncionario().getCodigo());
            result = pst.executeUpdate();
            c.commit();
        } catch (final SQLException e) {
            try {
                c.rollback();
            } catch (final SQLException e1) {
                e1.printStackTrace();
            }
            System.out.println(""[PedidoSituacaoDAO.insert] Erro ao inserir -> "" + e.getMessage());
        } finally {
            DBConnection.closePreparedStatement(pst);
            DBConnection.closeConnection(c);
        }
        if (result > 0) {
            return true;
        } else {
            return false;
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getRequestURI().split(""/"")[3];
        if (log.isDebugEnabled()) log.debug(""request: "" + id + "" from: "" + request.getRemoteHost());
        Song song = manager.find(id);
        if (song != null) {
            File file = new File(song.getFile());
            if (file.exists()) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.setContentType(""audio/"" + song.getType());
                response.setContentLength((int) file.length());
                FileInputStream stream = new FileInputStream(file);
                try {
                    IOUtils.copy(stream, response.getOutputStream());
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                log.warn(""file not found: "" + file);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
        } else {
            log.info(""song not found: "" + id);
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",1.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    public TemplateLibrary loadTemplateLibrary(GadgetContext context, Uri uri) throws GadgetException {
        HttpRequest request = new HttpRequest(uri);
        request.setCacheTtl(300);
        HttpResponse response = pipeline.execute(request);
        if (response.getHttpStatusCode() != HttpResponse.SC_OK) {
            throw new GadgetException(GadgetException.Code.FAILED_TO_RETRIEVE_CONTENT, ""Unable to retrieve template library xml. HTTP error "" + response.getHttpStatusCode());
        }
        String content = response.getResponseAsString();
        try {
            String key = null;
            Element element = null;
            if (!context.getIgnoreCache()) {
                key = HashUtil.rawChecksum(content.getBytes());
                element = parsedXmlCache.getElement(key);
            }
            if (element == null) {
                element = XmlUtil.parse(content);
                if (key != null) {
                    parsedXmlCache.addElement(key, element);
                }
            }
            return new XmlTemplateLibrary(uri, element, content);
        } catch (XmlException e) {
            throw new GadgetException(GadgetException.Code.MALFORMED_XML_DOCUMENT, e);
        }
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public List<Datastream> getFiles(final String pFile) throws IOException {
        List<Datastream> tDatastreams = new ArrayList<Datastream>();
        new File(this.getTmpExtractDirName()).mkdir();
        ZipFile tZipFile = new ZipFile(pFile);
        Enumeration tEntries = tZipFile.entries();
        ZipEntry tEntry = null;
        File tFile = null;
        String tFileLocation = """";
        LocalDatastream tLocalDs = null;
        while (tEntries.hasMoreElements()) {
            tEntry = (ZipEntry) tEntries.nextElement();
            if (tEntry.isDirectory()) {
                continue;
            }
            tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + tEntry.getName();
            tFile = new File(tFileLocation);
            LOG.debug(""Saving "" + tEntry.getName() + "" to "" + tFile.getPath());
            tFile.getParentFile().mkdirs();
            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));
            tLocalDs = new LocalDatastream(tFile.getName().split(""\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\."")[1]), tFileLocation);
            tLocalDs.setLabel(tEntry.getName());
            tDatastreams.add(tLocalDs);
        }
        return tDatastreams;
    }
",1.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {
        InputStream is = null;
        try {
            URL url = new URL(jad.getJarURL());
            URLConnection conn = url.openConnection();
            if (url.getUserInfo() != null) {
                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes(""UTF-8"")));
                conn.setRequestProperty(""Authorization"", ""Basic "" + userInfo);
            }
            is = conn.getInputStream();
            File tmpDir = null;
            String systemTmpDir = MIDletSystemProperties.getSystemProperty(""java.io.tmpdir"");
            if (systemTmpDir != null) {
                tmpDir = new File(systemTmpDir, ""microemulator-apps"");
                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {
                    tmpDir = null;
                }
            }
            File tmp = File.createTempFile(""me2-app-"", "".jar"", tmpDir);
            tmp.deleteOnExit();
            IOUtils.copyToFile(is, tmp);
            return IOUtils.getCanonicalFileClassLoaderURL(tmp);
        } catch (IOException e) {
            if (reportError) {
                Message.error(""Unable to open jar "" + jarUrl, e);
            }
            return null;
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
",0.0
"    public BufferedImage getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
","    public static Bitmap loadBitmap(String url) {
        try {
            final HttpClient httpClient = getHttpClient();
            final HttpResponse resp = httpClient.execute(new HttpGet(url));
            final HttpEntity entity = resp.getEntity();
            final int statusCode = resp.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK || entity == null) {
                return null;
            }
            final byte[] respBytes = EntityUtils.toByteArray(entity);
            BitmapFactory.Options decodeOptions = new BitmapFactory.Options();
            decodeOptions.inSampleSize = 1;
            return BitmapFactory.decodeByteArray(respBytes, 0, respBytes.length, decodeOptions);
        } catch (Exception e) {
            Log.w(TAG, ""Problem while loading image: "" + e.toString(), e);
        }
        return null;
    }
",0.0
"    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
","    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
",1.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    public static byte[] getBytesFromURL(URL url) throws IOException {
        byte[] b;
        URLConnection con = url.openConnection();
        int size = con.getContentLength();
        InputStream s = con.getInputStream();
        try {
            if (size <= 0) b = IOUtil.getBytesFromStream(s); else {
                b = new byte[size];
                int len = 0;
                do {
                    int n = s.read(b, len, size - len);
                    if (n < 0) throw new IOException(""the stream was closed: "" + url.toString());
                    len += n;
                } while (len < size);
            }
        } finally {
            s.close();
        }
        return b;
    }
",0.0
"    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
","    public File unpackResource(String resourceName) throws IOException {
        File file = null;
        URL url = getURL(""/"" + resourceName);
        URLConnection urlConn = url.openConnection();
        if (urlConn instanceof JarURLConnection) {
            file = handleJarFile((JarURLConnection) urlConn, resourceName);
        } else if (urlConn instanceof BundleURLConnection) {
            file = handleBundleFile((BundleURLConnection) urlConn);
        } else {
            file = handleClassicFile(resourceName);
        }
        return file;
    }
",0.0
"    public static int getFilesize(String theURL) {
        URL url;
        URLConnection conn;
        int size = -1;
        try {
            url = new URL(theURL);
            conn = url.openConnection();
            conn.setRequestProperty(""User-Agent"", Main.USER_AGENT);
            conn.setConnectTimeout(Main.CONNECT_TIMEOUT * 2);
            conn.setReadTimeout(Main.READ_TIMEOUT * 2);
            size = conn.getContentLength();
            conn.getInputStream().close();
        } catch (FileNotFoundException fnfe) {
            return -2;
        } catch (ConnectException ce) {
            return -3;
        } catch (ProtocolException fpe) {
            return -2;
        } catch (IOException ioe) {
            return -2;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return size;
    }
","    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty(""User-Agent"", userAgent);
        conn.setRequestProperty(""Accept"", ""*/*"");
        conn.setRequestProperty(""Icy-Metadata"", ""1"");
        conn.setRequestProperty(""Connection"", ""close"");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField(""icy-metaint"");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end"");
        }
        return audioInputStream;
    }
",0.0
"    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
","    public void test(TestHarness harness) {
        harness.checkPoint(""TestOfMD4"");
        try {
            Security.addProvider(new JarsyncProvider());
            algorithm = MessageDigest.getInstance(""MD4"", ""JARSYNC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
            throw new Error(x);
        }
        try {
            for (int i = 0; i < 64; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""52f5076fabd22680234a3fa9f9dc5732"";
            harness.check(exp.equals(Util.toHexString(md)), ""testSixtyFourA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            harness.verbose(""NOTE: This test may take a while."");
            for (int i = 0; i < 536870913; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""47d01fa6657f903280232d30b98da482"";
            harness.check(exp.equals(Util.toHexString(md)), ""test536870913A"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            byte[] md = algorithm.digest(""a"".getBytes());
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testA"");
        }
        try {
            byte[] md = algorithm.digest(""abc"".getBytes());
            String exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testABC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testABC"");
        }
        try {
            byte[] md = algorithm.digest(""message digest"".getBytes());
            String exp = ""d9130a8164549fe818874806e1c7014b"";
            harness.check(exp.equals(Util.toHexString(md)), ""testMessageDigest"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testMessageDigest"");
        }
        try {
            byte[] md = algorithm.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());
            String exp = ""d79e1c308aa5bbcdeea8ed63df412da9"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAlphabet"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAlphabet"");
        }
        try {
            byte[] md = algorithm.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());
            String exp = ""043f8582f241db351ce627e153e7f0e4"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAsciiSubset"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAsciiSubset"");
        }
        try {
            byte[] md = algorithm.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());
            String exp = ""e33b4ddc9c38f2199c3e7b164fcc0536"";
            harness.check(exp.equals(Util.toHexString(md)), ""testEightyNumerics"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testEightyNumerics"");
        }
        try {
            algorithm.update(""a"".getBytes(), 0, 1);
            clone = (MessageDigest) algorithm.clone();
            byte[] md = algorithm.digest();
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #1"");
            clone.update(""bc"".getBytes(), 0, 2);
            md = clone.digest();
            exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #2"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testCloning"");
        }
    }
",0.0
"    private void doPost(String request) throws IOException {
        URL url = new URL(""http://localhost:8080/exist/rest"" + DBBroker.ROOT_COLLECTION);
        HttpURLConnection connect = (HttpURLConnection) url.openConnection();
        connect.setRequestMethod(""POST"");
        connect.setDoOutput(true);
        OutputStream os = connect.getOutputStream();
        os.write(request.getBytes(""UTF-8""));
        connect.connect();
        BufferedReader is = new BufferedReader(new InputStreamReader(connect.getInputStream()));
        String line;
        while ((line = is.readLine()) != null) System.out.println(line);
    }
","    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public Document getWsdlDomResource(String aResourceName) throws AeException {
        logger.debug(""getWsdlDomResource() "" + aResourceName);
        InputStream in = null;
        try {
            URL url = getDeploymentContext().getResourceURL(aResourceName);
            if (url == null) {
                logger.error(""url is null"");
                return null;
            } else {
                logger.debug(""loading wsdl document "" + aResourceName);
                in = url.openStream();
                return getSdlParser().loadWsdlDocument(in, null);
            }
        } catch (Throwable t) {
            logger.error(""Error: "" + t + "" for "" + aResourceName);
            throw new SdlDeploymentException(MessageFormat.format(""unable to load: {0} from {1}"", new Object[] { aResourceName, getDeploymentContext().getDeploymentLocation() }), t);
        } finally {
            AeCloser.close(in);
        }
    }
",0.0
"    private String crypt(String s) throws BaseException, NoSuchAlgorithmException {
        if (s != null && s.length() > 0) {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(s.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } else {
            throw new BaseException(ErrorCodes.CODE_2100);
        }
    }
","    public APIResponse update(User user) throws Exception {
        APIResponse response = new APIResponse();
        connection = (HttpURLConnection) new URL(url + ""/api/user/update"").openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod(""PUT"");
        connection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8"");
        connection.setUseCaches(false);
        connection.setConnectTimeout(TIMEOUT);
        connection.connect();
        marshaller.marshal(user, new MappedXMLStreamWriter(new MappedNamespaceConvention(new Configuration()), new OutputStreamWriter(connection.getOutputStream(), ""utf-8"")));
        connection.getOutputStream().flush();
        connection.getOutputStream().close();
        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            JSONObject obj = new JSONObject(new String(new BufferedReader(new InputStreamReader(connection.getInputStream(), ""utf-8"")).readLine()));
            response.setDone(true);
            response.setMessage(unmarshaller.unmarshal(new MappedXMLStreamReader(obj, new MappedNamespaceConvention(new Configuration()))));
            connection.getInputStream().close();
        } else {
            response.setDone(false);
            response.setMessage(""Update User Error Code: Http ("" + connection.getResponseCode() + "")"");
        }
        connection.disconnect();
        return response;
    }
",0.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    private boolean checkTypeChange(Class clazz, File wsdlFile) {
        if (!clazz.isPrimitive()) {
            ClassLoader cl = clazz.getClassLoader();
            if (cl instanceof AntClassLoader) {
                if (clazz.isArray()) return checkTypeChange(getArrayType(clazz), wsdlFile);
                String path = clazz.getName().replace('.', File.separatorChar) + "".class"";
                File file = new File(builddir, path);
                long lastMod = Long.MAX_VALUE;
                if (!file.exists()) {
                    URL url = cl.getResource(path);
                    if (url == null) throw new BuildException(""Can't get URL for webservice class '"" + clazz.getName() + ""' from jar file.""); else {
                        try {
                            JarURLConnection con = (JarURLConnection) url.openConnection();
                            lastMod = con.getJarEntry().getTime();
                        } catch (IOException x) {
                            throw new BuildException(""Can't get modification time for webservice class '"" + clazz.getName() + ""' from jar file."");
                        }
                    }
                } else {
                    lastMod = file.lastModified();
                }
                if (wsdlFile.lastModified() < lastMod) return true;
                if (clazz.isInterface()) {
                    Class[] itfs = clazz.getInterfaces();
                    for (int i = 0; i < itfs.length; i++) {
                        boolean changed = checkTypeChange(itfs[i], wsdlFile);
                        if (changed) return true;
                    }
                } else {
                    Class sup = clazz.getSuperclass();
                    boolean changed = checkTypeChange(sup, wsdlFile);
                    if (changed) return true;
                }
            }
        }
        return false;
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
",0.0
"    public static String getMD5EncodedString(String strIn) {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(strIn.getBytes());
            byte[] digest = md5.digest();
            StringBuffer hexString = new StringBuffer();
            for (byte aDigest : digest) {
                hexString.append(Integer.toHexString(0xFF & aDigest));
            }
            return hexString.toString();
        } catch (java.security.NoSuchAlgorithmException n) {
            return """";
        }
    }
","    public static void copy(String source, String dest) throws java.io.IOException {
        java.io.BufferedInputStream in = null;
        java.io.BufferedOutputStream out = null;
        try {
            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);
            while (in.available() != 0) {
                out.write(in.read());
            }
        } catch (java.io.IOException e) {
            throw e;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (java.io.IOException E) {
            }
        }
    }
",0.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals(""deletable"") || f.startsWith(""."")) continue;
            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));
            byte[] buf = new byte[16384];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
            in.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
",0.0
"    private String generate(String value) throws Exception {
        String resStr = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes(""utf-8""), 0, value.length());
            byte[] result = md.digest();
            resStr = FTGenerate.convertToHex(result);
            md.reset();
        } catch (NoSuchAlgorithmException nae) {
            this.getLog().severe(""Hash no funcionando"");
            nae.printStackTrace();
            throw new Exception(""Hash no funcionando"");
        } catch (UnsupportedEncodingException ee) {
            this.getLog().severe(""Encoding no funcionando"");
            ee.printStackTrace();
            throw new Exception(""Encoding no funcionando"");
        }
        return resStr;
    }
","    private final void findSubclasses(URL location, String packageName, Class superClass, Set setOfClasses) {
        synchronized (results) {
            String fqcn = searchClass.getName();
            List knownLocations = new ArrayList();
            knownLocations.add(location);
            for (int loc = 0; loc < knownLocations.size(); loc++) {
                URL url = (URL) knownLocations.get(loc);
                File directory = new File(url.getFile());
                if (directory.exists()) {
                    File[] files = directory.listFiles(CLASSES_ONLY);
                    for (int i = 0; i < files.length; i++) {
                        String filename = files[i].getName();
                        String classname = filename.substring(0, filename.length() - 6);
                        try {
                            if (!fqcn.equals(packageName + ""."" + classname)) {
                                Class c = callClassForName(packageName + ""."" + classname);
                                manageClass(setOfClasses, superClass, c, url);
                            }
                        } catch (Throwable t) {
                            errors.add(t);
                        }
                    }
                } else {
                    try {
                        JarURLConnection conn = (JarURLConnection) url.openConnection();
                        JarFile jarFile = conn.getJarFile();
                        Enumeration e = jarFile.entries();
                        while (e.hasMoreElements()) {
                            JarEntry entry = (JarEntry) e.nextElement();
                            String entryname = entry.getName();
                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {
                                String classname = entryname.substring(0, entryname.length() - 6);
                                if (classname.startsWith(""/"")) classname = classname.substring(1);
                                classname = classname.replace('/', '.');
                                try {
                                    if (!fqcn.equals(classname)) {
                                        Class c = callClassForName(classname);
                                        manageClass(setOfClasses, superClass, c, url);
                                    }
                                } catch (Throwable t) {
                                    errors.add(t);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
        }
    }
",0.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    protected void fetchDicomSopInstance(File result) throws Exception {
        try {
            URL url = new URL(this.config.getUrl(""wadoserver.url"").toString() + ""?requestType=WADO&contentType=text/xml"" + ""&studyUID="" + publicationProperties.getProperty(""studyUID"") + ""&seriesUID="" + publicationProperties.getProperty(""seriesUID"") + ""&objectUID="" + publicationProperties.getProperty(""objectUID""));
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            OutputStream ostream;
            InputStream istream;
            connection.setUseCaches(false);
            connection.setRequestProperty(""accept"", ""text/xml"");
            connection.connect();
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new Exception(""Error fetching DICOM SOP instance ("" + connection.getResponseCode() + "" "" + connection.getResponseMessage() + "")"");
            }
            ostream = new BufferedOutputStream(new FileOutputStream(result));
            try {
                istream = connection.getInputStream();
                Utilities.copyStream(istream, ostream);
            } finally {
                ostream.close();
            }
        } catch (Exception e) {
            throw new Exception(""Error fetching DICOM SOP instance."", e);
        }
    }
",0.0
"	public FTPClient sample3b(String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    public InputStream getDaoConfig(String connectionType) throws IOException {
        URL url = null;
        if (connectionType.equals(SQL.ORACLE)) {
            url = DTSWFDBConfig.class.getResource(""oracle.xml"");
        } else if (connectionType.equals(SQL.SQL2K)) {
            url = DTSWFDBConfig.class.getResource(""sql2k.xml"");
        } else if (connectionType.equals(SQL.CACHE)) {
            url = DTSWFDBConfig.class.getResource(""cache.xml"");
        }
        return url.openStream();
    }
",0.0
"    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
","    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {
        File home = new File(System.getProperty(""user.home""));
        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);
        FileOutputStream fos = new FileOutputStream(jar_file);
        JarOutputStream jos = new JarOutputStream(fos);
        ZipEntry ze = new ZipEntry(""Exception"");
        jos.putNextEntry(ze);
        PrintStream ps = new PrintStream(jos);
        throwable.printStackTrace(ps);
        for (File file : files) if ((file != null) && file.exists()) {
            ze = new ZipEntry(file.getName());
            jos.putNextEntry(ze);
            byte[] buffer = new byte[65536];
            FileInputStream fis = new FileInputStream(file);
            int len;
            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);
            fis.close();
        }
        jos.close();
        return jar_file.getPath();
    }
",0.0
"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
","        @Override
        public Void doInBackground() {
            java.io.FileOutputStream fos = null;
            try {
                String localFile = ""JavaPointNew.jar"";
                java.io.BufferedInputStream in = null;
                try {
                    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
                    contentLength = httpConn.getContentLength();
                    if (contentLength == -1) {
                        System.out.println(""unknown content length"");
                    } else {
                        System.out.println(""content length: "" + contentLength + "" bytes"");
                    }
                    in = new java.io.BufferedInputStream(httpConn.getInputStream());
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                fos = new java.io.FileOutputStream(localFile);
                java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                int bytes = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    bytes += x;
                    setProgress((int) ((Math.min(bytes * 100 / contentLength, 100)) + .5));
                }
                bout.close();
                in.close();
                File jarFile = mainFrame.presentationFile;
                if (jarFile.exists()) {
                    final File temporaryJarFile = Utilities.createTemporaryFile(""presentation"", "".jar"", false, null);
                    final JarFile updatedJarFile = new JarFile(localFile);
                    final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile));
                    for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) {
                        if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) {
                            final InputStream entryStream = updatedJarFile.getInputStream(entry);
                            output.putNextEntry(entry);
                            Utilities.write(entryStream, output);
                        }
                    }
                    new SlidesWriter().write(mainFrame.getSlides(), output);
                    jarFile.delete();
                    new File(localFile).delete();
                    if (!temporaryJarFile.renameTo(jarFile)) {
                        throw new RuntimeException(""Failed to update "" + jarFile);
                    }
                } else {
                    new SlidesWriter().write(mainFrame.getSlides(), new JarOutputStream(new FileOutputStream(jarFile)));
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    fos.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            return null;
        }
",0.0
"    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
","    private static String myCrypt(String password, String seed) throws RuntimeException {
        String out = null;
        int count = 8;
        MessageDigest digester;
        if (!seed.substring(0, 3).equals(""$H$"")) {
            byte[] randomBytes = new byte[6];
            java.util.Random randomGenerator = new java.util.Random();
            randomGenerator.nextBytes(randomBytes);
            seed = genSalt(randomBytes);
        }
        String salt = seed.substring(4, 12);
        if (salt.length() != 8) {
            throw new RuntimeException(""Error hashing password - Invalid seed."");
        }
        byte[] sha1Hash = new byte[40];
        try {
            digester = MessageDigest.getInstance(""SHA-1"");
            digester.update((salt + password).getBytes(""iso-8859-1""), 0, (salt + password).length());
            sha1Hash = digester.digest();
            do {
                byte[] CombinedBytes = new byte[sha1Hash.length + password.length()];
                System.arraycopy(sha1Hash, 0, CombinedBytes, 0, sha1Hash.length);
                System.arraycopy(password.getBytes(""iso-8859-1""), 0, CombinedBytes, sha1Hash.length, password.getBytes(""iso-8859-1"").length);
                digester.update(CombinedBytes, 0, CombinedBytes.length);
                sha1Hash = digester.digest();
            } while (--count > 0);
            out = seed.substring(0, 12);
            out += encode64(sha1Hash);
        } catch (NoSuchAlgorithmException Ex) {
            log.error(""Error hashing password."", Ex);
        } catch (UnsupportedEncodingException Ex) {
            log.error(""Error hashing password."", Ex);
        }
        if (out == null) {
            throw new RuntimeException(""Error hashing password - out = null"");
        }
        return out;
    }
",0.0
"    public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[FOUR_BYTES];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public void testMandatorySections() throws Exception {
        final File specificationDirectory = this.getTestSourcesDirectory();
        final File implementationDirectory = this.getTestSourcesDirectory();
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutDependenciesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutMessagesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutPropertiesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationOfSpecificationWithoutConstructorsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""ImplementationOfSpecification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""ImplementationOfSpecification""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""SpecificationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(specificationDirectory, ""Specification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
    }
",0.0
"    public static byte[] getBytes(String s) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(s.getBytes());
        return d.digest();
    }
","	public FTPClient sample3b(String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver);
		ftpClient.login(username, password);
		return ftpClient;
	}
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    public static void copyFile(File source, File dest) throws IOException {
        log.debug(""Copy from {} to {}"", source.getAbsoluteFile(), dest.getAbsoluteFile());
        FileInputStream fi = new FileInputStream(source);
        FileChannel fic = fi.getChannel();
        MappedByteBuffer mbuf = fic.map(FileChannel.MapMode.READ_ONLY, 0, source.length());
        fic.close();
        fi.close();
        fi = null;
        if (!dest.exists()) {
            String destPath = dest.getPath();
            log.debug(""Destination path: {}"", destPath);
            String destDir = destPath.substring(0, destPath.lastIndexOf(File.separatorChar));
            log.debug(""Destination dir: {}"", destDir);
            File dir = new File(destDir);
            if (!dir.exists()) {
                if (dir.mkdirs()) {
                    log.debug(""Directory created"");
                } else {
                    log.warn(""Directory not created"");
                }
            }
            dir = null;
        }
        FileOutputStream fo = new FileOutputStream(dest);
        FileChannel foc = fo.getChannel();
        foc.write(mbuf);
        foc.close();
        fo.close();
        fo = null;
        mbuf.clear();
        mbuf = null;
    }
",0.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
","    public static String encrypt(String password, String algorithm, byte[] salt) {
        StringBuffer buffer = new StringBuffer();
        MessageDigest digest = null;
        int size = 0;
        if (""CRYPT"".equalsIgnoreCase(algorithm)) {
            throw new InternalError(""Not implemented"");
        } else if (""SHA"".equalsIgnoreCase(algorithm) || ""SSHA"".equalsIgnoreCase(algorithm)) {
            size = 20;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SSHA}"");
            } else {
                buffer.append(""{SHA}"");
            }
            try {
                digest = MessageDigest.getInstance(""SHA-1"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        } else if (""MD5"".equalsIgnoreCase(algorithm) || ""SMD5"".equalsIgnoreCase(algorithm)) {
            size = 16;
            if (salt != null && salt.length > 0) {
                buffer.append(""{SMD5}"");
            } else {
                buffer.append(""{MD5}"");
            }
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new InternalError(""Invalid algorithm"");
            }
        }
        int outSize = size;
        digest.reset();
        digest.update(password.getBytes());
        if (salt != null && salt.length > 0) {
            digest.update(salt);
            outSize += salt.length;
        }
        byte[] out = new byte[outSize];
        System.arraycopy(digest.digest(), 0, out, 0, size);
        if (salt != null && salt.length > 0) {
            System.arraycopy(salt, 0, out, size, salt.length);
        }
        buffer.append(Base64.encode(out));
        return buffer.toString();
    }
",0.0
"    private void serveRedir(OutputStream os, IRequest req) throws IOException {
        String urlString = req.getParameter(""url"");
        URL url = new URL(urlString);
        URLConnection con = url.openConnection();
        InputStream is = new BufferedInputStream(con.getInputStream());
        String ct = con.getContentType();
        int cl = con.getContentLength();
        String jsLink = ""<script language=\""JavaScript1.2\"" src=\""/tddt.js\"" type='text/javascript'></script>\n"";
        int i;
        String head = getHead(""HTTP/1.0 200 OK"", ""Content-Type: "" + ct + ""\nContent-Length: -1"");
        os.write(head.getBytes());
        if (ct != null && ct.indexOf(""html"") != -1) {
            os.write(jsLink.getBytes());
            NetUtils.saveChangeLink(url, os);
        } else {
            int len;
            byte[] b = new byte[1024];
            while ((len = is.read(b)) >= 0) {
                os.write(b, 0, len);
            }
        }
        os.flush();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
","    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",1.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    private void publish() {
        if (uploadPrototypeBox.isSelected()) {
            try {
                URL url = new URL(prototypeURLField.getText());
                prototypeURLField.recordText();
                PrintStream ps;
                HttpURLConnection huc = null;
                if (url.getProtocol().equals(""file"")) {
                    ps = new PrintStream(new FileOutputStream(url.getFile()));
                } else {
                    URLConnection urlc = url.openConnection();
                    urlc.setDoOutput(true);
                    if (urlc instanceof HttpURLConnection) {
                        huc = ((HttpURLConnection) urlc);
                        huc.setRequestMethod(""PUT"");
                    }
                    ps = new PrintStream(urlc.getOutputStream());
                }
                target.writePrototype(ps);
                if (huc != null) {
                    huc.getResponseCode();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Uploading Prototype"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (postMetadataBox.isSelected()) {
            try {
                Hashtable env = new Hashtable();
                env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
                env.put(Context.PROVIDER_URL, directoryURLField.getText());
                env.put(Context.SECURITY_PRINCIPAL, directoryPrincipalField.getText());
                env.put(Context.SECURITY_CREDENTIALS, directoryCredentialsField.getText());
                InitialDirContext dirContext = new InitialDirContext(env);
                Preferences prefs = Preferences.userNodeForPackage(getClass());
                prefs.put(""directoryURL"", directoryURLField.getText());
                prefs.put(""directoryPrincipal"", directoryPrincipalField.getText());
                prefs.put(""directoryCredentials"", directoryCredentialsField.getText());
                BasicAttributes attr = new BasicAttributes();
                attr.put(OBJECT_CLASS, RDS_RESOURCE);
                attr.put(CONTENT_TYPE, PROTOTYPE_TYPE);
                if (uploadPrototypeBox.isSelected()) {
                    attr.put(IMPLEMENTATION_URL, prototypeURLField.getText());
                }
                DefaultTableModel dtm = (DefaultTableModel) attributesTable.getModel();
                Preferences attrPrefs = prefs.node(""attributes"");
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    attr.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                    attrPrefs.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                }
                NameParser np = dirContext.getNameParser("""");
                Enumeration comps = new ResourceName(prototypeNameField.getText()).getAll();
                prototypeNameField.recordText();
                Name resourcedn = np.parse("""");
                while (comps.hasMoreElements()) {
                    resourcedn.add(RC + ""="" + (String) comps.nextElement());
                    try {
                        dirContext.createSubcontext(resourcedn);
                    } catch (NameAlreadyBoundException nabe) {
                    }
                }
                dirContext.modifyAttributes(resourcedn, DirContext.REPLACE_ATTRIBUTE, attr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Posting Metadata"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
",0.0
"    protected static File UrlGzipToFile(File dir, String urlSt, String suffix) throws CaughtException {
        try {
            URL url = new URL(urlSt);
            InputStream zipped = url.openStream();
            InputStream unzipped = new GZIPInputStream(zipped);
            File tempFile = File.createTempFile(""input"", suffix, dir);
            copyFile(tempFile, unzipped);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            if (lsm.isSelectionEmpty()) {
            } else {
                int selectedRow = lsm.getMinSelectionIndex();
                ChemModel model = modelContent.getValueAt(sortedModelContent.getSortedIndex(selectedRow));
                DADMLResult resource = (DADMLResult) model.getProperty(""org.openscience.cdk.internet.DADMLResult"");
                URL url = resource.getURL();
                try {
                    URLConnection connection = url.openConnection();
                    InputStreamReader input = new InputStreamReader(connection.getInputStream());
                    if (APIVersionTester.isBiggerOrEqual(""1.8"", editBus.getAPIVersion())) {
                        try {
                            editBus.showChemFile(input);
                            return;
                        } catch (Exception exception) {
                            logger.error(""EditBus error: "", exception.getMessage());
                            logger.debug(exception);
                        }
                    }
                    IChemObjectReader reader = readerFactory.createReader(input);
                    ChemFile chemFile = (ChemFile) reader.read(new ChemFile());
                    editBus.showChemFile(chemFile);
                } catch (FileNotFoundException exception) {
                    String error = ""Resource not found: "" + url;
                    logger.error(error);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                } catch (Exception exception) {
                    String error = ""Error while reading file: "" + exception.getMessage();
                    logger.error(error);
                    logger.debug(exception);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                }
                logger.warn(""Not displaying model with unknown content"");
            }
        }
",0.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
",0.0
"    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testBytes = ""testString"".getBytes();
        final InputStream istream = new ByteArrayInputStream(testBytes);
        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);
        IOUtils.copy(teeStream, new NullOutputStream());
        teeStream.close();
        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());
    }
","    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    Bitmap downloadBitmap(String url) {
        final int IO_BUFFER_SIZE = 4 * 1024;
        final HttpClient client = (mode == Mode.NO_ASYNC_TASK) ? new DefaultHttpClient() : AndroidHttpClient.newInstance(""Android"");
        final HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(""ImageDownloader"", ""Error "" + statusCode + "" while retrieving bitmap from "" + url);
                return null;
            }
            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent();
                    return BitmapFactory.decodeStream(new FlushedInputStream(inputStream));
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (IOException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""I/O error while retrieving bitmap from "" + url, e);
        } catch (IllegalStateException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Incorrect URL: "" + url);
        } catch (Exception e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Error while retrieving bitmap from "" + url, e);
        } finally {
            if ((client instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) client).close();
            }
        }
        return null;
    }
",0.0
"    public static String getOriginalWSDL(String wsdlURL) {
        try {
            URL url = new URL(wsdlURL);
            java.net.HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            InputStream input = conn.getInputStream();
            final int BUFFERSIZE = 4096;
            byte[] buffer = new byte[BUFFERSIZE];
            OutputStream output = new ByteArrayOutputStream();
            while (true) {
                int read = input.read(buffer);
                if (read == -1) {
                    break;
                }
                output.write(buffer, 0, read);
            }
            output.close();
            input.close();
            conn.disconnect();
            String s = output.toString();
            return s;
        } catch (Exception e) {
            return null;
        }
    }
","    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
",0.0
"    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File part : parts) {
                setState(part.getName(), BUILDING);
                FileChannel in = new FileInputStream(part).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    @Override
    public String getURL(String name) {
        String r;
        try {
            URL url = new URL(NIFHandler.URL_BASE + name.replaceAll("" "", ""+""));
            Document d = new SAXBuilder().build(url.openStream());
            Element e = d.getRootElement().descendTo(""url"");
            r = e.getText().trim();
        } catch (Throwable t) {
            r = ""unknown"";
        }
        return r;
    }
",0.0
"    public FTPSource(SourceDetail sourceDetail) throws SourceException {
        this.sourceDetail = sourceDetail;
        localPathMap = new HashMap<String, String>();
        client = new FTPClient();
        try {
            client.connect(sourceDetail.getHost());
            client.login(sourceDetail.getUser(), sourceDetail.getPassword());
            workingDirectory = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator + sourceDetail.getName());
            workingDirectory.mkdir();
        } catch (Exception e) {
            throw new SourceException(e);
        }
    }
","    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",0.0
"    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
","    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement objectInsert = null;
        String sqlString = null;
        int newID = 0;
        try {
            conn.setAutoCommit(false);
            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";
            objectInsert = conn.prepareStatement(sqlString);
            ResultSet r = objectInsert.executeQuery(sqlString);
            newID = r.getInt(""NEXTVAL"");
            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";
            objectInsert = conn.prepareStatement(sqlString);
            objectInsert.setInt(1, newID);
            objectInsert.setString(2, getRoomKey());
            objectInsert.setString(3, ""ROOM"");
            objectInsert.executeUpdate();
            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";
            conn.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) {
                try {
                    System.err.print(""Transaction is being rolled back"");
                    conn.rollback();
                } catch (SQLException excep) {
                    excep.printStackTrace();
                }
            }
        } finally {
            if (objectInsert != null) {
                objectInsert.close();
            }
            conn.setAutoCommit(true);
        }
    }
",0.0
"    public static String getMd5Hash(String plaintext) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(plaintext.getBytes());
            byte[] digest = md5.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            return hashtext;
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return """";
    }
","    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
",1.0
"    public String accessURL_Post(String url, Map<String, String> keyValue, String encoding) throws Throwable {
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        for (String key : keyValue.keySet()) {
            formparams.add(new BasicNameValuePair(key, keyValue.get(key)));
        }
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, encoding);
        HttpPost httpPost = new HttpPost(url);
        httpPost.setEntity(entity);
        HttpResponse response = client.execute(httpPost);
        String entuity = EntityUtils.toString(response.getEntity());
        handleHeaders(response.getAllHeaders());
        return entuity;
    }
","    public void updateDBModel(Tasks task) throws Exception {
        task.setOperationName(""Updating DB Model.."");
        int localVersion = getLocalModelVersion();
        int currentVersion = 0;
        try {
            currentVersion = getModelVersion();
        } catch (SQLException e) {
            if (e.getErrorCode() != 1146) {
                throw e;
            }
        }
        boolean autoCommit = getConn().getAutoCommit();
        try {
            getConn().setAutoCommit(false);
            for (int version = currentVersion + 1; version <= localVersion; version++) {
                task.setStatus(""Updating to version "" + version);
                InputStream in = EDACCApp.class.getClassLoader().getResourceAsStream(""edacc/resources/db_version/"" + version + "".sql"");
                if (in == null) {
                    throw new SQLQueryFileNotFoundException();
                }
                executeSqlScript(task, in);
                Statement st = getConn().createStatement();
                st.executeUpdate(""INSERT INTO `Version` VALUES ("" + version + "", NOW())"");
                st.close();
            }
        } catch (Exception e) {
            getConn().rollback();
            throw e;
        } finally {
            getConn().setAutoCommit(autoCommit);
        }
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }
",0.0
"    public void testPostWithGzip() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new GZIPCompressedEntity(new StringEntity(""test"")));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
","    public int setData(String mysql) {
        int mycount = 0;
        try {
            conn.setAutoCommit(false);
            mycount = 0;
            stmt = conn.createStatement();
            mycount = stmt.executeUpdate(mysql);
        } catch (Exception e) {
            mycount = -1;
        } finally {
            if (mycount > 0) {
                try {
                    conn.commit();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return mycount;
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public boolean connectyahoo(String login, String password) throws Exception {
        String lapage = new String("""");
        String myargs = new String("""");
        Pattern pat;
        Matcher mat;
        int data;
        URL myurl = new URL(""http://groups.yahoo.com/mygroups"");
        URLConnection conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""login : "");
        InputStream in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        myargs += URLEncoder.encode("".tries"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".src"", ""UTF-8"") + ""="" + URLEncoder.encode(""ygrp"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".md5"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".hash"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".js"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".last"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""promo"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".intl"", ""UTF-8"") + ""="" + URLEncoder.encode(""us"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".bypass"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".partner"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".u\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".u"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".v"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".challenge\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".challenge"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".yplus"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".emailCode"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""pkg"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""stepid"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".ev"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""hasMsgr"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".chkP"", ""UTF-8"") + ""="" + URLEncoder.encode(""Y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".done"", ""UTF-8"") + ""="" + URLEncoder.encode(""http://groups.yahoo.com/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(login, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""passwd"", ""UTF-8"") + ""="" + URLEncoder.encode(password, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".persistent"", ""UTF-8"") + ""="" + URLEncoder.encode(""y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".save"", ""UTF-8"") + ""="" + URLEncoder.encode(""Sign In"", ""UTF-8"");
        myurl = new URL(""http://login.yahoo.com/config/login"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        OutputStream output = conn.getOutputStream();
        PrintStream pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""adult : "");
        in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\""ycb\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode(""ycb"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""dest"", ""UTF-8"") + ""="" + URLEncoder.encode(""/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""accept"", ""UTF-8"") + ""="" + URLEncoder.encode(""I Acce"", ""UTF-8"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        output = conn.getOutputStream();
        pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        return true;
    }
",0.0
"    private FTPClient loginToSharedWorkspace() throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.connect(mSwarm.getHost(), mSharedWorkspacePort);
        if (!ftp.login(SHARED_WORKSPACE_LOGIN_NAME, mWorkspacePassword)) {
            throw new IOException(""Unable to login to shared workspace."");
        }
        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
        return ftp;
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
","    protected Scanner loadSource(String country) {
        if (httpProxy != null && httpProxy.isEnabled()) {
            System.setProperty(""proxySet"", ""true"");
            System.setProperty(""http.proxyHost"", httpProxy.getUrl());
            System.setProperty(""http.proxyPort"", Integer.toString(httpProxy.getPort()));
        }
        try {
            URL url = new URL(this.url + country);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""GET"");
            connection.setUseCaches(false);
            return new Scanner(connection.getInputStream());
        } catch (MalformedURLException e) {
            return null;
        } catch (ProtocolException e) {
            return null;
        } catch (IOException e) {
            return null;
        }
    }
",0.0
"    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
","    private File copyFile(File currFile) throws IOException {
        String relativePath = currFile.getPath().substring(_distDir.length() + 1);
        File targetFile = new File(_installDir, relativePath);
        if (targetFile.exists()) {
            log(targetFile.getPath() + "" already exists, skipping libcopy"", Project.MSG_INFO);
            return targetFile;
        } else {
            if (!targetFile.getParentFile().exists()) {
                if (!targetFile.getParentFile().mkdirs()) {
                    log(""Unable to create target dir tree for "" + targetFile.getPath(), Project.MSG_ERR);
                    throw new IOException();
                }
            }
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(currFile);
        } catch (FileNotFoundException e) {
            log(""Library from plugin manifest appears to have been deleted: "" + currFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        try {
            fos = new FileOutputStream(targetFile);
        } catch (FileNotFoundException e) {
            log(""Unable to create target file to write to: "" + targetFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int read = 0;
        byte[] buff = new byte[65536];
        boolean success = true;
        while (read != -1 && success) {
            try {
                read = bis.read(buff, 0, 65536);
            } catch (IOException e) {
                log(""Read error whilst reading from: "" + currFile.getPath(), Project.MSG_ERR);
                success = false;
            }
            if (read != -1 && success) {
                try {
                    bos.write(buff, 0, read);
                } catch (IOException e) {
                    log(""Write error whilst writing to: "" + targetFile.getPath(), Project.MSG_ERR);
                    success = false;
                }
            }
        }
        try {
            bis.close();
        } catch (IOException e) {
        }
        try {
            bos.close();
        } catch (IOException e) {
        }
        try {
            fis.close();
        } catch (IOException e) {
        }
        try {
            fos.close();
        } catch (IOException e) {
        }
        if (!success) {
            throw new IOException();
        }
        return targetFile;
    }
",0.0
"    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
","    public void getDownloadInfo() throws Exception {
        cl = new DefaultHttpClient();
        InfoAuthPromter hp = new InfoAuthPromter();
        cl.setCredentialsProvider(hp);
        head = new HttpHead(getURL());
        head.setHeader(""User-Agent"", ""test"");
        head.setHeader(""Accept"", ""*/*"");
        head.setHeader(""Range"", ""bytes=0-"");
        HttpResponse resp = cl.execute(head);
        log.debug(""getDownloadInfo(url) - Status : "" + resp.getStatusLine());
        System.out.println(""----------------- RESPONSE HEADERS ------------------------"");
        for (Header h : resp.getAllHeaders()) {
            System.out.println(h);
        }
        System.out.println(""-----------------------------------------------------------\n"");
        int code = resp.getStatusLine().getStatusCode();
        if (code == 401) {
            throw new Exception(""HTTP Authentication Failed"");
        }
        AuthManager.putAuth(getSite(), auth);
        setURL(head.getURI().toString());
        log.debug(""Last url: "" + head.getURI());
        Header hsize = resp.getFirstHeader(""Content-Length"");
        Header hmod = resp.getFirstHeader(""Last-Modified"");
        setSize(Long.parseLong(hsize.getValue()));
        setRangeEnd(getSize() - 1);
        setResumable(code == 206);
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
",0.0
"    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
","    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    @Override
    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            URL url = new File(fileName).toURI().toURL();
            final InputStream input = url.openStream();
            prop.load(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
",0.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
",0.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    public static String rename_tag(String sessionid, String originalTag, String newTagName) {
        String jsonstring = """";
        try {
            Log.d(""current running function name:"", ""rename_tag"");
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(""https://mt0-app.cloud.cm/rpc/json"");
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair(""c"", ""Storage""));
            nameValuePairs.add(new BasicNameValuePair(""m"", ""rename_tag""));
            nameValuePairs.add(new BasicNameValuePair(""new_tag_name"", newTagName));
            nameValuePairs.add(new BasicNameValuePair(""absolute_tag"", originalTag));
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            httppost.setHeader(""Cookie"", ""PHPSESSID="" + sessionid);
            HttpResponse response = httpclient.execute(httppost);
            jsonstring = EntityUtils.toString(response.getEntity());
            Log.d(""jsonStringReturned:"", jsonstring);
            return jsonstring;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return jsonstring;
    }
",0.0
"    public static void loadProperties() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.lang.en.properties"");
            localization.load(url.openStream());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            FileInputStream is = new FileInputStream(userDir + ""OpenDarkRoom.properties"");
            preferences.load(is);
        } catch (FileNotFoundException e) {
            log.warn(""Preferences file "" + userDir + ""OpenDarkRoom.properties not found, loading defaults"");
            loadDefaultPreferences();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","        private void compileJarFile() {
            String javaFileName = jarFileName + "".java"";
            try {
                File pluginWorkDirectory = new File(CastadivaModel.PLUGIN_WORKFOLDER);
                pluginWorkDirectory.mkdirs();
                File pluginsDir = new File(pluginWorkDirectory.getPath() + ""/castadiva/Plugins"");
                pluginsDir.mkdirs();
                BufferedWriter bout = new BufferedWriter(new FileWriter(pluginWorkDirectory.getPath() + ""/castadiva/Plugins/"" + javaFileName));
                bout.write(""package castadiva.Plugins;\n"");
                bout.write(""import java.io.*;\n"");
                bout.write(""import java.util.zip.ZipEntry;\n"");
                bout.write(""import java.util.jar.JarFile;\n"");
                bout.write(""import lib.IPluginCastadiva;\n"");
                bout.write(""public class "" + jarFileName + "" implements IPluginCastadiva {\n"");
                bout.write(""    public String getBin() {\n"");
                bout.write(""        return \"""" + binaryFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getFlags() {\n"");
                bout.write(""        return \"""" + protocolFlags + ""\""; \n    }\n"");
                bout.write(""    public String getPathConf() {\n"");
                bout.write(""        return \"""" + configurationFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getConfContent(){\n"");
                bout.write(""        BufferedReader confFileReader;\n"");
                bout.write(""        try {\n"");
                bout.write(""            JarFile jar = new JarFile(\"""" + CastadivaModel.PLUGIN_JAR_FOLDER + ""/"" + jarFileName + "".jar\"");\n"");
                bout.write(""            ZipEntry entry = jar.getEntry(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""            confFileReader = new BufferedReader(new InputStreamReader(jar.getInputStream(entry)));\n"");
                bout.write(""            String confFile = \""\"";\n"");
                bout.write(""            String confFileLine;\n"");
                bout.write(""            while((confFileLine = confFileReader.readLine()) != null){\n"");
                bout.write(""                 confFile+=\""\\n\""+confFileLine;\n"");
                bout.write(""            }\n"");
                bout.write(""            return(confFile);\n"");
                bout.write(""        } catch (Exception ex) {\n"");
                bout.write(""            System.out.println(ex);\n"");
                bout.write(""        }\n"");
                bout.write(""        return(null);\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getConf(){\n"");
                bout.write(""        return(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getKillInstruction() {\n"");
                bout.write(""        return  \""killall "" + binFileName[binFileName.length - 1] + "" 2>/dev/null\"""" + "";\n    }\n}"");
                bout.close();
                BufferedWriter confFileWriter = new BufferedWriter(new FileWriter(CastadivaModel.PLUGIN_WORKFOLDER + ""/"" + configurationFilename[configurationFilename.length - 1]));
                confFileWriter.write(protocolConfiguration);
                confFileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(ProtocolsGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
",0.0
"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient client = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        method.setEntity(entity);
        HttpResponse response = client.execute(method);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
","    public void save(Connection conn, boolean commit) throws SQLException {
        PreparedStatement stmt = null;
        if (!isValid()) {
            String errorMessage = ""Unable to save invalid DAO '"" + getClass().getName() + ""'!"";
            if (log.isErrorEnabled()) {
                log.error(errorMessage);
            }
            throw new SQLException(errorMessage);
        }
        try {
            if (isNew()) {
                primaryKey = createNewPrimaryKey();
                stmt = conn.prepareStatement(getInsertSql());
            } else {
                stmt = conn.prepareStatement(getUpdateSql());
            }
            setValues(stmt);
            int rowCount = stmt.executeUpdate();
            if (rowCount != 1) {
                primaryKey = OvUuid.NULL_UUID;
                if (commit) {
                    conn.rollback();
                }
                String errorMessage = ""Invalid number of rows changed!"";
                if (log.isErrorEnabled()) {
                    log.error(errorMessage);
                }
                throw new SQLException(errorMessage);
            } else {
                if (commit) {
                    conn.commit();
                }
            }
        } finally {
            OvJdbcUtils.closeStatement(stmt);
        }
    }
",0.0
"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
",0.0
"    private void updateHoraatendo(Integer codemp, Integer codfilial, Integer codatendo, String horaatendo, String horaatendofin) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(""update atatendimento set horaatendo=?, horaatendofin=? "");
        sql.append(""where codemp=? and codfilial=? and codatendo=?"");
        PreparedStatement ps = getConn().prepareStatement(sql.toString());
        ps.setTime(1, Funcoes.strTimeToSqlTime(horaatendo, false));
        ps.setTime(2, Funcoes.strTimeToSqlTime(horaatendofin, false));
        ps.setInt(3, codemp);
        ps.setInt(4, codfilial);
        ps.setInt(5, codatendo);
        ps.executeUpdate();
        ps.close();
        try {
            getConn().commit();
        } catch (SQLException e) {
            getConn().rollback();
        }
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
","    public void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""acao"").equals(""confirmar"")) {
            String uuid = request.getParameter(""uuid"");
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO empresaDAO = new EmpresaDAO(pm);
            Empresa empresa = empresaDAO.pesquisar(uuid);
            if (empresa != null) {
                empresa.setAtivo(true);
                empresaDAO.criar(empresa);
            }
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_APRESENTACAO);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""logoff"")) {
            HttpSession session = request.getSession();
            session.setAttribute(""autorizado"", new Boolean(""false""));
            HttpServletResponse servletResponse = (HttpServletResponse) response;
            servletResponse.sendRedirect(Pagina.PAGINA_APRESENTACAO);
        } else if (request.getParameter(""acao"").equals(""preparar"")) {
            Empresa objeto = new Empresa();
            request.setAttribute(""objeto"", objeto);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_EMPRESA_CADASTRAR);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""cadastrar"")) {
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO empresaDAO = new EmpresaDAO(pm);
            String cnpj = request.getParameter(""cnpj"");
            String nome = request.getParameter(""nome"");
            String razao = request.getParameter(""razao"");
            String bairro = request.getParameter(""bairro"");
            String cidade = request.getParameter(""cidade"");
            String cep = request.getParameter(""cep"");
            String email = request.getParameter(""email"");
            Integer numero = null;
            if (request.getParameter(""numero"") != null && !request.getParameter(""numero"").equals("""")) {
                numero = new Integer(request.getParameter(""numero""));
            }
            String complemento = request.getParameter(""complemento"");
            String endereco = request.getParameter(""endereco"");
            String senha = request.getParameter(""senha"");
            boolean emailEncontrado = empresaDAO.pesquisarEmail(email);
            boolean cnpjEncontrado = empresaDAO.pesquisarCNPJ(cnpj);
            String uuid = UUID.randomUUID().toString();
            Empresa empresa = new Empresa(nome, razao, email, email, cnpj, endereco, numero, cep, complemento, bairro, cidade, uuid);
            if (!emailEncontrado && !cnpjEncontrado) {
                empresa = empresaDAO.adicionar(empresa);
                Usuario usuario = new Usuario(nome, email, senha, empresa.getId());
                UsuarioDAO usuarioDAO = new UsuarioDAO(pm);
                usuarioDAO.adicionar(usuario);
                StringBuffer corpo = new StringBuffer();
                corpo.append(""<html>"");
                corpo.append(""<head>"");
                corpo.append(""</head>"");
                corpo.append(""<body>"");
                corpo.append(""<body>"");
                corpo.append(""<div style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 13px; margin: 14px';>"");
                corpo.append(""<img src='http://www.appestoque.com.br/img/logo.jpg'/>"");
                corpo.append(""<h2 style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin: 0 0 16px; font-size: 18px; font-weight: normal'>Ol�, "" + empresa.getNome() + "".</h2>"");
                corpo.append(""<p>Por favor, confirme sua conta do Appestoque clicando nesse link:<br>"");
                corpo.append(""<a href='"" + Constantes.URL + Constantes.URI_CONFIRMAR + ""&&uuid="" + empresa.getUuid() + ""'"");
                corpo.append(""target='_blank'>"" + Constantes.URL + Constantes.URI_CONFIRMAR + ""&&uuid="" + empresa.getUuid() + ""</a></p>"");
                corpo.append(""<p>Quando voc� confirmar, voc� ter� acesso total ao Appestoque e todas as notifica��es futuras ser�o enviadas para este endere�o de e-mail.</p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 13px; line-height: 18px; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; margin: 0 0 10px'>"");
                corpo.append(""<span style='font: italic 13px Georgia, serif; color: rgb(102, 102, 102)'>Equipe do Appestoque</span></p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin-top: 5px; font-size: 10px; color: #888888'>"");
                corpo.append(""Se voc� recebeu essa mensagem por engano e n�o criou uma conta do Appestoque, clique"");
                corpo.append("" <a href='mailto:suporte@appestoque.com.br?subject=[Cadastro]Mensagem por engano&&body='target='_blank'>n�o � minha conta</a>.</p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin-top: 5px; font-size: 10px; color: #888888'>"");
                corpo.append(""Por favor n�o responda esta mensagem; ela foi enviada por um endere�o"");
                corpo.append(""de e-mail n�o monitorado. Esta mensagem � relacionada ao seu uso do"");
                corpo.append("" Appestoque. Para mais informa��es sobre a sua conta, por"");
                corpo.append(""favor encaminhe um e-mail para o"");
                corpo.append("" <a href='mailto:suporte@appestoque.com.br' target='_blank'>Suporte do Appestoque</a>.</p>"");
                corpo.append(""</div>"");
                corpo.append(""</body>"");
                corpo.append(""</html>"");
                Util.enviarEmail(email, Constantes.ASSUNTO_CADASTRO, corpo);
                response.sendRedirect(Pagina.PAGINA_APRESENTACAO);
            } else {
                ResourceBundle bundle = ResourceBundle.getBundle(""i18n"", request.getLocale());
                if (emailEncontrado) {
                    request.setAttribute(""mensagem"", bundle.getString(""app.mensagem.email.cadastrado""));
                } else if (cnpjEncontrado) {
                    request.setAttribute(""mensagem"", bundle.getString(""app.mensagem.cnpj.cadastrado""));
                }
                request.setAttribute(""objeto"", empresa);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_EMPRESA_CADASTRAR);
                dispatcher.forward(request, response);
            }
        } else if (request.getParameter(""acao"").equals(""selecionar"")) {
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO dao = new EmpresaDAO(pm);
            Long id = new Long(request.getParameter(""id""));
            Empresa empresa = dao.pesquisar(id);
            HttpSession session = request.getSession();
            session.setAttribute(""empresa"", empresa);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_MENU);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""noticia"")) {
            try {
                HttpURLConnection httpSource = null;
                URL url = new URL(""http://feeds.folha.uol.com.br/folha/dinheiro/rss091.xml"");
                httpSource = (HttpURLConnection) url.openConnection();
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(httpSource.getInputStream());
                doc.getDocumentElement().normalize();
                NodeList nList = doc.getElementsByTagName(""item"");
                PrintWriter out = response.getWriter();
                response.setContentType(""text/html"");
                for (int temp = 0; temp < 3; temp++) {
                    Node nNode = nList.item(temp);
                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        out.print(getTagValue(""title"", eElement) + ""<br/><br/>"");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (request.getParameter(""acao"").equals(""pdf"")) {
            try {
                ServletOutputStream servletOutputStream = response.getOutputStream();
                PDF pdf = new PDF(servletOutputStream);
                response.setHeader(""Content-Disposition"", ""attachment; filename=qrcode.pdf"");
                response.setContentType(""application/pdf"");
                Page page = new Page(pdf, Letter.PORTRAIT);
                QRCode qr = null;
                qr = new QRCode();
                qr.setTypeNumber(Mode.MODE_8BIT_BYTE);
                qr.setErrorCorrectLevel(ErrorCorrectLevel.M);
                qr.addData(""Andr� Silva Tricano"");
                qr.make();
                qr.setPosition(200, 100);
                qr.drawOn(page);
                qr = new QRCode();
                qr.setTypeNumber(Mode.MODE_8BIT_BYTE);
                qr.setErrorCorrectLevel(ErrorCorrectLevel.M);
                qr.addData(""Alan Silva Tricano"");
                qr.make();
                qr.setPosition(400, 100);
                qr.drawOn(page);
                pdf.flush();
                servletOutputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (request.getParameter(""acao"").equals(""file"")) {
            try {
                File file = new File(""d:\\MyXMLFile.xml"");
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document doc = db.parse(file);
                doc.getDocumentElement().normalize();
                System.out.println(""Root element "" + doc.getDocumentElement().getNodeName());
                NodeList nodeLst = doc.getElementsByTagName(""employee"");
                System.out.println(""Information of all employees"");
                for (int s = 0; s < nodeLst.getLength(); s++) {
                    Node fstNode = nodeLst.item(s);
                    if (fstNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element fstElmnt = (Element) fstNode;
                        NodeList fstNmElmntLst = fstElmnt.getElementsByTagName(""firstname"");
                        Element fstNmElmnt = (Element) fstNmElmntLst.item(0);
                        NodeList fstNm = fstNmElmnt.getChildNodes();
                        System.out.println(""First Name : "" + ((Node) fstNm.item(0)).getNodeValue());
                        NodeList lstNmElmntLst = fstElmnt.getElementsByTagName(""lastname"");
                        Element lstNmElmnt = (Element) lstNmElmntLst.item(0);
                        NodeList lstNm = lstNmElmnt.getChildNodes();
                        System.out.println(""Last Name : "" + ((Node) lstNm.item(0)).getNodeValue());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",0.0
"    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
","    public void run() {
        String s, s2;
        s = """";
        s2 = """";
        try {
            URL url = new URL(""http://www.m-w.com/dictionary/"" + Word);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while (((str = in.readLine()) != null) && (!stopped)) {
                s = s + str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern pattern = Pattern.compile(""popWin\\('/cgi-bin/(.+?)'"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher matcher = pattern.matcher(s);
        if ((!stopped) && (matcher.find())) {
            String newurl = ""http://m-w.com/cgi-bin/"" + matcher.group(1);
            try {
                URL url2 = new URL(newurl);
                BufferedReader in2 = new BufferedReader(new InputStreamReader(url2.openStream()));
                String str;
                while (((str = in2.readLine()) != null) && (!stopped)) {
                    s2 = s2 + str;
                }
                in2.close();
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            }
            Pattern pattern2 = Pattern.compile(""<A HREF=\""http://(.+?)\"">Click here to listen with your default audio player"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            Matcher matcher2 = pattern2.matcher(s2);
            if ((!stopped) && (matcher2.find())) {
                if (getWave(""http://"" + matcher2.group(1))) label.setEnabled(true);
            }
        }
        button.setEnabled(true);
    }
",0.0
"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private static String digest(String val) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(val.trim().getBytes());
            byte[] digest = md.digest();
            StringBuffer buf = new StringBuffer();
            for (byte b : digest) {
                String hexString = Integer.toHexString(b);
                int length = hexString.length();
                if (length > 2) {
                    hexString = hexString.substring(length - 2, length);
                } else if (length < 2) {
                    hexString = ""0"" + hexString;
                }
                buf.append(hexString);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new EnerjyException(""Could not create digest: MD5"", e);
        }
    }
",0.0
"    public String getResultStr(String urls) {
        try {
            String result = null;
            URL url = new URL(urls);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)"");
            connection.setDoOutput(false);
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
            String inputLine;
            int state = 0;
            StringBuilder sb = new StringBuilder();
            while ((inputLine = in.readLine()) != null) {
                sb.append(inputLine);
            }
            in.close();
            return sb.toString();
        } catch (Exception e) {
            return """";
        }
    }
","    @HttpAction(name = ""map.calibrate"", method = { HttpAction.Method.post }, responseType = ""text/plain"", parameters = { @HttpParameter(name = ""user""), @HttpParameter(name = ""guid""), @HttpParameter(name = ""uploadFile""), @HttpParameter(name = ""mapUrl""), @HttpParameter(name = ""mapSource""), @HttpParameter(name = ""south""), @HttpParameter(name = ""west""), @HttpParameter(name = ""north""), @HttpParameter(name = ""east"") })
    @HttpAuthentication(method = { HttpAuthentication.Method.WSSE })
    public String calibrate(User user, String guid, Collection<FileItem> uploadFile, String mapUrl, String mapSource, String south, String west, String north, String east) throws HttpRpcException {
        GenericDAO<UserMapOriginal> dao = DAOFactory.createDAO(UserMapOriginal.class);
        try {
            TransactionManager.beginTransaction();
        } catch (Throwable e) {
            logger.error(e);
            return ""FAIL"";
        }
        try {
            final UserMapOriginal mapOriginal = dao.findUniqueByCriteria(Expression.eq(""guid"", guid));
            if (mapOriginal == null) throw new HttpRpcException(ErrorConstant.ERROR_NOT_FOUND, ""map"");
            if (UserMapOriginal.SubState.INPROC.equals(mapOriginal.getSubstate())) throw new HttpRpcException(ErrorConstant.ERROR_ILLEGAL_OBJECT_STATE, ""map"");
            if (UserMapOriginal.State.COMBINE.equals(mapOriginal.getState())) throw new HttpRpcException(ErrorConstant.ERROR_ILLEGAL_OBJECT_STATE, ""map"");
            if (!""download"".equals(mapSource) && !""upload"".equals(mapSource) && !""current"".equals(mapSource)) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, ""mapSource"");
            try {
                mapOriginal.setSWLat(Double.parseDouble(south));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, ""south"");
            }
            try {
                mapOriginal.setSWLon(Double.parseDouble(west));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, ""west"");
            }
            try {
                mapOriginal.setNELat(Double.parseDouble(north));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, ""north"");
            }
            try {
                mapOriginal.setNELon(Double.parseDouble(east));
            } catch (Throwable t) {
                throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT, ""east"");
            }
            mapOriginal.setState(UserMapOriginal.State.CALIBRATE);
            mapOriginal.setSubstate(UserMapOriginal.SubState.INPROC);
            final XFile mapStorage = new XFile(new XFile(Configuration.getInstance().getPrivateMapStorage().toString()), mapOriginal.getGuid());
            mapStorage.mkdir();
            if (""download"".equals(mapSource)) {
                final XFile tmpFile;
                final URI uri = new URI(mapUrl);
                String query = (StringUtils.isEmpty(uri.getQuery())) ? ""?BBOX="" : ""&BBOX="";
                query += west + "","" + south + "","" + east + "","" + north;
                URLConnection con = (new URL(mapUrl + query)).openConnection();
                if (con == null || con.getContentLength() == 0) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_RESOURCE, ""mapUrl"");
                if (!con.getContentType().startsWith(""image/"")) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT_TYPE, ""mapUrl"");
                tmpFile = new XFile(mapStorage, mapOriginal.getGuid());
                XFileOutputStream out = new XFileOutputStream(tmpFile);
                IOUtils.copy(con.getInputStream(), out);
                out.flush();
                out.close();
            } else if (""upload"".equals(mapSource)) {
                final XFile tmpFile;
                final FileItem file = uploadFile.iterator().next();
                if (file == null || file.getSize() == 0) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_RESOURCE, ""uploadFile"");
                if (!file.getContentType().startsWith(""image/"")) throw new HttpRpcException(ErrorConstant.ERROR_INVALID_OBJECT_TYPE, ""uploadFile"");
                tmpFile = new XFile(mapStorage, mapOriginal.getGuid());
                XFileOutputStream out = new XFileOutputStream(tmpFile);
                IOUtils.copy(file.getInputStream(), out);
                out.flush();
                out.close();
            } else if (""current"".equals(mapSource)) {
            }
            dao.update(mapOriginal);
            TransactionManager.commitTransaction();
            try {
                PoolClientInterface pool = PoolFactory.getInstance().getClientPool();
                if (pool == null) throw ErrorConstant.EXCEPTION_INTERNAL;
                pool.put(mapOriginal, new StatesStack(new byte[] { 0x00, 0x18 }), GeneralCompleteStrategy.class);
            } catch (Throwable t) {
                logger.error(t);
            }
            return ""SUCCESS"";
        } catch (HttpRpcException e) {
            TransactionManager.rollbackTransaction();
            logger.error(e);
            return ""FAIL"";
        } catch (Throwable e) {
            logger.error(e);
            TransactionManager.rollbackTransaction();
            return ""FAIL"";
        }
    }
",0.0
"    public void testImageDataField() {
        PropertySet propertySet = fetchPropertySet();
        try {
            ImageDataField dataField = propertySet.getDataField(PropertySetTestStruct.TESTBLOCK_IMAGE, ImageDataField.class);
            URL url = getClass().getResource(""JFire_Test.gif"");
            if (url == null) return;
            InputStream in = url.openStream();
            try {
                dataField.loadStream(in, ""JFire_Test.gif"", ""image/gif"");
            } finally {
                in.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(""Setting image of ImageDataField failed"", e);
        }
        try {
            propertySet.deflate();
            getPropertyManager().storePropertySet(propertySet, true, FETCH_GROUPS, FETCH_DEPTH);
        } catch (Exception e) {
            throw new RuntimeException(""Storing PropertySet with ImageDataField failed"", e);
        }
    }
","    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
",0.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"	public FTPClient sample1c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    public static boolean fileCopy(String sFileSrc, String sFileDst) {
        boolean ok = true;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            File fSrc = new File(sFileSrc);
            int len = 32768;
            byte[] buff = new byte[(int) Math.min(len, fSrc.length())];
            fis = new FileInputStream(fSrc);
            boolean append = false;
            fos = new FileOutputStream(sFileDst, append);
            while (0 < (len = fis.read(buff))) fos.write(buff, 0, len);
            fos.flush();
        } catch (IOException e) {
            e.printStackTrace();
            ok = false;
        } finally {
            if (fos != null) {
                try {
                    fos.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JdxLog.logError(ex);
                }
            }
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                    JdxLog.logError(ex);
                }
            }
        }
        return ok;
    }
",0.0
"    public static String hexHash(Object obj) {
        String toHash = obj.toString();
        try {
            MessageDigest dg = MessageDigest.getInstance(""MD5"");
            dg.update(toHash.getBytes(""UTF-8""));
            return bytesToHex(dg.digest());
        } catch (Exception e) {
            throw new RuntimeException(""Error while hashing string: "" + toHash, e);
        }
    }
","    @Override
    protected String determineDataType() {
        final String spec = getSpec();
        if (spec.endsWith(""=jpeg"")) {
            return ""jpeg"";
        } else if (mimeType != UNSET) {
            return mimeType;
        } else if (spec != SPEC_UNSET && spec.startsWith(""http"") && spec.contains(""fedora"")) {
            if (spec.endsWith(""bdef:AssetDef/getFullView/"")) {
                return ""html"";
            } else {
                String type = getProperty(CONTENT_TYPE);
                if (type == null || type.length() < 1) {
                    try {
                        final URL url = (mURL != null ? mURL : new URL(getSpec()));
                        if (DEBUG.Enabled) out(""polling actual HTTP server for content-type: "" + url);
                        if (!VUE.isApplet()) type = url.openConnection().getHeaderField(""Content-type""); else type = null;
                        if (DEBUG.Enabled) {
                            out(""got contentType "" + url + "" ["" + type + ""]"");
                        }
                        if (type != null && type.length() > 0) setProperty(CONTENT_TYPE, type);
                    } catch (Throwable t) {
                        Log.error(""content-type-fetch: "" + this, t);
                    }
                }
                if (type != null && type.contains(""/"")) {
                    mimeType = type.split(""/"")[1];
                    if (mimeType.indexOf(';') > 0) {
                        mimeType = mimeType.substring(0, mimeType.indexOf(';'));
                    }
                    return mimeType;
                }
            }
        }
        return super.determineDataType();
    }
",0.0
"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
","    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
",0.0
"    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
","    public static String urlContentToString(URL url, String encoding) throws IOException {
        String out = """";
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));
        String line;
        while ((line = in.readLine()) != null) {
            out += line;
        }
        in.close();
        return out;
    }
",0.0
"    public static String encodeMD5(String param) throws Exception {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(param.getBytes());
        byte[] hash = digest.digest();
        char buf[] = new char[hash.length * 2];
        for (int i = 0, x = 0; i < hash.length; i++) {
            buf[x++] = HEX_CHARS[(hash[i] >>> 4) & 0xf];
            buf[x++] = HEX_CHARS[hash[i] & 0xf];
        }
        return String.valueOf(buf);
    }
","    public void chmod(String remoteFile, String mode) {
        String remotePath = connector.getRemoteDirectory();
        remotePath += PATH_SEPARATOR + remoteFile;
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info(""Connected to "" + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                String parameters = ""chmod "" + mode + "" "" + remotePath;
                ftp.site(parameters);
                ftp.logout();
            }
            ftp.disconnect();
        } catch (SocketException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    public static String getHash(String password) {
        if (password == null || password.length() == 0) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            password = saltPassword(password);
            digest.update(password.getBytes());
            String result = getHexString(digest.digest());
            return result;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
",1.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
",0.0
"    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
","    public File unpackResource(String resourceName) throws IOException {
        File file = null;
        URL url = getURL(""/"" + resourceName);
        URLConnection urlConn = url.openConnection();
        if (urlConn instanceof JarURLConnection) {
            file = handleJarFile((JarURLConnection) urlConn, resourceName);
        } else if (urlConn instanceof BundleURLConnection) {
            file = handleBundleFile((BundleURLConnection) urlConn);
        } else {
            file = handleClassicFile(resourceName);
        }
        return file;
    }
",0.0
"    public boolean actualizarEstadoEliminacion(int idTorneo) {
        int intResult = 0;
        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    public int deleteRecord(String uuid) throws SQLException, CatalogIndexException {
        Connection con = null;
        boolean autoCommit = true;
        PreparedStatement st = null;
        ResultSet rs = null;
        int nRows = 0;
        boolean cancelTask = false;
        StringSet fids = new StringSet();
        if (cswRemoteRepository.isActive()) {
            StringSet uuids = new StringSet();
            uuids.add(uuid);
            fids = queryFileIdentifiers(uuids);
        }
        try {
            con = returnConnection().getJdbcConnection();
            autoCommit = con.getAutoCommit();
            con.setAutoCommit(false);
            String sSql = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>''"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            rs = st.executeQuery();
            if (rs.next()) {
                cancelTask = rs.getInt(1) > 0;
            }
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            nRows = st.executeUpdate();
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            st.executeUpdate();
            CollectionDao colDao = new CollectionDao(this.getRequestContext());
            if (colDao.getUseCollections()) {
                closeStatement(st);
                sSql = ""DELETE FROM "" + colDao.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";
                logExpression(sSql);
                st = con.prepareStatement(sSql);
                st.setString(1, uuid);
                st.executeUpdate();
            }
            con.commit();
        } catch (SQLException ex) {
            if (con != null) {
                con.rollback();
            }
            throw ex;
        } finally {
            closeResultSet(rs);
            closeStatement(st);
            if (con != null) {
                con.setAutoCommit(autoCommit);
            }
        }
        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();
        if (indexAdapter != null) {
            indexAdapter.deleteDocument(uuid);
            if (cswRemoteRepository.isActive()) {
                if (fids.size() > 0) cswRemoteRepository.onRecordsDeleted(fids);
            }
        }
        if (cancelTask && getRequestContext() != null) {
            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), uuid);
        }
        return nRows;
    }
",1.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
",0.0
"    public void testImageDataField() {
        PropertySet propertySet = fetchPropertySet();
        try {
            ImageDataField dataField = propertySet.getDataField(PropertySetTestStruct.TESTBLOCK_IMAGE, ImageDataField.class);
            URL url = getClass().getResource(""JFire_Test.gif"");
            if (url == null) return;
            InputStream in = url.openStream();
            try {
                dataField.loadStream(in, ""JFire_Test.gif"", ""image/gif"");
            } finally {
                in.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(""Setting image of ImageDataField failed"", e);
        }
        try {
            propertySet.deflate();
            getPropertyManager().storePropertySet(propertySet, true, FETCH_GROUPS, FETCH_DEPTH);
        } catch (Exception e) {
            throw new RuntimeException(""Storing PropertySet with ImageDataField failed"", e);
        }
    }
","    public JTips(String tipFile) {
        super(new BorderLayout());
        BufferedReader in = null;
        try {
            URL url = getClass().getResource(tipFile);
            if (url != null) {
                in = new BufferedReader(new InputStreamReader(url.openStream()));
                String line = null;
                StringBuffer sb = new StringBuffer();
                while (null != (line = in.readLine())) {
                    if (sep.equals(line)) {
                        addTip(sb.toString());
                        sb = new StringBuffer();
                    } else {
                        sb.append(line);
                        sb.append(""\n"");
                    }
                }
                if (sb != null && sb.length() > 1) {
                    addTip(sb.toString());
                }
            } else {
                Activator.log.warn(""No tip file: "" + tipFile);
            }
        } catch (Exception e) {
            Activator.log.error(""Failed to load tips from "" + tipFile, e);
        } finally {
            try {
                in.close();
            } catch (Exception ignored) {
            }
        }
        if (tips.size() == 0) {
            tips.add(new Tip("""", ""No tips found"", """"));
        } else {
            Activator.log.info(""loaded "" + tips.size() + "" tips"");
        }
        html = new JTextPane();
        html.setContentType(""text/html"");
        html.setEditable(false);
        html.addHyperlinkListener(new HyperlinkListener() {

            public void hyperlinkUpdate(HyperlinkEvent ev) {
                if (ev.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    URL url = ev.getURL();
                    try {
                        Util.openExternalURL(url);
                    } catch (Exception e) {
                        Activator.log.warn(""Failed to open external url="" + url, e);
                    }
                }
            }
        });
        scroll = new JScrollPane(html);
        scroll.setPreferredSize(new Dimension(350, 200));
        scroll.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5), BorderFactory.createLoweredBevelBorder()));
        final ActionListener nextAction = new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + 1) % tips.size());
            }
        };
        JButton closeButton = new JButton(Strings.get(""close""));
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                if (frame != null) {
                    frame.setVisible(false);
                }
            }
        });
        nextButton = new JButton(Strings.get(""next_tip""));
        nextButton.addActionListener(nextAction);
        prevButton = new JButton(Strings.get(""prev_tip""));
        prevButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent ev) {
                setTip((tipIx + tips.size() - 1) % tips.size());
            }
        });
        JPanel bottomPanel = new JPanel(new BorderLayout());
        JPanel topPanel = new JPanel(new BorderLayout());
        ctrlPanel = new JPanel(new FlowLayout());
        ctrlPanel.add(closeButton);
        ctrlPanel.add(prevButton);
        ctrlPanel.add(nextButton);
        bottomPanel.add(ctrlPanel, BorderLayout.EAST);
        JLabel titleC = new JLabel(""Did you know that..."");
        titleC.setFont(new Font(""Dialog"", Font.BOLD, 15));
        titleC.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 3));
        topPanel.add(titleC, BorderLayout.WEST);
        JLabel icon = new JLabel(Activator.desktop.tipIcon);
        icon.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent ev) {
                nextAction.actionPerformed(null);
            }
        });
        icon.setToolTipText(nextButton.getText());
        add(icon, BorderLayout.WEST);
        add(scroll, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);
        add(topPanel, BorderLayout.NORTH);
        setTip((int) (Math.random() * tips.size()));
    }
",0.0
"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            clearTables(stmt);
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
","    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");
            messageDiegest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        }
    }
","    public List<Datastream> getFiles(final String pFile) throws IOException {
        List<Datastream> tDatastreams = new ArrayList<Datastream>();
        new File(this.getTmpExtractDirName()).mkdir();
        ZipFile tZipFile = new ZipFile(pFile);
        Enumeration tEntries = tZipFile.entries();
        ZipEntry tEntry = null;
        File tFile = null;
        String tFileLocation = """";
        LocalDatastream tLocalDs = null;
        while (tEntries.hasMoreElements()) {
            tEntry = (ZipEntry) tEntries.nextElement();
            if (tEntry.isDirectory()) {
                continue;
            }
            tFileLocation = this.getTmpExtractDirName() + System.getProperty(""file.separator"") + tEntry.getName();
            tFile = new File(tFileLocation);
            LOG.debug(""Saving "" + tEntry.getName() + "" to "" + tFile.getPath());
            tFile.getParentFile().mkdirs();
            IOUtils.copy(tZipFile.getInputStream(tEntry), new FileOutputStream(tFile));
            tLocalDs = new LocalDatastream(tFile.getName().split(""\\."")[0], FindMimeType.getMimeType(tFile.getName().split(""\\."")[1]), tFileLocation);
            tLocalDs.setLabel(tEntry.getName());
            tDatastreams.add(tLocalDs);
        }
        return tDatastreams;
    }
",0.0
"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF channel = null;
        try {
            channel = FeedParser.parse(new ChannelBuilder(), url);
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream is = new URL(url).openStream();
            InputStreamReader reader = new InputStreamReader(is);
            channel = FeedParser.parse(new ChannelBuilder(), reader);
            reader.close();
            is.close();
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        }
        DAOChannel.addChannel(channel);
        DAOFavicon.addFaviconForChannel(channel);
        return channel;
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",0.0
"    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write(""test"".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info(""Wrote "" + bytesSaved + "" bytes to "" + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
","    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter to = new FileWriter(toFile);
        char[] buffer = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(buffer)) != -1) {
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        to.close();
        from.close();
    }
",1.0
"    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
","    private static String hash(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (Exception e) {
            return null;
        }
        try {
            md.update(string.getBytes(""UTF-8""));
        } catch (Exception e) {
            return null;
        }
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
",1.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    public static boolean getFile(String s, String name) {
        try {
            File f = new File(""D:\\buttons\\data\\sounds\\"" + name);
            URL url = new URL(s);
            URLConnection conn = url.openConnection();
            BufferedInputStream bis = new BufferedInputStream(conn.getInputStream());
            int ch;
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(f));
            while ((ch = bis.read()) != -1) {
                bos.write(ch);
            }
            System.out.println(""wrote audio url: "" + s + "" \nto file "" + f);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public void put(File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(fileToPut.getName(), input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    public static Document tidyHTML(URL url) throws XMLHelperException {
        try {
            URLConnection inConnection = url.openConnection();
            if (inConnection.getContentType().startsWith(""text/xml"") || inConnection.getContentType().startsWith(""text/xhtml"")) {
                return parseXMLFromURL(url);
            } else if (inConnection.getContentType().startsWith(""text/html"")) {
                InputStream is = inConnection.getInputStream();
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                int totalBytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int bytesRead = is.read(buffer, 0, buffer.length);
                    if (bytesRead < 0) break;
                    for (int i = 0; i < bytesRead; i++) {
                        byte b = buffer[i];
                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;
                        buffer[i] = b;
                    }
                    out.write(buffer, 0, bytesRead);
                    totalBytes += bytesRead;
                }
                is.close();
                out.close();
                String outContent = out.toString();
                InputStream in = new ByteArrayInputStream(out.toByteArray());
                Tidy tidy = new Tidy();
                tidy.setShowWarnings(false);
                tidy.setXmlOut(true);
                tidy.setXmlPi(false);
                tidy.setDocType(""omit"");
                tidy.setXHTML(false);
                tidy.setRawOut(true);
                tidy.setNumEntities(true);
                tidy.setQuiet(true);
                tidy.setFixComments(true);
                tidy.setIndentContent(true);
                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);
                String result = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex = result.indexOf(""<!DOCTYPE"")) >= 0) {
                    endIndex = result.indexOf("">"", startIndex);
                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());
                }
                while ((startIndex = result.indexOf(""<script"")) >= 0) {
                    endIndex = result.indexOf(""</script>"");
                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());
                }
                in.close();
                baos.close();
                return parseXMLFromString(result);
            } else {
                throw new XMLHelperException(""Unable to tidy content type: "" + inConnection.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException(""Unable to perform input/output"", ioe);
        }
    }
",0.0
"    public Map readMap(String filename) throws Exception {
        xmlPath = filename.substring(0, filename.lastIndexOf(File.separatorChar) + 1);
        String xmlFile = makeUrl(filename);
        URL url = new URL(xmlFile);
        InputStream is = url.openStream();
        if (filename.endsWith("".gz"")) {
            is = new GZIPInputStream(is);
        }
        Map unmarshalledMap = unmarshal(is);
        unmarshalledMap.setFilename(filename);
        map = null;
        return unmarshalledMap;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }
",0.0
"    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
","                public void run() {
                    ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j]);
                    ShareFileReader reader = new ShareFileReader(readers[j], files[0]);
                    ShareFileWriter writer = new ShareFileWriter(part, new File(""Downloads/"" + readers[j].getName()));
                    long tot = 0;
                    byte[] b = new byte[(int) (Math.random() * 10000)];
                    while (tot < readers[j].getSize()) {
                        reader.read(b);
                        byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length];
                        System.arraycopy(b, 0, bwrite, 0, b.length);
                        writer.write(bwrite, b.length);
                        tot += b.length;
                    }
                    done++;
                    System.out.println((int) (done * 100.0 / PARTS) + ""% Complete"");
                }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    @Test
    public void shouldProgateStagingRepoToYumGroupRepo() throws Exception {
        givenGroupRepository(GROUP_REPO_ID, ""maven2yum"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_1, ""4.3.2"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_2, ""2.3.4"");
        wait(10, SECONDS);
        final HttpResponse response = executeGetWithResponse(NEXUS_BASE_URL + ""/content/groups/staging-test-group/repodata/primary.xml.gz"");
        final String repoContent = IOUtils.toString(new GZIPInputStream(new ByteArrayInputStream(toByteArray(response.getEntity()))));
        assertThat(response.getStatusLine().getStatusCode(), is(200));
        assertThat(repoContent, containsString(ARTIFACT_ID_1));
        assertThat(repoContent, containsString(ARTIFACT_ID_2));
    }
",0.0
"        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
","    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement objectInsert = null;
        String sqlString = null;
        int newID = 0;
        try {
            conn.setAutoCommit(false);
            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";
            objectInsert = conn.prepareStatement(sqlString);
            ResultSet r = objectInsert.executeQuery(sqlString);
            newID = r.getInt(""NEXTVAL"");
            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";
            objectInsert = conn.prepareStatement(sqlString);
            objectInsert.setInt(1, newID);
            objectInsert.setString(2, getRoomKey());
            objectInsert.setString(3, ""ROOM"");
            objectInsert.executeUpdate();
            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";
            conn.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) {
                try {
                    System.err.print(""Transaction is being rolled back"");
                    conn.rollback();
                } catch (SQLException excep) {
                    excep.printStackTrace();
                }
            }
        } finally {
            if (objectInsert != null) {
                objectInsert.close();
            }
            conn.setAutoCommit(true);
        }
    }
",1.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","	public static void BubbleSortInt1(int[] num) {
		boolean flag = true; // set flag to true to begin first pass
		int temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",0.0
"    void downloadImage(String filename, File imageFile) throws Exception {
        String URL = Constants.IMAGE_URL + ""/"" + filename;
        SiteResponse response = stratSite.getResponse(URL);
        InputStream inputStream = response.getInputStream();
        OutputStream outputStream = new FileOutputStream(imageFile);
        IOUtils.copy(inputStream, outputStream);
    }
","    public static DataElement createMD5Sum(int type, String data) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(data.getBytes());
            byte[] dt = md.digest();
            return new DataElement(type, hexEncode(dt));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new DataElement(type);
    }
",0.0
"    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + ""\n"");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
","                public void run() {
                    ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j]);
                    ShareFileReader reader = new ShareFileReader(readers[j], files[0]);
                    ShareFileWriter writer = new ShareFileWriter(part, new File(""Downloads/"" + readers[j].getName()));
                    long tot = 0;
                    byte[] b = new byte[(int) (Math.random() * 10000)];
                    while (tot < readers[j].getSize()) {
                        reader.read(b);
                        byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length];
                        System.arraycopy(b, 0, bwrite, 0, b.length);
                        writer.write(bwrite, b.length);
                        tot += b.length;
                    }
                    done++;
                    System.out.println((int) (done * 100.0 / PARTS) + ""% Complete"");
                }
",0.0
"    public static final InputStream getInputStream(final String location) {
        final File f = new File(location);
        if (f.exists()) {
            try {
                return new FileInputStream(f);
            } catch (final FileNotFoundException e) {
                throw new Error(e);
            }
        }
        URL url = Iotil.class.getClassLoader().getResource(location);
        try {
            if (url == null) {
                url = new URL(location);
            }
            return url.openStream();
        } catch (final IOException e) {
            throw new RuntimeException(e);
        }
    }
","    protected void copyFile(File from, File to) throws IOException {
        new File(intSfPath).delete();
        if (to.exists() && (from.length() == to.length()) && (from.lastModified() == to.lastModified())) return;
        if (to.exists()) to.delete();
        to.createNewFile();
        FileChannel inFC = null;
        FileChannel outFC = null;
        try {
            inFC = new FileInputStream(from).getChannel();
            outFC = new FileOutputStream(to).getChannel();
            long cnt = outFC.transferFrom(inFC, 0, inFC.size());
            if (cnt < inFC.size()) throw new IOException(""File copy failed"");
        } finally {
            if (inFC != null) {
                try {
                    inFC.close();
                } catch (IOException ex) {
                }
            }
            if (outFC != null) {
                try {
                    outFC.close();
                } catch (IOException ex) {
                }
            }
            to.setLastModified(from.lastModified());
        }
    }
",0.0
"    public static byte[] getBytes(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        int contentLength = connection.getContentLength();
        ByteArrayOutputStream tmpOut;
        if (contentLength != -1) {
            tmpOut = new ByteArrayOutputStream(contentLength);
        } else {
            tmpOut = new ByteArrayOutputStream(16384);
        }
        byte[] buf = new byte[512];
        while (true) {
            int len = in.read(buf);
            if (len == -1) {
                break;
            }
            tmpOut.write(buf, 0, len);
        }
        in.close();
        tmpOut.close();
        byte[] array = tmpOut.toByteArray();
        return array;
    }
","    public DProblem loadProblem(String urlString) throws DataStoreException {
        try {
            URL url = new URL(urlString);
            IWPLog.info(this, ""[DProblemManager_HTTP] URL :"" + urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer data = new StringBuffer();
            String line;
            int i = 0;
            while ((line = in.readLine()) != null) {
                data.append(line + ""\n"");
                i++;
            }
            DProblem prob = DProblemXMLParser.load(data.toString());
            if (prob != null) {
                prob.setUsername(""Local"");
                prob.setFilename(urlString);
                prob.setAccessMode(DProblemManager.HTTP);
            }
            return prob;
        } catch (MalformedURLException e) {
            throw new DataStoreException(e);
        } catch (IOException e) {
            IWPLog.info(this, ""[DProblemManager_HTTP.loadProblem] unable to load: "" + urlString + "": "" + e.getMessage());
            e.printStackTrace();
            throw new DataStoreException(e);
        } catch (XMLParserException e) {
            throw new DataStoreException(e);
        }
    }
",0.0
"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
","    @SuppressWarnings(""unused"")
    private boolean copyAvecProgressNIO(File sRC2, File dEST2, JProgressBar progressEnCours) {
        boolean resultat = false;
        long PourcentEnCours = 0;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(sRC2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(dEST2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la creation du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        progressEnCours.setValue(0);
        progressEnCours.setString(sRC2 + "" : 0 %"");
        try {
            long tailleCopie = channelSrc.transferTo(0, channelSrc.size(), channelDest);
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" vers la destination "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        progressEnCours.setValue(100);
        progressEnCours.setString(sRC2 + "" : 100 %"");
        try {
            if (channelSrc.size() == channelDest.size()) {
                resultat = true;
            } else {
                resultat = false;
            }
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fis.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fos.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        return (resultat);
    }
",1.0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public boolean updateLOB(String sql, int displayType, Object value) throws RemoteException {
        if (sql == null || value == null) {
            log.fine(""No sql or data"");
            return false;
        }
        log.fine(sql);
        m_updateLOBCount++;
        boolean success = true;
        Connection con = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(sql);
            if (displayType == DisplayType.TextLong) pstmt.setString(1, (String) value); else pstmt.setBytes(1, (byte[]) value);
            int no = pstmt.executeUpdate();
            pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            log.log(Level.FINE, sql, e);
            success = false;
        }
        try {
            if (pstmt != null) pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            pstmt = null;
        }
        if (success) {
            try {
                con.commit();
                con.close();
                con = null;
            } catch (Exception e) {
                log.log(Level.SEVERE, ""commit"", e);
                success = false;
            }
        }
        if (!success) {
            log.severe(""rollback"");
            try {
                con.rollback();
                con.close();
                con = null;
            } catch (Exception ee) {
                log.log(Level.SEVERE, ""rollback"", ee);
            }
        }
        try {
            if (con != null) con.close();
            con = null;
        } catch (Exception e) {
            con = null;
        }
        return success;
    }
",0.0
"    public static void readDefault() {
        ClassLoader l = Skeleton.class.getClassLoader();
        URL url;
        if (l != null) {
            url = l.getResource(DEFAULT_LOC);
        } else {
            url = ClassLoader.getSystemResource(DEFAULT_LOC);
        }
        if (url == null) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
        try {
            InputStreamReader reader = new InputStreamReader(url.openStream());
            readSkel(new BufferedReader(reader));
        } catch (IOException e) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
",0.0
"    public boolean actualizarRondaActual(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    @Override
    @RemoteMethod
    public boolean decrypt(int idAnexo) {
        try {
            Anexo anexo = anexoService.selectById(idAnexo);
            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);
            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);
            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());
            IOUtils.copy(cis, fos);
            cis.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0.0
"    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
","    private void doDecrypt() {
        runningThread = new Thread() {

            @Override
            public void run() {
                Application.getController().notifyProgressStarted();
                Application.getController().notifyProgressUpdated(-1);
                for (int f = 0; f < fileList.size(); f++) {
                    File archive = fileList.get(f);
                    String arname = archive.getName();
                    String arsuf = arname.substring(arname.lastIndexOf('.'), arname.length());
                    Algorithm alg = null;
                    Algorithm algs[] = algFactory.getAlgorithms();
                    for (int i = 0; i < algs.length; i++) {
                        if (algs[i].getSuffix().equalsIgnoreCase(arsuf)) {
                            alg = algs[i];
                            break;
                        }
                    }
                    if (alg == null) {
                        Application.getController().displayError(bundle.getString(""unknown_alg_title""), bundle.getString(""unknown_alg_text""));
                        return;
                    }
                    currentAlgorithm = alg;
                    if (!alg.initDecrypt(password)) {
                        Application.getController().displayError(bundle.getString(""dec_init_fail_title""), bundle.getString(""dec_init_fail_text""));
                        return;
                    }
                    try {
                        ZipArchiveInputStream zis = null;
                        InputStream is = null;
                        if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_STREAM) {
                            is = alg.getDecryptionStream(new FileInputStream(archive));
                            if (is == null) {
                                Application.getController().displayError(bundle.getString(""dec_init_fail_title""), bundle.getString(""dec_init_fail_text""));
                                return;
                            }
                        } else if (EncryptionMode.getBestEncryptionMode(alg.getEncryptionMode()) == EncryptionMode.MODE_BLOCK) {
                            is = new BlockCipherInputStream(new FileInputStream(archive), alg);
                            if (is == null) {
                                Application.getController().displayError(bundle.getString(""dec_init_fail_title""), bundle.getString(""dec_init_fail_text""));
                                return;
                            }
                        }
                        zis = new ZipArchiveInputStream(is);
                        if (zis == null) {
                            Application.getController().displayError(bundle.getString(""dec_init_fail_title""), bundle.getString(""dec_init_fail_text""));
                            return;
                        }
                        File outputDir = getTargetDirectory();
                        if (outputDir == null) {
                            return;
                        }
                        if (!outputDir.exists()) {
                            if (!outputDir.mkdir()) {
                                Application.getController().displayError(bundle.getString(""output_dir_fail_title""), outputDir.getAbsolutePath() + "" "" + bundle.getString(""output_dir_fail_text""));
                                return;
                            }
                        }
                        ZipArchiveEntry zae = null;
                        boolean gotEntries = false;
                        while ((zae = zis.getNextZipEntry()) != null) {
                            gotEntries = true;
                            File out = new File(outputDir, zae.getName());
                            if (out.exists()) {
                                if (!mayOverwrite(out)) {
                                    continue;
                                }
                            }
                            Application.getController().displayVerbose(""writing to file: "" + out.getAbsolutePath());
                            if (!out.getParentFile().exists()) {
                                out.getParentFile().mkdirs();
                            }
                            if (zae.isDirectory()) {
                                out.mkdir();
                                continue;
                            }
                            FileOutputStream os = new FileOutputStream(out);
                            long length = zae.getCompressedSize(), counter = 0;
                            Application.getController().displayVerbose(""Length of zip entry "" + zae.getName() + "" is "" + length + ""b"");
                            byte[] buffer = new byte[16384];
                            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
                            DigestInputStream in = new DigestInputStream(zis, md);
                            while ((counter = in.read(buffer)) > 0) {
                                if (Thread.currentThread().isInterrupted()) {
                                    os.close();
                                    zis.close();
                                    Application.getController().notifyProgressFinished();
                                    resetModel(true);
                                    return;
                                }
                                os.write(buffer, 0, (int) counter);
                            }
                            os.close();
                            if (zae.getComment() != null && zae.getComment().length() > 0) {
                                if (Arrays.equals(md.digest(), new Base64().decode(zae.getComment()))) {
                                    Application.getController().displayVerbose(""Hash of "" + zae.getName() + "": "" + new Base64().encodeToString(md.digest()));
                                    Application.getController().displayError(""Hash Error"", ""The stored hash of the original file and the hash of the decrypted data do not match. Normally, this means that your data has been manipulated/damaged, but it can also happen if your Java Runtime has a bug in his hash functions.\nIT IS VERY IMPORTANT TO CHECK THE INTEGRITY OF YOUR DECRYPTED DATA!"");
                                } else {
                                    Application.getController().displayVerbose(""the hash of "" + zae.getName() + "" was verified succesfully"");
                                }
                            }
                        }
                        if (!gotEntries) {
                            Application.getController().displayError(bundle.getString(""error_no_entries_title""), bundle.getString(""error_no_entries_text""));
                            outputDir.delete();
                        }
                        zis.close();
                        resetModel(false);
                    } catch (FileNotFoundException ex) {
                        Application.getController().displayError(bundle.getString(""error_file_not_exist""), ex.getLocalizedMessage());
                    } catch (IOException ex) {
                        Application.getController().displayError(bundle.getString(""error_generic_io""), ex.getLocalizedMessage());
                    } catch (NoSuchAlgorithmException ex) {
                        Application.getController().displayError(bundle.getString(""unknown_alg_text""), ex.getLocalizedMessage());
                    }
                }
                Application.getController().notifyProgressFinished();
                resetModel(true);
            }
        };
        runningThread.start();
    }
",0.0
"public static String md5(String text) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(text.getBytes(AlipayConfig.input_charset));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] bytes = msgDigest.digest();
        String md5Str = new String(encodeHex(bytes));
        return md5Str;
    }","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getRequestURI().split(""/"")[3];
        if (log.isDebugEnabled()) log.debug(""request: "" + id + "" from: "" + request.getRemoteHost());
        Song song = manager.find(id);
        if (song != null) {
            File file = new File(song.getFile());
            if (file.exists()) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.setContentType(""audio/"" + song.getType());
                response.setContentLength((int) file.length());
                FileInputStream stream = new FileInputStream(file);
                try {
                    IOUtils.copy(stream, response.getOutputStream());
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                log.warn(""file not found: "" + file);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
        } else {
            log.info(""song not found: "" + id);
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",1.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    public void adjustPadding(File file, int paddingSize, long audioStart) throws FileNotFoundException, IOException {
        logger.finer(""Need to move audio file to accomodate tag"");
        FileChannel fcIn;
        FileChannel fcOut;
        ByteBuffer paddingBuffer = ByteBuffer.wrap(new byte[paddingSize]);
        File paddedFile = File.createTempFile(""temp"", "".mp3"", file.getParentFile());
        fcOut = new FileOutputStream(paddedFile).getChannel();
        fcIn = new FileInputStream(file).getChannel();
        long written = (long) fcOut.write(paddingBuffer);
        logger.finer(""Copying:"" + (file.length() - audioStart) + ""bytes"");
        long audiolength = file.length() - audioStart;
        if (audiolength <= MAXIMUM_WRITABLE_CHUNK_SIZE) {
            long written2 = fcIn.transferTo(audioStart, audiolength, fcOut);
            logger.finer(""Written padding:"" + written + "" Data:"" + written2);
            if (written2 != audiolength) {
                throw new RuntimeException(""Problem adjusting padding, expecting to write:"" + audiolength + "":only wrote:"" + written2);
            }
        } else {
            long noOfChunks = audiolength / MAXIMUM_WRITABLE_CHUNK_SIZE;
            long lastChunkSize = audiolength % MAXIMUM_WRITABLE_CHUNK_SIZE;
            long written2 = 0;
            for (int i = 0; i < noOfChunks; i++) {
                written2 += fcIn.transferTo(audioStart + (i * MAXIMUM_WRITABLE_CHUNK_SIZE), MAXIMUM_WRITABLE_CHUNK_SIZE, fcOut);
                Runtime.getRuntime().gc();
            }
            written2 += fcIn.transferTo(audioStart + (noOfChunks * MAXIMUM_WRITABLE_CHUNK_SIZE), lastChunkSize, fcOut);
            logger.finer(""Written padding:"" + written + "" Data:"" + written2);
            if (written2 != audiolength) {
                throw new RuntimeException(""Problem adjusting padding in large file, expecting to write:"" + audiolength + "":only wrote:"" + written2);
            }
        }
        long lastModified = file.lastModified();
        fcIn.close();
        fcOut.close();
        file.delete();
        paddedFile.renameTo(file);
        paddedFile.setLastModified(lastModified);
    }
",1.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    public static String encodePassword(String password) {
        try {
            MessageDigest messageDiegest = MessageDigest.getInstance(""SHA-1"");
            messageDiegest.update(password.getBytes(""UTF-8""));
            return Base64.encodeToString(messageDiegest.digest(), false);
        } catch (NoSuchAlgorithmException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        } catch (UnsupportedEncodingException e) {
            log.error(""Ha habido un error mientras se almacenaba la clave de acceso."");
            throw new Error(e);
        }
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {
        if (source == null) throw new NullPointerException(""Parameter 'source' is null"");
        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());
        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");
        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");
        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");
        switch(type) {
            case MOVE:
                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\.jpg"")) {
                    for (int i = 0; i < frames_.size(); i++) {
                        Frame f = frames_.get(i);
                        if (f.getFile().compareTo(source) == 0) {
                            frames_.remove(i);
                            break;
                        }
                    }
                }
                source.renameTo(tmp);
                break;
            case COPY:
                FileChannel inChannel = new FileInputStream(source).getChannel();
                FileChannel outChannel = new FileOutputStream(tmp).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
                break;
        }
        for (int i = frames_.size() - 1; i >= index; i--) {
            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));
            frames_.get(i).moveTo(newFrame);
            frames_.set(i, newFrame);
        }
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));
        tmp.renameTo(newLocation);
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.set(index, f);
        return f;
    }
",1.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public void shouldBeAbleToDownloadAndUpload() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        assertThat().array(buffer.toByteArray()).isEqualTo(new byte[] { 1, 2, 3 });
    }
",0.0
"    public BufferedImage getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
","    public final void close() throws IOException {
        if (dataStream == null) throw new NullPointerException(""Write stream is null."");
        dataStream.flush();
        dataStream.close();
        dataStream = null;
        File tmpFile = new File(packPath + "".tmp"");
        FileOutputStream packStream = new FileOutputStream(packPath);
        try {
            String nbFiles = Long.toString(currentNbFiles) + ""\0"";
            packStream.write(FLAT_PACK_HEADER.getBytes(Charsets.ISO_8859_1));
            structBufferWriter.flush();
            structBufferWriter.close();
            int headerSize = structBuffer.size() + nbFiles.length();
            packStream.write(Integer.toString(headerSize).getBytes(Charsets.ISO_8859_1));
            packStream.write('\0');
            packStream.write(nbFiles.getBytes(Charsets.ISO_8859_1));
            structBuffer.writeTo(packStream);
            structBufferWriter = null;
            structBuffer = null;
            FileInputStream in = new FileInputStream(tmpFile);
            try {
                byte[] buffer = new byte[FILE_COPY_BUFFER_LEN];
                int read;
                while ((read = in.read(buffer)) > 0) packStream.write(buffer, 0, read);
                packStream.flush();
                packStream.close();
            } finally {
                Utilities.closeStream(in);
            }
        } finally {
            Utilities.closeStream(packStream);
        }
        if (tmpFile.isFile()) Utilities.deleteFile(tmpFile);
        packPath = null;
        structBuffer = null;
    }
",0.0
"    public void dumpToFile(File file) throws IOException {
        OutputStream out = new FileOutputStream(file);
        if (contentStream != null) {
            IOUtils.copy(contentStream, out);
            setPath(file.getAbsolutePath());
        } else {
            IOUtils.write(getContent(), out);
        }
        IOUtils.closeQuietly(out);
    }
","    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public ArrayList<String> getData() {
        ArrayList<String> data = new ArrayList<String>();
        String line = null;
        URL address = null;
        try {
            address = new URL(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        URLConnection urlconn = null;
        if (useProxy) {
            SocketAddress addr = new InetSocketAddress(ip, Integer.parseInt(port));
            java.net.Proxy httpProxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, addr);
            try {
                urlconn = address.openConnection(httpProxy);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                urlconn = address.openConnection();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        try {
            urlconn.connect();
        } catch (IOException e) {
            return null;
        }
        BufferedReader buffreader = null;
        try {
            buffreader = new BufferedReader(new InputStreamReader(urlconn.getInputStream()));
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            line = buffreader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (line != null) {
            data.add(line);
            try {
                line = buffreader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
",0.0
"    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
","    public File getPreprocessedTextFile(File originalTextFile) throws IOException {
        File preprocessedTextFile = File.createTempFile(""cvs"", null);
        String separatorSeq = getSeparatorSequence();
        byte[] newLine = separatorSeq.getBytes();
        Constants.CVS_LOG.debug(""Preprocessing "" + originalTextFile.getAbsolutePath() + "" to "" + preprocessedTextFile.getAbsolutePath() + "" using "" + debugSequence(separatorSeq));
        byte[] crlf = ""\r\n"".getBytes();
        byte[] lf = ""\n"".getBytes();
        OutputStream out = null;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(originalTextFile));
            out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile));
            byte[] fileChunk = new byte[CHUNK_SIZE];
            byte[] fileWriteChunk = new byte[CHUNK_SIZE];
            for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) {
                if (newLine.length == 0) {
                    out.write(fileChunk, 0, readLength);
                } else {
                    int writeLength = 0;
                    for (int i = 0; i < readLength; ) {
                        int pos = findIndexOf(fileChunk, crlf, i);
                        int lineSepLength = crlf.length;
                        if (pos < i || pos >= readLength) {
                            pos = findIndexOf(fileChunk, lf, i);
                            lineSepLength = lf.length;
                        }
                        if (pos >= i && pos < readLength) {
                            try {
                                System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i);
                            } catch (ArrayIndexOutOfBoundsException aiobe) {
                                Constants.CVS_LOG.error(""fileChunk.length="" + fileChunk.length + "" i="" + i + "" writeLength="" + writeLength + "" pos="" + pos + "" fileWriteChunk.length="" + fileWriteChunk.length);
                                throw aiobe;
                            }
                            writeLength += pos - i;
                            i = pos + lineSepLength;
                            for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j];
                        } else {
                            System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i);
                            writeLength += readLength - i;
                            i = readLength;
                        }
                    }
                    out.write(fileWriteChunk, 0, writeLength);
                }
            }
            return preprocessedTextFile;
        } catch (IOException ex) {
            if (preprocessedTextFile != null) {
                cleanup(preprocessedTextFile);
            }
            throw ex;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    @Override
    protected String determineDataType() {
        final String spec = getSpec();
        if (spec.endsWith(""=jpeg"")) {
            return ""jpeg"";
        } else if (mimeType != UNSET) {
            return mimeType;
        } else if (spec != SPEC_UNSET && spec.startsWith(""http"") && spec.contains(""fedora"")) {
            if (spec.endsWith(""bdef:AssetDef/getFullView/"")) {
                return ""html"";
            } else {
                String type = getProperty(CONTENT_TYPE);
                if (type == null || type.length() < 1) {
                    try {
                        final URL url = (mURL != null ? mURL : new URL(getSpec()));
                        if (DEBUG.Enabled) out(""polling actual HTTP server for content-type: "" + url);
                        if (!VUE.isApplet()) type = url.openConnection().getHeaderField(""Content-type""); else type = null;
                        if (DEBUG.Enabled) {
                            out(""got contentType "" + url + "" ["" + type + ""]"");
                        }
                        if (type != null && type.length() > 0) setProperty(CONTENT_TYPE, type);
                    } catch (Throwable t) {
                        Log.error(""content-type-fetch: "" + this, t);
                    }
                }
                if (type != null && type.contains(""/"")) {
                    mimeType = type.split(""/"")[1];
                    if (mimeType.indexOf(';') > 0) {
                        mimeType = mimeType.substring(0, mimeType.indexOf(';'));
                    }
                    return mimeType;
                }
            }
        }
        return super.determineDataType();
    }
",0.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    private static String getToken(HttpClient client) throws Exception {
        String token = null;
        HttpGet httpget = new HttpGet(""https://libsys.arlingtonva.us/iii/cas/login?service=http&scope=1"");
        HttpResponse response = client.execute(httpget);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            entity = new BufferedHttpEntity(entity);
        }
        if (entity != null) {
            String resp = EntityUtils.toString(entity);
            EntityUtils.consume(entity);
            Pattern pattern = Pattern.compile(""<input .*name=\""lt\"".*value=\""(.*)\"".*/>"");
            Matcher matcher = pattern.matcher(resp);
            if (matcher.find()) {
                token = matcher.group(1);
            }
        }
        return token;
    }
",0.0
"    private void proxyMediaServlet(String url, HttpServletRequest req, HttpServletResponse resp) {
        try {
            URL u = new URL(""http://mediaserver:8080/sagex"" + url);
            log.debug(""Proxy Media: "" + u.toString());
            URLConnection c = u.openConnection();
            c.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008072820 Firefox/3.0.1"");
            OutputStream os = resp.getOutputStream();
            IOUtils.copy(c.getInputStream(), os);
            os.flush();
            resp.flushBuffer();
        } catch (Throwable t) {
            log.error(""Failed to get url: "" + url, t);
            try {
                resp.sendError(500, t.getMessage());
            } catch (IOException e) {
            }
        }
    }
","    private static JSONObject sendCouchRequest(HttpUriRequest request) {
        try {
            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(request);
            HttpEntity entity = httpResponse.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                String resultString = convertStreamToString(instream);
                instream.close();
                JSONObject jsonResult = new JSONObject(resultString);
                return jsonResult;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1.0
"    public String getHtmlPage(URL url) {
        String html = null;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            br.close();
            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html;
    }
","    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
",0.0
"    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
","    public static void copyFile(IPath fromFileName, IPath toFileName) throws IOException {
        File fromFile = fromFileName.toFile();
        File toFile = toFileName.toFile();
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFileName);
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFileName);
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFileName);
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        if (toFile.exists()) {
            if (!toFile.canWrite()) throw new IOException(""FileCopy: "" + ""destination file is unwriteable: "" + toFileName);
        } else {
            String parent = toFile.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
            if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
            if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        }
        InputStream from = null;
        OutputStream to = null;
        try {
            from = new BufferedInputStream(new FileInputStream(fromFile));
            to = new BufferedOutputStream(new FileOutputStream(toFile));
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",0.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    Bitmap downloadBitmap(String url) {
        final int IO_BUFFER_SIZE = 4 * 1024;
        final HttpClient client = (mode == Mode.NO_ASYNC_TASK) ? new DefaultHttpClient() : AndroidHttpClient.newInstance(""Android"");
        final HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(""ImageDownloader"", ""Error "" + statusCode + "" while retrieving bitmap from "" + url);
                return null;
            }
            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent();
                    return BitmapFactory.decodeStream(new FlushedInputStream(inputStream));
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (IOException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""I/O error while retrieving bitmap from "" + url, e);
        } catch (IllegalStateException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Incorrect URL: "" + url);
        } catch (Exception e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Error while retrieving bitmap from "" + url, e);
        } finally {
            if ((client instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) client).close();
            }
        }
        return null;
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    @LargeTest
    public void testHttpPostsWithExpectationVerification() throws Exception {
        int reqNo = 3;
        this.server.registerHandler(""*"", new HttpRequestHandler() {

            public void handle(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException, IOException {
                StringEntity outgoing = new StringEntity(""No content"");
                response.setEntity(outgoing);
            }
        });
        this.server.setExpectationVerifier(new HttpExpectationVerifier() {

            public void verify(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException {
                Header someheader = request.getFirstHeader(""Secret"");
                if (someheader != null) {
                    int secretNumber;
                    try {
                        secretNumber = Integer.parseInt(someheader.getValue());
                    } catch (NumberFormatException ex) {
                        response.setStatusCode(HttpStatus.SC_BAD_REQUEST);
                        return;
                    }
                    if (secretNumber < 2) {
                        response.setStatusCode(HttpStatus.SC_EXPECTATION_FAILED);
                        ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes(""Wrong secret number""));
                        response.setEntity(outgoing);
                    }
                }
            }
        });
        this.server.start();
        this.client.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);
        DefaultHttpClientConnection conn = new DefaultHttpClientConnection();
        HttpHost host = new HttpHost(""localhost"", this.server.getPort());
        try {
            for (int r = 0; r < reqNo; r++) {
                if (!conn.isOpen()) {
                    Socket socket = new Socket(host.getHostName(), host.getPort());
                    conn.bind(socket, this.client.getParams());
                }
                BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest(""POST"", ""/"");
                post.addHeader(""Secret"", Integer.toString(r));
                ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes(""No content""));
                post.setEntity(outgoing);
                HttpResponse response = this.client.execute(post, host, conn);
                HttpEntity entity = response.getEntity();
                assertNotNull(entity);
                entity.consumeContent();
                if (r < 2) {
                    assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode());
                } else {
                    assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
                }
                if (!this.client.keepAlive(response)) {
                    conn.close();
                }
            }
            HttpConnectionMetrics cm = conn.getMetrics();
            assertEquals(reqNo, cm.getRequestCount());
            assertEquals(reqNo, cm.getResponseCount());
        } finally {
            conn.close();
            this.server.shutdown();
        }
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException {
        Writer out = null;
        PreparedStatement ps = null;
        DatabaseAdapter dbDyn = null;
        try {
            AuthSession auth_ = (AuthSession) renderRequest.getUserPrincipal();
            if (auth_ == null || !auth_.isUserInRole(""webmill.upload_image"")) {
                throw new PortletSecurityException(""You have not enough right"");
            }
            if (log.isDebugEnabled()) log.debug(""Start commit new image from file"");
            dbDyn = DatabaseAdapter.getInstance();
            String index_page = PortletService.url(""mill.image.index"", renderRequest, renderResponse);
            if (log.isDebugEnabled()) log.debug(""right to commit image - "" + auth_.isUserInRole(""webmill.upload_image""));
            PortletSession sess = renderRequest.getPortletSession(true);
            if ((sess.getAttribute(""MILL.IMAGE.ID_MAIN"") == null) || (sess.getAttribute(""MILL.IMAGE.DESC_IMAGE"") == null)) {
                out.write(""Not all parametrs initialized"");
                return;
            }
            Long id_main = (Long) sess.getAttribute(""MILL.IMAGE.ID_MAIN"");
            String desc = ((String) sess.getAttribute(""MILL.IMAGE.DESC_IMAGE""));
            if (log.isDebugEnabled()) log.debug(""image description "" + desc);
            CustomSequenceType seq = new CustomSequenceType();
            seq.setSequenceName(""seq_image_number_file"");
            seq.setTableName(""MAIN_FORUM_THREADS"");
            seq.setColumnName(""ID_THREAD"");
            Long currID = dbDyn.getSequenceNextValue(seq);
            String storage_ = portletConfig.getPortletContext().getRealPath(""/"") + File.separatorChar + ""image"";
            String fileName = storage_ + File.separator + StringTools.appendString("""" + currID, '0', 7, true) + ""-"";
            if (log.isDebugEnabled()) log.debug(""image fileName "" + fileName);
            String newFileName = """";
            String supportExtension[] = { "".jpg"", "".jpeg"", "".gif"", "".png"" };
            try {
                if (true) throw new UploadFileException(""Todo need fix"");
            } catch (UploadFileException e) {
                log.error(""Error save image to disk"", e);
                out.write(""<html><head></head<body>"" + ""Error while processing this page:<br>"" + ExceptionTools.getStackTrace(e, 20, ""<br>"") + ""<br>"" + ""<p><a href=\"""" + index_page + ""\"">continue</a></p>"" + ""</body></html>"");
                return;
            }
            if (log.isDebugEnabled()) log.debug(""newFileName "" + newFileName);
            UserInfo userInfo = auth_.getUserInfo();
            CustomSequenceType seqImageDir = new CustomSequenceType();
            seqImageDir.setSequenceName(""seq_WM_image_dir"");
            seqImageDir.setTableName(""WM_IMAGE_DIR"");
            seqImageDir.setColumnName(""ID_IMAGE_DIR"");
            Long seqValue = dbDyn.getSequenceNextValue(seqImageDir);
            ps = dbDyn.prepareStatement(""insert into WM_IMAGE_DIR "" + ""( ID_IMAGE_DIR, ID_FIRM, is_group, id, id_main, name_file, description )"" + ""(?, ?, 0, ?, ?, ?, ?"");
            RsetTools.setLong(ps, 1, seqValue);
            RsetTools.setLong(ps, 2, userInfo.getCompanyId());
            RsetTools.setLong(ps, 3, currID);
            RsetTools.setLong(ps, 4, id_main);
            ps.setString(5, ""/image/"" + newFileName);
            ps.setString(6, desc);
            ps.executeUpdate();
            dbDyn.commit();
            if (log.isDebugEnabled()) log.debug(""redirect to indexPage - "" + index_page);
            out.write(""Image successful uploaded"");
            return;
        } catch (Exception e) {
            try {
                dbDyn.rollback();
            } catch (SQLException e1) {
            }
            final String es = ""Error upload image"";
            log.error(es, e);
            throw new PortletException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
",0.0
"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
",1.0
"    public static String connRemote(JSONObject jsonObject, String OPCode, List<NameValuePair> nameValuePair) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
","    public static String hash(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""), 0, text.length());
            byte[] md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""We will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",0.0
"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter(""proxyurl"");
        URLConnection conn = new URL(url).openConnection();
        Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());
        response.setContentType(conn.getContentType());
        response.setContentLength(conn.getContentLength());
        Writer out = response.getWriter();
        char[] buf = new char[256];
        int len;
        while ((len = in.read(buf)) != -1) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        String log = request.getParameter(""logging"");
        if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);
    }
","    String fetch_m3u(String m3u) {
        InputStream pstream = null;
        if (m3u.startsWith(""http://"")) {
            try {
                URL url = null;
                if (running_as_applet) {
                    url = new URL(getCodeBase(), m3u);
                } else {
                    url = new URL(m3u);
                }
                URLConnection urlc = url.openConnection();
                pstream = urlc.getInputStream();
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        if (pstream == null && !running_as_applet) {
            try {
                pstream = new FileInputStream(System.getProperty(""user.dir"") + System.getProperty(""file.separator"") + m3u);
            } catch (Exception ee) {
                System.err.println(ee);
                return null;
            }
        }
        String line = null;
        while (true) {
            try {
                line = readline(pstream);
            } catch (Exception e) {
            }
            if (line == null) {
                break;
            }
            return line;
        }
        return null;
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",0.0
"    public static String getOriginalWSDL(String wsdlURL) {
        try {
            URL url = new URL(wsdlURL);
            java.net.HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            InputStream input = conn.getInputStream();
            final int BUFFERSIZE = 4096;
            byte[] buffer = new byte[BUFFERSIZE];
            OutputStream output = new ByteArrayOutputStream();
            while (true) {
                int read = input.read(buffer);
                if (read == -1) {
                    break;
                }
                output.write(buffer, 0, read);
            }
            output.close();
            input.close();
            conn.disconnect();
            String s = output.toString();
            return s;
        } catch (Exception e) {
            return null;
        }
    }
","    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
",0.0
"    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",0.0
"    public Map readMap(String filename) throws Exception {
        xmlPath = filename.substring(0, filename.lastIndexOf(File.separatorChar) + 1);
        String xmlFile = makeUrl(filename);
        URL url = new URL(xmlFile);
        InputStream is = url.openStream();
        if (filename.endsWith("".gz"")) {
            is = new GZIPInputStream(is);
        }
        Map unmarshalledMap = unmarshal(is);
        unmarshalledMap.setFilename(filename);
        map = null;
        return unmarshalledMap;
    }
","        @Override
        public Void doInBackground() {
            java.io.FileOutputStream fos = null;
            try {
                String localFile = ""JavaPointNew.jar"";
                java.io.BufferedInputStream in = null;
                try {
                    HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
                    contentLength = httpConn.getContentLength();
                    if (contentLength == -1) {
                        System.out.println(""unknown content length"");
                    } else {
                        System.out.println(""content length: "" + contentLength + "" bytes"");
                    }
                    in = new java.io.BufferedInputStream(httpConn.getInputStream());
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                fos = new java.io.FileOutputStream(localFile);
                java.io.BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);
                byte[] data = new byte[1024];
                int x = 0;
                int bytes = 0;
                while ((x = in.read(data, 0, 1024)) >= 0) {
                    bout.write(data, 0, x);
                    bytes += x;
                    setProgress((int) ((Math.min(bytes * 100 / contentLength, 100)) + .5));
                }
                bout.close();
                in.close();
                File jarFile = mainFrame.presentationFile;
                if (jarFile.exists()) {
                    final File temporaryJarFile = Utilities.createTemporaryFile(""presentation"", "".jar"", false, null);
                    final JarFile updatedJarFile = new JarFile(localFile);
                    final JarOutputStream output = new JarOutputStream(new FileOutputStream(temporaryJarFile));
                    for (final JarEntry entry : Utilities.toList(updatedJarFile.entries())) {
                        if (!entry.getName().startsWith(Constants.JAR_ENTRY_PRESENTATION_PREFIX)) {
                            final InputStream entryStream = updatedJarFile.getInputStream(entry);
                            output.putNextEntry(entry);
                            Utilities.write(entryStream, output);
                        }
                    }
                    new SlidesWriter().write(mainFrame.getSlides(), output);
                    jarFile.delete();
                    new File(localFile).delete();
                    if (!temporaryJarFile.renameTo(jarFile)) {
                        throw new RuntimeException(""Failed to update "" + jarFile);
                    }
                } else {
                    new SlidesWriter().write(mainFrame.getSlides(), new JarOutputStream(new FileOutputStream(jarFile)));
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                try {
                    fos.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            return null;
        }
",0.0
"    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + ""\n"");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
","    private void openGSM() {
        try {
            GsmCellLocation gcl = (GsmCellLocation) tm.getCellLocation();
            int cid = gcl.getCid();
            int lac = gcl.getLac();
            int mcc = Integer.valueOf(tm.getNetworkOperator().substring(0, 3));
            int mnc = Integer.valueOf(tm.getNetworkOperator().substring(3, 5));
            JSONObject holder = new JSONObject();
            holder.put(""version"", ""1.1.0"");
            holder.put(""host"", ""maps.google.com"");
            holder.put(""request_address"", true);
            JSONArray array = new JSONArray();
            JSONObject data = new JSONObject();
            data.put(""cell_id"", cid);
            data.put(""location_area_code"", lac);
            data.put(""mobile_country_code"", mcc);
            data.put(""mobile_network_code"", mnc);
            array.put(data);
            holder.put(""cell_towers"", array);
            DefaultHttpClient client = new DefaultHttpClient();
            HttpPost post = new HttpPost(""http://www.google.com/loc/json"");
            StringEntity se = new StringEntity(holder.toString());
            post.setEntity(se);
            HttpResponse resp = client.execute(post);
            HttpEntity entity = resp.getEntity();
            BufferedReader br = new BufferedReader(new InputStreamReader(entity.getContent()));
            StringBuffer sb = new StringBuffer();
            String result = br.readLine();
            while (result != null) {
                sb.append(result);
                result = br.readLine();
            }
            mLat = Double.parseDouble(sb.toString().split("":"")[2].split("","")[0]);
            mLon = Double.parseDouble(sb.toString().split("":"")[3].split("","")[0]);
        } catch (Exception e) {
        }
        returnGeoLatLon();
    }
",0.0
"    private String fetch(URL url) {
        StringBuilder body = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                body.append(inputLine);
            }
            in.close();
            return body.toString();
        } catch (Exception e) {
            debug(""Error: fetch: Exception reading URL: "" + e);
        }
        return null;
    }
","    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
",0.0
"    public void load(URL url) throws IOException {
        try {
            oggBitStream_ = new BufferedInputStream(url.openStream());
        } catch (Exception ex) {
            System.err.println(""ogg file "" + url + "" could not be loaded"");
        }
        load();
    }
","    private void zip(File input, File output) {
        OutputStream os = null;
        InputStream is = null;
        try {
            os = new GZIPOutputStream(new FileOutputStream(output));
            is = new FileInputStream(input);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",0.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    private static int computeNativesHash() {
        try {
            String classpath = System.getProperty(""java.class.path"");
            URL url = Thread.currentThread().getContextClassLoader().getResource(""com/jme3/system/Natives.class"");
            StringBuilder sb = new StringBuilder(url.toString());
            if (sb.indexOf(""jar:"") == 0) {
                sb.delete(0, 4);
                sb.delete(sb.indexOf(""!""), sb.length());
                sb.delete(sb.lastIndexOf(""/"") + 1, sb.length());
            }
            try {
                url = new URL(sb.toString());
            } catch (MalformedURLException ex) {
                throw new UnsupportedOperationException(ex);
            }
            URLConnection conn = url.openConnection();
            int hash = classpath.hashCode() ^ (int) conn.getLastModified();
            return hash;
        } catch (IOException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
",0.0
"    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
","    @Test
    public void shouldProgateStagingRepoToYumGroupRepo() throws Exception {
        givenGroupRepository(GROUP_REPO_ID, ""maven2yum"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_1, ""4.3.2"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_2, ""2.3.4"");
        wait(10, SECONDS);
        final HttpResponse response = executeGetWithResponse(NEXUS_BASE_URL + ""/content/groups/staging-test-group/repodata/primary.xml.gz"");
        final String repoContent = IOUtils.toString(new GZIPInputStream(new ByteArrayInputStream(toByteArray(response.getEntity()))));
        assertThat(response.getStatusLine().getStatusCode(), is(200));
        assertThat(repoContent, containsString(ARTIFACT_ID_1));
        assertThat(repoContent, containsString(ARTIFACT_ID_2));
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    public InputStream getDaoConfig(String connectionType) throws IOException {
        URL url = null;
        if (connectionType.equals(SQL.ORACLE)) {
            url = DTSWFDBConfig.class.getResource(""oracle.xml"");
        } else if (connectionType.equals(SQL.SQL2K)) {
            url = DTSWFDBConfig.class.getResource(""sql2k.xml"");
        } else if (connectionType.equals(SQL.CACHE)) {
            url = DTSWFDBConfig.class.getResource(""cache.xml"");
        }
        return url.openStream();
    }
",0.0
"    private static String getHash(String hash, String clear) {
        try {
            MessageDigest md = MessageDigest.getInstance(hash);
            md.update(clear.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            String str = new String();
            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);
            return str;
        } catch (NoSuchAlgorithmException exc) {
        } catch (UnsupportedEncodingException exc) {
        }
        return """";
    }
","    public Program deleteProgram(int id) throws AdaptationException {
        Program program = null;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        try {
            String query = ""SELECT * FROM Programs WHERE id = "" + id;
            connection = DriverManager.getConnection(CONN_STR);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            if (!resultSet.next()) {
                connection.rollback();
                String msg = ""Attempt to delete program failed."";
                log.error(msg);
                throw new AdaptationException(msg);
            }
            program = getProgram(resultSet);
            query = ""DELETE FROM Programs WHERE id = "" + id;
            statement.executeUpdate(query);
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (Exception e) {
            }
            String msg = ""SQLException in deleteProgram"";
            log.error(msg, ex);
            throw new AdaptationException(msg, ex);
        } finally {
            try {
                resultSet.close();
            } catch (Exception ex) {
            }
            try {
                statement.close();
            } catch (Exception ex) {
            }
            try {
                connection.close();
            } catch (Exception ex) {
            }
        }
        return program;
    }
",0.0
"    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    public static void creme_connect(String email, String username, String password, String IDnumber, TRP[] trp_array, GTRN[] gtrn_array, FLUX[] flux_array, TRANS[] trans_array, LETSPEC[] letspec_array, PUP[] pup_array, HUP[] hup_array, DOSE[] dose_array) {
        int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length + dose_array.length;
        int index = 0;
        String[] files_to_upload = new String[num_of_files];
        for (int a = 0; a < trp_array.length; a++) {
            files_to_upload[index] = trp_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < gtrn_array.length; a++) {
            files_to_upload[index] = gtrn_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < flux_array.length; a++) {
            files_to_upload[index] = flux_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < trans_array.length; a++) {
            files_to_upload[index] = trans_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < letspec_array.length; a++) {
            files_to_upload[index] = letspec_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < pup_array.length; a++) {
            files_to_upload[index] = pup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < hup_array.length; a++) {
            files_to_upload[index] = hup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < dose_array.length; a++) {
            files_to_upload[index] = dose_array[a].getThisFileName();
            index++;
        }
        Logger log = Logger.getLogger(CreateAStudy.class);
        String host = ""creme96.nrl.navy.mil"";
        String user = ""anonymous"";
        String ftppass = email;
        Logger.setLevel(Level.ALL);
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setRemoteHost(host);
            FTPMessageCollector listener = new FTPMessageCollector();
            ftp.setMessageListener(listener);
            log.info(""Connecting"");
            ftp.connect();
            log.info(""Logging in"");
            ftp.login(user, ftppass);
            log.debug(""Setting up passive, ASCII transfers"");
            ftp.setConnectMode(FTPConnectMode.ACTIVE);
            ftp.setType(FTPTransferType.BINARY);
            log.info(""Putting file"");
            for (int u = 0; u < files_to_upload.length; u++) {
                ftp.put(files_to_upload[u], files_to_upload[u]);
            }
            log.info(""Quitting client"");
            ftp.quit();
            log.debug(""Listener log:"");
            log.info(""Test complete"");
        } catch (Exception e) {
            log.error(""Demo failed"", e);
            e.printStackTrace();
        }
        System.out.println(""Finished FTPing User Request Files to common directory"");
        Upload_Files.upload(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished transfering User Request Files to your CREME96 personal directory"");
        RunRoutines.routines(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished running all of your uploaded routines"");
    }
",0.0
"    private String crypt(String s) throws BaseException, NoSuchAlgorithmException {
        if (s != null && s.length() > 0) {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(s.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } else {
            throw new BaseException(ErrorCodes.CODE_2100);
        }
    }
","    @Override
    protected String determineDataType() {
        final String spec = getSpec();
        if (spec.endsWith(""=jpeg"")) {
            return ""jpeg"";
        } else if (mimeType != UNSET) {
            return mimeType;
        } else if (spec != SPEC_UNSET && spec.startsWith(""http"") && spec.contains(""fedora"")) {
            if (spec.endsWith(""bdef:AssetDef/getFullView/"")) {
                return ""html"";
            } else {
                String type = getProperty(CONTENT_TYPE);
                if (type == null || type.length() < 1) {
                    try {
                        final URL url = (mURL != null ? mURL : new URL(getSpec()));
                        if (DEBUG.Enabled) out(""polling actual HTTP server for content-type: "" + url);
                        if (!VUE.isApplet()) type = url.openConnection().getHeaderField(""Content-type""); else type = null;
                        if (DEBUG.Enabled) {
                            out(""got contentType "" + url + "" ["" + type + ""]"");
                        }
                        if (type != null && type.length() > 0) setProperty(CONTENT_TYPE, type);
                    } catch (Throwable t) {
                        Log.error(""content-type-fetch: "" + this, t);
                    }
                }
                if (type != null && type.contains(""/"")) {
                    mimeType = type.split(""/"")[1];
                    if (mimeType.indexOf(';') > 0) {
                        mimeType = mimeType.substring(0, mimeType.indexOf(';'));
                    }
                    return mimeType;
                }
            }
        }
        return super.determineDataType();
    }
",0.0
"    public static Result checkLink(String theUrl) throws MalformedURLException {
        URL url = new URL(theUrl);
        HttpURLConnection urlConnection = null;
        try {
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(5000);
            urlConnection.setRequestMethod(""GET"");
            urlConnection.connect();
            return new Result(urlConnection.getResponseCode(), false);
        } catch (IOException e) {
            return new Result(0, true);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
    }
","    public String hash(String password) {
        MessageDigest sha1Digest;
        try {
            sha1Digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            throw NestedException.wrap(e);
        }
        sha1Digest.update(password.getBytes());
        StringBuilder retval = new StringBuilder(""sha1:"");
        retval.append(new String(Base64.encodeBase64(sha1Digest.digest())));
        return retval.toString();
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public synchronized boolean storePipeline() {
        if (logDebugEnabled) log.debug(""Storing pipeline "" + this.getName() + "" with "" + this.size() + "" elements"");
        boolean retVal = false;
        Connection conn = null;
        try {
            conn = PoolManager.getInstance().getConnection(JukeXTrackStore.DB_NAME);
            conn.setAutoCommit(false);
            PreparedStatement ps = conn.prepareStatement(""DELETE from PipelineBlackboard where pipelineid="" + this.getId());
            int rowCount = ps.executeUpdate();
            if (logDebugEnabled) log.debug(""Removed old data ("" + rowCount + "" rows)"");
            TrackSourcePipelineElement pe = null;
            Iterator i = super.iterator();
            while (i.hasNext()) {
                pe = (TrackSourcePipelineElement) i.next();
                retVal = pe.storeState(conn);
                if (!retVal) {
                    break;
                }
            }
            if (retVal) {
                conn.commit();
            } else {
                conn.rollback();
            }
            conn.setAutoCommit(true);
        } catch (SQLException se) {
            try {
                conn.rollback();
            } catch (SQLException ignore) {
            }
            log.error(""Encountered an exception whilst storing the configuration for a pipeline element"");
        } finally {
            try {
                conn.close();
            } catch (SQLException ignore) {
            }
        }
        return retVal;
    }
",0.0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    private String getFanFouMessage(int pageNo) throws IOException {
        URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""GET"");
        String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());
        request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        StringBuffer sb = new StringBuffer();
        while ((b = reader.readLine()) != null) {
            sb.append(b);
        }
        return sb.toString();
    }
",0.0
"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
","    static Matrix readMatrix1(String filename, int nrow, int ncol) {
        String inputString = null, value = null;
        int col = 0;
        double b = 0;
        Matrix cij = new Matrix(nrow, ncol);
        try {
            URL url = filename.getClass().getResource(filename);
            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));
            for (int i = 0; i < nrow; i++) for (int j = 0; j < ncol; j++) {
                inputString = lnr.readLine();
                int found = -2;
                while (found != -1) {
                    found = inputString.indexOf("";"");
                    if (found != -1) {
                        value = inputString.substring(0, found);
                        inputString = inputString.substring(found + 1);
                    } else {
                        value = inputString;
                    }
                    col = col + 1;
                    if (col == 3) {
                        if (value != null) cij.set(i, j, Double.parseDouble(value)); else cij.set(i, j, 0);
                    }
                }
                col = 0;
            }
        } catch (Exception xc) {
            xc.printStackTrace();
        }
        return cij;
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public void init(ConnectionManager mgr, Hashtable cfg, Socket sock) throws RemoteException {
        _cman = mgr;
        _sock = sock;
        try {
            _sout = new PrintWriter(_sock.getOutputStream(), true);
            _sinp = new BufferedReader(new InputStreamReader(_sock.getInputStream()));
            String seed = """";
            Random rand = new Random();
            for (int i = 0; i < 16; i++) {
                String hex = Integer.toHexString(rand.nextInt(256));
                if (hex.length() < 2) hex = ""0"" + hex;
                seed += hex.substring(hex.length() - 2);
            }
            String pass = _mpsw + seed + _spsw;
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            String hash = hash2hex(md5.digest()).toLowerCase();
            String banner = ""INIT "" + ""servername"" + "" "" + hash + "" "" + seed;
            sendLine(banner);
            String txt = readLine(5);
            if (txt == null) {
                throw new IOException(""Slave did not send banner !!"");
            }
            String sname = """";
            String spass = """";
            String sseed = """";
            try {
                String[] items = txt.split("" "");
                sname = items[1].trim();
                spass = items[2].trim();
                sseed = items[3].trim();
            } catch (Exception e) {
                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            pass = _spsw + sseed + _mpsw;
            md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(pass.getBytes());
            hash = hash2hex(md5.digest()).toLowerCase();
            if (!sname.equals(_name)) {
                SocketSlaveListener.invalidSlave(""INITFAIL Unknown"", _sock);
            }
            if (!spass.toLowerCase().equals(hash.toLowerCase())) {
                SocketSlaveListener.invalidSlave(""INITFAIL BadKey"", _sock);
            }
            start();
            _cman.getSlaveManager().addSlave(_name, this, getSlaveStatus(), -1);
        } catch (IOException e) {
            if (e instanceof ConnectIOException && e.getCause() instanceof EOFException) {
                logger.info(""Check slaves.xml on the master that you are allowed to connect."");
            }
            logger.info(""IOException: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e1) {
            }
        } catch (Exception e) {
            logger.warn(""Exception: "" + e.toString());
            try {
                sock.close();
            } catch (Exception e2) {
            }
        }
        System.gc();
    }
",0.0
"    private URLConnection openConnection(URL url) throws MalformedURLException, IOException {
        URLConnection connection = url.openConnection();
        if (connection instanceof HttpURLConnection) ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
        connection.setUseCaches(false);
        return connection;
    }
","    public static boolean copy(String from, String to) {
        boolean result;
        String newLine;
        FileInputStream input;
        FileOutputStream output;
        File source;
        int fileLength;
        byte byteBuff[];
        result = false;
        input = null;
        output = null;
        source = null;
        try {
            input = new FileInputStream(from);
            output = new FileOutputStream(to);
            source = new File(from);
            fileLength = (int) source.length();
            byteBuff = new byte[fileLength];
            while (input.read(byteBuff, 0, fileLength) != -1) output.write(byteBuff, 0, fileLength);
            result = true;
        } catch (FileNotFoundException e) {
            System.out.println(from + "" does not exist!"");
        } catch (IOException e) {
            System.out.println(""Error reading/writing files!"");
        } finally {
            try {
                if (input != null) input.close();
                if (output != null) output.close();
            } catch (IOException e) {
            }
        }
        return result;
    }
",0.0
"    public String encryptToSHA(String info) {
        byte[] digesta = null;
        try {
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String rs = byte2hex(digesta);
        return rs;
    }
","    public static List getUrlData(URL url) throws IOException {
        List beans = new ArrayList(256);
        System.out.println(""Retreiving content for: "" + url);
        StringBuffer content = new StringBuffer(4096);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            if (str.startsWith(""#"")) {
                continue;
            }
            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");
            String InteractionAc = stringTokenizer.nextToken();
            String reactomeId = stringTokenizer.nextToken();
            ReactomeBean reactomeBean = new ReactomeBean();
            reactomeBean.setReactomeID(reactomeId);
            reactomeBean.setInteractionAC(InteractionAc);
            beans.add(reactomeBean);
        }
        in.close();
        return beans;
    }
",0.0
"    private static void fileUpload() throws Exception {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        file = new File(""h:/Sakura haruno.jpg"");
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart(""Filename"", new StringBody(file.getName()));
        mpEntity.addPart(""Filedata"", cbFile);
        httppost.setEntity(mpEntity);
        System.out.println(""executing request "" + httppost.getRequestLine());
        System.out.println(""Now uploading your file into ugotfile.com"");
        HttpResponse response = httpclient.execute(httppost);
        System.out.println(response.getStatusLine());
        if (response != null) {
            uploadresponse = EntityUtils.toString(response.getEntity());
        }
        System.out.println(""Upload Response : "" + uploadresponse);
        downloadlink = parseResponse(uploadresponse, ""[\"""", ""\"""");
        downloadlink = downloadlink.replaceAll(""\\\\/"", ""/"");
        deletelink = parseResponse(uploadresponse, ""\"",\"""", ""\"""");
        deletelink = deletelink.replaceAll(""\\\\/"", ""/"");
        System.out.println(""Download Link : "" + downloadlink);
        System.out.println(""Delete Link : "" + deletelink);
    }
","    public void testReadPerMemberAllFour() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        gzin.setEofEachMember(true);
        int count0 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong 1k member count"", 1024, count0);
        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());
        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());
        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count1 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong 32k member count"", (32 * 1024), count1);
        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());
        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count2 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong 1-byte member count"", 1, count2);
        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());
        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int count3 = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong 5-byte member count"", 5, count3);
        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());
        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        gzin.nextMember();
        int countEnd = IOUtils.copy(gzin, new NullOutputStream());
        assertEquals(""wrong eof count"", 0, countEnd);
    }
",0.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public int deleteRecord(String uuid) throws SQLException, CatalogIndexException {
        Connection con = null;
        boolean autoCommit = true;
        PreparedStatement st = null;
        ResultSet rs = null;
        int nRows = 0;
        boolean cancelTask = false;
        StringSet fids = new StringSet();
        if (cswRemoteRepository.isActive()) {
            StringSet uuids = new StringSet();
            uuids.add(uuid);
            fids = queryFileIdentifiers(uuids);
        }
        try {
            con = returnConnection().getJdbcConnection();
            autoCommit = con.getAutoCommit();
            con.setAutoCommit(false);
            String sSql = ""SELECT COUNT(*) FROM "" + getResourceTableName() + "" WHERE DOCUUID=? AND PROTOCOL_TYPE IS NOT NULL AND PROTOCOL_TYPE<>''"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            rs = st.executeQuery();
            if (rs.next()) {
                cancelTask = rs.getInt(1) > 0;
            }
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            nRows = st.executeUpdate();
            closeStatement(st);
            sSql = ""DELETE FROM "" + getResourceDataTableName() + "" WHERE DOCUUID=?"";
            logExpression(sSql);
            st = con.prepareStatement(sSql);
            st.setString(1, uuid);
            st.executeUpdate();
            CollectionDao colDao = new CollectionDao(this.getRequestContext());
            if (colDao.getUseCollections()) {
                closeStatement(st);
                sSql = ""DELETE FROM "" + colDao.getCollectionMemberTableName() + "" WHERE DOCUUID=?"";
                logExpression(sSql);
                st = con.prepareStatement(sSql);
                st.setString(1, uuid);
                st.executeUpdate();
            }
            con.commit();
        } catch (SQLException ex) {
            if (con != null) {
                con.rollback();
            }
            throw ex;
        } finally {
            closeResultSet(rs);
            closeStatement(st);
            if (con != null) {
                con.setAutoCommit(autoCommit);
            }
        }
        CatalogIndexAdapter indexAdapter = getCatalogIndexAdapter();
        if (indexAdapter != null) {
            indexAdapter.deleteDocument(uuid);
            if (cswRemoteRepository.isActive()) {
                if (fids.size() > 0) cswRemoteRepository.onRecordsDeleted(fids);
            }
        }
        if (cancelTask && getRequestContext() != null) {
            getRequestContext().getApplicationContext().getHarvestingEngine().cancel(getRequestContext(), uuid);
        }
        return nRows;
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info(""moving files..."");
        File source = new File(""deqsim.log"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");
            }
        }
        int parallelCnt = 0;
        source = new File(""deqsim.log."" + parallelCnt);
        while (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");
            }
            parallelCnt++;
            source = new File(""deqsim.log."" + parallelCnt);
        }
        source = new File(""loads_out.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));
            try {
                IOUtils.copyFile(source, destination);
            } catch (FileNotFoundException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            } catch (IOException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            }
            destination = new File(""loads_in.txt"");
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");
            }
        }
        source = new File(""linkprocs.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");
            }
        }
    }
",0.0
"    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(p.getBytes(""iso-8859-1""), 0, p.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(conf);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, conf);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
","    public void requestConfirm() throws Exception {
        if (!this._c.checkProperty(""directory.request"", ""request"")) {
            throw new Exception(""product has no active request"");
        }
        if (!new File(WBSAgnitioConfiguration.getHARequestFile()).canWrite()) {
            throw new Exception(""cannot remove request from system"");
        }
        HashMap<String, String> values = getValues(WBSAgnitioConfiguration.getHARequestFile());
        if (!values.containsKey(""address.virtual"")) {
            throw new Exception(""failed to determine the virtual address"");
        }
        if (!values.containsKey(""address.real"")) {
            throw new Exception(""failed to determine the remote address"");
        }
        HTTPClient _hc = new HTTPClient(values.get(""address.real""));
        if (TomcatConfiguration.checkHTTPS()) {
            _hc.setSecure(true);
        }
        _hc.load(""/admin/Comm?type="" + CommResponse.TYPE_HA + ""&command="" + CommResponse.COMMAND_REQUEST_CONFIRM + ""&virtual="" + values.get(""address.virtual""));
        String _reply = new String(_hc.getContent());
        if (_reply.isEmpty()) {
            throw new Exception(""remote product has not sent any reply"");
        } else if (_reply.indexOf(""done"") == -1) {
            throw new Exception(_reply);
        }
        HAConfiguration.setSlave(values.get(""address.virtual""), values.get(""address.real""));
        File _f = new File(WBSAgnitioConfiguration.getOptionalSchemaRequestFile());
        if (_f.exists()) {
            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getOptionalSchemaFile());
            FileInputStream _fis = new FileInputStream(_f);
            while (_fis.available() > 0) {
                _fos.write(_fis.read());
            }
            _fis.close();
            _fos.close();
            _f.delete();
        }
        _f = new File(WBSAgnitioConfiguration.getSchemaObjectRequestFile());
        if (_f.exists()) {
            FileOutputStream _fos = new FileOutputStream(WBSAgnitioConfiguration.getSchemaObjectFile());
            FileInputStream _fis = new FileInputStream(_f);
            while (_fis.available() > 0) {
                _fos.write(_fis.read());
            }
            _fis.close();
            _fos.close();
            _f.delete();
        }
        new File(WBSAgnitioConfiguration.getHARequestFile()).delete();
        this._c.removeProperty(""directory.request"");
        this._c.setProperty(""directory.virtual"", values.get(""address.virtual""));
        this._c.setProperty(""directory.status"", ""slave"");
        this._c.store();
    }
",1.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","        private String findTitle(URL url) {
            HTMLEditorKit.ParserCallback callback;
            try {
                URLConnection conn = url.openConnection();
                Reader rd = new InputStreamReader(conn.getInputStream());
                ParserDelegator parser = new ParserDelegator();
                callback = new Callback();
                parser.parse(rd, callback, true);
            } catch (Exception exp) {
                System.err.println(exp);
            }
            return title;
        }
",0.0
"    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testBytes = ""testString"".getBytes();
        final InputStream istream = new ByteArrayInputStream(testBytes);
        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);
        IOUtils.copy(teeStream, new NullOutputStream());
        teeStream.close();
        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",1.0
"    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
","    private File extractResource(String resourceName, File destDir) {
        File file = new File(destDir, resourceName);
        InputStream in = getClass().getResourceAsStream(resourceName);
        try {
            FileOutputStream out = FileUtils.openOutputStream(file);
            try {
                IOUtils.copy(in, out);
            } finally {
                if (out != null) {
                    out.close();
                }
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
        return file;
    }
",1.0
"    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
","    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), ""utf-8"");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error(""fail to write file"", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
",0.0
"    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
","    private void performUpdateCheck() {
        URL url;
        DPhex dPhex;
        try {
            byte[] data = buildXMLUpdateRequest();
            if (data == null) {
                throw new IOException(""Missing XML update data"");
            }
            if (logger.isDebugEnabled()) {
                logger.debug(new String(data));
            }
            url = new URL(UPDATE_CHECK_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setUseCaches(false);
            connection.setRequestProperty(""User-Agent"", Phex.getFullPhexVendor());
            connection.setRequestMethod(""POST"");
            connection.setDoOutput(true);
            connection.setRequestProperty(""Content-Type"", ""text/xml; charset=UTF-8"");
            OutputStream outStream = connection.getOutputStream();
            outStream.write(data);
            UpdatePrefs.LastUpdateCheckTime.set(Long.valueOf(System.currentTimeMillis()));
            InputStream inStream = connection.getInputStream();
            UpdateResponseParts parts = createResponseParts(inStream);
            verifySignature(parts);
            dPhex = XMLBuilder.readDPhexFromStream(new ByteArrayInputStream(parts.xml.getBytes(""UTF-8"")));
        } catch (MalformedURLException exp) {
            updateCheckError = exp;
            logger.error(exp.toString(), exp);
            assert false;
            throw new RuntimeException();
        } catch (UnknownHostException exp) {
            updateCheckError = exp;
            logger.warn(exp.toString(), exp);
            return;
        } catch (SocketException exp) {
            updateCheckError = exp;
            logger.warn(exp.toString(), exp);
            return;
        } catch (IOException exp) {
            updateCheckError = exp;
            logger.warn(exp.toString(), exp);
            return;
        } finally {
            PhexCorePrefs.save(false);
        }
        DUpdateResponse response = dPhex.getUpdateResponse();
        List<VersionType> versionList = response.getVersionList();
        VersionType latestReleaseVersion = null;
        VersionType latestBetaVersion = null;
        for (VersionType currentVersion : versionList) {
            if (currentVersion.isBeta()) {
                if (latestBetaVersion == null || VersionUtils.compare(currentVersion.getId(), latestBetaVersion.getId()) > 0) {
                    latestBetaVersion = currentVersion;
                }
            } else {
                if (latestReleaseVersion == null || VersionUtils.compare(currentVersion.getId(), latestReleaseVersion.getId()) > 0) {
                    latestReleaseVersion = currentVersion;
                }
            }
        }
        betaVersion = ""0"";
        releaseVersion = ""0"";
        if (latestBetaVersion != null) {
            betaVersion = latestBetaVersion.getId();
        }
        if (latestReleaseVersion != null) {
            releaseVersion = latestReleaseVersion.getId();
        }
        int releaseCompare = 0;
        int betaCompare = 0;
        betaCompare = VersionUtils.compare(betaVersion, PhexVersion.getFullVersion());
        releaseCompare = VersionUtils.compare(releaseVersion, PhexVersion.getFullVersion());
        if (releaseCompare <= 0 && betaCompare <= 0) {
            return;
        }
        betaCompare = VersionUtils.compare(betaVersion, UpdatePrefs.LastBetaUpdateCheckVersion.get());
        releaseCompare = VersionUtils.compare(releaseVersion, UpdatePrefs.LastUpdateCheckVersion.get());
        int verDiff = VersionUtils.compare(betaVersion, releaseVersion);
        boolean triggerUpdateNotification = false;
        if (releaseCompare > 0) {
            UpdatePrefs.LastUpdateCheckVersion.set(releaseVersion);
            triggerUpdateNotification = true;
        }
        if (betaCompare > 0) {
            UpdatePrefs.LastBetaUpdateCheckVersion.set(betaVersion);
            triggerUpdateNotification = true;
        }
        if (verDiff > 0) {
            releaseVersion = null;
        } else {
            betaVersion = null;
        }
        if (triggerUpdateNotification) {
            PhexCorePrefs.save(false);
            fireUpdateNotification();
        }
    }
",0.0
"    public static void readDefault() {
        ClassLoader l = Skeleton.class.getClassLoader();
        URL url;
        if (l != null) {
            url = l.getResource(DEFAULT_LOC);
        } else {
            url = ClassLoader.getSystemResource(DEFAULT_LOC);
        }
        if (url == null) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
        try {
            InputStreamReader reader = new InputStreamReader(url.openStream());
            readSkel(new BufferedReader(reader));
        } catch (IOException e) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
    }
","    public static void createOutputStructure(String templatePath) throws InterruptedException {
        try {
            templatePath = new File(templatePath).getCanonicalPath();
            templatePath = templatePath.replace('\\', '/');
            File file = null;
            Paths paths = (Paths) GragGenerator.getObjectsFromTree(Paths.class).get(0);
            Config config = (Config) GragGenerator.getObjectsFromTree(Config.class).get(0);
            DirectoryIterator iterator = new DirectoryIterator(templatePath, true, true);
            while ((file = iterator.getNext()) != null) {
                boolean copyFile = false;
                String fullFilename = file.getCanonicalPath();
                int lastDirPos = fullFilename.lastIndexOf(System.getProperty(""file.separator""));
                if (CVS_DIR.equals(file.getCanonicalPath().substring(fullFilename.length() - CVS_DIR.length(), fullFilename.length())) || CVS_DIR.equals(fullFilename.substring(lastDirPos - CVS_DIR.length(), lastDirPos))) {
                    continue;
                }
                if (""readme.txt"".equals(file.getName())) {
                    continue;
                }
                String fileOut = outputDir.replace('\\', '/');
                String path = file.getCanonicalPath().replace('\\', '/');
                if (path.indexOf(templatePath) == 0) {
                    path = path.substring(templatePath.length());
                    if (path.startsWith(Paths.CONF_GENERAL_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_GENERAL_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_STRUTS_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_STRUTS_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_TAPESTRY4_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_TAPESTRY4_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.CONF_SWING_DIR)) {
                        path = paths.getConfigOutput() + path.substring(Paths.CONF_SWING_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.JAVA_WEB_STRUTS_DIR)) {
                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_STRUTS_DIR.length());
                        if (config.matchWebTier(""struts"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_WEB_TAPESTRY4_DIR)) {
                        path = paths.getJspOutput() + path.substring(Paths.JAVA_WEB_TAPESTRY4_DIR.length());
                        if (config.matchWebTier(""tapestry"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_SWING_DIR)) {
                        path = paths.getSwingOutput() + path.substring(Paths.JAVA_SWING_DIR.length());
                        if (config.matchWebTier(""swing"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_STRUTS_DIR)) {
                        path = paths.getWebOutput() + path.substring(Paths.JAVA_STRUTS_DIR.length());
                        if (config.matchWebTier(""struts"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_TAPESTRY4_DIR)) {
                        path = paths.getWebOutput() + path.substring(Paths.JAVA_TAPESTRY4_DIR.length());
                        if (config.matchWebTier(""tapestry"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_EJB2_DIR)) {
                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB2_DIR.length());
                        if (config.matchBusinessTier(""ejb 2"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_EJB3_DIR)) {
                        path = paths.getEjbOutput() + path.substring(Paths.JAVA_EJB3_DIR.length());
                        if (config.matchBusinessTier(""ejb 3"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_HIBERNATE2_DIR)) {
                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE2_DIR.length());
                        if (config.matchBusinessTier(""hibernate 2"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_HIBERNATE3_DIR)) {
                        path = paths.getHibernateOutput() + path.substring(Paths.JAVA_HIBERNATE3_DIR.length());
                        if (config.matchBusinessTier(""hibernate 3"").booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_MOCK_DIR)) {
                        path = paths.getMockOutput() + path.substring(Paths.JAVA_MOCK_DIR.length());
                        if (config.useMock().booleanValue()) {
                            copyFile = true;
                        }
                    } else if (path.startsWith(Paths.JAVA_SERVICE_DIR)) {
                        path = paths.getServiceOutput() + path.substring(Paths.JAVA_SERVICE_DIR.length());
                        copyFile = true;
                    } else if (path.startsWith(Paths.JAVA_TEST_DIR)) {
                        path = paths.getTestOutput() + path.substring(Paths.JAVA_TEST_DIR.length());
                        copyFile = true;
                    } else if ((path.indexOf(""build.bat"") != -1) || ((path.indexOf(""deploy.bat"") != -1))) {
                        copyFile = true;
                    }
                }
                if (!path.startsWith(""/"")) {
                    path = ""/"" + path;
                }
                if (copyFile) {
                    fileOut += path;
                    path = outputDir + path;
                    if (!file.isDirectory()) {
                        String name = file.getName();
                        path = path.substring(0, (path.length() - name.length()));
                    }
                    new File(path).mkdirs();
                    if (!file.isDirectory()) {
                        byte array[] = new byte[1024];
                        int size = 0;
                        try {
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(file));
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileOut));
                            while ((size = in.read(array)) != -1) out.write(array, 0, size);
                            in.close();
                            out.flush();
                            out.close();
                        } catch (Exception exc) {
                            log(""[Error] Copy output file failed : "" + fileOut);
                            log(exc.getMessage());
                        }
                    }
                }
            }
        } catch (Exception exc) {
            log.error(""Error while copying files: "", exc);
            log(exc.getMessage());
        }
    }
",0.0
"    private Bitmap getBitmap(String imageUrl) {
        URL url;
        InputStream input = null;
        try {
            url = new URL(address + imageUrl);
            input = url.openStream();
            return BitmapFactory.decodeStream(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","        private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {
            URLConnection conn = new URL(url).openConnection();
            progress.setMaximum(Math.max(0, conn.getContentLength()));
            String path = MiscUtilities.constructPath(installDirectory, fileName);
            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;
            if (archive_zip) {
                Enumeration entries;
                ZipFile zipFile;
                try {
                    File tempFile = new File(path);
                    zipFile = new ZipFile(tempFile);
                    entries = zipFile.entries();
                    while (entries.hasMoreElements()) {
                        ZipEntry entry = (ZipEntry) entries.nextElement();
                        if (entry.isDirectory()) {
                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());
                            (new File(dpath)).mkdir();
                            continue;
                        }
                        progress.setMaximum((int) entry.getSize());
                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());
                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);
                    }
                    zipFile.close();
                    tempFile.delete();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } else if (archive_gzip) {
                File srce = new File(path);
                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));
                File temp = File.createTempFile(""macro"", ""mgr"");
                progress.setMaximum((int) srce.length());
                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);
                TarArchive tarc = new TarArchive(new FileInputStream(temp));
                tarc.extractContents(new File(installDirectory));
                tarc.closeArchive();
                (new File(path)).delete();
            }
            return path;
        }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    @Override
    public String getURL(String name) {
        String r;
        try {
            URL url = new URL(NIFHandler.URL_BASE + name.replaceAll("" "", ""+""));
            Document d = new SAXBuilder().build(url.openStream());
            Element e = d.getRootElement().descendTo(""url"");
            r = e.getText().trim();
        } catch (Throwable t) {
            r = ""unknown"";
        }
        return r;
    }
","    public static String hash(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""), 0, text.length());
            byte[] md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
","    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
",0.0
"    public boolean copyOneOfMyFile(File f, String dest) {
        if (!ownsThisFile(f.getName())) return false;
        if (!dest.endsWith(File.separator)) dest = dest.concat(File.separator);
        try {
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(new File(dest + f.getName())));
            BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));
            int len = 1024;
            byte[] read = new byte[len];
            while ((len = in.read(read)) > 0) out.write(read, 0, len);
            out.flush();
            out.close();
            in.close();
            if (!PatchManager.mute) System.out.println(""file created : "" + dest + f.getName());
        } catch (IOException e) {
            System.out.println(""copy directory : "" + e);
            return false;
        }
        return true;
    }
","    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");
        }
        return response;
    }
",0.0
"    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        log.println(""\nCalculating digest ...\n"");
        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
        md5.update(dataArea.getText().getBytes(""UTF8""));
        byte[] digest = md5.digest();
        log.println(""digest:\n"" + formatAsHexString(digest));
        log.println(""Done."");
        setEncodedDigest(encodeFromBytes(digest));
    }
","    public static String ftpPing(String root, String host, int port, String username, String pw) {
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(host));
            ftpClient.setControlPort(port);
            ftpClient.setTimeout(4000);
            ftpClient.connect();
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login(username, (pw));
            ftpClient.chdir(root);
            JobHandler.releaseFTPLock();
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        try {
            ftpClient.quit();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        return null;
    }
",0.0
"    public static byte[] getBytes(String s) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(s.getBytes());
        return d.digest();
    }
","    public static boolean copyDataToNewTable(EboContext p_eboctx, String srcTableName, String destTableName, String where, boolean log, int mode) throws boRuntimeException {
        srcTableName = srcTableName.toUpperCase();
        destTableName = destTableName.toUpperCase();
        Connection cn = null;
        Connection cndef = null;
        boolean ret = false;
        try {
            boolean srcexists = false;
            boolean destexists = false;
            final InitialContext ic = new InitialContext();
            cn = p_eboctx.getConnectionData();
            cndef = p_eboctx.getConnectionDef();
            PreparedStatement pstm = cn.prepareStatement(""SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE upper(TABLE_NAME)=?  AND TABLE_SCHEMA=database()"");
            pstm.setString(1, srcTableName);
            ResultSet rslt = pstm.executeQuery();
            if (rslt.next()) {
                srcexists = true;
            }
            rslt.close();
            pstm.setString(1, destTableName);
            rslt = pstm.executeQuery();
            if (rslt.next()) {
                destexists = true;
            }
            if (!destexists) {
                rslt.close();
                pstm.close();
                pstm = cn.prepareStatement(""SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE upper(TABLE_NAME)=? AND TABLE_SCHEMA=database()"");
                pstm.setString(1, destTableName);
                rslt = pstm.executeQuery();
                if (rslt.next()) {
                    CallableStatement cstm = cn.prepareCall(""DROP VIEW "" + destTableName);
                    cstm.execute();
                    cstm.close();
                }
            }
            rslt.close();
            pstm.close();
            if (srcexists && !destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""CREATING_AND_COPY_DATA_FROM"") + "" ["" + srcTableName + ""] "" + LoggerMessageLocalizer.getMessage(""TO"") + "" ["" + destTableName + ""]"");
                }
                CallableStatement cstm = cn.prepareCall(""CREATE TABLE "" + destTableName + "" AS SELECT * FROM "" + srcTableName + "" "" + (((where != null) && (where.length() > 0)) ? ("" WHERE "" + where) : """"));
                cstm.execute();
                cstm.close();
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""UPDATING_NGTDIC""));
                }
                cn.commit();
                ret = true;
            } else if (srcexists && destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""COPY_DATA_FROM"") + "" ["" + srcTableName + ""] "" + LoggerMessageLocalizer.getMessage(""TO"") + "" ["" + destTableName + ""]"");
                }
                PreparedStatement pstm2 = cn.prepareStatement(""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE upper(TABLE_NAME) = ? AND TABLE_SCHEMA=database()"");
                pstm2.setString(1, destTableName);
                ResultSet rslt2 = pstm2.executeQuery();
                StringBuffer fields = new StringBuffer();
                PreparedStatement pstm3 = cn.prepareStatement(""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE upper(TABLE_NAME) = ? and upper(COLUMN_NAME)=? AND TABLE_SCHEMA=database()"");
                while (rslt2.next()) {
                    pstm3.setString(1, srcTableName);
                    pstm3.setString(2, rslt2.getString(1));
                    ResultSet rslt3 = pstm3.executeQuery();
                    if (rslt3.next()) {
                        if (fields.length() > 0) {
                            fields.append(',');
                        }
                        fields.append('""').append(rslt2.getString(1)).append('""');
                    }
                    rslt3.close();
                }
                pstm3.close();
                rslt2.close();
                pstm2.close();
                CallableStatement cstm;
                int recs = 0;
                if ((mode == 0) || (mode == 1)) {
                    cstm = cn.prepareCall(""INSERT INTO "" + destTableName + ""( "" + fields.toString() + "" ) ( SELECT "" + fields.toString() + "" FROM "" + srcTableName + "" "" + (((where != null) && (where.length() > 0)) ? ("" WHERE "" + where) : """") + "")"");
                    recs = cstm.executeUpdate();
                    cstm.close();
                    if (log) {
                        logger.finest(LoggerMessageLocalizer.getMessage(""DONE"") + "" ["" + recs + ""] "" + LoggerMessageLocalizer.getMessage(""RECORDS_COPIED""));
                    }
                }
                cn.commit();
                ret = true;
            }
        } catch (Exception e) {
            try {
                cn.rollback();
            } catch (Exception z) {
                throw new boRuntimeException(""boBuildDB.moveTable"", ""BO-1304"", z);
            }
            throw new boRuntimeException(""boBuildDB.moveTable"", ""BO-1304"", e);
        } finally {
            try {
                cn.close();
            } catch (Exception e) {
            }
            try {
                cndef.close();
            } catch (Exception e) {
            }
        }
        return ret;
    }
",0.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            clearTables(stmt);
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
",0.0
"    public static boolean Copy(String __from, String __to) {
        try {
            int bytesum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(__from);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(__from);
                FileOutputStream fs = new FileOutputStream(__to);
                byte[] buffer = new byte[1024];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
","    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }
",0.0
"    protected void loadXmlFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            xmlSource = new StreamSource(rd);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
","    public String requestPOST(String baseUrl, Map<String, String> params) throws Exception {
        String result = """";
        HttpPost request = new HttpPost(baseUrl);
        HttpEntity entity = null;
        if (params != null && !params.isEmpty()) {
            List<NameValuePair> postParams = new ArrayList<NameValuePair>();
            List<String> keys = new ArrayList<String>(params.keySet());
            for (String key : keys) {
                postParams.add(new BasicNameValuePair(key, params.get(key)));
            }
            entity = new UrlEncodedFormEntity(postParams, ""utf-8"");
            request.setEntity(entity);
        }
        HttpResponse res = client.execute(request);
        if (res.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            entity = res.getEntity();
            BufferedReader in = new BufferedReader(new InputStreamReader(entity.getContent()));
            StringBuffer content = new StringBuffer();
            String read = """";
            while ((read = in.readLine()) != null) {
                content.append(read);
            }
            in.close();
            JSONObject rObj = new JSONObject(content.toString());
            result = rObj.getString(""msg"");
        } else result = ""请求失败了"";
        entity.consumeContent();
        client.getConnectionManager().shutdown();
        request = null;
        return result;
    }
",0.0
"    public ZipViewdataReader(ZipInputStream stream) throws IOException {
        ZipEntry ze;
        while ((ze = stream.getNextEntry()) != null) {
            File temp = File.createTempFile(""spool."", "".synu"");
            temp.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(temp);
            byte[] buffer = new byte[1024 * 1024];
            int length;
            while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);
            fos.close();
            String name = ze.getName();
            String[] parts = name.split(""[\\\\/]"");
            this._file_hash.put(parts[parts.length - 1], temp);
        }
        stream.close();
        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {
            File f = this._file_hash.get(key);
            FileReader fr = new FileReader(f);
            this._viewdata = new BufferedReader(fr);
            break;
        }
        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");
    }
","    private String jarDiagnostics(Throwable throwable, File[] files) throws IOException {
        File home = new File(System.getProperty(""user.home""));
        File jar_file = File.createTempFile(""nuages-diagnostic."", "".jar"", home);
        FileOutputStream fos = new FileOutputStream(jar_file);
        JarOutputStream jos = new JarOutputStream(fos);
        ZipEntry ze = new ZipEntry(""Exception"");
        jos.putNextEntry(ze);
        PrintStream ps = new PrintStream(jos);
        throwable.printStackTrace(ps);
        for (File file : files) if ((file != null) && file.exists()) {
            ze = new ZipEntry(file.getName());
            jos.putNextEntry(ze);
            byte[] buffer = new byte[65536];
            FileInputStream fis = new FileInputStream(file);
            int len;
            while ((len = fis.read(buffer)) > 0) jos.write(buffer, 0, len);
            fis.close();
        }
        jos.close();
        return jar_file.getPath();
    }
",1.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","                @Override
                protected URLConnection openConnection(URL url) throws IOException {
                    return new URLConnection(url) {

                        @Override
                        public void connect() throws IOException {
                        }

                        @Override
                        public InputStream getInputStream() throws IOException {
                            ThemeResource f = getFacelet(getURL().getFile());
                            return new ByteArrayInputStream(f.getText().getBytes());
                        }
                    };
                }
",0.0
"    public static String digest(String pBase, String pCharSet) {
        String wdgs = null;
        try {
            MessageDigest wmd = MessageDigest.getInstance(""MD5"");
            wmd.reset();
            wmd.update(pBase.getBytes(pCharSet));
            byte[] wdg = wmd.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < wdg.length; i++) {
                String w_dup = Integer.toHexString(0xFF & wdg[i]);
                if (w_dup.length() < 2) {
                    w_dup = ""0"" + w_dup;
                }
                hexString.append(w_dup);
            }
            wdgs = hexString.toString();
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        } finally {
            return wdgs;
        }
    }
","    public void execute() {
        check();
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(host, port);
        } catch (IOException ex) {
            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");
        }
        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());
        }
        try {
            try {
                if (!ftp.login(userid, password)) {
                    throw new BuildException(""Identification failed"");
                }
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (binary) {
                try {
                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);
                } catch (IOException ex) {
                    throw new BuildException(ex);
                }
                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());
                }
            }
            try {
                ftp.changeWorkingDirectory(remotedir);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());
            }
            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;
            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;
            BufferedOutputStream outstream = null;
            try {
                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));
                ftp.retrieveFile(remoteFullFileName, outstream);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");
            }
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException ex) {
                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");
            }
        }
    }
",0.0
"    public static String encipherAMessage(String message) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] digest = sha1.digest();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String cipherTextB64 = base64encoder.encode(digest);
            return cipherTextB64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
","    public static Observacion load() {
        Observacion obs = new Observacion(new Date());
        FTPClient f = new FTPClient();
        SimpleDateFormat sdf = new SimpleDateFormat(""yyyyMMdd"");
        final String datestamp = sdf.format(new Date());
        String pathname = String.format(PATHNAME_PATTERN, datestamp);
        try {
            InetAddress server = InetAddress.getByName(HOST);
            f.connect(server);
            f.login(USERNAME, PASSWORD);
            FTPFile[] files = f.listFiles(pathname, new FTPFileFilter() {

                @Override
                public boolean accept(FTPFile file) {
                    return file.getName().startsWith(datestamp);
                }
            });
            FTPFile file = files[files.length - 1];
            f.setFileTransferMode(FTPClient.BINARY_FILE_TYPE);
            boolean download = false;
            String remote = pathname + ""/"" + file.getName();
            if (download) {
                File out = new File(""/home/randres/Desktop/"" + file.getName());
                FileOutputStream fout = new FileOutputStream(out);
                fout.flush();
                fout.close();
            } else {
                GZIPInputStream gzipin = new GZIPInputStream(f.retrieveFileStream(remote));
                LineNumberReader lreader = new LineNumberReader(new InputStreamReader(gzipin, ""Cp1250""));
                String line = null;
                while ((line = lreader.readLine()) != null) {
                    obs.addEstacion(AemetRetriever.processLine(line));
                }
                lreader.close();
            }
            f.disconnect();
        } catch (Exception e) {
            LOGGER.log(Level.WARNING, ""Cannot retrieve data from FTP"", e);
        }
        return obs;
    }
",0.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    public static String getMyGlobalIP() {
        try {
            URL url = new URL(IPSERVER);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String ip = in.readLine();
            in.close();
            con.disconnect();
            return ip;
        } catch (Exception e) {
            return null;
        }
    }
",0.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    protected void lookupForParsedElementAnnotations(JClassType t) {
        List<JMethod> methods = getParsableElementMethods(t);
        if (methods != null) {
            for (JMethod method : methods) {
                ParsedElement elementAnnotation = method.getAnnotation(ParsedElement.class);
                if (elementAnnotation.type() == ParsedElement.Types.SYNC) {
                    try {
                        String contents = """";
                        URL url = getClass().getClassLoader().getResource(elementAnnotation.file());
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = null;
                        while ((line = reader.readLine()) != null) {
                            contents += line;
                        }
                        reader.close();
                        ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), contents.replaceAll(""\"""", ""'""), elementAnnotation.type());
                        this.parsedElementList.add(elementDescriptor);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    ParsedElementDescriptor elementDescriptor = new ParsedElementDescriptor(method.getName(), elementAnnotation.file(), elementAnnotation.type());
                    this.parsedElementList.add(elementDescriptor);
                }
            }
        }
    }
",0.0
"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF channel = null;
        try {
            channel = FeedParser.parse(new ChannelBuilder(), url);
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream is = new URL(url).openStream();
            InputStreamReader reader = new InputStreamReader(is);
            channel = FeedParser.parse(new ChannelBuilder(), reader);
            reader.close();
            is.close();
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        }
        DAOChannel.addChannel(channel);
        DAOFavicon.addFaviconForChannel(channel);
        return channel;
    }
","    protected Template read(URL url) throws TemplateException {
        String parent = Parent(url);
        TemplateLoaderContext context = new TemplateLoaderContext(this, parent, false);
        String contents;
        InputStream in = null;
        try {
            in = url.openStream();
            contents = this.readToString(new java.io.InputStreamReader(in));
        } catch (IOException exc) {
            throw new TemplateException(url.toString(), exc);
        } finally {
            try {
                in.close();
            } catch (IOException ignore) {
            }
        }
        TemplateParser parser = this.parser;
        if (null == parser) return (new Template(contents, context)); else return (new Template(parser, contents, context));
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
",0.0
"    @Test
    public void testGetResource_FileOutsideOfClasspath() throws Exception {
        File temp = File.createTempFile(""dozerfiletest"", "".txt"");
        temp.deleteOnExit();
        String resourceName = ""file:"" + temp.getAbsolutePath();
        URL url = loader.getResource(resourceName);
        assertNotNull(""URL should not be null"", url);
        InputStream is = url.openStream();
        assertNotNull(""input stream should not be null"", is);
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter to = new FileWriter(toFile);
        char[] buffer = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(buffer)) != -1) {
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        to.close();
        from.close();
    }
",0.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",0.0
"    public static String SHAEncrypt(String originalString) {
        String encryptedString = new String("""");
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(originalString.getBytes());
            byte b[] = md.digest();
            for (int i = 0; i < b.length; i++) {
                char[] digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] ob = new char[2];
                ob[0] = digit[(b[i] >>> 4) & 0X0F];
                ob[1] = digit[b[i] & 0X0F];
                encryptedString += new String(ob);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return encryptedString;
    }
","    public static String post(String strUrl, String strPostString) {
        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            HttpURLConnection.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            StringBuffer sRet = new StringBuffer();
            while ((s = in.readLine()) != null) {
                sRet.append(s);
            }
            in.close();
            return sRet.toString();
        } catch (MalformedURLException e) {
            NoMuleRuntime.showError(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",0.0
"    private String crypt(String s) throws BaseException, NoSuchAlgorithmException {
        if (s != null && s.length() > 0) {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(s.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } else {
            throw new BaseException(ErrorCodes.CODE_2100);
        }
    }
","    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
",0.0
"    public void load(URL url) throws IOException {
        try {
            oggBitStream_ = new BufferedInputStream(url.openStream());
        } catch (Exception ex) {
            System.err.println(""ogg file "" + url + "" could not be loaded"");
        }
        load();
    }
","    private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {
        Map<String, String> result = new LinkedHashMap();
        while (urls.hasNext()) {
            URL url = urls.next();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String s = reader.readLine();
            while (s != null) {
                s = s.trim();
                if (s.length() > 0) {
                    String[] ss = s.split(""\\s"");
                    for (int i = 1; i < ss.length; i++) {
                        result.put(ss[i], ss[0]);
                    }
                }
                s = reader.readLine();
            }
            reader.close();
        }
        return result;
    }
",0.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    public FileDownloader(Context context, String downloadUrl, File fileSaveDir, int threadNum) {
        try {
            this.context = context;
            this.downloadUrl = downloadUrl;
            this.fileService = new FileService(context);
            this.url = new URL(downloadUrl);
            this.threads = new DownloadThread[threadNum];
            this.fileSaveDir = fileSaveDir;
            if (!fileSaveDir.exists()) {
                fileSaveDir.mkdir();
            }
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setConnectTimeout(6 * 1000);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*"");
            conn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            conn.setRequestProperty(""Referer"", downloadUrl);
            conn.setRequestProperty(""Charset"", ""UTF-8"");
            conn.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"");
            conn.setRequestProperty(""Connection"", ""Keep-Alive"");
            conn.connect();
            printResponseHeader(conn);
            if (conn.getResponseCode() == 200) {
                this.fileSize = conn.getContentLength();
                if (this.fileSize <= 0) throw new RuntimeException(""�޷���֪�ļ���С"");
                String fileName = getFileName(conn);
                this.saveFile = new File(fileSaveDir, fileName);
                Map<Integer, Integer> logdata = fileService.getData(downloadUrl);
                if (logdata.size() > 0) {
                    data.putAll(logdata);
                }
                this.block = this.fileSize / this.threads.length + 1;
                if (this.data.size() == this.threads.length) {
                    for (int i = 0; i < this.threads.length; i++) {
                        this.downloadSize += this.data.get(i + 1) - (this.block * i);
                    }
                    print(""�Ѿ����صĳ��ȣ�"" + this.downloadSize);
                }
            } else {
                print(""��������Ӧ����"");
                throw new RuntimeException(""��������Ӧ����"");
            }
        } catch (Exception e) {
            print(""���Ӳ�������·��"" + e.toString());
            throw new RuntimeException(""���Ӳ�������·��"");
        }
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public void testPostWithGzip() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new GZIPCompressedEntity(new StringEntity(""test"")));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
",0.0
"public static String md5(String text) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(text.getBytes(AlipayConfig.input_charset));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] bytes = msgDigest.digest();
        String md5Str = new String(encodeHex(bytes));
        return md5Str;
    }","    public boolean open() {
        if (null == _uu) {
            try {
                if (null == url) return false; else {
                    if (null != this.query) this.url = constructQuery(url, this.query);
                    _uu = url.openConnection();
                    _uu.setAllowUserInteraction(false);
                    _uu.setDoInput(true);
                    if (null != super._loc) {
                        try {
                            _uu.setRequestProperty(""Accept-Language"", jsGet_locale());
                        } catch (JavaScriptException jsx) {
                        }
                    }
                    encoding = _uu.getContentEncoding();
                    bytesize = _uu.getContentLength();
                    mimetype = _uu.getContentType();
                    serviceDate = _uu.getDate();
                    contentExpires = _uu.getExpiration();
                    contentLastmod = _uu.getLastModified();
                    return true;
                }
            } catch (Exception exc) {
                close();
                return false;
            }
        } else return true;
    }
",0.0
"    public FTPSource(SourceDetail sourceDetail) throws SourceException {
        this.sourceDetail = sourceDetail;
        localPathMap = new HashMap<String, String>();
        client = new FTPClient();
        try {
            client.connect(sourceDetail.getHost());
            client.login(sourceDetail.getUser(), sourceDetail.getPassword());
            workingDirectory = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator + sourceDetail.getName());
            workingDirectory.mkdir();
        } catch (Exception e) {
            throw new SourceException(e);
        }
    }
","    public static void main(String args[]) throws Exception {
        currTime = getCurrentTimestamp();
        String sqlDoc = """";
        String sqlVersion = """";
        String sqlDocVersion = """";
        String sqlContent = """";
        String sqlDocDetail = """";
        String sqlRoot = """";
        java.util.Properties props = new java.util.Properties();
        String path = new LoadDocumentData().getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        if (!path.endsWith(""/"")) {
            path += ""/"";
        }
        path += ""generate.properties"";
        if (!path.startsWith(""/"")) {
            path = ""/"" + path;
        }
        java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(path));
        props.load(fis);
        author = props.getProperty(""author"");
        srcPath = props.getProperty(""srcPath"");
        driverStr = props.getProperty(""driverStr"");
        dbConnStr = props.getProperty(""dbConnStr"");
        dbUsername = props.getProperty(""dbUsername"");
        dbPassword = props.getProperty(""dbPassword"");
        openDBConn();
        stat = conn.createStatement();
        Hashtable htTableKey = new Hashtable();
        htTableKey = getTableKey(conn);
        genUserDefinedIndex(conn, htTableKey);
        Integer ownerID = new Integer(0);
        Integer nDocID = new Integer(1);
        Integer nDocDetailID = new Integer(1);
        Integer nVersionID = new Integer(1);
        Integer nContentID = new Integer(1);
        Integer nDmsRootID = new Integer(1);
        Integer nMtmDocVersionID = new Integer(1);
        Integer nParentID = null;
        Integer nRootID = null;
        String sName = ""1000000001.txt"";
        String sConvertedName = ""1000000001"";
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            nDocID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            nDocDetailID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT_DETAIL"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            nVersionID = new Integer(((Integer) htTableKey.get(""DMS_VERSION"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            nContentID = new Integer(((Integer) htTableKey.get(""DMS_CONTENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_ROOT"")) {
            nDmsRootID = new Integer(((Integer) htTableKey.get(""DMS_ROOT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            nMtmDocVersionID = new Integer(((Integer) htTableKey.get(""MTM_DOCUMENT_VERSION"")).intValue() + 1);
        }
        int nStart = (new Integer(args[0])).intValue();
        int nEnd = (new Integer(args[1])).intValue();
        nParentID = new Integer(args[2]);
        Integer nRootParentID = new Integer(args[2]);
        nRootID = new Integer(args[3]);
        String sPhysicalLoc = new String(args[4]);
        indexPath = new String(args[5]);
        System.out.println(""rootID : "" + nRootID + ""  ParentID "" + nParentID + "" physical Loc = "" + sPhysicalLoc);
        String sFieldValue = """";
        PreparedStatement preStat = null;
        String sDocName = """";
        int count = 0;
        int total = 0;
        FileInputStream infile = new FileInputStream(new File(sPhysicalLoc + sName));
        byte[] buffer = new byte[infile.available()];
        infile.read(buffer);
        String inFileData = new String(buffer);
        for (int i = nStart; i <= nEnd; i++) {
            try {
                sFieldValue = ""REF"" + i;
                sDocName = Calendar.getInstance().getTimeInMillis() + "".tif"";
                dmsDocument.setID(nDocID);
                dmsDocument.setDocumentType(""D"");
                dmsDocument.setParentID(nParentID);
                dmsDocument.setRootID(nRootID);
                dmsDocument.setCreateType(""S"");
                dmsDocument.setReferenceNo(""Ref Num"");
                dmsDocument.setDescription(""desc"");
                dmsDocument.setUdfDetailList(new ArrayList());
                dmsDocument.setEffectiveStartDate(currTime);
                dmsDocument.setItemSize(new Integer(20480));
                dmsDocument.setItemStatus(""A"");
                dmsDocument.setOwnerID(new Integer(0));
                dmsDocument.setUpdateCount(new Integer(0));
                dmsDocument.setCreatorID(new Integer(0));
                dmsDocument.setCreateDate(currTime);
                dmsDocument.setUpdaterID(new Integer(0));
                dmsDocument.setUpdateDate(currTime);
                dmsDocument.setRecordStatus(""A"");
                if (count % 500 == 0) {
                    sDocName = ""TestDocument"" + i;
                    dmsDocument.setDocumentName(sDocName);
                    dmsDocument.setDocumentType(""F"");
                    sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','F',"" + nRootParentID + "","" + nRootID.toString() + "", 'S', '"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 0, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                    preStat = conn.prepareStatement(sqlDoc);
                    preStat.executeUpdate();
                    nParentID = nDocID;
                    nDocID = new Integer(nDocID.intValue() + 1);
                }
                total = count + nStart;
                System.out.println(""xxx Count: "" + total + "" docID = "" + nDocID);
                sDocName = ""TestFullText"" + i + "".txt"";
                dmsDocument.setDocumentName(sDocName);
                sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','D',"" + nParentID.toString() + "","" + nRootID.toString() + "", 'S','"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 20480, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDoc);
                preStat.executeUpdate();
                sqlDocDetail = ""INSERT INTO DMS_DOCUMENT_DETAIL VALUES("" + nDocDetailID.toString() + "","" + nDocID.toString() + "","" + sUdfID + "","" + sUdfDetailID + "",'"" + sFieldValue + ""', null, null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocDetail);
                preStat.executeUpdate();
                dmsDocument.setUserDefinedFieldID(new Integer(sUdfID));
                sqlContent = "" INSERT INTO DMS_CONTENT VALUES ("" + nContentID.toString() + "","" + sConvertedName + "", 'IMAGE', null, 'TIF', 'A', 0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlContent);
                preStat.executeUpdate();
                dmsDocument.setContentID(nContentID);
                sqlVersion = ""INSERT INTO DMS_VERSION VALUES("" + nVersionID.toString() + "", "" + nDocID.toString() + "", 1,'ROOT',0,"" + nContentID.toString() + "",0, 'Ref Num', 'desc', 20480, 'A', null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlVersion);
                preStat.executeUpdate();
                dmsDocument.setVersionID(nVersionID);
                dmsDocument.setVersionID(new Integer(1));
                dmsDocument.setVersionLabel(""ROOT"");
                sqlDocVersion = ""INSERT INTO MTM_DOCUMENT_VERSION VALUES("" + nMtmDocVersionID.toString() + "","" + nDocID.toString() + "","" + nVersionID.toString() + "",'A', 0, 0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocVersion);
                preStat.executeUpdate();
                nDocID = new Integer(nDocID.intValue() + 1);
                nDocDetailID = new Integer(nDocDetailID.intValue() + 1);
                nVersionID = new Integer(nVersionID.intValue() + 1);
                nContentID = new Integer(nContentID.intValue() + 1);
                nDmsRootID = new Integer(nDmsRootID.intValue() + 1);
                nMtmDocVersionID = new Integer(nMtmDocVersionID.intValue() + 1);
                SessionContainer sessionContainer = new SessionContainer();
                if (""D"".equals(dmsDocument.getDocumentType())) {
                    File outFile = new File(sPhysicalLoc + ""temp.txt"");
                    PrintStream out = new PrintStream(new FileOutputStream(outFile, false), true);
                    out.println(formatNumber(i));
                    out.print(inFileData);
                    try {
                        out.close();
                    } catch (Exception ignore) {
                        out = null;
                    }
                    FileInputStream data = new FileInputStream(outFile);
                    indexDocument(dmsDocument, data, GlobalConstant.OP_MODE_INSERT);
                    try {
                        data.close();
                    } catch (Exception ignore) {
                        data = null;
                    }
                }
                count++;
            } catch (Exception ee) {
                log.error(ee, ee);
                conn.rollback();
            } finally {
                try {
                    preStat.close();
                    conn.rollback();
                } catch (Exception ep) {
                }
            }
        }
        try {
            infile.close();
        } catch (Exception ignore) {
            infile = null;
        }
        PreparedStatement statment = null;
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT', "" + nDocID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocDetailID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT_DETAIL'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT_DETAIL', "" + nDocDetailID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nVersionID.toString() + "" WHERE TABLE_NAME='DMS_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_VERSION', "" + nVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nContentID.toString() + "" WHERE TABLE_NAME='DMS_CONTENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_CONTENT', "" + nContentID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nMtmDocVersionID.toString() + "" WHERE TABLE_NAME='MTM_DOCUMENT_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('MTM_DOCUMENT_VERSION', "" + nMtmDocVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        statment.close();
        System.out.println(""final value: "" + "" DocumentID "" + nDocID + "" DocDetailID "" + nDocDetailID + "" DocVersion "" + nVersionID + "" DocContent "" + nContentID + "" nMtmDocVersionID "" + nMtmDocVersionID);
        closeDBConn();
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    @Override
    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            URL url = new File(fileName).toURI().toURL();
            final InputStream input = url.openStream();
            prop.load(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
","    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""We will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",0.0
"    public static void loadProperties() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.lang.en.properties"");
            localization.load(url.openStream());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            FileInputStream is = new FileInputStream(userDir + ""OpenDarkRoom.properties"");
            preferences.load(is);
        } catch (FileNotFoundException e) {
            log.warn(""Preferences file "" + userDir + ""OpenDarkRoom.properties not found, loading defaults"");
            loadDefaultPreferences();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private void copyResource(String relResourceName) {
        String projectName = layout.getRootDir().getName();
        String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;
        InputStream source = getClass().getResourceAsStream(resourceName);
        if (source == null) {
            throw new RuntimeException(""couldn't find resource "" + resourceName);
        }
        File dest = new File(layout.getRootDir(), relResourceName);
        dest.getParentFile().mkdirs();
        dest.createNewFile();
        InputStreamReader in = new InputStreamReader(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                IOUtils.closeQuietly(out);
            }
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",0.0
"    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
","    public boolean actualizarEstadoEliminacion(int idTorneo) {
        int intResult = 0;
        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",0.0
"    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + server);
        FTPClient f = new FTPClient();
        f.connect(server);
        if (f.login(id, passwd) == false) {
            logger.info(""Fail to login with id="" + id);
            throw new LoginFailException(id, passwd);
        }
        f.changeWorkingDirectory(path);
        logger.info(""Start to upload"");
        f.storeFile(""index.html"", new ByteArrayInputStream(html.getBytes(""utf-8"")));
        logger.info(""Upload index.html"");
        f.storeFile(""main.css"", new FileInputStream(""web/main.css""));
        logger.info(""Upload main.css"");
        f.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));
        logger.info(""Upload cafelibrary.js"");
        f.makeDirectory(""img"");
        f.changeWorkingDirectory(""img"");
        for (int i = 0; i <= 5; i++) {
            String fileName = ""favorite_star_"" + i + "".png"";
            f.storeFile(fileName, new FileInputStream(""web/img/"" + fileName));
            logger.info(""Upload "" + fileName);
        }
        f.logout();
        f.disconnect();
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private void publish() {
        if (uploadPrototypeBox.isSelected()) {
            try {
                URL url = new URL(prototypeURLField.getText());
                prototypeURLField.recordText();
                PrintStream ps;
                HttpURLConnection huc = null;
                if (url.getProtocol().equals(""file"")) {
                    ps = new PrintStream(new FileOutputStream(url.getFile()));
                } else {
                    URLConnection urlc = url.openConnection();
                    urlc.setDoOutput(true);
                    if (urlc instanceof HttpURLConnection) {
                        huc = ((HttpURLConnection) urlc);
                        huc.setRequestMethod(""PUT"");
                    }
                    ps = new PrintStream(urlc.getOutputStream());
                }
                target.writePrototype(ps);
                if (huc != null) {
                    huc.getResponseCode();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Uploading Prototype"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (postMetadataBox.isSelected()) {
            try {
                Hashtable env = new Hashtable();
                env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
                env.put(Context.PROVIDER_URL, directoryURLField.getText());
                env.put(Context.SECURITY_PRINCIPAL, directoryPrincipalField.getText());
                env.put(Context.SECURITY_CREDENTIALS, directoryCredentialsField.getText());
                InitialDirContext dirContext = new InitialDirContext(env);
                Preferences prefs = Preferences.userNodeForPackage(getClass());
                prefs.put(""directoryURL"", directoryURLField.getText());
                prefs.put(""directoryPrincipal"", directoryPrincipalField.getText());
                prefs.put(""directoryCredentials"", directoryCredentialsField.getText());
                BasicAttributes attr = new BasicAttributes();
                attr.put(OBJECT_CLASS, RDS_RESOURCE);
                attr.put(CONTENT_TYPE, PROTOTYPE_TYPE);
                if (uploadPrototypeBox.isSelected()) {
                    attr.put(IMPLEMENTATION_URL, prototypeURLField.getText());
                }
                DefaultTableModel dtm = (DefaultTableModel) attributesTable.getModel();
                Preferences attrPrefs = prefs.node(""attributes"");
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    attr.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                    attrPrefs.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                }
                NameParser np = dirContext.getNameParser("""");
                Enumeration comps = new ResourceName(prototypeNameField.getText()).getAll();
                prototypeNameField.recordText();
                Name resourcedn = np.parse("""");
                while (comps.hasMoreElements()) {
                    resourcedn.add(RC + ""="" + (String) comps.nextElement());
                    try {
                        dirContext.createSubcontext(resourcedn);
                    } catch (NameAlreadyBoundException nabe) {
                    }
                }
                dirContext.modifyAttributes(resourcedn, DirContext.REPLACE_ATTRIBUTE, attr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Posting Metadata"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
",0.0
"    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");
        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));
        byte[] digestBytes = messageDigest.digest();
        String hex = null;
        for (int i = 0; i < digestBytes.length; i++) {
            hex = Integer.toHexString(0xFF & digestBytes[i]);
            if (hex.length() < 2) sb.append(""0"");
            sb.append(hex);
        }
        return new String(sb);
    }
","    protected NetQuery(String serviceURL, String query, byte queryType, String defaultGraph, int timeout) {
        String urlString = null;
        try {
            queryString = query;
            char delim = serviceURL.indexOf('?') == -1 ? '?' : '&';
            if (queryType == Query.UPDATE_TYPE) urlString = serviceURL; else {
                urlString = serviceURL + delim + ""query="" + URLEncoder.encode(query, ""UTF-8"");
                delim = '&';
                if (defaultGraph != null) urlString += delim + ""default-graph-uri="" + defaultGraph;
            }
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            configureConnection(query, queryType, timeout, defaultGraph);
        } catch (UnsupportedEncodingException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        } catch (MalformedURLException e) {
            System.err.println(e.toString() + "" for URL: "" + urlString);
            System.err.println(serviceURL);
            e.printStackTrace();
            System.exit(-1);
        } catch (IOException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        }
    }
",0.0
"    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println(""Connecting to "" + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
","    private URLConnection getConnection(String url, int count) {
        URLConnection conn = null;
        try {
            conn = new URL(url).openConnection();
        } catch (IOException e) {
            if (count < 5) {
                System.out.println();
                System.out.print(""getConnection failed - "");
                System.out.println(count);
                System.out.println(""Trying again ..."");
                conn = this.getConnection(url, count++);
            } else {
                System.out.println(""Giving up"");
                throw new OntopiaRuntimeException(e);
            }
        }
        return conn;
    }
",0.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    protected File extractArchive(File archive) {
        byte buf[] = new byte[BUF_SIZE];
        ZipInputStream zis = null;
        File archiveDirectory = null;
        FileOutputStream fos;
        ZipEntry entry;
        File curEntry;
        int n;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            while ((entry = zis.getNextEntry()) != null) {
                curEntry = new File(workingDir, entry.getName());
                if (entry.isDirectory()) {
                    getLogger().info(""skip directory: "" + entry.getName());
                    if (archiveDirectory == null) archiveDirectory = curEntry;
                    continue;
                }
                getLogger().info(""zip-entry (file): "" + entry.getName() + "" ==> real path: "" + curEntry.getAbsolutePath());
                if (!curEntry.getParentFile().exists()) curEntry.getParentFile().mkdirs();
                fos = new FileOutputStream(curEntry);
                while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n);
                fos.close();
                zis.closeEntry();
            }
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            try {
                if (zis != null) zis.close();
            } catch (Throwable t) {
            }
        }
        return archiveDirectory;
    }
",0.0
"    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digest = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        digest.update(password.getBytes(""utf-8""), 0, password.length());
        md5hash = digest.digest();
        return convertToHex(md5hash);
    }
","    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    public static String SHA1(String text) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        md.update(text.getBytes());
        byte byteData[] = md.digest();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
        }
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < byteData.length; i++) {
            String hex = Integer.toHexString(0xff & byteData[i]);
            if (hex.length() == 1) hexString.append('0');
            hexString.append(hex);
        }
        return hexString.toString();
    }
",0.0
"    public static String getMd5Hash(String plaintext) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(plaintext.getBytes());
            byte[] digest = md5.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            return hashtext;
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return """";
    }
","    public String getMd5() {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(string.getBytes());
            byte[] result = md5.digest();
            for (int i = 0; i < result.length; i++) {
                hexString.append(Integer.toHexString((result[i] & 0xFF) | 0x100).toLowerCase().substring(1, 3));
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
",1.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    private URLConnection getURLConnection(String str) {
        try {
            if (isHttps) {
                System.setProperty(""java.protocol.handler.pkgs"", ""com.sun.net.ssl.internal.www.protocol"");
                if (isProxy) {
                    System.setProperty(""https.proxyHost"", proxyHost);
                    System.setProperty(""https.proxyPort"", proxyPort);
                }
            } else {
                if (isProxy) {
                    System.setProperty(""http.proxyHost"", proxyHost);
                    System.setProperty(""http.proxyPort"", proxyPort);
                }
            }
            URL url = new URL(str);
            return (url.openConnection());
        } catch (MalformedURLException me) {
            System.out.println(""Malformed URL"");
            me.printStackTrace();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
",0.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0.0
"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
","    public static Vector getKeywordsFromURLFast(String p_url) throws Exception {
        URL x_url = new URL(p_url);
        URLConnection x_conn = x_url.openConnection();
        InputStreamReader x_is_reader = new InputStreamReader(x_conn.getInputStream());
        BufferedReader x_reader = new BufferedReader(x_is_reader);
        String x_line = null;
        String x_title_line = null;
        String x_lc_line = null;
        Vector x_words = new Vector(1000);
        int x_body = -1;
        int x_title = -1;
        boolean x_bod = false;
        int x_end = -1;
        while ((x_line = x_reader.readLine()) != null) {
            x_lc_line = x_line.toLowerCase();
            x_title = x_lc_line.indexOf(""<title"");
            if (x_title != -1) {
                x_end = x_lc_line.indexOf(""</title>"");
                x_title_line = x_line.substring((x_title + 7), (x_end == -1 ? x_line.length() : x_end));
            }
            x_body = x_lc_line.indexOf(""<body"");
            if (x_body != -1) {
                x_bod = true;
                x_line = x_line.substring(x_body + 5);
                break;
            }
        }
        boolean x_status = false;
        x_end = -1;
        String[] x_temp_words;
        if (x_bod == false) {
            if (x_title_line != null) {
                x_words = new Vector();
                x_temp_words = extractWordsFromSpacedList(x_title_line);
                for (int i = 0; i < x_temp_words.length; i++) x_words.addElement(x_temp_words[i]);
                x_words.addElement(x_title_line);
                return x_words;
            } else {
                return null;
            }
        }
        StringBuffer x_buf = new StringBuffer(35);
        do {
            x_lc_line = x_line.toLowerCase();
            x_end = x_lc_line.indexOf(""</body>"");
            if (x_end != -1) {
                extractOutsideTextFast(x_line.substring(0, x_end), '<', '>', x_words, x_status, x_buf);
                break;
            }
            x_status = extractOutsideTextFast(x_line, '<', '>', x_words, x_status, x_buf);
        } while ((x_line = x_reader.readLine()) != null);
        if (x_title_line != null) x_words.addElement(x_title_line);
        return x_words;
    }
",0.0
"    public Map readMap(String filename) throws Exception {
        xmlPath = filename.substring(0, filename.lastIndexOf(File.separatorChar) + 1);
        String xmlFile = makeUrl(filename);
        URL url = new URL(xmlFile);
        InputStream is = url.openStream();
        if (filename.endsWith("".gz"")) {
            is = new GZIPInputStream(is);
        }
        Map unmarshalledMap = unmarshal(is);
        unmarshalledMap.setFilename(filename);
        map = null;
        return unmarshalledMap;
    }
","        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
",0.0
"    @Test
    public void test_baseMaterialsForTypeName_NonExistingName() throws Exception {
        URL url = new URL(baseUrl + ""/baseMaterialsForTypeName/blah-blah"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(400));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(400));
    }
","    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    private static ArrayList<String> YahooSearch(String query) {
        ArrayList<String> yahooSearchResults = new ArrayList<String>();
        try {
            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";
            URL url = new URL(request);
            System.out.println(""Host : "" + url.getHost());
            url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String finalContents = """";
            while ((inputLine = reader.readLine()) != null) {
                finalContents += ""\n"" + inputLine;
            }
            Document doc = Jsoup.parse(finalContents);
            Elements eles = doc.getElementsByTag(""url"");
            for (Element ele : eles) {
                yahooSearchResults.add(ele.text());
                System.out.println(""YahooResult: "" + ele.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return yahooSearchResults;
    }
",0.0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
","    private static void login(HttpClient client, String token) throws Exception {
        HttpPost login = new HttpPost(""https://libsys.arlingtonva.us/iii/cas/login?service=http&amp;scope=1"");
        List<NameValuePair> formParams = new ArrayList<NameValuePair>();
        formParams.add(new BasicNameValuePair(""code"", ""202002686286""));
        formParams.add(new BasicNameValuePair(""pin"", ""3128""));
        formParams.add(new BasicNameValuePair(""_eventId"", ""submit""));
        formParams.add(new BasicNameValuePair(""lt"", token));
        UrlEncodedFormEntity form = new UrlEncodedFormEntity(formParams, ""UTF-8"");
        login.setEntity(form);
        HttpResponse response = client.execute(login);
        EntityUtils.consume(response.getEntity());
        Header[] headers = response.getAllHeaders();
        System.out.println(""HEADERS: "");
        for (Header hdr : headers) {
            System.out.println(hdr.getName() + "": "" + hdr.getValue());
        }
    }
",0.0
"    public void send(String payload, TransportReceiver receiver) {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost();
        post.setHeader(""Content-Type"", ""application/json;charset=UTF-8"");
        post.setHeader(""Cookie"", cookie);
        post.setURI(uri);
        Throwable ex;
        try {
            post.setEntity(new StringEntity(payload, ""UTF-8""));
            HttpResponse response = client.execute(post);
            if (200 == response.getStatusLine().getStatusCode()) {
                String contents = readStreamAsString(response.getEntity().getContent());
                receiver.onTransportSuccess(contents);
            } else {
                receiver.onTransportFailure(new ServerFailure(response.getStatusLine().getReasonPhrase()));
            }
            return;
        } catch (UnsupportedEncodingException e) {
            ex = e;
        } catch (ClientProtocolException e) {
            ex = e;
        } catch (IOException e) {
            ex = e;
        }
        receiver.onTransportFailure(new ServerFailure(ex.getMessage()));
    }
","    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream out = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel channel = out.getChannel();
            long pos = 0, len = src.size(), ret;
            while (len > 0) {
                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;
                len -= ret;
                pos += ret;
            }
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
","    public void put(File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(fileToPut.getName(), input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    @SuppressWarnings(""deprecation"")
    public void testMemberIterator() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember0 = iter.next();
        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());
        assertEquals(""wrong 1k member count"", 1024, count0);
        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());
        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());
        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember1 = iter.next();
        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());
        assertEquals(""wrong 32k member count"", (32 * 1024), count1);
        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());
        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember2 = iter.next();
        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());
        assertEquals(""wrong 1-byte member count"", 1, count2);
        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());
        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember3 = iter.next();
        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());
        assertEquals(""wrong 5-byte member count"", 5, count3);
        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());
        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        assertFalse(iter.hasNext());
    }
",0.0
"    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
","    protected void processAnnotationsJar(URL url) {
        JarFile jarFile = null;
        try {
            URLConnection urlConn = url.openConnection();
            JarURLConnection jarUrlConn;
            if (!(urlConn instanceof JarURLConnection)) {
                sm.getString(""contextConfig.jarUrl"", url);
                return;
            }
            jarUrlConn = (JarURLConnection) urlConn;
            jarUrlConn.setUseCaches(false);
            jarFile = jarUrlConn.getJarFile();
            Enumeration<JarEntry> jarEntries = jarFile.entries();
            while (jarEntries.hasMoreElements()) {
                JarEntry jarEntry = jarEntries.nextElement();
                String entryName = jarEntry.getName();
                if (entryName.endsWith("".class"")) {
                    InputStream is = null;
                    try {
                        is = jarFile.getInputStream(jarEntry);
                        processAnnotationsStream(is);
                    } catch (IOException e) {
                        logger.error(sm.getString(""contextConfig.inputStreamJar"", entryName, url), e);
                    } finally {
                        if (is != null) {
                            try {
                                is.close();
                            } catch (Throwable t) {
                                ExceptionUtils.handleThrowable(t);
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            logger.error(sm.getString(""contextConfig.jarFile"", url), e);
        } finally {
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                }
            }
        }
    }
",0.0
"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public void chmod(String remoteFile, String mode) {
        String remotePath = connector.getRemoteDirectory();
        remotePath += PATH_SEPARATOR + remoteFile;
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info(""Connected to "" + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                String parameters = ""chmod "" + mode + "" "" + remotePath;
                ftp.site(parameters);
                ftp.logout();
            }
            ftp.disconnect();
        } catch (SocketException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0.0
"    public static LinkedList<String> read(URL url, String exc) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            if (!input.startsWith(exc)) {
                data.add(input);
            }
        }
        br.close();
        return data;
    }
","    public static void main(String[] args) {
        FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);
        boolean proceed = true;
        String input = """";
        DataInputStream dis;
        OutputStream out;
        InputStream in;
        File out_file, in_file;
        byte[] buffer = new byte[2048];
        int bytes_read;
        while (proceed) {
            fd.show();
            if (fd.getFile() != null) {
                try {
                    in_file = new File(fd.getDirectory(), fd.getFile());
                    out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");
                    out = new FileOutputStream(out_file);
                    in = new MSZipInputStream(new FileInputStream(in_file));
                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.out.println(""Do another (y/n)?"");
            dis = new DataInputStream(System.in);
            try {
                input = dis.readLine();
            } catch (Exception blah) {
            }
            if (input.toLowerCase().startsWith(""n"")) proceed = false;
        }
    }
",0.0
"    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
","	public FTPClient sample2c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPSClient ftpClient = new FTPSClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
",0.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    @Override
    public boolean performOk() {
        this.setPropertyValue(""bea.home"", this.beaHome.getText());
        this.setPropertyValue(""bea.domain"", this.domainDirectory.getText());
        Display.getDefault().syncExec(new Runnable() {

            public void run() {
                saveWLHome();
                for (final TabControl control : tabControls) {
                    control.performOk(WLPropertyPage.this.getProject(), WLPropertyPage.this);
                }
                if (isEnabledJCLCopy()) {
                    final File url = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(url, ""lib"");
                    File log4jLibrary = new File(lib, ""log4j-1.2.13.jar"");
                    if (!log4jLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream fos = null;
                        try {
                            srcFile = toInputStream(new Path(""jcl/log4j-1.2.13.jar""));
                            fos = new FileOutputStream(log4jLibrary);
                            IOUtils.copy(srcFile, fos);
                            srcFile.close();
                            fos.flush();
                            fos.close();
                            srcFile = toInputStream(new Path(""/jcl/commons-logging-1.0.4.jar""));
                            File jcl = new File(lib, ""commons-logging-1.0.4.jar"");
                            fos = new FileOutputStream(jcl);
                            IOUtils.copy(srcFile, fos);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy JCL jars file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (fos != null) {
                                    fos.flush();
                                    fos.close();
                                    fos = null;
                                }
                            } catch (IOException e) {
                            }
                        }
                    }
                }
                if (isEnabledJSTLCopy()) {
                    File url = new File(WLPropertyPage.this.domainDirectory.getText());
                    File lib = new File(url, ""lib"");
                    File jstlLibrary = new File(lib, ""jstl.jar"");
                    if (!jstlLibrary.exists()) {
                        InputStream srcFile = null;
                        FileOutputStream fos = null;
                        try {
                            srcFile = toInputStream(new Path(""jstl/jstl.jar""));
                            fos = new FileOutputStream(jstlLibrary);
                            IOUtils.copy(srcFile, fos);
                        } catch (IOException e) {
                            Logger.log(Logger.ERROR, ""Could not copy the JSTL 1.1 jar file to Bea WL"", e);
                        } finally {
                            try {
                                if (srcFile != null) {
                                    srcFile.close();
                                    srcFile = null;
                                }
                                if (fos != null) {
                                    fos.flush();
                                    fos.close();
                                    fos = null;
                                }
                            } catch (final IOException e) {
                                Logger.getLog().debug(""I/O exception closing resources"", e);
                            }
                        }
                    }
                }
            }
        });
        return super.performOk();
    }
",0.0
"    public void conReMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_RECON + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailReContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
","    public synchronized boolean storePipeline() {
        if (logDebugEnabled) log.debug(""Storing pipeline "" + this.getName() + "" with "" + this.size() + "" elements"");
        boolean retVal = false;
        Connection conn = null;
        try {
            conn = PoolManager.getInstance().getConnection(JukeXTrackStore.DB_NAME);
            conn.setAutoCommit(false);
            PreparedStatement ps = conn.prepareStatement(""DELETE from PipelineBlackboard where pipelineid="" + this.getId());
            int rowCount = ps.executeUpdate();
            if (logDebugEnabled) log.debug(""Removed old data ("" + rowCount + "" rows)"");
            TrackSourcePipelineElement pe = null;
            Iterator i = super.iterator();
            while (i.hasNext()) {
                pe = (TrackSourcePipelineElement) i.next();
                retVal = pe.storeState(conn);
                if (!retVal) {
                    break;
                }
            }
            if (retVal) {
                conn.commit();
            } else {
                conn.rollback();
            }
            conn.setAutoCommit(true);
        } catch (SQLException se) {
            try {
                conn.rollback();
            } catch (SQLException ignore) {
            }
            log.error(""Encountered an exception whilst storing the configuration for a pipeline element"");
        } finally {
            try {
                conn.close();
            } catch (SQLException ignore) {
            }
        }
        return retVal;
    }
",0.0
"    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
","    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
",0.0
"    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {
        Properties props = Configuration.getInstance().getProperties();
        String algorithm = props.getProperty(""com.makeabyte.jhosting.server.persistence.security.algorithm"");
        String encryptedData = data;
        boolean encrypt = Boolean.parseBoolean(props.getProperty(""com.makeabyte.jhosting.server.persistence.security.encrypt""));
        if (encrypt) {
            if (algorithm.equalsIgnoreCase(""UTF-16LE"")) return encryptActiveDirectory(data);
            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            md.reset();
            md.update(data.getBytes());
            encryptedData = md.digest().toString();
        }
        return encryptedData;
    }
","    protected void fetchDicomSopInstance(File result) throws Exception {
        try {
            URL url = new URL(this.config.getUrl(""wadoserver.url"").toString() + ""?requestType=WADO&contentType=text/xml"" + ""&studyUID="" + publicationProperties.getProperty(""studyUID"") + ""&seriesUID="" + publicationProperties.getProperty(""seriesUID"") + ""&objectUID="" + publicationProperties.getProperty(""objectUID""));
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            OutputStream ostream;
            InputStream istream;
            connection.setUseCaches(false);
            connection.setRequestProperty(""accept"", ""text/xml"");
            connection.connect();
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new Exception(""Error fetching DICOM SOP instance ("" + connection.getResponseCode() + "" "" + connection.getResponseMessage() + "")"");
            }
            ostream = new BufferedOutputStream(new FileOutputStream(result));
            try {
                istream = connection.getInputStream();
                Utilities.copyStream(istream, ostream);
            } finally {
                ostream.close();
            }
        } catch (Exception e) {
            throw new Exception(""Error fetching DICOM SOP instance."", e);
        }
    }
",0.0
"    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write(""test"".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info(""Wrote "" + bytesSaved + "" bytes to "" + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
","	public static void BubbleSortInt1(int[] num) {
		boolean flag = true; // set flag to true to begin first pass
		int temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    public static String readFromURL(String sURL) {
        logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");
        String sWebPage = """";
        try {
            URL url = new URL(sURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                sWebPage += inputLine;
            }
            in.close();
        } catch (Exception e) {
            logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);
        }
        logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");
        return sWebPage;
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public boolean open() {
        if (null == _uu) {
            try {
                if (null == url) return false; else {
                    if (null != this.query) this.url = constructQuery(url, this.query);
                    _uu = url.openConnection();
                    _uu.setAllowUserInteraction(false);
                    _uu.setDoInput(true);
                    if (null != super._loc) {
                        try {
                            _uu.setRequestProperty(""Accept-Language"", jsGet_locale());
                        } catch (JavaScriptException jsx) {
                        }
                    }
                    encoding = _uu.getContentEncoding();
                    bytesize = _uu.getContentLength();
                    mimetype = _uu.getContentType();
                    serviceDate = _uu.getDate();
                    contentExpires = _uu.getExpiration();
                    contentLastmod = _uu.getLastModified();
                    return true;
                }
            } catch (Exception exc) {
                close();
                return false;
            }
        } else return true;
    }
",0.0
"    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), ""utf-8"");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error(""fail to write file"", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
","    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    private void getEventHeapsFromWeb() {
        try {
            URL url = getServersURL();
            InputStream in = url.openStream();
            Document doc = factory.newDocumentBuilder().parse(in);
            readFromDocument(doc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    private JButton getButtonImagen() {
        if (buttonImagen == null) {
            buttonImagen = new JButton();
            buttonImagen.setText(Messages.getString(""gui.AdministracionResorces.6""));
            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetree.png""));
            buttonImagen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.8""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""imagenes/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""imagenes/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonImagen;
    }
",0.0
"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF channel = null;
        try {
            channel = FeedParser.parse(new ChannelBuilder(), url);
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream is = new URL(url).openStream();
            InputStreamReader reader = new InputStreamReader(is);
            channel = FeedParser.parse(new ChannelBuilder(), reader);
            reader.close();
            is.close();
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        }
        DAOChannel.addChannel(channel);
        DAOFavicon.addFaviconForChannel(channel);
        return channel;
    }
","    public static void main(String[] args) throws Exception {
        System.setProperty(""debug"", ""debug"");
        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");
        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");
        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        HttpParameters para = new HttpParameters();
        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\+"", ""%20""));
        consumer.setAdditionalParameters(para);
        consumer.sign(request);
        OutputStream ot = request.getOutputStream();
        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\+"", ""%20"").getBytes());
        ot.flush();
        ot.close();
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",0.0
"    public boolean actualizarNumeroRondas(int idDivision, int numFechas) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET numFechas = "" + numFechas + "" WHERE idDivisionxTorneo = "" + idDivision;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    @SuppressWarnings(""unchecked"")
    private void updatePortfolio(List entries, String query) {
        BufferedReader in = null;
        try {
            URL url = new URL(query);
            System.out.println(query);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                int count = 0;
                while (true) {
                    String line = in.readLine();
                    if (line == null || count >= entries.size()) break;
                    updateEntry((PortfolioEntry) entries.get(count), line);
                    count++;
                }
            }
        } catch (Exception e) {
            logger.error(MiscUtils.stackTrace2String(e));
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ignore) {
                }
            }
        }
    }
",0.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {
        if (!src.isFile() || !src.exists()) {
            throw new IllegalArgumentException(""Source file '"" + src.getAbsolutePath() + ""' not found!"");
        }
        if (dst.exists()) {
            if (dst.isDirectory()) {
                dst = new File(dst, src.getName());
            } else if (dst.isFile()) {
                if (!overwrite) {
                    throw new IllegalArgumentException(""Destination file '"" + dst.getAbsolutePath() + ""' already exists!"");
                }
            } else {
                throw new IllegalArgumentException(""Invalid destination object '"" + dst.getAbsolutePath() + ""'!"");
            }
        }
        final File dstParent = dst.getParentFile();
        if (!dstParent.exists()) {
            if (!dstParent.mkdirs()) {
                throw new IOException(""Failed to create directory "" + dstParent.getAbsolutePath());
            }
        }
        long fileSize = src.length();
        if (fileSize > 20971520l) {
            final FileInputStream in = new FileInputStream(src);
            final FileOutputStream out = new FileOutputStream(dst);
            try {
                int doneCnt = -1;
                final int bufSize = 32768;
                final byte buf[] = new byte[bufSize];
                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {
                    if (doneCnt == 0) {
                        Thread.yield();
                    } else {
                        out.write(buf, 0, doneCnt);
                    }
                }
                out.flush();
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
            }
        } else {
            final FileInputStream fis = new FileInputStream(src);
            final FileOutputStream fos = new FileOutputStream(dst);
            final FileChannel in = fis.getChannel(), out = fos.getChannel();
            try {
                long offs = 0, doneCnt = 0;
                final long copyCnt = Math.min(65536, fileSize);
                do {
                    doneCnt = in.transferTo(offs, copyCnt, out);
                    offs += doneCnt;
                    fileSize -= doneCnt;
                } while (fileSize > 0);
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
                try {
                    fis.close();
                } catch (final IOException e) {
                }
                try {
                    fos.close();
                } catch (final IOException e) {
                }
            }
        }
    }
",0.0
"    protected Template read(URL url) throws TemplateException {
        String parent = Parent(url);
        TemplateLoaderContext context = new TemplateLoaderContext(this, parent, false);
        String contents;
        InputStream in = null;
        try {
            in = url.openStream();
            contents = this.readToString(new java.io.InputStreamReader(in));
        } catch (IOException exc) {
            throw new TemplateException(url.toString(), exc);
        } finally {
            try {
                in.close();
            } catch (IOException ignore) {
            }
        }
        TemplateParser parser = this.parser;
        if (null == parser) return (new Template(contents, context)); else return (new Template(parser, contents, context));
    }
","    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",0.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    protected byte[] mdDecode(String s, int type, byte[] salt) {
        try {
            MessageDigest md;
            StringBuffer hexString = new StringBuffer();
            if ((type == 5) && (salt != null)) {
                md = MessageDigest.getInstance(SHA);
                hexString.append(""{"" + SSHA + ""}"");
            } else if (type == 4) {
                md = MessageDigest.getInstance(SHA);
                hexString.append(""{"" + SHA + ""}"");
            } else if ((type == 3) && (salt != null)) {
                md = MessageDigest.getInstance(MD5);
                hexString.append(""{"" + SMD5 + ""}"");
            } else if (type == 2) {
                md = MessageDigest.getInstance(MD5);
                hexString.append(""{"" + MD5 + ""}"");
            } else {
                return (null);
            }
            md.reset();
            md.update(s.getBytes(""UTF-8""));
            if (salt != null) {
                md.update(salt);
                byte[] buff = md.digest();
                byte[] new_buf = new byte[buff.length + salt.length];
                for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x];
                for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length];
                hexString.append(CBBase64.binaryToString(new_buf));
            } else {
                byte[] buff = md.digest();
                hexString.append(CBBase64.binaryToString(buff));
            }
            return hexString.toString().getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            log.log(Level.WARNING, ""Unexpected error encoding password "", e);
            e.printStackTrace();
            return new byte[0];
        } catch (java.security.NoSuchAlgorithmException e) {
            log.log(Level.WARNING, ""Unexpected error encoding password "", e);
            e.printStackTrace();
            return new byte[0];
        }
    }
",1.0
"    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
","    public static JSONObject getFriend(long uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(FRIENDS_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""uids"", arrayToString(new long[] { uid }, "","")));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            return result.getJSONObject(0);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
",0.0
"    public void testDefaultHeadersRedirect() throws Exception {
        String host = ""localhost"";
        int port = this.localServer.getServicePort();
        this.localServer.register(""*"", new BasicRedirectService(host, port));
        DefaultHttpClient client = new DefaultHttpClient();
        HttpContext context = new BasicHttpContext();
        List<Header> defaultHeaders = new ArrayList<Header>(1);
        defaultHeaders.add(new BasicHeader(HTTP.USER_AGENT, ""my-test-client""));
        client.getParams().setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaders);
        HttpGet httpget = new HttpGet(""/oldlocation/"");
        HttpResponse response = client.execute(getServerHttp(), httpget, context);
        HttpEntity e = response.getEntity();
        if (e != null) {
            e.consumeContent();
        }
        HttpRequest reqWrapper = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
        assertEquals(""/newlocation/"", reqWrapper.getRequestLine().getUri());
        Header header = reqWrapper.getFirstHeader(HTTP.USER_AGENT);
        assertEquals(""my-test-client"", header.getValue());
    }
","    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",0.0
"    @Override
    protected void handleCreateEditionForExport(File outputFile, int viewComponentIdWithUnit) throws Exception {
        log.info(""createEditionForExport "");
        InputStream edition = null;
        if (viewComponentIdWithUnit <= 0) {
            edition = getContentServiceSpring().exportEditionFull();
        } else {
            edition = getContentServiceSpring().exportEditionUnit(Integer.valueOf(viewComponentIdWithUnit));
        }
        log.info(""got answer... "");
        if (log.isDebugEnabled()) log.debug(""tmpFile "" + outputFile.getName());
        FileOutputStream fos = new FileOutputStream(outputFile);
        IOUtils.copyLarge(edition, fos);
        IOUtils.closeQuietly(edition);
        IOUtils.closeQuietly(fos);
        outputFile = null;
        System.gc();
    }
","    public synchronized boolean storePipeline() {
        if (logDebugEnabled) log.debug(""Storing pipeline "" + this.getName() + "" with "" + this.size() + "" elements"");
        boolean retVal = false;
        Connection conn = null;
        try {
            conn = PoolManager.getInstance().getConnection(JukeXTrackStore.DB_NAME);
            conn.setAutoCommit(false);
            PreparedStatement ps = conn.prepareStatement(""DELETE from PipelineBlackboard where pipelineid="" + this.getId());
            int rowCount = ps.executeUpdate();
            if (logDebugEnabled) log.debug(""Removed old data ("" + rowCount + "" rows)"");
            TrackSourcePipelineElement pe = null;
            Iterator i = super.iterator();
            while (i.hasNext()) {
                pe = (TrackSourcePipelineElement) i.next();
                retVal = pe.storeState(conn);
                if (!retVal) {
                    break;
                }
            }
            if (retVal) {
                conn.commit();
            } else {
                conn.rollback();
            }
            conn.setAutoCommit(true);
        } catch (SQLException se) {
            try {
                conn.rollback();
            } catch (SQLException ignore) {
            }
            log.error(""Encountered an exception whilst storing the configuration for a pipeline element"");
        } finally {
            try {
                conn.close();
            } catch (SQLException ignore) {
            }
        }
        return retVal;
    }
",0.0
"    private void doPost(String request) throws IOException {
        URL url = new URL(""http://localhost:8080/exist/rest"" + DBBroker.ROOT_COLLECTION);
        HttpURLConnection connect = (HttpURLConnection) url.openConnection();
        connect.setRequestMethod(""POST"");
        connect.setDoOutput(true);
        OutputStream os = connect.getOutputStream();
        os.write(request.getBytes(""UTF-8""));
        connect.connect();
        BufferedReader is = new BufferedReader(new InputStreamReader(connect.getInputStream()));
        String line;
        while ((line = is.readLine()) != null) System.out.println(line);
    }
","    public static boolean isImageLinkReachable(WebImage image) {
        if (image.getUrl() == null) return false;
        try {
            URL url = new URL(image.getUrl());
            url.openStream().close();
        } catch (MalformedURLException e) {
            return false;
        } catch (IOException e) {
            return false;
        }
        return true;
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static JSONObject getFriend(long uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(FRIENDS_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""uids"", arrayToString(new long[] { uid }, "","")));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            return result.getJSONObject(0);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
",0.0
"    @TestTargetNew(level = TestLevel.COMPLETE, notes = """", method = ""getLocalCertificates"", args = {  })
    public final void test_getLocalCertificates() {
        try {
            URL url = new URL(""https://localhost:55555"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            try {
                connection.getLocalCertificates();
                fail(""IllegalStateException wasn't thrown"");
            } catch (IllegalStateException ise) {
            }
        } catch (Exception e) {
            fail(""Unexpected exception "" + e + "" for exception case"");
        }
        try {
            HttpsURLConnection con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.508"");
            assertNull(con.getLocalCertificates());
            con = new MyHttpsURLConnection(new URL(""https://www.fortify.net/""), ""X.509"");
            Certificate[] cert = con.getLocalCertificates();
            assertNotNull(cert);
            assertEquals(1, cert.length);
        } catch (Exception e) {
            fail(""Unexpected exception "" + e);
        }
    }
","    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
",0.0
"    public static NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No SHA support!"");
        }
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
","    public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) {
        if (username == null || username.length() == 0) return;
        if (password == null || password.length() == 0) return;
        if (description == null || description.length() == 0) return;
        if (tags == null || tags.length() == 0) return;
        if (pseudoFileName == null || pseudoFileName.endsWith("".gpx"")) return;
        new Thread(new Runnable() {

            public void run() {
                if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                String tagsToUse = tags;
                if (addDateTags || tagsToUse == null) if (tagsToUse == null) tagsToUse = autoTagFormat.format(new GregorianCalendar().getTime()); else tagsToUse = tagsToUse + "" "" + autoTagFormat.format(new GregorianCalendar().getTime());
                try {
                    final String urlDesc = (description == null) ? DEFAULT_DESCRIPTION : description.replaceAll(""\\.;&?,/"", ""_"");
                    final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll(""\\\\.;&?,/"", ""_"");
                    final URL url = new URL(""http://www.openstreetmap.org/api/"" + API_VERSION + ""/gpx/create"");
                    final HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    con.setConnectTimeout(15000);
                    con.setRequestMethod(""POST"");
                    con.setDoOutput(true);
                    con.addRequestProperty(""Authorization"", ""Basic "" + encodeBase64(username + "":"" + password));
                    con.addRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + BOUNDARY);
                    con.addRequestProperty(""Connection"", ""close"");
                    con.addRequestProperty(""Expect"", """");
                    con.connect();
                    DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream()));
                    writeContentDispositionFile(out, ""file"", gpxInputStream, pseudoFileName);
                    writeContentDisposition(out, ""description"", urlDesc);
                    writeContentDisposition(out, ""tags"", urlTags);
                    writeContentDisposition(out, ""public"", ""1"");
                    out.writeBytes(""--"" + BOUNDARY + ""--"" + LINE_END);
                    out.flush();
                    final int retCode = con.getResponseCode();
                    String retMsg = con.getResponseMessage();
                    if (retCode != 200) {
                        if (con.getHeaderField(""Error"") != null) retMsg += ""\n"" + con.getHeaderField(""Error"");
                        con.disconnect();
                        throw new RuntimeException(retCode + "" "" + retMsg);
                    }
                    out.close();
                    con.disconnect();
                } catch (Exception e) {
                }
            }
        }, ""OSMUpload-Thread"").start();
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter(""proxyurl"");
        URLConnection conn = new URL(url).openConnection();
        Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());
        response.setContentType(conn.getContentType());
        response.setContentLength(conn.getContentLength());
        Writer out = response.getWriter();
        char[] buf = new char[256];
        int len;
        while ((len = in.read(buf)) != -1) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        String log = request.getParameter(""logging"");
        if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);
    }
","    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",0.0
"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
","    public void render(RenderRequest renderRequest, RenderResponse renderResponse) throws PortletException {
        Writer out = null;
        PreparedStatement ps = null;
        DatabaseAdapter dbDyn = null;
        try {
            AuthSession auth_ = (AuthSession) renderRequest.getUserPrincipal();
            if (auth_ == null || !auth_.isUserInRole(""webmill.upload_image"")) {
                throw new PortletSecurityException(""You have not enough right"");
            }
            if (log.isDebugEnabled()) log.debug(""Start commit new image from file"");
            dbDyn = DatabaseAdapter.getInstance();
            String index_page = PortletService.url(""mill.image.index"", renderRequest, renderResponse);
            if (log.isDebugEnabled()) log.debug(""right to commit image - "" + auth_.isUserInRole(""webmill.upload_image""));
            PortletSession sess = renderRequest.getPortletSession(true);
            if ((sess.getAttribute(""MILL.IMAGE.ID_MAIN"") == null) || (sess.getAttribute(""MILL.IMAGE.DESC_IMAGE"") == null)) {
                out.write(""Not all parametrs initialized"");
                return;
            }
            Long id_main = (Long) sess.getAttribute(""MILL.IMAGE.ID_MAIN"");
            String desc = ((String) sess.getAttribute(""MILL.IMAGE.DESC_IMAGE""));
            if (log.isDebugEnabled()) log.debug(""image description "" + desc);
            CustomSequenceType seq = new CustomSequenceType();
            seq.setSequenceName(""seq_image_number_file"");
            seq.setTableName(""MAIN_FORUM_THREADS"");
            seq.setColumnName(""ID_THREAD"");
            Long currID = dbDyn.getSequenceNextValue(seq);
            String storage_ = portletConfig.getPortletContext().getRealPath(""/"") + File.separatorChar + ""image"";
            String fileName = storage_ + File.separator + StringTools.appendString("""" + currID, '0', 7, true) + ""-"";
            if (log.isDebugEnabled()) log.debug(""image fileName "" + fileName);
            String newFileName = """";
            String supportExtension[] = { "".jpg"", "".jpeg"", "".gif"", "".png"" };
            try {
                if (true) throw new UploadFileException(""Todo need fix"");
            } catch (UploadFileException e) {
                log.error(""Error save image to disk"", e);
                out.write(""<html><head></head<body>"" + ""Error while processing this page:<br>"" + ExceptionTools.getStackTrace(e, 20, ""<br>"") + ""<br>"" + ""<p><a href=\"""" + index_page + ""\"">continue</a></p>"" + ""</body></html>"");
                return;
            }
            if (log.isDebugEnabled()) log.debug(""newFileName "" + newFileName);
            UserInfo userInfo = auth_.getUserInfo();
            CustomSequenceType seqImageDir = new CustomSequenceType();
            seqImageDir.setSequenceName(""seq_WM_image_dir"");
            seqImageDir.setTableName(""WM_IMAGE_DIR"");
            seqImageDir.setColumnName(""ID_IMAGE_DIR"");
            Long seqValue = dbDyn.getSequenceNextValue(seqImageDir);
            ps = dbDyn.prepareStatement(""insert into WM_IMAGE_DIR "" + ""( ID_IMAGE_DIR, ID_FIRM, is_group, id, id_main, name_file, description )"" + ""(?, ?, 0, ?, ?, ?, ?"");
            RsetTools.setLong(ps, 1, seqValue);
            RsetTools.setLong(ps, 2, userInfo.getCompanyId());
            RsetTools.setLong(ps, 3, currID);
            RsetTools.setLong(ps, 4, id_main);
            ps.setString(5, ""/image/"" + newFileName);
            ps.setString(6, desc);
            ps.executeUpdate();
            dbDyn.commit();
            if (log.isDebugEnabled()) log.debug(""redirect to indexPage - "" + index_page);
            out.write(""Image successful uploaded"");
            return;
        } catch (Exception e) {
            try {
                dbDyn.rollback();
            } catch (SQLException e1) {
            }
            final String es = ""Error upload image"";
            log.error(es, e);
            throw new PortletException(es, e);
        } finally {
            DatabaseManager.close(dbDyn, ps);
            dbDyn = null;
            ps = null;
        }
    }
",0.0
"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
","    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
",0.0
"    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
","    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            clearTables(stmt);
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
",0.0
"    public static final void copyFile(File source, File target) {
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(target).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (java.io.IOException e) {
        }
    }
","    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
",1.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","                @Override
                protected URLConnection openConnection(URL url) throws IOException {
                    return new URLConnection(url) {

                        @Override
                        public void connect() throws IOException {
                        }

                        @Override
                        public InputStream getInputStream() throws IOException {
                            ThemeResource f = getFacelet(getURL().getFile());
                            return new ByteArrayInputStream(f.getText().getBytes());
                        }
                    };
                }
",0.0
"    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
","    private String generate(String value) throws Exception {
        String resStr = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes(""utf-8""), 0, value.length());
            byte[] result = md.digest();
            resStr = FTGenerate.convertToHex(result);
            md.reset();
        } catch (NoSuchAlgorithmException nae) {
            this.getLog().severe(""Hash no funcionando"");
            nae.printStackTrace();
            throw new Exception(""Hash no funcionando"");
        } catch (UnsupportedEncodingException ee) {
            this.getLog().severe(""Encoding no funcionando"");
            ee.printStackTrace();
            throw new Exception(""Encoding no funcionando"");
        }
        return resStr;
    }
",0.0
"    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
","    private static void loadParentProperties(Properties props, ClassLoader cl) throws IOException {
        String pName = props.getProperty(PARENT_PROPERTIES);
        if (pName == null) {
            return;
        }
        URL url = cl.getResource(pName);
        if (url == null) {
            return;
        }
        InputStream is = url.openStream();
        if (is != null) {
            Properties tmpProps = new Properties();
            tmpProps.load(is);
            is.close();
            loadParentProperties(tmpProps, cl);
            Iterator itr = tmpProps.entrySet().iterator();
            while (itr.hasNext()) {
                Map.Entry entry = (Map.Entry) itr.next();
                if (!props.containsKey(entry.getKey())) {
                    props.put(entry.getKey(), entry.getValue());
                }
            }
        }
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    public void run() {
        try {
            String getter = null;
            String str, targetHost = """", httpHeader = """";
            int targetPort = 80;
            while (true) {
                str = fromBrowser.readLine();
                if (str.startsWith(""GET"") || str.startsWith(""DESCRIBE"") || str.startsWith(""POST"") || str.startsWith(""HEAD"")) {
                    getter = str;
                }
                if (str.startsWith(""Accept-Encoding: gzip"")) {
                    str = ""Accept-Encoding: identity"";
                }
                httpHeader += str + ""\r\n"";
                if (str.startsWith(""Host: "")) {
                    targetHost = str.substring(6);
                } else if (str.startsWith(""DESCRIBE"")) {
                    targetPort = 554;
                    targetHost = str.substring(str.indexOf(""//"") + 2);
                    targetHost = targetHost.substring(0, targetHost.indexOf(""/""));
                }
                if (str.length() == 0) {
                    break;
                }
            }
            String target = targetHost;
            if (targetHost.indexOf("":"") > -1) {
                try {
                    targetPort = Integer.parseInt(targetHost.substring(targetHost.indexOf("":"") + 1));
                } catch (NumberFormatException nfe) {
                }
                target = targetHost.substring(0, targetHost.indexOf("":""));
            }
            logger.trace(""[PROXY] Connect to: "" + target + "" and port: "" + targetPort);
            socketToWeb = new Socket(InetAddress.getByName(target), targetPort);
            InputStream sockWebInputStream = socketToWeb.getInputStream();
            toWeb = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socketToWeb.getOutputStream())), true);
            toWeb.println(httpHeader);
            toWeb.flush();
            StringTokenizer st = new StringTokenizer(getter, "" "");
            st.nextToken();
            String askedResource = st.nextToken();
            askedResource = askedResource.substring(askedResource.indexOf(targetHost) + targetHost.length());
            logger.trace(""[PROXY] Asked resource: "" + askedResource);
            String directoryResource = askedResource.substring(0, askedResource.lastIndexOf(""/""));
            directoryResource = getWritableFileName(directoryResource);
            String fileResource = askedResource.substring(askedResource.lastIndexOf(""/"") + 1);
            fileResource = getWritableFileName(fileResource);
            fileResource = fileResource + "".cached"";
            String fileN = ""proxycache/"" + target + ""/"" + directoryResource;
            File directoryResourceFile = new File(fileN);
            if (writeCache) {
                directoryResourceFile.mkdirs();
            }
            File cachedResource = new File(directoryResourceFile, fileResource);
            byte[] buffer = new byte[8192];
            boolean resourceExists = cachedResource.exists() || this.getClass().getResource(""/"" + fileN) != null;
            boolean inMemory = writeCache && !resourceExists;
            FileOutputStream fOUT = null;
            if (resourceExists) {
                logger.trace(""[PROXY] File is cached: "" + cachedResource.getAbsolutePath());
                sockWebInputStream.close();
                if (cachedResource.exists()) {
                    sockWebInputStream = new FileInputStream(cachedResource);
                } else {
                    sockWebInputStream = this.getClass().getResourceAsStream(""/"" + fileN);
                }
            } else if (writeCache) {
                logger.trace(""[PROXY] File is not cached / Writing in it: "" + cachedResource.getAbsolutePath());
                fOUT = new FileOutputStream(cachedResource, false);
            }
            OutputStream baos = null;
            if (inMemory) {
                baos = new ByteArrayOutputStream();
            } else {
                baos = toBrowser;
            }
            long total_read = 0;
            int bytes_read;
            long CL = 10000000000L;
            while (total_read < CL && (bytes_read = sockWebInputStream.read(buffer)) != -1) {
                if (!resourceExists) {
                    if (10000000000L == CL) {
                        String s = new String(buffer, 0, bytes_read);
                        int clPos = s.indexOf(""Content-Length: "");
                        if (clPos > -1) {
                            CL = Integer.parseInt(s.substring(clPos + 16, s.indexOf(""\n"", clPos)).trim());
                            logger.trace(""Found Content Length: "" + CL);
                        }
                    }
                    if (bytes_read >= 7) {
                        byte end[] = new byte[7];
                        System.arraycopy(buffer, bytes_read - 7, end, 0, 7);
                        if (new String(end).equals(""\r\n0\r\n\r\n"")) {
                            System.out.println(""end of transfer chunked"");
                            CL = -1;
                        }
                    }
                    if (writeCache) {
                        fOUT.write(buffer, 0, bytes_read);
                    }
                }
                baos.write(buffer, 0, bytes_read);
                total_read += bytes_read;
            }
            if (inMemory) {
                baos.close();
                toBrowser.write(((ByteArrayOutputStream) baos).toByteArray());
            }
            if (writeCache && fOUT != null) {
                fOUT.close();
            }
            socketToWeb.close();
            toBrowser.close();
        } catch (IOException e) {
        } finally {
            try {
                if (toWeb != null) {
                    toWeb.close();
                }
                if (toBrowser != null) {
                    toBrowser.close();
                }
                socket.close();
            } catch (IOException e) {
            }
        }
    }
",0.0
"    private FTPClient loginToSharedWorkspace() throws SocketException, IOException {
        FTPClient ftp = new FTPClient();
        ftp.connect(mSwarm.getHost(), mSharedWorkspacePort);
        if (!ftp.login(SHARED_WORKSPACE_LOGIN_NAME, mWorkspacePassword)) {
            throw new IOException(""Unable to login to shared workspace."");
        }
        ftp.setFileType(FTPClient.BINARY_FILE_TYPE);
        return ftp;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public void updateMetaList() {
        metaserverModel.begin();
        serverCache.expire(EXPIRE_INTERVAL * 1000);
        final Map<String, MetaserverEntry> oldEntries = serverCache.getAll();
        final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST);
        assert localhostMetaserverEntry != null;
        metaserverModel.add(localhostMetaserverEntry);
        oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry));
        serverCache.put(localhostMetaserverEntry);
        try {
            final URL url = new URL(METASERVER_URL);
            final String httpProxy = System.getenv(""http_proxy"");
            if (httpProxy != null && httpProxy.length() > 0) {
                if (httpProxy.regionMatches(true, 0, ""http://"", 0, 7)) {
                    final String[] tmp = httpProxy.substring(7).replaceAll(""/.*"", """").split("":"", 2);
                    System.setProperty(""http.proxyHost"", tmp[0]);
                    System.setProperty(""http.proxyPort"", tmp.length >= 2 ? tmp[1] : ""80"");
                } else {
                    System.err.println(""Warning: unsupported http_proxy protocol: "" + httpProxy);
                }
            }
            final HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            try {
                conn.setRequestMethod(""GET"");
                conn.setUseCaches(false);
                conn.connect();
                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    final InputStream in = conn.getInputStream();
                    final InputStreamReader isr = new InputStreamReader(in, ""ISO-8859-1"");
                    try {
                        final BufferedReader br = new BufferedReader(isr);
                        try {
                            final MetaserverEntryParser metaserverEntryParser = new MetaserverEntryParser();
                            while (true) {
                                final String line = br.readLine();
                                if (line == null) {
                                    break;
                                }
                                final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line);
                                if (metaserverEntry != null) {
                                    metaserverModel.add(metaserverEntry);
                                    oldEntries.remove(ServerCache.makeKey(metaserverEntry));
                                    serverCache.put(metaserverEntry);
                                }
                            }
                        } finally {
                            br.close();
                        }
                    } finally {
                        isr.close();
                    }
                }
            } finally {
                conn.disconnect();
            }
        } catch (final IOException ignored) {
        }
        for (final MetaserverEntry metaserverEntry : oldEntries.values()) {
            metaserverModel.add(metaserverEntry);
        }
        metaserverModel.commit();
        serverCache.save();
    }
",0.0
"    public static byte[] getBytes(URL url) throws IOException {
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        int contentLength = connection.getContentLength();
        ByteArrayOutputStream tmpOut;
        if (contentLength != -1) {
            tmpOut = new ByteArrayOutputStream(contentLength);
        } else {
            tmpOut = new ByteArrayOutputStream(16384);
        }
        byte[] buf = new byte[512];
        while (true) {
            int len = in.read(buf);
            if (len == -1) {
                break;
            }
            tmpOut.write(buf, 0, len);
        }
        in.close();
        tmpOut.close();
        byte[] array = tmpOut.toByteArray();
        return array;
    }
","    public static void main(String[] args) throws Exception {
        String linesep = System.getProperty(""line.separator"");
        FileOutputStream fos = new FileOutputStream(new File(""lib-licenses.txt""));
        fos.write(new String(""JCP contains the following libraries. Please read this for comments on copyright etc."" + linesep + linesep).getBytes());
        fos.write(new String(""Chemistry Development Kit, master version as of "" + new Date().toString() + "" (http://cdk.sf.net)"" + linesep).getBytes());
        fos.write(new String(""Copyright 1997-2009 The CDK Development Team"" + linesep).getBytes());
        fos.write(new String(""License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)"" + linesep).getBytes());
        fos.write(new String(""Download: https://sourceforge.net/projects/cdk/files/"" + linesep).getBytes());
        fos.write(new String(""Source available at: http://sourceforge.net/scm/?type=git&group_id=20024"" + linesep + linesep).getBytes());
        File[] files = new File(args[0]).listFiles(new JarFileFilter());
        for (int i = 0; i < files.length; i++) {
            if (new File(files[i].getPath() + "".meta"").exists()) {
                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + "".meta""));
                Iterator<String> itsect = metaprops.keySet().iterator();
                while (itsect.hasNext()) {
                    String section = itsect.next();
                    fos.write(new String(metaprops.get(section).get(""Library"") + "" "" + metaprops.get(section).get(""Version"") + "" ("" + metaprops.get(section).get(""Homepage"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Copyright "" + metaprops.get(section).get(""Copyright"") + linesep).getBytes());
                    fos.write(new String(""License: "" + metaprops.get(section).get(""License"") + "" ("" + metaprops.get(section).get(""LicenseURL"") + "")"" + linesep).getBytes());
                    fos.write(new String(""Download: "" + metaprops.get(section).get(""Download"") + linesep).getBytes());
                    fos.write(new String(""Source available at: "" + metaprops.get(section).get(""SourceCode"") + linesep + linesep).getBytes());
                }
            }
            if (new File(files[i].getPath() + "".extra"").exists()) {
                fos.write(new String(""The author says:"" + linesep).getBytes());
                FileInputStream in = new FileInputStream(new File(files[i].getPath() + "".extra""));
                int len;
                byte[] buf = new byte[1024];
                while ((len = in.read(buf)) > 0) {
                    fos.write(buf, 0, len);
                }
            }
            fos.write(linesep.getBytes());
        }
        fos.close();
    }
",0.0
"    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
",0.0
"    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write(""test"".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info(""Wrote "" + bytesSaved + "" bytes to "" + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
","    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream out = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel channel = out.getChannel();
            long pos = 0, len = src.size(), ret;
            while (len > 0) {
                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;
                len -= ret;
                pos += ret;
            }
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",1.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","        public void actionPerformed(ActionEvent e) {
            String aboutText = ""Slug application."";
            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);
            boolean canShowInPane = false;
            if (aboutURL != null) {
                try {
                    URL url = new URL(aboutURL);
                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);
                    canShowInPane = dlg.setURL(url);
                    if (canShowInPane) {
                        dlg.setSize(300, 200);
                        dlg.setLocationRelativeTo(ShellSlacFrame.this);
                        dlg.setVisible(true);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = """";
                        StringBuffer content = new StringBuffer();
                        do {
                            content.append(line);
                            line = reader.readLine();
                        } while (line != null);
                        if (content.length() != 0) {
                            aboutText = content.toString();
                        }
                    }
                } catch (Exception ex) {
                    if (DEBUG) {
                        ex.printStackTrace();
                    }
                }
            }
            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);
        }
",0.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","    public DBAccess(String pathToDb) {
        if (instance != null) {
            throw new IllegalStateException();
        }
        System.setProperty(""derby.system.home"", pathToDb);
        try {
            boolean exists = new File(pathToDb).exists();
            new EmbeddedDriver();
            Properties props = new Properties();
            if (exists) {
                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);
                connection.setAutoCommit(true);
                Statement statement = connection.createStatement();
                try {
                } finally {
                    statement.close();
                }
            } else {
                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);
                connection.setAutoCommit(true);
                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuilder query = new StringBuilder();
                for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                    if (query.length() > 0) {
                        query.append('\n');
                    }
                    query.append(s);
                }
                reader.close();
                Statement statement = connection.createStatement();
                try {
                    String[] statements = query.toString().split("";(\\s)*"");
                    for (String s : statements) {
                        statement.execute(s);
                    }
                } finally {
                    statement.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        instance = this;
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
",0.0
"    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
","    public List<PathObject> fetchPath(PathObject parent) throws NetworkException {
        if (parent.isFetched()) {
            return parent.getChildren();
        } else if (!""d"".equals(parent.getType())) {
            return null;
        }
        HttpClient client = HttpConfig.newInstance();
        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN + parent.getPath());
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            Document doc = XmlOperator.readDocument(entity.getContent());
            BBSBodyParseHelper.parsePathList(doc, parent);
            return parent.getChildren();
        } catch (Exception e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0.0
"    public void testUnavailable() throws Exception {
        URL url = null;
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");
        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));
        assertTrue(context.getServletHandler().isAvailable());
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");
        try {
            IO.toString(url.openStream());
        } catch (IOException e) {
        }
        assertFalse(context.getServletHandler().isAvailable());
        Thread.sleep(4000);
        assertTrue(context.getServletHandler().isAvailable());
    }
","    protected void loadXslFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            Source xslSource = new StreamSource(rd);
            try {
                xslTemplate = factory.newTemplates(xslSource);
            } catch (TransformerConfigurationException tce) {
                tce.printStackTrace();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    public static void main(String argv[]) {
        String cp = System.getProperty(""java.class.path"");
        String sep = System.getProperty(""file.separator"");
        String dirpath = cp.substring(0, cp.lastIndexOf(sep));
        String jarpath = dirpath + ""/WiiRemoteJ.jar"";
        if (!new File(jarpath).exists()) {
            try {
                System.out.println(""getting WiiRemoteJ file from remote source..."");
                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");
                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());
                String temploc = copyInputStreamToTmpFile(input, "".zip"");
                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));
                ZipEntry i = null;
                while ((i = zipIn.getNextEntry()) != null) {
                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {
                        File outjar = new File(jarpath);
                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));
                        int bufferSize = 8192;
                        byte[] buffer = new byte[bufferSize];
                        int readSize = 0;
                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {
                            fs.write(buffer, 0, readSize);
                        }
                        fs.close();
                    }
                }
                System.out.println(""unpacked into classpath."");
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Boogiepants.main(argv);
    }
",1.0
"    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    @Override
    public void insert(Connection conn) throws SQLException {
        PreparedStatement objectInsert = null;
        String sqlString = null;
        int newID = 0;
        try {
            conn.setAutoCommit(false);
            sqlString = ""SELECT NEXTVAL(OBJ_SEQ) AS NEXTVAL"";
            objectInsert = conn.prepareStatement(sqlString);
            ResultSet r = objectInsert.executeQuery(sqlString);
            newID = r.getInt(""NEXTVAL"");
            sqlString = ""INSERT INTO OBJECTS"" + ""("" + ""OBJ_ID,"" + ""OBJ_NAME,"" + ""OBTY_CDE"" + "")"" + ""VALUES"" + ""("" + ""?,"" + ""?,"" + ""?"" + "")"" + """";
            objectInsert = conn.prepareStatement(sqlString);
            objectInsert.setInt(1, newID);
            objectInsert.setString(2, getRoomKey());
            objectInsert.setString(3, ""ROOM"");
            objectInsert.executeUpdate();
            sqlString = ""INSERT INTO ROOMS"" + ""("" + """";
            conn.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            if (conn != null) {
                try {
                    System.err.print(""Transaction is being rolled back"");
                    conn.rollback();
                } catch (SQLException excep) {
                    excep.printStackTrace();
                }
            }
        } finally {
            if (objectInsert != null) {
                objectInsert.close();
            }
            conn.setAutoCommit(true);
        }
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    public static boolean doExecuteSQL(String sql) {
        session = currentSession();
        Connection conn = session.connection();
        PreparedStatement ps = null;
        try {
            conn.setAutoCommit(false);
            log(""[SmsManager] sql:"" + sql);
            ps = conn.prepareStatement(sql);
            ps.executeUpdate();
            conn.commit();
            conn.setAutoCommit(true);
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            return false;
        } finally {
            if (conn != null) try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            closeHibernateSession();
        }
    }
",0.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    private void doPost(String request) throws IOException {
        URL url = new URL(""http://localhost:8080/exist/rest"" + DBBroker.ROOT_COLLECTION);
        HttpURLConnection connect = (HttpURLConnection) url.openConnection();
        connect.setRequestMethod(""POST"");
        connect.setDoOutput(true);
        OutputStream os = connect.getOutputStream();
        os.write(request.getBytes(""UTF-8""));
        connect.connect();
        BufferedReader is = new BufferedReader(new InputStreamReader(connect.getInputStream()));
        String line;
        while ((line = is.readLine()) != null) System.out.println(line);
    }
",0.0
"    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
","    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
",1.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public String[] list() {
        if (isURL) {
            if (!isDirectory()) return null;
            try {
                URLConnection c = url.openConnection();
                InputStream is = c.getInputStream();
                boolean foundEnd = false;
                Vector files = new Vector();
                while (!foundEnd) {
                    byte[] b = new byte[is.available()];
                    String s = new String(b);
                    if (s.toLowerCase().indexOf(""</html>"") != -1) foundEnd = true;
                    while (s.indexOf(""a href"") != -1) {
                        int ndx = s.indexOf(""a href"") + 8;
                        String f = s.substring(ndx, s.indexOf(""\"""", ndx));
                        s = s.substring(s.indexOf(""\"""", ndx) + 1);
                        Location check = new Location(getAbsolutePath(), f);
                        if (check.exists()) {
                            files.add(check.getName());
                        }
                    }
                }
                return (String[]) files.toArray(new String[0]);
            } catch (IOException e) {
                return null;
            }
        }
        return file.list();
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    public static void uploadAsync(final String username, final String password, final String description, final String tags, final boolean addDateTags, final ArrayList<RecordedGeoPoint> recordedGeoPoints, final String pseudoFileName) {
        if (username == null || username.length() == 0) return;
        if (password == null || password.length() == 0) return;
        if (description == null || description.length() == 0) return;
        if (tags == null || tags.length() == 0) return;
        if (pseudoFileName == null || pseudoFileName.endsWith("".gpx"")) return;
        new Thread(new Runnable() {

            public void run() {
                if (!Util.isSufficienDataForUpload(recordedGeoPoints)) return;
                final InputStream gpxInputStream = new ByteArrayInputStream(RecordedRouteGPXFormatter.create(recordedGeoPoints).getBytes());
                String tagsToUse = tags;
                if (addDateTags || tagsToUse == null) if (tagsToUse == null) tagsToUse = autoTagFormat.format(new GregorianCalendar().getTime()); else tagsToUse = tagsToUse + "" "" + autoTagFormat.format(new GregorianCalendar().getTime());
                try {
                    final String urlDesc = (description == null) ? DEFAULT_DESCRIPTION : description.replaceAll(""\\.;&?,/"", ""_"");
                    final String urlTags = (tagsToUse == null) ? DEFAULT_TAGS : tagsToUse.replaceAll(""\\\\.;&?,/"", ""_"");
                    final URL url = new URL(""http://www.openstreetmap.org/api/"" + API_VERSION + ""/gpx/create"");
                    final HttpURLConnection con = (HttpURLConnection) url.openConnection();
                    con.setConnectTimeout(15000);
                    con.setRequestMethod(""POST"");
                    con.setDoOutput(true);
                    con.addRequestProperty(""Authorization"", ""Basic "" + encodeBase64(username + "":"" + password));
                    con.addRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + BOUNDARY);
                    con.addRequestProperty(""Connection"", ""close"");
                    con.addRequestProperty(""Expect"", """");
                    con.connect();
                    DataOutputStream out = new DataOutputStream(new BufferedOutputStream(con.getOutputStream()));
                    writeContentDispositionFile(out, ""file"", gpxInputStream, pseudoFileName);
                    writeContentDisposition(out, ""description"", urlDesc);
                    writeContentDisposition(out, ""tags"", urlTags);
                    writeContentDisposition(out, ""public"", ""1"");
                    out.writeBytes(""--"" + BOUNDARY + ""--"" + LINE_END);
                    out.flush();
                    final int retCode = con.getResponseCode();
                    String retMsg = con.getResponseMessage();
                    if (retCode != 200) {
                        if (con.getHeaderField(""Error"") != null) retMsg += ""\n"" + con.getHeaderField(""Error"");
                        con.disconnect();
                        throw new RuntimeException(retCode + "" "" + retMsg);
                    }
                    out.close();
                    con.disconnect();
                } catch (Exception e) {
                }
            }
        }, ""OSMUpload-Thread"").start();
    }
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    private MailBox authenticate() throws Exception {
        String line = ""POP3 Server Ready"" + ((mChallenge == null) ? """" : ("" "" + mChallenge));
        MailBox mailbox = null;
        mStream.writeOk(line);
        while (mailbox == null) {
            line = mStream.readLine();
            if (isQuit(line)) break;
            String body;
            if ((body = isCommand(line, ""USER"")) != null) {
                String user = body;
                MailBox mb = mRepository.getMailBox(user);
                if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else {
                    mStream.writeOk();
                    String pswd, line2 = mStream.readLine();
                    if (isQuit(line2)) break;
                    if ((pswd = isCommand(line2, ""PASS"")) == null) mStream.writeErr(""Expected PASS but got {"" + line2 + ""}""); else {
                        String realPswd = mb.getPassword();
                        if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) {
                            mailbox = mb;
                            mStream.writeOk();
                        } else mStream.writeErr(""Bad password for "" + user);
                    }
                }
            } else if ((body = isCommand(line, ""APOP"")) != null) {
                if (mChallenge == null) mStream.writeErr(""APOP Not Supported""); else {
                    int space = body.indexOf(' ');
                    if (space < 0) mStream.writeErr(""Bad APOP command {"" + line + ""}""); else {
                        String user = body.substring(0, space);
                        String hash = body.substring(space + 1);
                        MailBox mb = mRepository.getMailBox(user);
                        if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else if (mb.getPassword() == null) mStream.writeErr(""User("" + user + "") cannot login using APOP""); else {
                            String secret = mChallenge + mb.getPassword();
                            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
                            md5.update(secret.getBytes(""UTF-8""));
                            byte[] digest = md5.digest();
                            String digestStr = new String(Hex.encodeHex(digest));
                            if (hash.equalsIgnoreCase(digestStr)) {
                                mailbox = mb;
                                mStream.writeOk();
                            } else mStream.writeErr(""Bad password for "" + user);
                        }
                    }
                }
            } else mStream.writeErr(""Authentication required (got '"" + line + ""')"");
        }
        return mailbox;
    }
",0.0
"    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
","    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
",0.0
"    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
","    public static void copy(String path1, String path2) throws IOException {
        FileReader in = new FileReader(path1);
        FileWriter out = new FileWriter(path2);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
",0.0
"    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.people.findByUsername""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""username"", userName));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGUser user = JAXB.unmarshal(content, GGUser.class);
        return user;
    }
","    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
",0.0
"    private String sendQuery(String query) {
        File xmlServerResponse = null;
        String serverResponse = """";
        try {
            long start = Calendar.getInstance().getTimeInMillis();
            System.out.println(""\n\n++++++++++++++++++++++++++++++++++++++++++++++++++++"");
            System.out.println(""    consulta de busqueda -> "" + query);
            URL url = new URL(query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = in.readLine()) != null) {
                serverResponse += line;
            }
            long ahora = (Calendar.getInstance().getTimeInMillis() - start);
            System.out.println("" Tiempo transcurrido en la consulta (en milesimas) -> "" + ahora);
            System.out.println(""++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n"");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return serverResponse;
    }
","    public static boolean copyDataToNewTable(EboContext p_eboctx, String srcTableName, String destTableName, String where, boolean log, int mode) throws boRuntimeException {
        srcTableName = srcTableName.toUpperCase();
        destTableName = destTableName.toUpperCase();
        Connection cn = null;
        Connection cndef = null;
        boolean ret = false;
        try {
            boolean srcexists = false;
            boolean destexists = false;
            final InitialContext ic = new InitialContext();
            cn = p_eboctx.getConnectionData();
            cndef = p_eboctx.getConnectionDef();
            PreparedStatement pstm = cn.prepareStatement(""SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE upper(TABLE_NAME)=?  AND TABLE_SCHEMA=database()"");
            pstm.setString(1, srcTableName);
            ResultSet rslt = pstm.executeQuery();
            if (rslt.next()) {
                srcexists = true;
            }
            rslt.close();
            pstm.setString(1, destTableName);
            rslt = pstm.executeQuery();
            if (rslt.next()) {
                destexists = true;
            }
            if (!destexists) {
                rslt.close();
                pstm.close();
                pstm = cn.prepareStatement(""SELECT TABLE_NAME FROM INFORMATION_SCHEMA.VIEWS WHERE upper(TABLE_NAME)=? AND TABLE_SCHEMA=database()"");
                pstm.setString(1, destTableName);
                rslt = pstm.executeQuery();
                if (rslt.next()) {
                    CallableStatement cstm = cn.prepareCall(""DROP VIEW "" + destTableName);
                    cstm.execute();
                    cstm.close();
                }
            }
            rslt.close();
            pstm.close();
            if (srcexists && !destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""CREATING_AND_COPY_DATA_FROM"") + "" ["" + srcTableName + ""] "" + LoggerMessageLocalizer.getMessage(""TO"") + "" ["" + destTableName + ""]"");
                }
                CallableStatement cstm = cn.prepareCall(""CREATE TABLE "" + destTableName + "" AS SELECT * FROM "" + srcTableName + "" "" + (((where != null) && (where.length() > 0)) ? ("" WHERE "" + where) : """"));
                cstm.execute();
                cstm.close();
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""UPDATING_NGTDIC""));
                }
                cn.commit();
                ret = true;
            } else if (srcexists && destexists) {
                if (log) {
                    logger.finest(LoggerMessageLocalizer.getMessage(""COPY_DATA_FROM"") + "" ["" + srcTableName + ""] "" + LoggerMessageLocalizer.getMessage(""TO"") + "" ["" + destTableName + ""]"");
                }
                PreparedStatement pstm2 = cn.prepareStatement(""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE upper(TABLE_NAME) = ? AND TABLE_SCHEMA=database()"");
                pstm2.setString(1, destTableName);
                ResultSet rslt2 = pstm2.executeQuery();
                StringBuffer fields = new StringBuffer();
                PreparedStatement pstm3 = cn.prepareStatement(""SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE upper(TABLE_NAME) = ? and upper(COLUMN_NAME)=? AND TABLE_SCHEMA=database()"");
                while (rslt2.next()) {
                    pstm3.setString(1, srcTableName);
                    pstm3.setString(2, rslt2.getString(1));
                    ResultSet rslt3 = pstm3.executeQuery();
                    if (rslt3.next()) {
                        if (fields.length() > 0) {
                            fields.append(',');
                        }
                        fields.append('""').append(rslt2.getString(1)).append('""');
                    }
                    rslt3.close();
                }
                pstm3.close();
                rslt2.close();
                pstm2.close();
                CallableStatement cstm;
                int recs = 0;
                if ((mode == 0) || (mode == 1)) {
                    cstm = cn.prepareCall(""INSERT INTO "" + destTableName + ""( "" + fields.toString() + "" ) ( SELECT "" + fields.toString() + "" FROM "" + srcTableName + "" "" + (((where != null) && (where.length() > 0)) ? ("" WHERE "" + where) : """") + "")"");
                    recs = cstm.executeUpdate();
                    cstm.close();
                    if (log) {
                        logger.finest(LoggerMessageLocalizer.getMessage(""DONE"") + "" ["" + recs + ""] "" + LoggerMessageLocalizer.getMessage(""RECORDS_COPIED""));
                    }
                }
                cn.commit();
                ret = true;
            }
        } catch (Exception e) {
            try {
                cn.rollback();
            } catch (Exception z) {
                throw new boRuntimeException(""boBuildDB.moveTable"", ""BO-1304"", z);
            }
            throw new boRuntimeException(""boBuildDB.moveTable"", ""BO-1304"", e);
        } finally {
            try {
                cn.close();
            } catch (Exception e) {
            }
            try {
                cndef.close();
            } catch (Exception e) {
            }
        }
        return ret;
    }
",0.0
"    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testBytes = ""testString"".getBytes();
        final InputStream istream = new ByteArrayInputStream(testBytes);
        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);
        IOUtils.copy(teeStream, new NullOutputStream());
        teeStream.close();
        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public PhoneDurationsImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phoneDurations = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
","    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter to = new FileWriter(toFile);
        char[] buffer = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(buffer)) != -1) {
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        to.close();
        from.close();
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static int deleteOrder(String likePatten) {
        Connection conn = null;
        PreparedStatement psmt = null;
        StringBuffer SQL = new StringBuffer(200);
        int deleted = 0;
        SQL.append("" DELETE FROM JHF_ALIVE_ORDER "").append("" WHERE   ORDER_ID LIKE  ? "");
        try {
            conn = JdbcConnectionPool.mainConnection();
            conn.setAutoCommit(false);
            conn.setReadOnly(false);
            psmt = conn.prepareStatement(SQL.toString());
            psmt.setString(1, ""%"" + likePatten + ""%"");
            deleted = psmt.executeUpdate();
            conn.commit();
        } catch (SQLException e) {
            if (null != conn) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    System.out.println("" error when roll back !"");
                }
            }
        } finally {
            try {
                if (null != psmt) {
                    psmt.close();
                    psmt = null;
                }
                if (null != conn) {
                    conn.close();
                    conn = null;
                }
            } catch (SQLException e) {
                System.out.println("" error  when psmt close or conn close ."");
            }
        }
        return deleted;
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    private String urlConnectionTranslate(String word) {
        try {
            URL url = new URL(""http://ajax.googleapis.com/ajax/services/"" + ""language/translate?v=1.0&q="" + word + ""&langpair=is%7Cen"");
            URLConnection connection = url.openConnection();
            connection.addRequestProperty(""Referer"", ""http://www.hi.is"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            JSONObject json = new JSONObject(builder.toString());
            return json.getJSONObject(""responseData"").getString(""translatedText"");
        } catch (Exception e) {
            Log.e(TranslatorApplication.tag, e.toString());
        }
        return null;
    }
",0.0
"    public FTPSource(SourceDetail sourceDetail) throws SourceException {
        this.sourceDetail = sourceDetail;
        localPathMap = new HashMap<String, String>();
        client = new FTPClient();
        try {
            client.connect(sourceDetail.getHost());
            client.login(sourceDetail.getUser(), sourceDetail.getPassword());
            workingDirectory = new File(ConfigManager.getGUIConfig().getWorkingDirectoryName() + File.separator + sourceDetail.getName());
            workingDirectory.mkdir();
        } catch (Exception e) {
            throw new SourceException(e);
        }
    }
","    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
        PageContext pageContext = null;
        HttpSession session = null;
        ServletContext application = null;
        ServletConfig config = null;
        JspWriter out = null;
        Object page = this;
        JspWriter _jspx_out = null;
        PageContext _jspx_page_context = null;
        try {
            response.setContentType(""text/html;charset=UTF-8"");
            pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true);
            _jspx_page_context = pageContext;
            application = pageContext.getServletContext();
            config = pageContext.getServletConfig();
            session = pageContext.getSession();
            out = pageContext.getOut();
            _jspx_out = out;
            _jspx_resourceInjector = (org.apache.jasper.runtime.ResourceInjector) application.getAttribute(""com.sun.appserv.jsp.resource.injector"");
            out.write(""\n"");
            out.write(""\n"");
            out.write(""\n"");
            String username = ""test"";
            String password = ""test"";
            int providerId = 1;
            if (request.getParameter(""providerId"") != null) providerId = Integer.parseInt(request.getParameter(""providerId""));
            String thisPageContextAddress = ""http://localhost:8080/"" + request.getContextPath();
            String thisPageServingAddress = thisPageContextAddress + ""/index.jsp"";
            String token = """";
            String token_timeout = (String) request.getParameter(""token_timeout"");
            String referer = request.getHeader(""Referer"");
            if (token_timeout != null && token_timeout.equals(""true"")) {
                System.out.println(""token timeout for referer"" + referer);
                if (referer != null) {
                    if (request.getSession().getServletContext().getAttribute(""token_timeout_processing_lock"") == null) {
                        request.getSession().getServletContext().setAttribute(""token_timeout_processing_lock"", true);
                        byte[] buff = null;
                        BufferedInputStream bis = null;
                        URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                        URLConnection urlc = url.openConnection();
                        int length = urlc.getContentLength();
                        InputStream in = urlc.getInputStream();
                        buff = new byte[length];
                        int bytesRead = 0;
                        while (bytesRead < length) {
                            bytesRead += in.read(buff, bytesRead, in.available());
                        }
                        token = new String(buff);
                        token = token.replaceAll(""[\\r\\f]"", """");
                        token = token.trim();
                        request.getSession().getServletContext().setAttribute(""token"", token);
                        out.println(token);
                        request.getSession().getServletContext().removeAttribute(""token_timeout_processing_lock"");
                    } else out.println(""token_timeout_processing_lock"");
                }
            } else {
                if (request.getSession().getServletContext().getAttribute(""token"") == null || request.getSession().getServletContext().getAttribute(""token"").equals("""")) {
                    byte[] buff = null;
                    BufferedInputStream bis = null;
                    URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                    URLConnection urlc = url.openConnection();
                    int length = urlc.getContentLength();
                    InputStream in = urlc.getInputStream();
                    buff = new byte[length];
                    int bytesRead = 0;
                    while (bytesRead < length) {
                        bytesRead += in.read(buff, bytesRead, in.available());
                    }
                    token = new String(buff);
                    token = token.replaceAll(""[\\r\\f]"", """");
                    token = token.trim();
                    request.getSession().getServletContext().setAttribute(""token"", token);
                }
                out.write(""<html>\n"");
                out.write(""  <head>\n"");
                out.write(""    <title>AJAX test </title>\n"");
                out.write(""    <script type=\""text/javascript\"" src=\""OpenLayers-2.8/OpenLayers.js\""></script>\n"");
                out.write(""    <script type=\""text/javascript\"">\n"");
                out.write(""\n"");
                out.write(""        function init(){\n"");
                out.write(""\n"");
                out.write(""            var token = \"""");
                out.print(request.getSession().getServletContext().getAttribute(""token""));
                out.write(""\"";\n"");
                out.write(""\n"");
                out.write(""            var options = {\n"");
                out.write(""                            maxExtent: new OpenLayers.Bounds(-600, -300, 0, 400),\n"");
                out.write(""                            maxResolution: 4.77730, minRezolution: 78271.517, numZoomLevels: 15, units: 'm'\n"");
                out.write(""                          }\n"");
                out.write(""\n"");
                out.write(""\n"");
                out.write(""            var map = new OpenLayers.Map('map', options);\n"");
                out.write(""            var layer = new OpenLayers.Layer.TMS(\""TMS\"", \""/WebGISTileServer/TMSServletProxy/\"" + token + \""/7/\"",\n"");
                out.write(""                                                { layername: 'TMS', type: 'png' });\n"");
                out.write(""            map.addLayer(layer);\n"");
                out.write(""            map.addControl(new OpenLayers.Control.MousePosition());\n"");
                out.write(""            map.setCenter(new OpenLayers.LonLat(-300, 120), 4);\n"");
                out.write(""        }\n"");
                out.write(""    </script>\n"");
                out.write(""  </head>\n"");
                out.write(""  <body onload=\""init()\"">\n"");
                out.write(""      <H1>TeleAtlas map with TMS</H1>\n"");
                out.write(""      <div id=\""map\"" style=\""width:100%; height:90%\""></div>\n"");
                out.write(""  </body>\n"");
                out.write(""</html>"");
            }
        } catch (Throwable t) {
            if (!(t instanceof SkipPageException)) {
                out = _jspx_out;
                if (out != null && out.getBufferSize() != 0) out.clearBuffer();
                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
            }
        } finally {
            _jspxFactory.releasePageContext(_jspx_page_context);
        }
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    public static void copy(File from_file, File to_file) throws IOException {
        from_file = checkFile(from_file);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            clearTables(stmt);
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
",0.0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
","    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream out = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel channel = out.getChannel();
            long pos = 0, len = src.size(), ret;
            while (len > 0) {
                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;
                len -= ret;
                pos += ret;
            }
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    public void testGetContentInputStream() {
        try {
            URL url = new URL(""http://www.designerfashion.de/Seiten/r2-Felljacke.html"");
            InputStream in = url.openStream();
            Content c = provider.getContent(in);
            assertNotNull(c);
            assertEquals(""Web Page"", c.getType());
            assertEquals(""net.sf.iqser.plugin.web.html"", c.getProvider());
            assertEquals(8, c.getAttributes().size());
            assertEquals(""Name"", c.getAttributes().iterator().next().getName());
        } catch (MalformedURLException e) {
            fail(""Malformed URL - "" + e.getMessage());
        } catch (IOException e) {
            fail(""Couldn't read source - "" + e.getMessage());
        }
    }
","    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
",0.0
"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(conf);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, conf);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
","    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    protected void processAnnotationsJar(URL url) {
        JarFile jarFile = null;
        try {
            URLConnection urlConn = url.openConnection();
            JarURLConnection jarUrlConn;
            if (!(urlConn instanceof JarURLConnection)) {
                sm.getString(""contextConfig.jarUrl"", url);
                return;
            }
            jarUrlConn = (JarURLConnection) urlConn;
            jarUrlConn.setUseCaches(false);
            jarFile = jarUrlConn.getJarFile();
            Enumeration<JarEntry> jarEntries = jarFile.entries();
            while (jarEntries.hasMoreElements()) {
                JarEntry jarEntry = jarEntries.nextElement();
                String entryName = jarEntry.getName();
                if (entryName.endsWith("".class"")) {
                    InputStream is = null;
                    try {
                        is = jarFile.getInputStream(jarEntry);
                        processAnnotationsStream(is);
                    } catch (IOException e) {
                        logger.error(sm.getString(""contextConfig.inputStreamJar"", entryName, url), e);
                    } finally {
                        if (is != null) {
                            try {
                                is.close();
                            } catch (Throwable t) {
                                ExceptionUtils.handleThrowable(t);
                            }
                        }
                    }
                }
            }
        } catch (IOException e) {
            logger.error(sm.getString(""contextConfig.jarFile"", url), e);
        } finally {
            if (jarFile != null) {
                try {
                    jarFile.close();
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                }
            }
        }
    }
",0.0
"    public void setImage(java.awt.Image img) {
        if (imageName != null && imageName.length() > 0) {
            try {
                InputStream url = currentProject.getUrl(imageName).openStream();
                image = new org.eclipse.swt.graphics.Image(getDisplay(), url);
            } catch (IOException e) {
                e.printStackTrace();
            }
            Display.getDefault().asyncExec(new Runnable() {

                public void run() {
                    redraw();
                }
            });
        }
    }
","    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",0.0
"    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
","    private static boolean execute(String query) throws SQLException {
        boolean success = true;
        try {
            PreparedStatement stm = con.prepareStatement(query);
            stm.executeUpdate();
            stm.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (Exception rbex) {
                rbex.printStackTrace();
            }
            success = false;
            throw e;
        }
        return success;
    }
",0.0
"    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
","    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
",0.0
"    private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
",1.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException {
        ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true);
        if (list.size() == 0) {
            if (!quiet) {
                printNoDatabaseFilesFound(directory, db);
            }
            return;
        }
        zipFileName = FileUtils.normalize(zipFileName);
        if (FileUtils.exists(zipFileName)) {
            FileUtils.delete(zipFileName);
        }
        OutputStream fileOut = null;
        try {
            fileOut = FileUtils.openFileOutputStream(zipFileName, false);
            ZipOutputStream zipOut = new ZipOutputStream(fileOut);
            String base = """";
            for (String fileName : list) {
                if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                } else if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                }
            }
            for (String fileName : list) {
                String f = FileUtils.getAbsolutePath(fileName);
                if (!f.startsWith(base)) {
                    Message.throwInternalError(f + "" does not start with "" + base);
                }
                if (FileUtils.isDirectory(fileName)) {
                    continue;
                }
                f = f.substring(base.length());
                f = BackupCommand.correctFileName(f);
                ZipEntry entry = new ZipEntry(f);
                zipOut.putNextEntry(entry);
                InputStream in = null;
                try {
                    in = FileUtils.openFileInputStream(fileName);
                    IOUtils.copyAndCloseInput(in, zipOut);
                } catch (FileNotFoundException e) {
                } finally {
                    IOUtils.closeSilently(in);
                }
                zipOut.closeEntry();
                if (!quiet) {
                    out.println(""Processed: "" + fileName);
                }
            }
            zipOut.closeEntry();
            zipOut.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(fileOut);
        }
    }
",1.0
"    public static void main(String[] args) {
        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";
        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(in);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
","    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {
        String sessionUrl = getSessionTokenUrl(protocol, domain);
        URL url = new URL(sessionUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");
        httpConn.setRequestProperty(""Authorization"", header);
        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());
        }
        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));
        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\n"", ""="", true);
        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);
        return parsedTokens.get(""token"");
    }
",0.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    public RequestLogger() {
        Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {

            public int getScheduleRate() {
                return 0;
            }

            public void handle() {
                if (requestCounter == 0) {
                    requestCounter++;
                    return;
                }
                requestCounter++;
                Iterator it = loggerTimeouts.keySet().iterator();
                while (it.hasNext()) {
                    String host = (String) it.next();
                    String timeout = (String) loggerTimeouts.get(host);
                    int timeoutVal = Integer.parseInt(timeout);
                    if (timeoutVal > 0) {
                        timeoutVal /= 10;
                    }
                    int timeoutMod = (requestCounter % timeoutVal);
                    if (timeoutMod == 0) {
                        Object loggerFile = loggerFiles.get(host);
                        Object loggerFilenameObject = loggerFilenames.get(host);
                        Object loggerDestObject = loggerDests.get(host);
                        Object loggerCompressObject = loggerCompresses.get(host);
                        Object loggerDayObject = loggerDays.get(host);
                        Object loggerArchiveObject = loggerArchives.get(host);
                        Object loggerDeleteObject = loggerDeletes.get(host);
                        boolean rotateCompress = false;
                        boolean rotateDelete = false;
                        String rotateDest = null;
                        String logFile = null;
                        String rotateArchive = null;
                        int rotateDays = 0;
                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {
                            rotateCompress = true;
                        }
                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {
                            rotateDelete = true;
                        }
                        if (loggerDestObject != null) {
                            rotateDest = (String) loggerDestObject;
                        }
                        if (loggerFilenameObject != null) {
                            logFile = (String) loggerFilenameObject;
                        }
                        if (loggerArchiveObject != null) {
                            rotateArchive = (String) loggerArchiveObject;
                        }
                        if (loggerDayObject != null) {
                            rotateDays = Integer.parseInt((String) loggerDayObject);
                        }
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                                buf = null;
                                out = null;
                                in = null;
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""' to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                destChannel = null;
                                srcChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data from file '"" + logFile + ""' to '"" + destOutFile + ""' for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete) {
                            try {
                                ((PrintStream) loggerFile).close();
                            } catch (Exception e) {
                            }
                            (new File(logFile)).delete();
                            loggerFiles.remove(host);
                            addLogger(host, logFile);
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            fileList = null;
                            format1 = null;
                            archive = null;
                        }
                    }
                }
                it = null;
            }

            public String identString() {
                return ""Request Log Rotator"";
            }
        });
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
",1.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
",0.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
","    private void search(Class clazz, Collection result) {
        if (DEBUG) {
            System.err.println(""Searching for "" + clazz.getName() + "" in "" + clazz.getClassLoader() + "" from "" + this);
        }
        String res = ""META-INF/services/"" + clazz.getName();
        Enumeration en;
        try {
            en = loader.getResources(res);
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return;
        }
        List foundClasses = new ArrayList();
        Collection removeClasses = new ArrayList();
        boolean foundOne = false;
        while (en.hasMoreElements()) {
            if (!foundOne) {
                foundOne = true;
                Class realMcCoy = null;
                try {
                    realMcCoy = loader.loadClass(clazz.getName());
                } catch (ClassNotFoundException cnfe) {
                }
                if (realMcCoy != clazz) {
                    if (DEBUG) {
                        if (realMcCoy != null) {
                            System.err.println(clazz.getName() + "" is not the real McCoy! Actually found it in "" + realMcCoy.getClassLoader());
                        } else {
                            System.err.println(clazz.getName() + "" could not be found in "" + loader);
                        }
                    }
                    return;
                }
            }
            URL url = (URL) en.nextElement();
            Item currentItem = null;
            try {
                InputStream is = url.openStream();
                try {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""UTF-8""));
                    while (true) {
                        String line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith(""#position="")) {
                            if (currentItem == null) {
                                assert false : ""Found line '"" + line + ""' but there is no item to associate it with!"";
                            }
                            try {
                                currentItem.position = Integer.parseInt(line.substring(10));
                            } catch (NumberFormatException e) {
                                e.printStackTrace();
                            }
                        }
                        if (currentItem != null) {
                            insertItem(currentItem, foundClasses);
                            currentItem = null;
                        }
                        if (line.length() == 0) {
                            continue;
                        }
                        boolean remove = false;
                        if (line.charAt(0) == '#') {
                            if ((line.length() == 1) || (line.charAt(1) != '-')) {
                                continue;
                            }
                            remove = true;
                            line = line.substring(2);
                        }
                        Class inst = null;
                        try {
                            inst = Class.forName(line, false, loader);
                        } catch (ClassNotFoundException cnfe) {
                            if (remove) {
                                continue;
                            } else {
                                throw cnfe;
                            }
                        }
                        if (!clazz.isAssignableFrom(inst)) {
                            if (DEBUG) {
                                System.err.println(""Not a subclass"");
                            }
                            throw new ClassNotFoundException(inst.getName() + "" not a subclass of "" + clazz.getName());
                        }
                        if (remove) {
                            removeClasses.add(inst);
                        } else {
                            currentItem = new Item();
                            currentItem.clazz = inst;
                        }
                    }
                    if (currentItem != null) {
                        insertItem(currentItem, foundClasses);
                        currentItem = null;
                    }
                } finally {
                    is.close();
                }
            } catch (ClassNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        if (DEBUG) {
            System.err.println(""Found impls of "" + clazz.getName() + "": "" + foundClasses + "" and removed: "" + removeClasses + "" from: "" + this);
        }
        foundClasses.removeAll(removeClasses);
        Iterator it = foundClasses.iterator();
        while (it.hasNext()) {
            Item item = (Item) it.next();
            if (removeClasses.contains(item.clazz)) {
                continue;
            }
            result.add(new P(item.clazz));
        }
    }
",0.0
"    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());
            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");
            OutputStream fos = new FileOutputStream(tempFile);
            syncServer.getServerModifications(command.getSession(), fos);
            InputStream fis = new FileInputStream(tempFile);
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
","    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0.0
"    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (mURLImageMap.containsKey(url)) {
                    return mURLImageMap.get(url);
                }
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    mURLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
                LOG.debug(""Ignore any exceptions"");
            }
        } catch (Throwable e) {
            LOG.debug(""Ignore any exceptions"");
        }
        return null;
    }
","    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",0.0
"    public byte[] generatePassword(String clave) {
        byte[] password = { 00 };
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(clave.getBytes());
            password = md5.digest();
            return password;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return password;
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(p.getBytes(""iso-8859-1""), 0, p.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public FileDownloader(Context context, String downloadUrl, File fileSaveDir, int threadNum) {
        try {
            this.context = context;
            this.downloadUrl = downloadUrl;
            this.fileService = new FileService(context);
            this.url = new URL(downloadUrl);
            this.threads = new DownloadThread[threadNum];
            this.fileSaveDir = fileSaveDir;
            if (!fileSaveDir.exists()) {
                fileSaveDir.mkdir();
            }
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setConnectTimeout(6 * 1000);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*"");
            conn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            conn.setRequestProperty(""Referer"", downloadUrl);
            conn.setRequestProperty(""Charset"", ""UTF-8"");
            conn.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"");
            conn.setRequestProperty(""Connection"", ""Keep-Alive"");
            conn.connect();
            printResponseHeader(conn);
            if (conn.getResponseCode() == 200) {
                this.fileSize = conn.getContentLength();
                if (this.fileSize <= 0) throw new RuntimeException(""�޷���֪�ļ���С"");
                String fileName = getFileName(conn);
                this.saveFile = new File(fileSaveDir, fileName);
                Map<Integer, Integer> logdata = fileService.getData(downloadUrl);
                if (logdata.size() > 0) {
                    data.putAll(logdata);
                }
                this.block = this.fileSize / this.threads.length + 1;
                if (this.data.size() == this.threads.length) {
                    for (int i = 0; i < this.threads.length; i++) {
                        this.downloadSize += this.data.get(i + 1) - (this.block * i);
                    }
                    print(""�Ѿ����صĳ��ȣ�"" + this.downloadSize);
                }
            } else {
                print(""��������Ӧ����"");
                throw new RuntimeException(""��������Ӧ����"");
            }
        } catch (Exception e) {
            print(""���Ӳ�������·��"" + e.toString());
            throw new RuntimeException(""���Ӳ�������·��"");
        }
    }
",0.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    private static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {
        if (dest.exists()) {
            if (force) {
                dest.delete();
            } else {
                throw new IOException(""Cannot overwrite existing file: "" + dest.getName());
            }
        }
        byte[] buffer = new byte[bufSize];
        int read = 0;
        InputStream in = null;
        OutputStream out = null;
        try {
            in = new FileInputStream(src);
            out = new FileOutputStream(dest);
            while (true) {
                read = in.read(buffer);
                if (read == -1) {
                    break;
                }
                out.write(buffer, 0, read);
            }
        } finally {
            if (in != null) {
                try {
                    in.close();
                } finally {
                    if (out != null) {
                        out.close();
                    }
                }
            }
        }
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    private static void extract(final ZipFile zf, final ZipEntry zipEntry, final String desDir, final int... startDirLevel) throws IOException {
        File desf = new File(desDir);
        if (!desf.exists()) {
            desf.mkdirs();
        }
        int start = 1;
        if (null != startDirLevel && startDirLevel.length > 0) {
            start = startDirLevel[0];
            if (start < 1) {
                start = 1;
            }
        }
        String startDir = """";
        String zeName = zipEntry.getName();
        String folder = zeName;
        boolean isDir = zipEntry.isDirectory();
        if (null != folder) {
            String[] folders = folder.split(""\\/"");
            if (null != folders && folders.length > 0) {
                int len = folders.length;
                if (start == 1) {
                    startDir = zeName;
                } else {
                    if (start > len) {
                    } else {
                        for (int i = start - 1; i < len; i++) {
                            startDir += ""/"" + folders[i];
                        }
                        if (null != startDir) {
                            startDir = startDir.substring(1);
                        }
                    }
                }
            }
        }
        startDir = StringUtils.trim(startDir);
        if (StringUtils.isNotEmpty(startDir)) {
            StringBuilder desFileName = new StringBuilder(desDir);
            if (!desDir.endsWith(""/"") && !startDir.startsWith(""/"")) {
                desFileName.append(""/"");
            }
            desFileName.append(startDir);
            File destFile = new File(desFileName.toString());
            if (isDir) {
                if (!destFile.exists()) {
                    destFile.mkdirs();
                }
            } else {
                File parentDir = new File(destFile.getParentFile().getPath());
                if (!parentDir.exists()) {
                    parentDir.mkdirs();
                }
                InputStream is = zf.getInputStream(zipEntry);
                OutputStream os = new FileOutputStream(destFile);
                IOUtils.copy(is, os);
                if (null != is) {
                    is.close();
                }
                if (null != os) {
                    os.close();
                }
            }
        }
    }
",0.0
"    public static long[] getUidsNearMe(String myUid, double lat, double lon) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(UIDS_NEARME_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""latitude"", Double.toString(lat)));
        parameters.add(new BasicNameValuePair(""longitude"", Double.toString(lon)));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            long[] friends = new long[result.length()];
            int uid = Integer.parseInt(myUid);
            for (int i = 0; i < result.length(); i++) {
                if (uid != result.getInt(i)) {
                    friends[i] = result.getInt(i);
                }
            }
            return friends;
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
","    public FetchTextFromWebPage(String path) {
        HTMLEditorKit.Parser parser;
        HTMLFile = new File(path);
        byte[] html = new byte[new Long(HTMLFile.length()).intValue()];
        try {
            FileInputStream fis = new FileInputStream(HTMLFile);
            try {
                fis.read(html);
            } catch (IOException e) {
                e.printStackTrace();
            }
            ByteArrayInputStream ba_read = new ByteArrayInputStream(html);
            r = new InputStreamReader(ba_read);
        } catch (FileNotFoundException e) {
            URL url = null;
            try {
                url = new URL(path);
                URLConnection connection = null;
                try {
                    connection = url.openConnection();
                    connection.setDoInput(true);
                    InputStream inStream = null;
                    try {
                        inStream = connection.getInputStream();
                        BufferedReader input = new BufferedReader(new InputStreamReader(inStream));
                        StringBuffer sbr = new StringBuffer();
                        String line = null;
                        try {
                            while ((line = input.readLine()) != null) {
                                System.out.println(line);
                                sbr.append(line + ""\n"");
                            }
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                        File temp = new File(""//home//wiki14//temp.txt"");
                        if (!temp.exists()) {
                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");
                        } else {
                            temp.delete();
                            if (!temp.createNewFile()) System.out.println(""File caanot be created"");
                        }
                        java.io.FileWriter fw = new java.io.FileWriter(temp);
                        fw.write(sbr.toString());
                        fw.close();
                        byte[] newbyte = new byte[new Long(sbr.length()).intValue()];
                        ByteArrayInputStream ba_read = new ByteArrayInputStream(newbyte);
                        r = new InputStreamReader(ba_read);
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            } catch (MalformedURLException e1) {
                e1.printStackTrace();
            }
        }
        parser = new ParserDelegator();
        htmltextparser = new HtmlTextParser();
        htmltextparser.initData();
        try {
            parser.parse(r, htmltextparser, true);
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            r.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    public void testSavepoint9() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint9 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        Savepoint sp = con.setSavepoint();
        PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint9 (data) VALUES (?)"");
        pstmt.setInt(1, 1);
        assertTrue(pstmt.executeUpdate() == 1);
        pstmt.close();
        stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.commit();
        con.rollback();
        stmt = con.createStatement();
        rs = stmt.executeQuery(""SELECT SUM(data) FROM #savepoint9"");
        assertTrue(rs.next());
        assertTrue(""bug [2021839]"", rs.getInt(1) == 1);
        assertTrue(!rs.next());
        stmt.close();
        rs.close();
        con.setAutoCommit(true);
    }
",0.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
",0.0
"    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setHeader(""Content-type"", ""application/force-download"");
        response.setHeader(""Content-disposition"", ""attachment"");
        response.setHeader(""filename"", ""export.txt"");
        response.setHeader(""Pragma"", ""no-cache"");
        response.setHeader(""Expires"", ""0"");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        InputStream x = baseRequest.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(x, writer);
        String theString = writer.toString();
        System.out.println(theString);
        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\n""));
    }
","    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
",0.0
"    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",1.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    private DefaultMutableTreeNode parseTree() {
        try {
            DefaultMutableTreeNode root;
            URL url = RebusHelp.class.getResource(""/org/olga/rebus/gui/help/html/content.xml"");
            InputStream is = url.openStream();
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setIgnoringComments(true);
            factory.setValidating(false);
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(is);
            NodeList elements = document.getElementsByTagName(""help"");
            Element element = (Element) elements.item(0);
            root = createTreeContent(element);
            is.close();
            return root;
        } catch (IOException e) {
            System.out.println(e.getMessage());
            return null;
        } catch (ParserConfigurationException e1) {
            System.out.println(e1.getMessage());
            return null;
        } catch (org.xml.sax.SAXException e2) {
            System.out.println(e2.getMessage());
            return null;
        }
    }
",0.0
"    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        String text = new String();
        byte[] sha1hash = new byte[20];
        text = key + GUUI;
        md.update(text.getBytes(), 0, text.length());
        sha1hash = md.digest();
        return (Helper.getBASE64(sha1hash));
    }
",0.0
"    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
","    private JButton getButtonImagen() {
        if (buttonImagen == null) {
            buttonImagen = new JButton();
            buttonImagen.setText(Messages.getString(""gui.AdministracionResorces.6""));
            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetree.png""));
            buttonImagen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.8""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""imagenes/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""imagenes/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonImagen;
    }
",1.0
"    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals(""deletable"") || f.startsWith(""."")) continue;
            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));
            byte[] buf = new byte[16384];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
            in.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",1.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    public ObjectInputStream sendObject(String sMethod, Serializable obj) {
        String sServlet = System.getProperty(""servlet.jstat"");
        if (sServlet != null) {
            try {
                URL url = new URL(sServlet);
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                ObjectOutputStream out = new ObjectOutputStream(conn.getOutputStream());
                out.writeObject(sMethod);
                out.writeObject(obj);
                out.flush();
                out.close();
                return new ObjectInputStream(conn.getInputStream());
            } catch (Exception exc) {
                System.out.println(""Error on SpaceJobRunner::sendObjectPOST() --> "" + exc);
            }
        } else {
        }
        return null;
    }
","    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",0.0
"    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
","    public Map<String, String> getMetadata(WebFileObject fo) throws IOException {
        if (!fo.wfs.getRootURL().getProtocol().equals(""ftp"")) {
            String realName = fo.pathname;
            boolean exists;
            URL ur = new URL(fo.wfs.getRootURL(), realName);
            HttpURLConnection connect = (HttpURLConnection) ur.openConnection();
            connect.setRequestMethod(""HEAD"");
            HttpURLConnection.setFollowRedirects(false);
            connect.connect();
            HttpURLConnection.setFollowRedirects(true);
            if (connect.getResponseCode() == 303) {
                String surl = connect.getHeaderField(""Location"");
                if (surl.startsWith(fo.wfs.root.toString())) {
                    realName = surl.substring(fo.wfs.root.toString().length());
                }
                connect.disconnect();
                ur = new URL(fo.wfs.getRootURL(), realName);
                connect = (HttpURLConnection) ur.openConnection();
                connect.setRequestMethod(""HEAD"");
                connect.connect();
            }
            exists = connect.getResponseCode() != 404;
            Map<String, String> result = new HashMap<String, String>();
            Map<String, List<String>> fields = connect.getHeaderFields();
            for (Entry<String, List<String>> e : fields.entrySet()) {
                String key = e.getKey();
                List<String> value = e.getValue();
                result.put(key, value.get(0));
            }
            result.put(META_EXIST, String.valueOf(exists));
            connect.disconnect();
            return result;
        } else {
            Map<String, String> result = new HashMap<String, String>();
            URL url = new URL(fo.wfs.getRootURL(), fo.pathname);
            URLConnection urlc = url.openConnection();
            try {
                urlc.connect();
                urlc.getInputStream().close();
                result.put(META_EXIST, ""true"");
            } catch (IOException ex) {
                result.put(META_EXIST, ""false"");
            }
            return result;
        }
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static void main(String[] args) {
        FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);
        boolean proceed = true;
        String input = """";
        DataInputStream dis;
        OutputStream out;
        InputStream in;
        File out_file, in_file;
        byte[] buffer = new byte[2048];
        int bytes_read;
        while (proceed) {
            fd.show();
            if (fd.getFile() != null) {
                try {
                    in_file = new File(fd.getDirectory(), fd.getFile());
                    out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");
                    out = new FileOutputStream(out_file);
                    in = new MSZipInputStream(new FileInputStream(in_file));
                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.out.println(""Do another (y/n)?"");
            dis = new DataInputStream(System.in);
            try {
                input = dis.readLine();
            } catch (Exception blah) {
            }
            if (input.toLowerCase().startsWith(""n"")) proceed = false;
        }
    }
",1.0
"    private String getMD5Hash(String password) {
        String plainText = password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) {
                    plainText = ""0"" + plainText;
                }
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
","    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {
        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");
        if (tempFile.exists()) tempFile.delete();
        boolean renameOk = zipFile.renameTo(tempFile);
        if (!renameOk) {
            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());
        }
        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));
        ZipEntry entry = zin.getNextEntry();
        byte[] buf = new byte[1024];
        while (entry != null) {
            String entryName = entry.getName();
            boolean inFiles = false;
            for (int i = 0; i < files.length; i++) {
                String fileName = dirs[i] + ""/"" + files[i].getName();
                if (fileName.equals(entryName)) {
                    inFiles = true;
                    break;
                }
            }
            if (!inFiles) {
                out.putNextEntry(new ZipEntry(entryName));
                int len;
                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);
            }
            entry = zin.getNextEntry();
        }
        zin.close();
        for (int i = 0; i < files.length; i++) {
            InputStream in = new FileInputStream(files[i]);
            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.closeEntry();
            in.close();
        }
        out.close();
        tempFile.delete();
    }
",0.0
"    public static JSONObject getFriend(long uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(FRIENDS_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""uids"", arrayToString(new long[] { uid }, "","")));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            return result.getJSONObject(0);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
","    public static String[] getHints(String query) {
        try {
            URL url = new URL(""http://www.ebi.ac.uk/integr8/OrganismSearch.do?action=orgNames&orgName="" + query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String dest = new String();
            while ((inputLine = in.readLine()) != null) dest = dest.concat(inputLine);
            in.close();
            Matcher m = taxonPattern.matcher(dest);
            ArrayList<String> strings = new ArrayList<String>();
            while (m.find()) {
                strings.add(m.group(1));
            }
            return strings.toArray(new String[] {});
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new String[0];
    }
",0.0
"    private String storeEditionFile(InputStream in) throws IOException {
        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;
        File attachmentsDir = new File(datadir);
        attachmentsDir.mkdirs();
        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);
        FileOutputStream out = new FileOutputStream(storedEditionFile);
        IOUtils.copyLarge(in, out);
        IOUtils.closeQuietly(out);
        IOUtils.closeQuietly(in);
        return storedEditionFile.getAbsolutePath();
    }
","    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File part : parts) {
                setState(part.getName(), BUILDING);
                FileChannel in = new FileInputStream(part).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",1.0
"    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
","    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
",1.0
"    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.out.println(""param 1: "" + args[0] + ""\r\n"");
        System.out.println(""param 2: "" + args[1] + ""\r\n"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setFollowRedirects(true);
            connection.connect();
            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
            FileOutputStream out = new FileOutputStream(args[1]);
            int c = -1;
            while ((c = in.read()) >= 0) {
                out.write(c);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r\n"");
        }
    }
","    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {
        String sessionUrl = getSessionTokenUrl(protocol, domain);
        URL url = new URL(sessionUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");
        httpConn.setRequestProperty(""Authorization"", header);
        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());
        }
        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));
        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\n"", ""="", true);
        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);
        return parsedTokens.get(""token"");
    }
",0.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    public static InputStream getResourceAsStream(final String name, final Class context) {
        final URL url = getResource(name, context);
        if (url == null) {
            return null;
        }
        try {
            return url.openStream();
        } catch (IOException e) {
            return null;
        }
    }
",0.0
"    private void zip(File input, File output) {
        OutputStream os = null;
        InputStream is = null;
        try {
            os = new GZIPOutputStream(new FileOutputStream(output));
            is = new FileInputStream(input);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",0.0
"    private static boolean CopyFile(File srcFile, File tagFile) throws IOException {
        if (srcFile == null || tagFile == null) {
            return false;
        }
        int length = 2097152;
        File dirFile = new File(getFileFolder(tagFile.getAbsolutePath()));
        if (!dirFile.exists()) {
            dirFile.mkdirs();
        }
        FileInputStream in = new FileInputStream(srcFile);
        FileOutputStream out = new FileOutputStream(tagFile.getAbsolutePath());
        FileChannel inC = in.getChannel();
        FileChannel outC = out.getChannel();
        int i = 0;
        while (true) {
            if (inC.position() == inC.size()) {
                inC.close();
                outC.close();
                break;
            }
            if ((inC.size() - inC.position()) < 20971520) length = (int) (inC.size() - inC.position()); else length = 20971520;
            inC.transferTo(inC.position(), length, outC);
            inC.position(inC.position() + length);
            i++;
        }
        return true;
    }
","    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",1.0
"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter(""proxyurl"");
        URLConnection conn = new URL(url).openConnection();
        Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());
        response.setContentType(conn.getContentType());
        response.setContentLength(conn.getContentLength());
        Writer out = response.getWriter();
        char[] buf = new char[256];
        int len;
        while ((len = in.read(buf)) != -1) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        String log = request.getParameter(""logging"");
        if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);
    }
","    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private String getMD5Hash(String password) {
        String plainText = password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) {
                    plainText = ""0"" + plainText;
                }
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
","    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
",0.0
"    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
","    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info(""moving files..."");
        File source = new File(""deqsim.log"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");
            }
        }
        int parallelCnt = 0;
        source = new File(""deqsim.log."" + parallelCnt);
        while (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");
            }
            parallelCnt++;
            source = new File(""deqsim.log."" + parallelCnt);
        }
        source = new File(""loads_out.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));
            try {
                IOUtils.copyFile(source, destination);
            } catch (FileNotFoundException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            } catch (IOException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            }
            destination = new File(""loads_in.txt"");
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");
            }
        }
        source = new File(""linkprocs.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");
            }
        }
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {
        InputStream is = null;
        try {
            URL url = new URL(jad.getJarURL());
            URLConnection conn = url.openConnection();
            if (url.getUserInfo() != null) {
                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes(""UTF-8"")));
                conn.setRequestProperty(""Authorization"", ""Basic "" + userInfo);
            }
            is = conn.getInputStream();
            File tmpDir = null;
            String systemTmpDir = MIDletSystemProperties.getSystemProperty(""java.io.tmpdir"");
            if (systemTmpDir != null) {
                tmpDir = new File(systemTmpDir, ""microemulator-apps"");
                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {
                    tmpDir = null;
                }
            }
            File tmp = File.createTempFile(""me2-app-"", "".jar"", tmpDir);
            tmp.deleteOnExit();
            IOUtils.copyToFile(is, tmp);
            return IOUtils.getCanonicalFileClassLoaderURL(tmp);
        } catch (IOException e) {
            if (reportError) {
                Message.error(""Unable to open jar "" + jarUrl, e);
            }
            return null;
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
",0.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public static String CreateHashValue(Connection dbConnection) throws Exception {
        String sResult = null;
        if (dbConnection == null) throw new Exception(""Connection object is null..."");
        HashDBState.m_oLogger.debug(""Start creating hash from database object."");
        ArrayList aStatementList = new ArrayList();
        StringBuffer aResults = new StringBuffer();
        StringBuffer aHashValue = new StringBuffer();
        HashDBState.fillStatementList(aStatementList, dbConnection);
        if ((aStatementList != null) && (aStatementList.size() > 0)) {
            Iterator it = aStatementList.iterator();
            while (it.hasNext()) {
                String sCurStatement = (String) it.next();
                HashDBState.addTableContent(aResults, sCurStatement, dbConnection);
            }
        } else {
            throw new Exception(""No statements generated... aborting hashing"");
        }
        try {
            dbConnection.commit();
        } catch (SQLException e) {
            m_oLogger.error(""Error while committing hash statements: "" + e.getMessage(), e);
        }
        MessageDigest oSHA1 = MessageDigest.getInstance(""SHA-1"");
        oSHA1.reset();
        oSHA1.update(aResults.toString().getBytes());
        byte[] aMessageBytes = oSHA1.digest();
        if ((aMessageBytes != null) && (aMessageBytes.length > 0)) {
            for (int iCurByte = 0; iCurByte < aMessageBytes.length; iCurByte++) {
                aHashValue.append(HashDBState.toHexString(aMessageBytes[iCurByte]));
            }
        }
        sResult = aHashValue.toString();
        HashDBState.m_oLogger.debug(""Hashvalue of database is: "" + sResult);
        return sResult;
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    public String getRandomGUID() {
        MessageDigest md5 = null;
        String valueBeforeMD5 = """";
        String retValue = """";
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            InetAddress id = InetAddress.getLocalHost();
            long time = System.currentTimeMillis();
            long rand = 0;
            rand = random.nextLong();
            sbValueBeforeMD5.append(id.toString());
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            retValue = sb.toString();
        } catch (UnknownHostException e) {
            System.out.println(""Error:"" + e);
        }
        return retValue;
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    public static void main(String argv[]) {
        String cp = System.getProperty(""java.class.path"");
        String sep = System.getProperty(""file.separator"");
        String dirpath = cp.substring(0, cp.lastIndexOf(sep));
        String jarpath = dirpath + ""/WiiRemoteJ.jar"";
        if (!new File(jarpath).exists()) {
            try {
                System.out.println(""getting WiiRemoteJ file from remote source..."");
                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");
                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());
                String temploc = copyInputStreamToTmpFile(input, "".zip"");
                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));
                ZipEntry i = null;
                while ((i = zipIn.getNextEntry()) != null) {
                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {
                        File outjar = new File(jarpath);
                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));
                        int bufferSize = 8192;
                        byte[] buffer = new byte[bufferSize];
                        int readSize = 0;
                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {
                            fs.write(buffer, 0, readSize);
                        }
                        fs.close();
                    }
                }
                System.out.println(""unpacked into classpath."");
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Boogiepants.main(argv);
    }
",1.0
"    public void unsplit(String newFilename, File[] files) throws Exception {
        FileOutputStream stream = new FileOutputStream(new File(newFilename));
        for (int i = 0; i < files.length; i++) {
            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());
            DataInputStream din = new DataInputStream(fin);
            while (din.available() > 0) {
                stream.write(din.read());
            }
            din.close();
            fin.close();
        }
        stream.close();
    }
","    public File getPreprocessedTextFile(File originalTextFile) throws IOException {
        File preprocessedTextFile = File.createTempFile(""cvs"", null);
        String separatorSeq = getSeparatorSequence();
        byte[] newLine = separatorSeq.getBytes();
        Constants.CVS_LOG.debug(""Preprocessing "" + originalTextFile.getAbsolutePath() + "" to "" + preprocessedTextFile.getAbsolutePath() + "" using "" + debugSequence(separatorSeq));
        byte[] crlf = ""\r\n"".getBytes();
        byte[] lf = ""\n"".getBytes();
        OutputStream out = null;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(originalTextFile));
            out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile));
            byte[] fileChunk = new byte[CHUNK_SIZE];
            byte[] fileWriteChunk = new byte[CHUNK_SIZE];
            for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) {
                if (newLine.length == 0) {
                    out.write(fileChunk, 0, readLength);
                } else {
                    int writeLength = 0;
                    for (int i = 0; i < readLength; ) {
                        int pos = findIndexOf(fileChunk, crlf, i);
                        int lineSepLength = crlf.length;
                        if (pos < i || pos >= readLength) {
                            pos = findIndexOf(fileChunk, lf, i);
                            lineSepLength = lf.length;
                        }
                        if (pos >= i && pos < readLength) {
                            try {
                                System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i);
                            } catch (ArrayIndexOutOfBoundsException aiobe) {
                                Constants.CVS_LOG.error(""fileChunk.length="" + fileChunk.length + "" i="" + i + "" writeLength="" + writeLength + "" pos="" + pos + "" fileWriteChunk.length="" + fileWriteChunk.length);
                                throw aiobe;
                            }
                            writeLength += pos - i;
                            i = pos + lineSepLength;
                            for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j];
                        } else {
                            System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i);
                            writeLength += readLength - i;
                            i = readLength;
                        }
                    }
                    out.write(fileWriteChunk, 0, writeLength);
                }
            }
            return preprocessedTextFile;
        } catch (IOException ex) {
            if (preprocessedTextFile != null) {
                cleanup(preprocessedTextFile);
            }
            throw ex;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
",1.0
"    public PhoneDurationsImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phoneDurations = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
","    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getRequestURI().split(""/"")[3];
        if (log.isDebugEnabled()) log.debug(""request: "" + id + "" from: "" + request.getRemoteHost());
        Song song = manager.find(id);
        if (song != null) {
            File file = new File(song.getFile());
            if (file.exists()) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.setContentType(""audio/"" + song.getType());
                response.setContentLength((int) file.length());
                FileInputStream stream = new FileInputStream(file);
                try {
                    IOUtils.copy(stream, response.getOutputStream());
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                log.warn(""file not found: "" + file);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
        } else {
            log.info(""song not found: "" + id);
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",0.0
"    String readRss(URL url) {
        String html = ""<html><body><h2>No data</h2></body></html>"";
        try {
            mLogger.info(""URL is:"" + url.toString());
            BufferedReader inStream = new BufferedReader(new InputStreamReader(url.openStream()), 1024);
            String line;
            StringBuilder rssFeed = new StringBuilder();
            while ((line = inStream.readLine()) != null) {
                rssFeed.append(line);
            }
            html = rssFeed.toString();
        } catch (IOException ex) {
            mLogger.warning(""Couldn't open an RSS stream"");
        }
        return html;
    }
","    private static String hash(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (Exception e) {
            return null;
        }
        try {
            md.update(string.getBytes(""UTF-8""));
        } catch (Exception e) {
            return null;
        }
        byte raw[] = md.digest();
        return (new BASE64Encoder()).encode(raw);
    }
",0.0
"    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return sb.toString();
    }
","                public void run() {
                    ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j]);
                    ShareFileReader reader = new ShareFileReader(readers[j], files[0]);
                    ShareFileWriter writer = new ShareFileWriter(part, new File(""Downloads/"" + readers[j].getName()));
                    long tot = 0;
                    byte[] b = new byte[(int) (Math.random() * 10000)];
                    while (tot < readers[j].getSize()) {
                        reader.read(b);
                        byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length];
                        System.arraycopy(b, 0, bwrite, 0, b.length);
                        writer.write(bwrite, b.length);
                        tot += b.length;
                    }
                    done++;
                    System.out.println((int) (done * 100.0 / PARTS) + ""% Complete"");
                }
",0.0
"    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
","    protected byte[] mdDecode(String s, int type, byte[] salt) {
        try {
            MessageDigest md;
            StringBuffer hexString = new StringBuffer();
            if ((type == 5) && (salt != null)) {
                md = MessageDigest.getInstance(SHA);
                hexString.append(""{"" + SSHA + ""}"");
            } else if (type == 4) {
                md = MessageDigest.getInstance(SHA);
                hexString.append(""{"" + SHA + ""}"");
            } else if ((type == 3) && (salt != null)) {
                md = MessageDigest.getInstance(MD5);
                hexString.append(""{"" + SMD5 + ""}"");
            } else if (type == 2) {
                md = MessageDigest.getInstance(MD5);
                hexString.append(""{"" + MD5 + ""}"");
            } else {
                return (null);
            }
            md.reset();
            md.update(s.getBytes(""UTF-8""));
            if (salt != null) {
                md.update(salt);
                byte[] buff = md.digest();
                byte[] new_buf = new byte[buff.length + salt.length];
                for (int x = 0; x < buff.length; x++) new_buf[x] = buff[x];
                for (int x = buff.length; x < new_buf.length; x++) new_buf[x] = salt[x - buff.length];
                hexString.append(CBBase64.binaryToString(new_buf));
            } else {
                byte[] buff = md.digest();
                hexString.append(CBBase64.binaryToString(buff));
            }
            return hexString.toString().getBytes(""UTF-8"");
        } catch (UnsupportedEncodingException e) {
            log.log(Level.WARNING, ""Unexpected error encoding password "", e);
            e.printStackTrace();
            return new byte[0];
        } catch (java.security.NoSuchAlgorithmException e) {
            log.log(Level.WARNING, ""Unexpected error encoding password "", e);
            e.printStackTrace();
            return new byte[0];
        }
    }
",0.0
"    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
","    public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException {
        if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) {
            return;
        }
        final boolean filterSetsAvailable = (filters != null && filters.hasFilters());
        final boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0);
        if (filterSetsAvailable) {
            BufferedReader in = null;
            BufferedWriter out = null;
            try {
                InputStreamReader isr = null;
                if (inputEncoding == null) {
                    isr = new InputStreamReader(source.getInputStream());
                } else {
                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                in = new BufferedReader(isr);
                OutputStream os = getOutputStream(dest, append, project);
                OutputStreamWriter osw;
                if (outputEncoding == null) {
                    osw = new OutputStreamWriter(os);
                } else {
                    osw = new OutputStreamWriter(os, outputEncoding);
                }
                out = new BufferedWriter(osw);
                if (filterChainsAvailable) {
                    ChainReaderHelper crh = new ChainReaderHelper();
                    crh.setBufferSize(FileUtils.BUF_SIZE);
                    crh.setPrimaryReader(in);
                    crh.setFilterChains(filterChains);
                    crh.setProject(project);
                    Reader rdr = crh.getAssembledReader();
                    in = new BufferedReader(rdr);
                }
                LineTokenizer lineTokenizer = new LineTokenizer();
                lineTokenizer.setIncludeDelims(true);
                String newline = null;
                String line = lineTokenizer.getToken(in);
                while (line != null) {
                    if (line.length() == 0) {
                        out.newLine();
                    } else {
                        newline = filters.replaceTokens(line);
                        out.write(newline);
                    }
                    line = lineTokenizer.getToken(in);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) {
            BufferedReader in = null;
            BufferedWriter out = null;
            try {
                InputStreamReader isr = null;
                if (inputEncoding == null) {
                    isr = new InputStreamReader(source.getInputStream());
                } else {
                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                in = new BufferedReader(isr);
                OutputStream os = getOutputStream(dest, append, project);
                OutputStreamWriter osw;
                if (outputEncoding == null) {
                    osw = new OutputStreamWriter(os);
                } else {
                    osw = new OutputStreamWriter(os, outputEncoding);
                }
                out = new BufferedWriter(osw);
                if (filterChainsAvailable) {
                    ChainReaderHelper crh = new ChainReaderHelper();
                    crh.setBufferSize(FileUtils.BUF_SIZE);
                    crh.setPrimaryReader(in);
                    crh.setFilterChains(filterChains);
                    crh.setProject(project);
                    Reader rdr = crh.getAssembledReader();
                    in = new BufferedReader(rdr);
                }
                char[] buffer = new char[FileUtils.BUF_SIZE];
                while (true) {
                    int nRead = in.read(buffer, 0, buffer.length);
                    if (nRead == -1) {
                        break;
                    }
                    out.write(buffer, 0, nRead);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else if (source.as(FileProvider.class) != null && dest.as(FileProvider.class) != null) {
            File sourceFile = ((FileProvider) source.as(FileProvider.class)).getFile();
            File destFile = ((FileProvider) dest.as(FileProvider.class)).getFile();
            File parent = destFile.getParentFile();
            if (parent != null && !parent.isDirectory() && !destFile.getParentFile().mkdirs()) {
                throw new IOException(""failed to create the parent directory"" + "" for "" + destFile);
            }
            FileInputStream in = null;
            FileOutputStream out = null;
            FileChannel srcChannel = null;
            FileChannel destChannel = null;
            try {
                in = new FileInputStream(sourceFile);
                out = new FileOutputStream(destFile);
                srcChannel = in.getChannel();
                destChannel = out.getChannel();
                long position = 0;
                long count = srcChannel.size();
                while (position < count) {
                    position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel);
                }
            } finally {
                FileUtils.close(srcChannel);
                FileUtils.close(destChannel);
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = source.getInputStream();
                out = getOutputStream(dest, append, project);
                byte[] buffer = new byte[FileUtils.BUF_SIZE];
                int count = 0;
                do {
                    out.write(buffer, 0, count);
                    count = in.read(buffer, 0, buffer.length);
                } while (count != -1);
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        }
        if (preserveLastModified) {
            Touchable t = (Touchable) dest.as(Touchable.class);
            if (t != null) {
                setLastModified(t, source.getLastModified());
            }
        }
    }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    private static String digest(String val) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(val.trim().getBytes());
            byte[] digest = md.digest();
            StringBuffer buf = new StringBuffer();
            for (byte b : digest) {
                String hexString = Integer.toHexString(b);
                int length = hexString.length();
                if (length > 2) {
                    hexString = hexString.substring(length - 2, length);
                } else if (length < 2) {
                    hexString = ""0"" + hexString;
                }
                buf.append(hexString);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new EnerjyException(""Could not create digest: MD5"", e);
        }
    }
",0.0
"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient client = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        method.setEntity(entity);
        HttpResponse response = client.execute(method);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
","        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            if (lsm.isSelectionEmpty()) {
            } else {
                int selectedRow = lsm.getMinSelectionIndex();
                ChemModel model = modelContent.getValueAt(sortedModelContent.getSortedIndex(selectedRow));
                DADMLResult resource = (DADMLResult) model.getProperty(""org.openscience.cdk.internet.DADMLResult"");
                URL url = resource.getURL();
                try {
                    URLConnection connection = url.openConnection();
                    InputStreamReader input = new InputStreamReader(connection.getInputStream());
                    if (APIVersionTester.isBiggerOrEqual(""1.8"", editBus.getAPIVersion())) {
                        try {
                            editBus.showChemFile(input);
                            return;
                        } catch (Exception exception) {
                            logger.error(""EditBus error: "", exception.getMessage());
                            logger.debug(exception);
                        }
                    }
                    IChemObjectReader reader = readerFactory.createReader(input);
                    ChemFile chemFile = (ChemFile) reader.read(new ChemFile());
                    editBus.showChemFile(chemFile);
                } catch (FileNotFoundException exception) {
                    String error = ""Resource not found: "" + url;
                    logger.error(error);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                } catch (Exception exception) {
                    String error = ""Error while reading file: "" + exception.getMessage();
                    logger.error(error);
                    logger.debug(exception);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                }
                logger.warn(""Not displaying model with unknown content"");
            }
        }
",0.0
"    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    ClassFile getClassFile(String name) throws IOException, ConstantPoolException {
        URL url = getClass().getResource(name);
        InputStream in = url.openStream();
        try {
            return ClassFile.read(in);
        } finally {
            in.close();
        }
    }
",0.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    private void delete(String location) throws Exception {
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""DELETE"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
",0.0
"    public void testAuthentication() throws Exception {
        String host = ""localhost"";
        int port = 8080;
        URL url = new URL(""http://"" + host + "":"" + port + ""/"");
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""basic""));
        server.invoke(name, ""addAuthorization"", new Object[] { ""openjmx"", ""openjmx"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        server.invoke(name, ""start"", null, null);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        in = connection.getInputStream();
        in.close();
        assertEquals(((HttpURLConnection) connection).getResponseCode(), 401);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        connection.setRequestProperty(""Authorization"", ""basic b3BlbmpteDpvcGVuam14"");
        in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""none""));
    }
","    public RobotList<Float> sort_decr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value < distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }
",0.0
"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
","    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());
            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");
            OutputStream fos = new FileOutputStream(tempFile);
            syncServer.getServerModifications(command.getSession(), fos);
            InputStream fis = new FileInputStream(tempFile);
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
",0.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    public void execute() {
        check();
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(host, port);
        } catch (IOException ex) {
            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");
        }
        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());
        }
        try {
            try {
                if (!ftp.login(userid, password)) {
                    throw new BuildException(""Identification failed"");
                }
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (binary) {
                try {
                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);
                } catch (IOException ex) {
                    throw new BuildException(ex);
                }
                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());
                }
            }
            try {
                ftp.changeWorkingDirectory(remotedir);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());
            }
            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;
            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;
            BufferedOutputStream outstream = null;
            try {
                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));
                ftp.retrieveFile(remoteFullFileName, outstream);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");
            }
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException ex) {
                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");
            }
        }
    }
",0.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public WebHttpResponse execute(HttpRequest request) throws Exception {
        WebHttpResponse response = new WebHttpResponse(request);
        if (iSSLClassesAvailable == -1) {
            try {
                Class.forName(""javax.net.ssl.SSLSocket"");
                iSSLClassesAvailable = 1;
            } catch (ClassNotFoundException cnf) {
                iSSLClassesAvailable = 0;
            }
        }
        try {
            request.getClass().getMethod(""getThinkTime"", null);
            long thinkTime = request.getThinkTime();
            if (thinkTime > 0) Thread.sleep(thinkTime);
        } catch (Exception e) {
        }
        if (httpRequestHandler == null) {
            httpRequestHandler = new WebHttpRequestHandler();
        }
        currentPageNumber = request.getPageNumber();
        currentPageOrder = request.getPageOrder();
        long start = System.currentTimeMillis();
        if ((currentPageOrder == HttpRequest.PAGE_START) || (currentPageOrder == HttpRequest.PAGE_ONLY)) {
            pageStart = start;
            currentPageName = request.getURL();
        }
        if (iSSLClassesAvailable == 1 && request.getSecure() == true) {
            SSLHttpExecutor ssl = null;
            if (sslExecutor == null) sslExecutor = new WebSSLHttpExecutor(httpRequestHandler);
            ssl = (SSLHttpExecutor) sslExecutor;
            ssl.execute(request, response);
            setResponseEndingData(request, response, start);
            return response;
        } else if (iSSLClassesAvailable == 0 && request.getSecure() == true) {
            System.out.println(HttpResourceBundle.SSL_NOTSUPPORTED);
        }
        String strHost = request.getHost();
        int port = request.getPort();
        if (port != iLastPort || strLastHost == null || strHost.regionMatches(0, strLastHost, 0, strLastHost.length()) != true) {
            if ((connectToServer(response, strHost, port)) == false) {
                response.setCode(-1);
                return response;
            }
        }
        if (httpRequestHandler.sendRequest(request, to_server) == false) {
            if (connectToServer(response, strHost, port) == false) {
                response.setCode(-1);
                return response;
            } else {
                if (httpRequestHandler.sendRequest(request, to_server) == false) {
                    response.setCode(-1);
                    return response;
                }
            }
        }
        httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
        if (response.getCode() == 0) {
            if (connectToServer(response, strHost, port) == true) {
                if (httpRequestHandler.sendRequest(request, to_server) == true) {
                    httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
                }
            }
        }
        if (response.getShouldCloseSocket() == true) strLastHost = null;
        setResponseEndingData(request, response, start);
        return response;
    }
",0.0
"    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
","    @Override
    public void runTask(HashMap jobStack) throws Exception {
        String lstrFilter = (String) getResources().get(""filter"");
        String lstrTarget = (String) getResources().get(""target"");
        String lstrSource = (String) getResources().get(""source"");
        String[] lstrFilesFound = null;
        lstrFilesFound = searchForFiles(lstrSource, lstrFilter);
        if (lstrFilesFound != null) {
            for (int i = 0; i < lstrFilesFound.length; i++) {
                getLog().debug(""Found match ["" + lstrSource + File.separator + lstrFilesFound[i] + ""]"");
                File lfileSource = new File(lstrSource + File.separator + lstrFilesFound[i]);
                File lfileTarget = new File(lstrTarget + File.separator + lstrFilesFound[i]);
                FileChannel lfisInput = null;
                FileChannel lfosOutput = null;
                try {
                    lfisInput = new FileInputStream(lfileSource).getChannel();
                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();
                    int maxCount = (32 * 1024 * 1024) - (32 * 1024);
                    long size = lfisInput.size();
                    long position = 0;
                    while (position < size) {
                        position += lfisInput.transferTo(position, maxCount, lfosOutput);
                    }
                } finally {
                    if (lfisInput != null) {
                        lfisInput.close();
                    }
                    if (lfosOutput != null) {
                        lfosOutput.close();
                    }
                }
            }
        }
    }
",0.0
"    public void testPostWithGzip() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new GZIPCompressedEntity(new StringEntity(""test"")));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
","    public void updateMetaList() {
        metaserverModel.begin();
        serverCache.expire(EXPIRE_INTERVAL * 1000);
        final Map<String, MetaserverEntry> oldEntries = serverCache.getAll();
        final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST);
        assert localhostMetaserverEntry != null;
        metaserverModel.add(localhostMetaserverEntry);
        oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry));
        serverCache.put(localhostMetaserverEntry);
        try {
            final URL url = new URL(METASERVER_URL);
            final String httpProxy = System.getenv(""http_proxy"");
            if (httpProxy != null && httpProxy.length() > 0) {
                if (httpProxy.regionMatches(true, 0, ""http://"", 0, 7)) {
                    final String[] tmp = httpProxy.substring(7).replaceAll(""/.*"", """").split("":"", 2);
                    System.setProperty(""http.proxyHost"", tmp[0]);
                    System.setProperty(""http.proxyPort"", tmp.length >= 2 ? tmp[1] : ""80"");
                } else {
                    System.err.println(""Warning: unsupported http_proxy protocol: "" + httpProxy);
                }
            }
            final HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            try {
                conn.setRequestMethod(""GET"");
                conn.setUseCaches(false);
                conn.connect();
                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    final InputStream in = conn.getInputStream();
                    final InputStreamReader isr = new InputStreamReader(in, ""ISO-8859-1"");
                    try {
                        final BufferedReader br = new BufferedReader(isr);
                        try {
                            final MetaserverEntryParser metaserverEntryParser = new MetaserverEntryParser();
                            while (true) {
                                final String line = br.readLine();
                                if (line == null) {
                                    break;
                                }
                                final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line);
                                if (metaserverEntry != null) {
                                    metaserverModel.add(metaserverEntry);
                                    oldEntries.remove(ServerCache.makeKey(metaserverEntry));
                                    serverCache.put(metaserverEntry);
                                }
                            }
                        } finally {
                            br.close();
                        }
                    } finally {
                        isr.close();
                    }
                }
            } finally {
                conn.disconnect();
            }
        } catch (final IOException ignored) {
        }
        for (final MetaserverEntry metaserverEntry : oldEntries.values()) {
            metaserverModel.add(metaserverEntry);
        }
        metaserverModel.commit();
        serverCache.save();
    }
",0.0
"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
","    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
",0.0
"    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setHeader(""Content-type"", ""application/force-download"");
        response.setHeader(""Content-disposition"", ""attachment"");
        response.setHeader(""filename"", ""export.txt"");
        response.setHeader(""Pragma"", ""no-cache"");
        response.setHeader(""Expires"", ""0"");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        InputStream x = baseRequest.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(x, writer);
        String theString = writer.toString();
        System.out.println(theString);
        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\n""));
    }
","    private void updateHoraatendo(Integer codemp, Integer codfilial, Integer codatendo, String horaatendo, String horaatendofin) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(""update atatendimento set horaatendo=?, horaatendofin=? "");
        sql.append(""where codemp=? and codfilial=? and codatendo=?"");
        PreparedStatement ps = getConn().prepareStatement(sql.toString());
        ps.setTime(1, Funcoes.strTimeToSqlTime(horaatendo, false));
        ps.setTime(2, Funcoes.strTimeToSqlTime(horaatendofin, false));
        ps.setInt(3, codemp);
        ps.setInt(4, codfilial);
        ps.setInt(5, codatendo);
        ps.executeUpdate();
        ps.close();
        try {
            getConn().commit();
        } catch (SQLException e) {
            getConn().rollback();
        }
    }
",0.0
"    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
","    private void populateSessionId() throws IOException, java.net.MalformedURLException {
        String general_search_url = ""http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?"" + ""DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB"";
        String sidString = """", inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_search_url)).openStream()));
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.startsWith(""<INPUT TYPE=HIDDEN NAME=PID VALUE="")) {
                sidString = (inputLine.substring(inputLine.indexOf(""PID VALUE="") + 11, inputLine.indexOf("">"") - 1));
            }
        }
        sessionId = Integer.parseInt(sidString.trim());
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private static void getClasses(Collection<Class<?>> classes, String... packageNames) throws ClassNotFoundException {
        boolean recursive = true;
        for (String packageName : packageNames) {
            if (StringUtil.isEmpty(packageName)) continue;
            String packageDirName = packageName.replace('.', '/');
            Enumeration<URL> dirs = null;
            try {
                dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName);
                while (dirs.hasMoreElements()) {
                    URL url = dirs.nextElement();
                    String protocol = url.getProtocol();
                    if (""file"".equals(protocol)) {
                        String filePath = URLDecoder.decode(url.getFile(), DECODING);
                        getClassesByPackageFile(packageName, filePath, recursive, classes);
                    } else if (""jar"".equals(protocol)) {
                        JarFile jar = null;
                        try {
                            jar = ((JarURLConnection) url.openConnection()).getJarFile();
                            Enumeration<JarEntry> entries = jar.entries();
                            while (entries.hasMoreElements()) {
                                JarEntry entry = entries.nextElement();
                                String name = entry.getName();
                                if (name.charAt(0) == '/') {
                                    name = name.substring(1);
                                }
                                if (name.startsWith(packageDirName)) {
                                    int idx = name.lastIndexOf('/');
                                    if (idx != -1) {
                                        packageName = name.substring(0, idx).replace('/', '.');
                                    }
                                    if ((idx != -1) || recursive) {
                                        if (name.endsWith(JAVA_CLASS_SUFFIX) && !entry.isDirectory()) {
                                            String className = name.substring(packageName.length() + 1, name.length() - 6);
                                            classes.add(loadClass(packageName + '.' + className));
                                        }
                                    }
                                }
                            }
                        } catch (IOException e) {
                            LOG.error(""IOException when loading files from : "" + url, e);
                        }
                    }
                }
            } catch (IOException e) {
                LOG.error(""IOException when get classes from : "" + packageName, e);
            }
        }
    }
",0.0
"    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
","    public static String urlContentToString(URL url, String encoding) throws IOException {
        String out = """";
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));
        String line;
        while ((line = in.readLine()) != null) {
            out += line;
        }
        in.close();
        return out;
    }
",0.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
",1.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","        public void perform(Context context) {
            Long workflowIdParentProcess;
            SimpleProvider config;
            VariablesContext var;
            String xmldocument;
            Service service;
            Object[] param;
            String method;
            String wsurl;
            Object ret;
            Call call;
            URL url;
            try {
                var = Variables.getContext();
                if (var.get(""wsurl"") == null || var.get(""method"") == null) {
                    System.out.println(""----- Need the url of the webservice and the method! -----"");
                    log_.error(""Need the url of the webservice and the method!"");
                    return;
                }
                method = var.get(""method"");
                wsurl = var.get(""wsurl"");
                url = new java.net.URL(wsurl);
                try {
                    url.openConnection().connect();
                } catch (IOException ex) {
                    System.out.println(""----- Could not connect to the webservice! -----"");
                    log_.error(""Could not connect to the webservice!"");
                    return;
                }
                if (var.get(""param0"") == null || var.get(""param1"") == null) {
                    System.out.println(""----- Need parameters! -----"");
                    log_.error(""Need parameters!"");
                    return;
                }
                xmldocument = var.get(""param0"");
                workflowIdParentProcess = new Long(var.get(""param1""));
                param = new Object[] { xmldocument, workflowIdParentProcess };
                config = new SimpleProvider();
                config.deployTransport(""http"", new HTTPSender());
                service = new Service(config);
                call = (Call) service.createCall();
                call.setTargetEndpointAddress(new java.net.URL(wsurl));
                call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));
                try {
                    ret = call.invoke(param);
                    context.set(CTX_ANSW, ""=> notifyIhk invoked - Result: "" + ret);
                    System.out.println(""----- notifyIhk invoked! -----"");
                    log_.info(""notifyIhk invoked!"");
                } catch (RemoteException ex) {
                    System.out.println(""----- Could not invoke the method! -----"");
                    log_.error(""Could not invoke the method!"");
                }
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    private static String getHash(String hash, String clear) {
        try {
            MessageDigest md = MessageDigest.getInstance(hash);
            md.update(clear.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            String str = new String();
            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);
            return str;
        } catch (NoSuchAlgorithmException exc) {
        } catch (UnsupportedEncodingException exc) {
        }
        return """";
    }
",0.0
"    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
","    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    private static void generateSQLUpgradeFile(String milestoneDefFileName, String sqlDirectoryName, String fromMilestone, String destMilestone, String destFileName) throws Exception {
        File milestoneDefFile = new File(milestoneDefFileName);
        if (!milestoneDefFile.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : does not exists"");
        }
        if (!milestoneDefFile.isFile()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not a file"");
        }
        if (!milestoneDefFile.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + milestoneDefFileName + ""] : not readable"");
        }
        File sqlDirectory = new File(sqlDirectoryName);
        if (!sqlDirectory.exists()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : does not exists"");
        }
        if (!sqlDirectory.isDirectory()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not a directory"");
        }
        if (!sqlDirectory.canRead()) {
            throw new IllegalArgumentException(""Cannot read ["" + sqlDirectoryName + ""] : not readable"");
        }
        File destFile = new File(destFileName);
        if (destFile.exists()) {
            throw new IllegalArgumentException(""Cannot write to ["" + destFileName + ""] : already exists"");
        }
        destFile.createNewFile();
        SqlUpgradeXmlParser parser = SqlUpgradeXmlParser.newParser();
        FileInputStream milestoneDefFIS = null;
        try {
            milestoneDefFIS = new FileInputStream(milestoneDefFile);
            parser.parse(milestoneDefFIS);
        } catch (XMLParseException e) {
            printXmlError(e, milestoneDefFileName);
        } finally {
            try {
                if (milestoneDefFIS != null) milestoneDefFIS.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing inputstream "", e);
            }
        }
        int fromMilestoneIdx = parser.getMilestoneIndex(fromMilestone);
        int toMilestoneIdx = parser.getMilestoneIndex(destMilestone);
        if (fromMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade from milestone ["" + fromMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");
        }
        if (toMilestoneIdx < 0) {
            throw new IllegalArgumentException(""Cannot upgrade to milestone ["" + destMilestone + ""] : does not exist . (Exisiting milestones "" + parser.listMilestones() + "")"");
        }
        if (fromMilestoneIdx == toMilestoneIdx) {
            throw new IllegalArgumentException(""Cannot upgrade to the same milestone"");
        }
        List<String> files = parser.getFilesForMilestones(fromMilestoneIdx, toMilestoneIdx);
        List<String> views = parser.getViewsForMilestones(fromMilestoneIdx, toMilestoneIdx);
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(destFile);
            for (Iterator<String> it = files.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, sqlDirectory, it.next());
            }
            for (Iterator<String> it = views.iterator(); it.hasNext(); ) {
                appendFileToOutputStream(fos, sqlDirectory, it.next());
            }
        } catch (Exception e) {
            fos.close();
            destFile.delete();
            throw e;
        } finally {
            try {
                if (fos != null) fos.close();
            } catch (Exception e) {
                _logger.warn(""Exception caught when closing outputstream "", e);
            }
        }
        System.out.println(""An SQL update file has been generated to "" + destFileName + ""."");
    }
",0.0
"    private String getDocumentAsString(URL url) throws IOException {
        StringBuffer result = new StringBuffer();
        InputStream in = url.openStream();
        int c;
        while ((c = in.read()) != -1) result.append((char) c);
        return result.toString();
    }
","    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");
        }
        return response;
    }
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    private void saveVideo(URL url, DownloadTask task) {
        if (url == null) {
            return;
        }
        FileOutputStream out = null;
        InputStream stream = null;
        BufferedInputStream bis = null;
        BufferedOutputStream bos = null;
        File file = new File(task.source.getPreferredVideoLocation(""mp4""));
        publish(""Starting download to file:"" + file.getAbsolutePath());
        try {
            out = new FileOutputStream(file);
            URLConnection uc = url.openConnection();
            String contentType = uc.getContentType();
            int length = uc.getContentLength();
            StatisticsStorage.numberofdownloadedbytes += length;
            publish(""Content type: "" + contentType + "" with a length of "" + length);
            stream = uc.getInputStream();
            bis = new BufferedInputStream(stream);
            bos = new BufferedOutputStream(out);
            byte[] bytes = new byte[1024];
            int i = 0;
            long time = System.currentTimeMillis();
            int nextbyte;
            while ((nextbyte = bis.read()) != -1) {
                bos.write(nextbyte);
                i++;
                if (System.currentTimeMillis() - time >= 1000) {
                    publish(""downloaded "" + (i++) + "" bytes of "" + length + "" bytes."");
                    time = System.currentTimeMillis();
                    int progress = (i - 1) / length;
                    if (progress <= 100 && progress >= 0) setProgress(progress);
                }
            }
            bos.write(bytes);
        } catch (IOException e) {
            System.err.println(url);
            e.printStackTrace();
        } finally {
            try {
                if (out != null) out.close();
                if (stream != null) stream.close();
                if (bis != null) bis.close();
                if (bos != null) bos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        System.out.println(""done downloading video"");
        task.source.setVideo(file.getAbsolutePath());
        if (task.source.hasLyrics()) {
            task.source.getLyrics().setTag(""Video"", file.getName());
        }
    }
",0.0
"    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write(""test"".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info(""Wrote "" + bytesSaved + "" bytes to "" + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
","    public int executeUpdateJT(String sqlList[], Object[][] paramsList) {
        Connection connection = null;
        connection = this.getConnection();
        try {
            connection.setAutoCommit(false);
        } catch (SQLException e1) {
            e1.printStackTrace();
        }
        PreparedStatement preparedStatement = null;
        try {
            for (int i = 0; i < sqlList.length; i++) {
                System.out.println(sqlList[i]);
                if (connection != null && !connection.isClosed()) {
                    preparedStatement = connection.prepareStatement(sqlList[i]);
                    InputStream is = null;
                    int size = paramsList[i].length;
                    int curr = 0;
                    if (paramsList[i].length > 0) {
                        for (int j = 0; j < size; j++) {
                            Object obj = paramsList[i][j];
                            if (obj != null) {
                                curr++;
                                if (obj.getClass().equals(Class.forName(""java.io.File""))) {
                                    File file = (File) obj;
                                    is = new FileInputStream(file);
                                    preparedStatement.setBinaryStream(curr, is, (int) file.length());
                                } else if (obj.getClass().equals(Class.forName(""java.util.Date""))) {
                                    java.text.SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
                                    preparedStatement.setString(curr, sdf.format((Date) obj));
                                } else {
                                    preparedStatement.setObject(curr, obj);
                                }
                            }
                        }
                    }
                    preparedStatement.executeUpdate();
                    if (is != null) {
                        is.close();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(""发生错误，数据回滚！"");
            e.printStackTrace();
            try {
                connection.rollback();
                return 0;
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        try {
            connection.commit();
            return 1;
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                preparedStatement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                connection.close();
            } catch (SQLException e) {
                log.error(""未能正确关闭数据库连接！"", e);
                System.out.println(""未能正确关闭数据库连接！"");
                e.printStackTrace();
            }
        }
        return -1;
    }
",0.0
"    public Document getWsdlDomResource(String aResourceName) throws AeException {
        logger.debug(""getWsdlDomResource() "" + aResourceName);
        InputStream in = null;
        try {
            URL url = getDeploymentContext().getResourceURL(aResourceName);
            if (url == null) {
                logger.error(""url is null"");
                return null;
            } else {
                logger.debug(""loading wsdl document "" + aResourceName);
                in = url.openStream();
                return getSdlParser().loadWsdlDocument(in, null);
            }
        } catch (Throwable t) {
            logger.error(""Error: "" + t + "" for "" + aResourceName);
            throw new SdlDeploymentException(MessageFormat.format(""unable to load: {0} from {1}"", new Object[] { aResourceName, getDeploymentContext().getDeploymentLocation() }), t);
        } finally {
            AeCloser.close(in);
        }
    }
","    private File copyFile(File source, File destiny) {
        try {
            FileInputStream fileinputstream = new FileInputStream(source);
            FileOutputStream fileoutputstream = new FileOutputStream(destiny);
            byte abyte0[] = new byte[4096];
            int i;
            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);
            fileinputstream.close();
            fileoutputstream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        }
        return destiny;
    }
",0.0
"    @Test
    public void testGetResource_FileOutsideOfClasspath() throws Exception {
        File temp = File.createTempFile(""dozerfiletest"", "".txt"");
        temp.deleteOnExit();
        String resourceName = ""file:"" + temp.getAbsolutePath();
        URL url = loader.getResource(resourceName);
        assertNotNull(""URL should not be null"", url);
        InputStream is = url.openStream();
        assertNotNull(""input stream should not be null"", is);
    }
","    public static void copy(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",0.0
"    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
","    public static void zipFile(String file, String entry) throws IOException {
        FileInputStream in = new FileInputStream(file);
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file + "".zip""));
        out.putNextEntry(new ZipEntry(entry));
        byte[] buffer = new byte[4096];
        int bytes_read;
        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
        in.close();
        out.closeEntry();
        out.close();
        File fin = new File(file);
        fin.delete();
    }
",0.0
"    public void createNewFile(String filePath, InputStream in) throws IOException {
        FileOutputStream out = null;
        try {
            File file = newFileRef(filePath);
            FileHelper.createNewFile(file, true);
            out = new FileOutputStream(file);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
",1.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        log.println(""\nCalculating digest ...\n"");
        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
        md5.update(dataArea.getText().getBytes(""UTF8""));
        byte[] digest = md5.digest();
        log.println(""digest:\n"" + formatAsHexString(digest));
        log.println(""Done."");
        setEncodedDigest(encodeFromBytes(digest));
    }
",0.0
"    private String getImageUrlForComicsJoke(Date date, String baseURL, String imageDefinition, int imagePathStart) throws JokeFinderException {
        String imageUrl = null;
        try {
            imageUrl = getBaseImageComicsJoke(date, baseURL, imageDefinition, imagePathStart);
            URL url = new URL(imageUrl);
            url.openStream();
        } catch (JokeFinderException e) {
            logger.warn(""Couldn't find base URL."", e);
            imageUrl = null;
        } catch (IOException e) {
            logger.warn(""Couldn't find or open image base URL."", e);
            imageUrl = null;
        }
        if (imageUrl == null) {
            throw new JokeFinderException(""Couldn't find joke."");
        }
        return imageUrl;
    }
","    public static void main(String args[]) throws Exception {
        currTime = getCurrentTimestamp();
        String sqlDoc = """";
        String sqlVersion = """";
        String sqlDocVersion = """";
        String sqlContent = """";
        String sqlDocDetail = """";
        String sqlRoot = """";
        java.util.Properties props = new java.util.Properties();
        String path = new LoadDocumentData().getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        if (!path.endsWith(""/"")) {
            path += ""/"";
        }
        path += ""generate.properties"";
        if (!path.startsWith(""/"")) {
            path = ""/"" + path;
        }
        java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(path));
        props.load(fis);
        author = props.getProperty(""author"");
        srcPath = props.getProperty(""srcPath"");
        driverStr = props.getProperty(""driverStr"");
        dbConnStr = props.getProperty(""dbConnStr"");
        dbUsername = props.getProperty(""dbUsername"");
        dbPassword = props.getProperty(""dbPassword"");
        openDBConn();
        stat = conn.createStatement();
        Hashtable htTableKey = new Hashtable();
        htTableKey = getTableKey(conn);
        genUserDefinedIndex(conn, htTableKey);
        Integer ownerID = new Integer(0);
        Integer nDocID = new Integer(1);
        Integer nDocDetailID = new Integer(1);
        Integer nVersionID = new Integer(1);
        Integer nContentID = new Integer(1);
        Integer nDmsRootID = new Integer(1);
        Integer nMtmDocVersionID = new Integer(1);
        Integer nParentID = null;
        Integer nRootID = null;
        String sName = ""1000000001.txt"";
        String sConvertedName = ""1000000001"";
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            nDocID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            nDocDetailID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT_DETAIL"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            nVersionID = new Integer(((Integer) htTableKey.get(""DMS_VERSION"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            nContentID = new Integer(((Integer) htTableKey.get(""DMS_CONTENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_ROOT"")) {
            nDmsRootID = new Integer(((Integer) htTableKey.get(""DMS_ROOT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            nMtmDocVersionID = new Integer(((Integer) htTableKey.get(""MTM_DOCUMENT_VERSION"")).intValue() + 1);
        }
        int nStart = (new Integer(args[0])).intValue();
        int nEnd = (new Integer(args[1])).intValue();
        nParentID = new Integer(args[2]);
        Integer nRootParentID = new Integer(args[2]);
        nRootID = new Integer(args[3]);
        String sPhysicalLoc = new String(args[4]);
        indexPath = new String(args[5]);
        System.out.println(""rootID : "" + nRootID + ""  ParentID "" + nParentID + "" physical Loc = "" + sPhysicalLoc);
        String sFieldValue = """";
        PreparedStatement preStat = null;
        String sDocName = """";
        int count = 0;
        int total = 0;
        FileInputStream infile = new FileInputStream(new File(sPhysicalLoc + sName));
        byte[] buffer = new byte[infile.available()];
        infile.read(buffer);
        String inFileData = new String(buffer);
        for (int i = nStart; i <= nEnd; i++) {
            try {
                sFieldValue = ""REF"" + i;
                sDocName = Calendar.getInstance().getTimeInMillis() + "".tif"";
                dmsDocument.setID(nDocID);
                dmsDocument.setDocumentType(""D"");
                dmsDocument.setParentID(nParentID);
                dmsDocument.setRootID(nRootID);
                dmsDocument.setCreateType(""S"");
                dmsDocument.setReferenceNo(""Ref Num"");
                dmsDocument.setDescription(""desc"");
                dmsDocument.setUdfDetailList(new ArrayList());
                dmsDocument.setEffectiveStartDate(currTime);
                dmsDocument.setItemSize(new Integer(20480));
                dmsDocument.setItemStatus(""A"");
                dmsDocument.setOwnerID(new Integer(0));
                dmsDocument.setUpdateCount(new Integer(0));
                dmsDocument.setCreatorID(new Integer(0));
                dmsDocument.setCreateDate(currTime);
                dmsDocument.setUpdaterID(new Integer(0));
                dmsDocument.setUpdateDate(currTime);
                dmsDocument.setRecordStatus(""A"");
                if (count % 500 == 0) {
                    sDocName = ""TestDocument"" + i;
                    dmsDocument.setDocumentName(sDocName);
                    dmsDocument.setDocumentType(""F"");
                    sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','F',"" + nRootParentID + "","" + nRootID.toString() + "", 'S', '"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 0, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                    preStat = conn.prepareStatement(sqlDoc);
                    preStat.executeUpdate();
                    nParentID = nDocID;
                    nDocID = new Integer(nDocID.intValue() + 1);
                }
                total = count + nStart;
                System.out.println(""xxx Count: "" + total + "" docID = "" + nDocID);
                sDocName = ""TestFullText"" + i + "".txt"";
                dmsDocument.setDocumentName(sDocName);
                sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','D',"" + nParentID.toString() + "","" + nRootID.toString() + "", 'S','"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 20480, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDoc);
                preStat.executeUpdate();
                sqlDocDetail = ""INSERT INTO DMS_DOCUMENT_DETAIL VALUES("" + nDocDetailID.toString() + "","" + nDocID.toString() + "","" + sUdfID + "","" + sUdfDetailID + "",'"" + sFieldValue + ""', null, null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocDetail);
                preStat.executeUpdate();
                dmsDocument.setUserDefinedFieldID(new Integer(sUdfID));
                sqlContent = "" INSERT INTO DMS_CONTENT VALUES ("" + nContentID.toString() + "","" + sConvertedName + "", 'IMAGE', null, 'TIF', 'A', 0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlContent);
                preStat.executeUpdate();
                dmsDocument.setContentID(nContentID);
                sqlVersion = ""INSERT INTO DMS_VERSION VALUES("" + nVersionID.toString() + "", "" + nDocID.toString() + "", 1,'ROOT',0,"" + nContentID.toString() + "",0, 'Ref Num', 'desc', 20480, 'A', null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlVersion);
                preStat.executeUpdate();
                dmsDocument.setVersionID(nVersionID);
                dmsDocument.setVersionID(new Integer(1));
                dmsDocument.setVersionLabel(""ROOT"");
                sqlDocVersion = ""INSERT INTO MTM_DOCUMENT_VERSION VALUES("" + nMtmDocVersionID.toString() + "","" + nDocID.toString() + "","" + nVersionID.toString() + "",'A', 0, 0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocVersion);
                preStat.executeUpdate();
                nDocID = new Integer(nDocID.intValue() + 1);
                nDocDetailID = new Integer(nDocDetailID.intValue() + 1);
                nVersionID = new Integer(nVersionID.intValue() + 1);
                nContentID = new Integer(nContentID.intValue() + 1);
                nDmsRootID = new Integer(nDmsRootID.intValue() + 1);
                nMtmDocVersionID = new Integer(nMtmDocVersionID.intValue() + 1);
                SessionContainer sessionContainer = new SessionContainer();
                if (""D"".equals(dmsDocument.getDocumentType())) {
                    File outFile = new File(sPhysicalLoc + ""temp.txt"");
                    PrintStream out = new PrintStream(new FileOutputStream(outFile, false), true);
                    out.println(formatNumber(i));
                    out.print(inFileData);
                    try {
                        out.close();
                    } catch (Exception ignore) {
                        out = null;
                    }
                    FileInputStream data = new FileInputStream(outFile);
                    indexDocument(dmsDocument, data, GlobalConstant.OP_MODE_INSERT);
                    try {
                        data.close();
                    } catch (Exception ignore) {
                        data = null;
                    }
                }
                count++;
            } catch (Exception ee) {
                log.error(ee, ee);
                conn.rollback();
            } finally {
                try {
                    preStat.close();
                    conn.rollback();
                } catch (Exception ep) {
                }
            }
        }
        try {
            infile.close();
        } catch (Exception ignore) {
            infile = null;
        }
        PreparedStatement statment = null;
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT', "" + nDocID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocDetailID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT_DETAIL'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT_DETAIL', "" + nDocDetailID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nVersionID.toString() + "" WHERE TABLE_NAME='DMS_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_VERSION', "" + nVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nContentID.toString() + "" WHERE TABLE_NAME='DMS_CONTENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_CONTENT', "" + nContentID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nMtmDocVersionID.toString() + "" WHERE TABLE_NAME='MTM_DOCUMENT_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('MTM_DOCUMENT_VERSION', "" + nMtmDocVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        statment.close();
        System.out.println(""final value: "" + "" DocumentID "" + nDocID + "" DocDetailID "" + nDocDetailID + "" DocVersion "" + nVersionID + "" DocContent "" + nContentID + "" nMtmDocVersionID "" + nMtmDocVersionID);
        closeDBConn();
    }
",0.0
"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
","    private void playAudio(String mediaUrl) {
        try {
            URLConnection cn = new URL(mediaUrl).openConnection();
            InputStream is = cn.getInputStream();
            mediaFile = new File(this.getCacheDir(), ""mediafile"");
            FileOutputStream fos = new FileOutputStream(mediaFile);
            byte buf[] = new byte[16 * 1024];
            Log.i(""FileOutputStream"", ""Download"");
            do {
                int numread = is.read(buf);
                if (numread <= 0) break;
                fos.write(buf, 0, numread);
            } while (true);
            fos.flush();
            fos.close();
            Log.i(""FileOutputStream"", ""Saved"");
            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {

                public void onCompletion(MediaPlayer mp) {
                    mp.release();
                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");
                }
            };
            mixPlayer.setOnCompletionListener(listener);
            FileInputStream fis = new FileInputStream(mediaFile);
            mixPlayer.setDataSource(fis.getFD());
            mixPlayer.prepare();
            Log.i(""MediaPlayer"", ""Start Player"");
            loading = false;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1.0
"    public static String md5(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException exception) {
            LOGGER.warn(exception.getMessage());
        }
        byte[] md5hash = new byte[32];
        try {
            md.update(string.getBytes(""iso-8859-1""), 0, string.length());
        } catch (UnsupportedEncodingException exception) {
            LOGGER.warn(exception.getMessage());
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    @SuppressWarnings(""deprecation"")
    public void testMemberIterator() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember0 = iter.next();
        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());
        assertEquals(""wrong 1k member count"", 1024, count0);
        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());
        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());
        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember1 = iter.next();
        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());
        assertEquals(""wrong 32k member count"", (32 * 1024), count1);
        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());
        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember2 = iter.next();
        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());
        assertEquals(""wrong 1-byte member count"", 1, count2);
        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());
        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember3 = iter.next();
        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());
        assertEquals(""wrong 5-byte member count"", 5, count3);
        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());
        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        assertFalse(iter.hasNext());
    }
",0.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public static void copyFile(File in, File out, boolean copyModified) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
            if (copyModified) out.setLastModified(in.lastModified());
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public synchronized void connect() throws FTPConnectionException {
        checkLocked();
        try {
            int reply;
            this.disconnect();
            if (isSecured()) {
                this.client = new FTPSClient(protocol, protection, impliciteSec, null, null);
            } else {
                this.client = new FTPClient();
            }
            if (this.controlEncoding != null) {
                this.client.setControlEncoding(this.controlEncoding);
                debug(""control encoding : "", controlEncoding);
            }
            Logger.defaultLogger().info(""Trying to connect to server : "" + this.remoteServer + "" ..."");
            debug(""connect : connect"", remoteServer);
            client.connect(remoteServer, this.remotePort);
            Logger.defaultLogger().info(""Received FTP server response : "" + formatFTPReplyString(client.getReplyString()));
            this.connectionId = Util.getRndLong();
            reply = client.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                String msg = formatFTPReplyString(client.getReplyString());
                this.disconnect();
                throw new FTPConnectionException(""Unable to communicate with remote FTP server. Got message : "" + msg);
            } else {
                Logger.defaultLogger().info(""Trying to log in with user : "" + this.login + "" ..."");
                debug(""connect : login"", login + ""/"" + password);
                if (!client.login(this.login, this.password)) {
                    String msg = formatFTPReplyString(client.getReplyString());
                    this.disconnect();
                    throw new FTPConnectionException(""Unable to login on FTP server ("" + login + ""/"" + password + ""). Received response : "" + msg);
                } else {
                    Logger.defaultLogger().info(""Logged in with user : "" + this.login + "". Received response : "" + formatFTPReplyString(client.getReplyString()));
                    if (this.passivMode) {
                        Logger.defaultLogger().info(""Switching to passive mode ..."");
                        debug(""connect : pasv"");
                        client.enterLocalPassiveMode();
                        reply = client.getReplyCode();
                        if (!FTPReply.isPositiveCompletion(reply)) {
                            String msg = formatFTPReplyString(client.getReplyString());
                            this.disconnect();
                            throw new FTPConnectionException(""Unable to switch to passiv mode. Received response : "" + msg);
                        } else {
                            this.updateOpTime();
                        }
                    } else {
                        this.updateOpTime();
                    }
                    debug(""connect : bin"");
                    client.setFileType(FTP.BINARY_FILE_TYPE);
                    Logger.defaultLogger().info(""Connected to server : "" + this.remoteServer);
                }
            }
        } catch (UnknownHostException e) {
            resetClient(e);
            throw new FTPConnectionException(""Unknown FTP server : "" + this.remoteServer);
        } catch (SocketException e) {
            resetClient(e);
            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());
        } catch (IOException e) {
            resetClient(e);
            throw new FTPConnectionException(""Error during FTP connection : "" + e.getMessage());
        } finally {
            clearCache();
        }
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    public static String SHAEncrypt(String originalString) {
        String encryptedString = new String("""");
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(originalString.getBytes());
            byte b[] = md.digest();
            for (int i = 0; i < b.length; i++) {
                char[] digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] ob = new char[2];
                ob[0] = digit[(b[i] >>> 4) & 0X0F];
                ob[1] = digit[b[i] & 0X0F];
                encryptedString += new String(ob);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return encryptedString;
    }
",1.0
"        public void actionPerformed(ActionEvent e) {
            try {
                URL url = new URL(""http://mailsomething.sf.net/helppages.xml"");
                try {
                    File file = File.createTempFile(""temp"", ""xml"");
                    InputStream in = new BufferedInputStream(url.openStream());
                    OutputStream out = new FileOutputStream(file);
                    byte[] buf = new byte[1024];
                    int n;
                    while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
                    out.flush();
                    out.close();
                    module.merge(file);
                } catch (IOException f) {
                }
            } catch (MalformedURLException f) {
            }
        }
","    public static void copy(String inputFile, String outputFile) throws EDITSException {
        try {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
            throw new EDITSException(""Could not copy "" + inputFile + "" into "" + outputFile + "" because:\n"" + e.getMessage());
        }
    }
",0.0
"    public static byte[] getBytesFromURL(URL url) throws IOException {
        byte[] b;
        URLConnection con = url.openConnection();
        int size = con.getContentLength();
        InputStream s = con.getInputStream();
        try {
            if (size <= 0) b = IOUtil.getBytesFromStream(s); else {
                b = new byte[size];
                int len = 0;
                do {
                    int n = s.read(b, len, size - len);
                    if (n < 0) throw new IOException(""the stream was closed: "" + url.toString());
                    len += n;
                } while (len < size);
            }
        } finally {
            s.close();
        }
        return b;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + ""\n"");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
","    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",0.0
"    public void testUnavailable() throws Exception {
        URL url = null;
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");
        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));
        assertTrue(context.getServletHandler().isAvailable());
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");
        try {
            IO.toString(url.openStream());
        } catch (IOException e) {
        }
        assertFalse(context.getServletHandler().isAvailable());
        Thread.sleep(4000);
        assertTrue(context.getServletHandler().isAvailable());
    }
","    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    @Override
    public void excluir(QuestaoDiscursiva q) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""DELETE FROM questao WHERE id_questao=?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, q.getIdQuestao());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    @Override
    protected void initializeGraphicalViewer() {
        super.initializeGraphicalViewer();
        getGraphicalViewer().setEditPartFactory(fact);
        ITypeRoot tr = sourceEditor.getInputElement();
        try {
            getGraphicalViewer().setContents(tr);
            ((DesignTimeComponent) fact.getTopPart().getModelChildren().get(0)).addListener(new DesignTimeListener() {

                public void handleUpdate(DesignTimeComponent comp) {
                    updateSourceWithComponent(comp.getTopLevel());
                }
            });
        } catch (Throwable e) {
            e.printStackTrace();
        }
        getGraphicalViewer().addSelectionChangedListener(new ISelectionChangedListener() {

            public void selectionChanged(SelectionChangedEvent arg0) {
                if (getSelectedComponent() == null) {
                    return;
                }
                PropertySheetPage propertySheet = ((PropertySheetPage) getAdapter(IPropertySheetPage.class));
                propertySheet.selectionChanged(getSite().getPart(), new StructuredSelection(getSelectedComponent()));
                try {
                } catch (Throwable e) {
                    e.printStackTrace();
                }
            }
        });
        getGraphicalViewer().setContextMenu(contextMenu);
        contextMenu.addMenuListener(this);
    }
",0.0
"    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
","    public void write(String resource, String destinationPath) throws IOException, CoreException {
        OutputStream output = null;
        InputStream contentStream = null;
        try {
            contentStream = new BufferedInputStream(new FileInputStream(resource));
            output = new BufferedOutputStream(new FileOutputStream(destinationPath));
            int available = contentStream.available();
            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;
            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);
            byte[] readBuffer = new byte[chunkSize];
            int n = contentStream.read(readBuffer);
            while (n > 0) {
                output.write(readBuffer, 0, n);
                n = contentStream.read(readBuffer);
            }
        } finally {
            if (contentStream != null) {
                try {
                    contentStream.close();
                } catch (IOException e) {
                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);
                }
            }
            if (output != null) {
                output.close();
            }
        }
    }
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public static boolean sendInformation(String reportType, HashMap<String, String> data) {
        if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_UDC)) {
            logger.debug(""Report usage information to devs..."");
            String transferData = ""reportType="" + reportType;
            transferData += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");
            transferData += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);
            for (String key : data.keySet()) {
                transferData += ""&Suppl-"" + key + ""="" + data.get(key);
            }
            try {
                URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/UsageReport"");
                URLConnection conn = url.openConnection();
                conn.setDoOutput(true);
                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
                writer.write(transferData);
                writer.flush();
                StringBuffer answer = new StringBuffer();
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    answer.append(line + ""\r\n"");
                }
                writer.close();
                reader.close();
                logger.debug(""UDC Server answer: "" + answer.toString());
            } catch (Exception e) {
                CrashReporter.reportException(e);
                logger.debug(""Could not report usage data: "" + e.toString());
                return false;
            }
            return true;
        } else {
            logger.debug(""Reporting not wished!"");
            return false;
        }
    }
",0.0
"    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
","    public static void copy(File from_file, File to_file) throws IOException {
        from_file = checkFile(from_file);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String getHashCode(String text) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",1.0
"    private void copyResource(String relResourceName) {
        String projectName = layout.getRootDir().getName();
        String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;
        InputStream source = getClass().getResourceAsStream(resourceName);
        if (source == null) {
            throw new RuntimeException(""couldn't find resource "" + resourceName);
        }
        File dest = new File(layout.getRootDir(), relResourceName);
        dest.getParentFile().mkdirs();
        dest.createNewFile();
        InputStreamReader in = new InputStreamReader(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                IOUtils.closeQuietly(out);
            }
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    public static String[] getHints(String query) {
        try {
            URL url = new URL(""http://www.ebi.ac.uk/integr8/OrganismSearch.do?action=orgNames&orgName="" + query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String dest = new String();
            while ((inputLine = in.readLine()) != null) dest = dest.concat(inputLine);
            in.close();
            Matcher m = taxonPattern.matcher(dest);
            ArrayList<String> strings = new ArrayList<String>();
            while (m.find()) {
                strings.add(m.group(1));
            }
            return strings.toArray(new String[] {});
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new String[0];
    }
",0.0
"    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
","    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), ""utf-8"");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error(""fail to write file"", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            if (lsm.isSelectionEmpty()) {
            } else {
                int selectedRow = lsm.getMinSelectionIndex();
                ChemModel model = modelContent.getValueAt(sortedModelContent.getSortedIndex(selectedRow));
                DADMLResult resource = (DADMLResult) model.getProperty(""org.openscience.cdk.internet.DADMLResult"");
                URL url = resource.getURL();
                try {
                    URLConnection connection = url.openConnection();
                    InputStreamReader input = new InputStreamReader(connection.getInputStream());
                    if (APIVersionTester.isBiggerOrEqual(""1.8"", editBus.getAPIVersion())) {
                        try {
                            editBus.showChemFile(input);
                            return;
                        } catch (Exception exception) {
                            logger.error(""EditBus error: "", exception.getMessage());
                            logger.debug(exception);
                        }
                    }
                    IChemObjectReader reader = readerFactory.createReader(input);
                    ChemFile chemFile = (ChemFile) reader.read(new ChemFile());
                    editBus.showChemFile(chemFile);
                } catch (FileNotFoundException exception) {
                    String error = ""Resource not found: "" + url;
                    logger.error(error);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                } catch (Exception exception) {
                    String error = ""Error while reading file: "" + exception.getMessage();
                    logger.error(error);
                    logger.debug(exception);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                }
                logger.warn(""Not displaying model with unknown content"");
            }
        }
",0.0
"    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
","    public void put(File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(fileToPut.getName(), input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }
",0.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
",0.0
"    public static JSONObject getFriend(long uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(FRIENDS_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""uids"", arrayToString(new long[] { uid }, "","")));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            return result.getJSONObject(0);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
","    @Override
    @RemoteMethod
    public boolean decrypt(int idAnexo) {
        try {
            Anexo anexo = anexoService.selectById(idAnexo);
            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);
            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);
            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());
            IOUtils.copy(cis, fos);
            cis.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void copy(File from_file, File to_file) throws IOException {
        from_file = checkFile(from_file);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_file.getName());
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) {
                to.write(buffer, 0, bytes_read);
            }
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",1.0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    @Override
    public void copy(final String fileName) throws FileIOException {
        try {
            if (opened) {
                fileChannel.position(0);
            } else {
                fileChannel = new FileInputStream(file).getChannel();
            }
            FileChannel dstChannel = null;
            try {
                dstChannel = new FileOutputStream(fileName).getChannel();
                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());
            } finally {
                try {
                    if (dstChannel != null) {
                        dstChannel.close();
                    }
                } catch (Exception exception) {
                }
            }
            if (opened) {
                fileChannel.position(currentPositionInFile);
            } else {
                fileChannel.close();
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);
        }
    }
",0.0
"    void queryFile(String rendezvousProgram, String rendezvousMD5) {
        try {
            XMLConfigParser.readUrlHost();
            String url = XMLConfigParser.urlHost;
            String query;
            String param1 = ""op=query"";
            String param2 = ""program="" + rendezvousProgram;
            String param3 = ""md5="" + rendezvousMD5;
            query = String.format(""%s&%s&%s"", param1, param2, param3);
            openConnection(query, url);
            String line = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
","    private void playAudio(String mediaUrl) {
        try {
            URLConnection cn = new URL(mediaUrl).openConnection();
            InputStream is = cn.getInputStream();
            mediaFile = new File(this.getCacheDir(), ""mediafile"");
            FileOutputStream fos = new FileOutputStream(mediaFile);
            byte buf[] = new byte[16 * 1024];
            Log.i(""FileOutputStream"", ""Download"");
            do {
                int numread = is.read(buf);
                if (numread <= 0) break;
                fos.write(buf, 0, numread);
            } while (true);
            fos.flush();
            fos.close();
            Log.i(""FileOutputStream"", ""Saved"");
            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {

                public void onCompletion(MediaPlayer mp) {
                    mp.release();
                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");
                }
            };
            mixPlayer.setOnCompletionListener(listener);
            FileInputStream fis = new FileInputStream(mediaFile);
            mixPlayer.setDataSource(fis.getFD());
            mixPlayer.prepare();
            Log.i(""MediaPlayer"", ""Start Player"");
            loading = false;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    public static final InputStream getInputStream(final String location) {
        final File f = new File(location);
        if (f.exists()) {
            try {
                return new FileInputStream(f);
            } catch (final FileNotFoundException e) {
                throw new Error(e);
            }
        }
        URL url = Iotil.class.getClassLoader().getResource(location);
        try {
            if (url == null) {
                url = new URL(location);
            }
            return url.openStream();
        } catch (final IOException e) {
            throw new RuntimeException(e);
        }
    }
","    protected Template read(URL url) throws TemplateException {
        String parent = Parent(url);
        TemplateLoaderContext context = new TemplateLoaderContext(this, parent, false);
        String contents;
        InputStream in = null;
        try {
            in = url.openStream();
            contents = this.readToString(new java.io.InputStreamReader(in));
        } catch (IOException exc) {
            throw new TemplateException(url.toString(), exc);
        } finally {
            try {
                in.close();
            } catch (IOException ignore) {
            }
        }
        TemplateParser parser = this.parser;
        if (null == parser) return (new Template(contents, context)); else return (new Template(parser, contents, context));
    }
",0.0
"    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
","    private static void fileUpload() throws Exception {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        file = new File(""h:/Sakura haruno.jpg"");
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart(""Filename"", new StringBody(file.getName()));
        mpEntity.addPart(""Filedata"", cbFile);
        httppost.setEntity(mpEntity);
        System.out.println(""executing request "" + httppost.getRequestLine());
        System.out.println(""Now uploading your file into ugotfile.com"");
        HttpResponse response = httpclient.execute(httppost);
        System.out.println(response.getStatusLine());
        if (response != null) {
            uploadresponse = EntityUtils.toString(response.getEntity());
        }
        System.out.println(""Upload Response : "" + uploadresponse);
        downloadlink = parseResponse(uploadresponse, ""[\"""", ""\"""");
        downloadlink = downloadlink.replaceAll(""\\\\/"", ""/"");
        deletelink = parseResponse(uploadresponse, ""\"",\"""", ""\"""");
        deletelink = deletelink.replaceAll(""\\\\/"", ""/"");
        System.out.println(""Download Link : "" + downloadlink);
        System.out.println(""Delete Link : "" + deletelink);
    }
",0.0
"    private List<String> readDescriptor(URL url) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            List<String> lines = new ArrayList<String>();
            String line = reader.readLine();
            while (line != null) {
                line = line.trim();
                if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);
                line = reader.readLine();
            }
            return lines;
        } catch (IOException e) {
            throw new ExtensionException(""Failed to read extension descriptor '%s'"", e).withArgs(url);
        } finally {
            IoUtil.closeQuietly(reader);
        }
    }
","    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""We will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",0.0
"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    private void loadDBConfig(final String adapter) throws IOException {
        final URL url = getClass().getClassLoader().getResource(""adapter/"" + adapter + "".properties"");
        _props = new Properties();
        _props.load(url.openStream());
        _init = true;
    }
",0.0
"    public void dumpToFile(File file) throws IOException {
        OutputStream out = new FileOutputStream(file);
        if (contentStream != null) {
            IOUtils.copy(contentStream, out);
            setPath(file.getAbsolutePath());
        } else {
            IOUtils.write(getContent(), out);
        }
        IOUtils.closeQuietly(out);
    }
","    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.close(fis);
            }
        }
    }
",1.0
"    public void setImage(java.awt.Image img) {
        if (imageName != null && imageName.length() > 0) {
            try {
                InputStream url = currentProject.getUrl(imageName).openStream();
                image = new org.eclipse.swt.graphics.Image(getDisplay(), url);
            } catch (IOException e) {
                e.printStackTrace();
            }
            Display.getDefault().asyncExec(new Runnable() {

                public void run() {
                    redraw();
                }
            });
        }
    }
","    public boolean checkWebsite(String URL, String content) {
        boolean run = false;
        try {
            URL url = new URL(URL + ""?a="" + Math.random());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = reader.readLine()) != null) {
                if (line.contains(content)) {
                    run = true;
                }
            }
        } catch (Exception e) {
            run = false;
        }
        return run;
    }
",0.0
"    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance(""SHA-1"");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error(""NoSuchAlgorithmException while digesting"", e);
        }
        return digest;
    }
","    private static String myCrypt(String password, String seed) throws RuntimeException {
        String out = null;
        int count = 8;
        MessageDigest digester;
        if (!seed.substring(0, 3).equals(""$H$"")) {
            byte[] randomBytes = new byte[6];
            java.util.Random randomGenerator = new java.util.Random();
            randomGenerator.nextBytes(randomBytes);
            seed = genSalt(randomBytes);
        }
        String salt = seed.substring(4, 12);
        if (salt.length() != 8) {
            throw new RuntimeException(""Error hashing password - Invalid seed."");
        }
        byte[] sha1Hash = new byte[40];
        try {
            digester = MessageDigest.getInstance(""SHA-1"");
            digester.update((salt + password).getBytes(""iso-8859-1""), 0, (salt + password).length());
            sha1Hash = digester.digest();
            do {
                byte[] CombinedBytes = new byte[sha1Hash.length + password.length()];
                System.arraycopy(sha1Hash, 0, CombinedBytes, 0, sha1Hash.length);
                System.arraycopy(password.getBytes(""iso-8859-1""), 0, CombinedBytes, sha1Hash.length, password.getBytes(""iso-8859-1"").length);
                digester.update(CombinedBytes, 0, CombinedBytes.length);
                sha1Hash = digester.digest();
            } while (--count > 0);
            out = seed.substring(0, 12);
            out += encode64(sha1Hash);
        } catch (NoSuchAlgorithmException Ex) {
            log.error(""Error hashing password."", Ex);
        } catch (UnsupportedEncodingException Ex) {
            log.error(""Error hashing password."", Ex);
        }
        if (out == null) {
            throw new RuntimeException(""Error hashing password - out = null"");
        }
        return out;
    }
",1.0
"    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
","    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    public void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
        File archive = new File(EncoderPlugin.getDefault().getStateLocation().toFile(), ""ffmpeg-0.5.zip"");
        String message = ""Downloading FFMpeg, contacting downloads.sourceforge.net"";
        LOGGER.info(message);
        monitor.beginTask(message, 1);
        HttpClient client = new HttpClient();
        HttpMethod method = new GetMethod(DOWNLOAD_URI);
        int statusCode = HttpStatus.SC_SERVICE_UNAVAILABLE;
        try {
            statusCode = client.executeMethod(method);
        } catch (HttpException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception);
        } catch (IOException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception);
        }
        if (statusCode != HttpStatus.SC_OK) {
            LOGGER.error(MessageFormat.format(""Can't download ffmpeg.zip from zourceforge, "" + ""status = [{0}]"", statusCode));
            monitor.setCanceled(true);
            return;
        }
        monitor.worked(1);
        Header header = method.getResponseHeader(""Content-Length"");
        long contentLength = 3173544;
        if (header != null) {
            try {
                contentLength = Long.parseLong(header.getValue());
            } catch (NumberFormatException nfe) {
            }
        }
        monitor.beginTask(""Downloading FFMpeg, "" + DOWNLOAD_URI, (int) contentLength);
        OutputStream archiveOutput = null;
        try {
            archiveOutput = new FileOutputStream(archive);
        } catch (FileNotFoundException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception, ""Can't write temporary download file"");
        }
        InputStream responseInput = null;
        try {
            responseInput = method.getResponseBodyAsStream();
        } catch (IOException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception);
        }
        byte[] buffer = new byte[1024 * 4];
        int count = -1;
        try {
            while ((count = responseInput.read(buffer)) != -1) {
                if (monitor.isCanceled()) {
                    return;
                }
                archiveOutput.write(buffer, 0, count);
                monitor.worked(count);
            }
            archiveOutput.close();
            responseInput.close();
        } catch (IOException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception);
        }
        monitor.beginTask(""Downloading FFMpeg, extracting executable"", 1);
        try {
            ZipFile zipFile = new ZipFile(archive);
            ZipEntry entry = zipFile.getEntry(""ffmpeg-0.5/ffmpeg.exe"");
            InputStream input = zipFile.getInputStream(entry);
            OutputStream output = new FileOutputStream(target);
            IOUtils.copy(input, output);
            input.close();
            output.close();
        } catch (IOException exception) {
            monitor.setCanceled(true);
            throw new InvocationTargetException(exception, ""Can't unzip ffmpeg.exe"");
        }
        monitor.worked(1);
        monitor.done();
    }
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {
        Properties props = Configuration.getInstance().getProperties();
        String algorithm = props.getProperty(""com.makeabyte.jhosting.server.persistence.security.algorithm"");
        String encryptedData = data;
        boolean encrypt = Boolean.parseBoolean(props.getProperty(""com.makeabyte.jhosting.server.persistence.security.encrypt""));
        if (encrypt) {
            if (algorithm.equalsIgnoreCase(""UTF-16LE"")) return encryptActiveDirectory(data);
            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            md.reset();
            md.update(data.getBytes());
            encryptedData = md.digest().toString();
        }
        return encryptedData;
    }
",0.0
"    public boolean actualizarRondaActual(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
",0.0
"    public static Result checkLink(String theUrl) throws MalformedURLException {
        URL url = new URL(theUrl);
        HttpURLConnection urlConnection = null;
        try {
            urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setConnectTimeout(5000);
            urlConnection.setRequestMethod(""GET"");
            urlConnection.connect();
            return new Result(urlConnection.getResponseCode(), false);
        } catch (IOException e) {
            return new Result(0, true);
        } finally {
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
    }
","    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
",0.0
"    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
","    @SuppressWarnings(""unchecked"")
    private void updatePortfolio(List entries, String query) {
        BufferedReader in = null;
        try {
            URL url = new URL(query);
            System.out.println(query);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            int status = conn.getResponseCode();
            if (status == 200) {
                in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                int count = 0;
                while (true) {
                    String line = in.readLine();
                    if (line == null || count >= entries.size()) break;
                    updateEntry((PortfolioEntry) entries.get(count), line);
                    count++;
                }
            }
        } catch (Exception e) {
            logger.error(MiscUtils.stackTrace2String(e));
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (Exception ignore) {
                }
            }
        }
    }
",0.0
"    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
","    public static String getMd5Hash(String plaintext) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(plaintext.getBytes());
            byte[] digest = md5.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            return hashtext;
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return """";
    }
",0.0
"    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
","    public static void copy(String inputFile, String outputFile) throws EDITSException {
        try {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
            throw new EDITSException(""Could not copy "" + inputFile + "" into "" + outputFile + "" because:\n"" + e.getMessage());
        }
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    @Override
    public void excluir(QuestaoDiscursiva q) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""DELETE FROM questao WHERE id_questao=?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, q.getIdQuestao());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
",0.0
"    public static String getOriginalWSDL(String wsdlURL) {
        try {
            URL url = new URL(wsdlURL);
            java.net.HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            InputStream input = conn.getInputStream();
            final int BUFFERSIZE = 4096;
            byte[] buffer = new byte[BUFFERSIZE];
            OutputStream output = new ByteArrayOutputStream();
            while (true) {
                int read = input.read(buffer);
                if (read == -1) {
                    break;
                }
                output.write(buffer, 0, read);
            }
            output.close();
            input.close();
            conn.disconnect();
            String s = output.toString();
            return s;
        } catch (Exception e) {
            return null;
        }
    }
","    public void desistirCandidatura(Atividade atividade) throws SQLException {
        Connection conn = null;
        String insert = ""delete from Atividade_has_recurso_humano where atividade_idatividade="" + atividade.getIdAtividade() + "" and usuario_idusuario="" + atividade.getRecursoHumano().getIdUsuario();
        try {
            conn = connectionFactory.getConnection(true);
            conn.setAutoCommit(false);
            Statement stmt = conn.createStatement();
            Integer result = stmt.executeUpdate(insert);
            conn.commit();
        } catch (SQLException e) {
            conn.rollback();
            throw e;
        } finally {
            conn.close();
        }
    }
",0.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    private static String digest(String val) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(val.trim().getBytes());
            byte[] digest = md.digest();
            StringBuffer buf = new StringBuffer();
            for (byte b : digest) {
                String hexString = Integer.toHexString(b);
                int length = hexString.length();
                if (length > 2) {
                    hexString = hexString.substring(length - 2, length);
                } else if (length < 2) {
                    hexString = ""0"" + hexString;
                }
                buf.append(hexString);
            }
            return buf.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new EnerjyException(""Could not create digest: MD5"", e);
        }
    }
",1.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    @Override
    public boolean copy(Document document, Folder folder) throws Exception {
        boolean isCopied = false;
        if (document.getId() != null && folder.getId() != null) {
            Document copiedDoc = new DocumentModel();
            copiedDoc.setValues(document.getValues());
            copiedDoc.setFolder(folder);
            copiedDoc.setId(null);
            em.persist(copiedDoc);
            resourceAuthorityService.applyAuthority(copiedDoc);
            List<Preference> preferences = prefService.findAll();
            Preference preference = new PreferenceModel();
            if (preferences != null && !preferences.isEmpty()) {
                preference = preferences.get(0);
            }
            String repo = preference.getRepository();
            SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);
            Calendar calendar = Calendar.getInstance();
            StringBuffer sbRepo = new StringBuffer(repo);
            sbRepo.append(File.separator);
            StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));
            sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));
            File fFolder = new File(sbRepo.append(sbFolder).toString());
            if (!fFolder.exists()) {
                fFolder.mkdirs();
            }
            copiedDoc.setLocation(sbFolder.toString());
            em.merge(copiedDoc);
            File in = new File(repo + File.separator + document.getLocation() + File.separator + document.getId() + ""."" + document.getExt());
            File out = new File(fFolder.getAbsolutePath() + File.separator + copiedDoc.getId() + ""."" + copiedDoc.getExt());
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } catch (IOException e) {
                throw e;
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        }
        return isCopied;
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    private <T> T conectar(String className, String methodName, Class<?>[] parameterTypes, Object[] args, T t) throws Exception {
        try {
            HttpURLConnection conexao = (HttpURLConnection) url.openConnection();
            conexao.setRequestMethod(""POST"");
            conexao.setDoOutput(true);
            conexao.setRequestProperty(""className"", className);
            conexao.setRequestProperty(""methodName"", methodName);
            ServiceObject serviceObject = new ServiceObject();
            serviceObject.write(new Object[] { parameterTypes, args }, conexao.getOutputStream());
            if (conexao.getResponseCode() != 200) {
                throw new ServiceException(""Falha grave no servidor com url: "" + url);
            }
            String typeResponse = conexao.getHeaderField(""Service-Type-Response"");
            Object object = serviceObject.read(conexao.getInputStream());
            return returns.get(typeResponse).tratarReturn(object, t);
        } catch (IOException e) {
            throw new ServiceException(""Falha ao conectar no servidor com url: "" + url, e);
        } catch (ClassNotFoundException e) {
            throw new ServiceException(""Falha objeto espera nao e compatavel. Resposta do servidor com url: "" + url, e);
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",1.0
"    public void testDefaultHeadersRedirect() throws Exception {
        String host = ""localhost"";
        int port = this.localServer.getServicePort();
        this.localServer.register(""*"", new BasicRedirectService(host, port));
        DefaultHttpClient client = new DefaultHttpClient();
        HttpContext context = new BasicHttpContext();
        List<Header> defaultHeaders = new ArrayList<Header>(1);
        defaultHeaders.add(new BasicHeader(HTTP.USER_AGENT, ""my-test-client""));
        client.getParams().setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaders);
        HttpGet httpget = new HttpGet(""/oldlocation/"");
        HttpResponse response = client.execute(getServerHttp(), httpget, context);
        HttpEntity e = response.getEntity();
        if (e != null) {
            e.consumeContent();
        }
        HttpRequest reqWrapper = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
        assertEquals(""/newlocation/"", reqWrapper.getRequestLine().getUri());
        Header header = reqWrapper.getFirstHeader(HTTP.USER_AGENT);
        assertEquals(""my-test-client"", header.getValue());
    }
","    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
",0.0
"    private void load() throws SQLException {
        Connection conn = null;
        Statement stmt = null;
        try {
            conn = FidoDataSource.getConnection();
            conn.setAutoCommit(false);
            stmt = conn.createStatement();
            clearTables(stmt);
            stmt.executeQuery(""select setval('objects_objectid_seq', 1000)"");
            stmt.executeQuery(""select setval('instructions_instructionid_seq', 1)"");
            stmt.executeQuery(""select setval('transactions_transactionid_seq', 1)"");
            stmt.executeQuery(""select setval('verbtransactions_verbid_seq', 1)"");
            stmt.executeUpdate(""update SystemProperties set value = 'Minimal Data' where name = 'DB Data Version'"");
            conn.commit();
        } catch (SQLException e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    }
","    public static String connRemote(JSONObject jsonObject, String OPCode, List<NameValuePair> nameValuePair) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    private ZipOutputStream copyOOXMLContent(String signatureZipEntryName, OutputStream signedOOXMLOutputStream) throws IOException, ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException {
        ZipOutputStream zipOutputStream = new ZipOutputStream(signedOOXMLOutputStream);
        ZipInputStream zipInputStream = new ZipInputStream(this.getOfficeOpenXMLDocumentURL().openStream());
        ZipEntry zipEntry;
        boolean hasOriginSigsRels = false;
        while (null != (zipEntry = zipInputStream.getNextEntry())) {
            LOG.debug(""copy ZIP entry: "" + zipEntry.getName());
            ZipEntry newZipEntry = new ZipEntry(zipEntry.getName());
            zipOutputStream.putNextEntry(newZipEntry);
            if (""[Content_Types].xml"".equals(zipEntry.getName())) {
                Document contentTypesDocument = loadDocumentNoClose(zipInputStream);
                Element typesElement = contentTypesDocument.getDocumentElement();
                Element overrideElement = contentTypesDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/content-types"", ""Override"");
                overrideElement.setAttribute(""PartName"", ""/"" + signatureZipEntryName);
                overrideElement.setAttribute(""ContentType"", ""application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml"");
                typesElement.appendChild(overrideElement);
                Element nsElement = contentTypesDocument.createElement(""ns"");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, ""xmlns:tns"", ""http://schemas.openxmlformats.org/package/2006/content-types"");
                NodeList nodeList = XPathAPI.selectNodeList(contentTypesDocument, ""/tns:Types/tns:Default[@Extension='sigs']"", nsElement);
                if (0 == nodeList.getLength()) {
                    Element defaultElement = contentTypesDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/content-types"", ""Default"");
                    defaultElement.setAttribute(""Extension"", ""sigs"");
                    defaultElement.setAttribute(""ContentType"", ""application/vnd.openxmlformats-package.digital-signature-origin"");
                    typesElement.appendChild(defaultElement);
                }
                writeDocumentNoClosing(contentTypesDocument, zipOutputStream, false);
            } else if (""_rels/.rels"".equals(zipEntry.getName())) {
                Document relsDocument = loadDocumentNoClose(zipInputStream);
                Element nsElement = relsDocument.createElement(""ns"");
                nsElement.setAttributeNS(Constants.NamespaceSpecNS, ""xmlns:tns"", ""http://schemas.openxmlformats.org/package/2006/relationships"");
                NodeList nodeList = XPathAPI.selectNodeList(relsDocument, ""/tns:Relationships/tns:Relationship[@Target='_xmlsignatures/origin.sigs']"", nsElement);
                if (0 == nodeList.getLength()) {
                    Element relationshipElement = relsDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/relationships"", ""Relationship"");
                    relationshipElement.setAttribute(""Id"", ""rel-id-"" + UUID.randomUUID().toString());
                    relationshipElement.setAttribute(""Type"", ""http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin"");
                    relationshipElement.setAttribute(""Target"", ""_xmlsignatures/origin.sigs"");
                    relsDocument.getDocumentElement().appendChild(relationshipElement);
                }
                writeDocumentNoClosing(relsDocument, zipOutputStream, false);
            } else if (""_xmlsignatures/_rels/origin.sigs.rels"".equals(zipEntry.getName())) {
                hasOriginSigsRels = true;
                Document originSignRelsDocument = loadDocumentNoClose(zipInputStream);
                Element relationshipElement = originSignRelsDocument.createElementNS(""http://schemas.openxmlformats.org/package/2006/relationships"", ""Relationship"");
                String relationshipId = ""rel-"" + UUID.randomUUID().toString();
                relationshipElement.setAttribute(""Id"", relationshipId);
                relationshipElement.setAttribute(""Type"", ""http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature"");
                String target = FilenameUtils.getName(signatureZipEntryName);
                LOG.debug(""target: "" + target);
                relationshipElement.setAttribute(""Target"", target);
                originSignRelsDocument.getDocumentElement().appendChild(relationshipElement);
                writeDocumentNoClosing(originSignRelsDocument, zipOutputStream, false);
            } else {
                IOUtils.copy(zipInputStream, zipOutputStream);
            }
        }
        if (false == hasOriginSigsRels) {
            addOriginSigsRels(signatureZipEntryName, zipOutputStream);
            addOriginSigs(zipOutputStream);
        }
        zipInputStream.close();
        return zipOutputStream;
    }
",1.0
"    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals(""deletable"") || f.startsWith(""."")) continue;
            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));
            byte[] buf = new byte[16384];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
            in.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
","    public boolean actualizarRondaActual(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    public static String SHAEncrypt(String originalString) {
        String encryptedString = new String("""");
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(originalString.getBytes());
            byte b[] = md.digest();
            for (int i = 0; i < b.length; i++) {
                char[] digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] ob = new char[2];
                ob[0] = digit[(b[i] >>> 4) & 0X0F];
                ob[1] = digit[b[i] & 0X0F];
                encryptedString += new String(ob);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return encryptedString;
    }
","    public static String getGoGl(final String urlPath, String key) {
        log.debug(""getGoGl url "" + urlPath);
        log.debug(""getGoGl key "" + key);
        String shortUrl = null;
        URL simpleURL = null;
        HttpsURLConnection url = null;
        BufferedInputStream bStream = null;
        StringBuffer resultString = new StringBuffer("""");
        String inputString = ""{\""longUrl\"":\"""" + urlPath + ""\""}"";
        log.debug(""getGoGl inputString "" + inputString);
        try {
            simpleURL = new URL(""https://www.googleapis.com/urlshortener/v1/url?key="" + key);
            url = (HttpsURLConnection) simpleURL.openConnection();
            url.setDoOutput(true);
            url.setRequestProperty(""content-type"", ""application/json"");
            PrintWriter pw = new PrintWriter(url.getOutputStream());
            pw.print(inputString);
            pw.close();
        } catch (Exception ex) {
            log.error(ex);
            shortUrl = urlPath;
        }
        try {
            bStream = new BufferedInputStream(url.getInputStream());
            int i;
            while ((i = bStream.read()) >= 0) {
                resultString.append((char) i);
            }
        } catch (Exception ex) {
            SocialUtils.log.error(ex);
            shortUrl = urlPath;
        }
        return shortUrl;
    }
",0.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
",0.0
"    public Document getWsdlDomResource(String aResourceName) throws AeException {
        logger.debug(""getWsdlDomResource() "" + aResourceName);
        InputStream in = null;
        try {
            URL url = getDeploymentContext().getResourceURL(aResourceName);
            if (url == null) {
                logger.error(""url is null"");
                return null;
            } else {
                logger.debug(""loading wsdl document "" + aResourceName);
                in = url.openStream();
                return getSdlParser().loadWsdlDocument(in, null);
            }
        } catch (Throwable t) {
            logger.error(""Error: "" + t + "" for "" + aResourceName);
            throw new SdlDeploymentException(MessageFormat.format(""unable to load: {0} from {1}"", new Object[] { aResourceName, getDeploymentContext().getDeploymentLocation() }), t);
        } finally {
            AeCloser.close(in);
        }
    }
","    public static void copy(String source, String dest) throws java.io.IOException {
        java.io.BufferedInputStream in = null;
        java.io.BufferedOutputStream out = null;
        try {
            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);
            while (in.available() != 0) {
                out.write(in.read());
            }
        } catch (java.io.IOException e) {
            throw e;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (java.io.IOException E) {
            }
        }
    }
",0.0
"    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String url = request.getParameter(""proxyurl"");
        URLConnection conn = new URL(url).openConnection();
        Reader in = new InputStreamReader(conn.getInputStream(), response.getCharacterEncoding());
        response.setContentType(conn.getContentType());
        response.setContentLength(conn.getContentLength());
        Writer out = response.getWriter();
        char[] buf = new char[256];
        int len;
        while ((len = in.read(buf)) != -1) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
        String log = request.getParameter(""logging"");
        if (log != null && log.toLowerCase().equals(""true"")) logRequest(request);
    }
","    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new SoundFilter());
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.17""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""sonidos/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""sonidos/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setSonidoURL(rutaRelativa);
                            System.out.println(rutaGlobal + "" "" + rutaRelativa);
                            buttonSonido.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));
                            gui.getAudio().reproduceAudio(imagen);
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
",0.0
"    private List<String> readLines(String filename) {
        List<String> lines = new ArrayList<String>();
        URL url = Util.getResource(filename);
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                lines.add(line);
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        return lines;
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""We will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",1.0
"    protected String readContent(URL url, int width) {
        StringBuffer content = new StringBuffer("""");
        String line = """";
        try {
            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = f.readLine()) != null) content.append(line + ""\n"");
            f.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (width >= 0) {
            String width_old = ""width=\""xxx\"""";
            String width_new = ""width=\"""" + width + ""\"""";
            int v0 = content.indexOf(width_old);
            int v1 = v0 + width_old.length();
            content.replace(v0, v1, width_new);
        }
        return content.toString();
    }
","    public void alterarCliente(ClienteBean cliente, String cpf) {
        PreparedStatement pstmt = null;
        String sql = ""UPDATE cliente SET nome = ?,"" + ""cpf = ?,"" + ""telefone = ?,"" + ""cursoCargo = ?,"" + ""bloqueado = ?,"" + ""ativo = ?,"" + ""tipo = ? WHERE cpf = ?"";
        try {
            pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, cliente.getNome());
            pstmt.setString(2, cliente.getCPF());
            pstmt.setString(3, cliente.getTelefone());
            pstmt.setString(4, cliente.getCursoCargo());
            pstmt.setString(5, cliente.getBloqueado());
            pstmt.setString(6, cliente.getAtivo());
            pstmt.setString(7, cliente.getTipo());
            pstmt.setString(8, cpf);
            pstmt.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (SQLException ex1) {
                throw new RuntimeException(""Erro ao atualizar cliente."", ex1);
            }
            throw new RuntimeException(""Erro ao atualizar cliente."", ex);
        } finally {
            try {
                if (pstmt != null) pstmt.close();
            } catch (SQLException ex) {
                throw new RuntimeException(""Ocorreu um erro no banco de dados."", ex);
            }
        }
    }
",0.0
"    public void loadSourceCode() {
        if (getResourceName() != null) {
            String filename = getResourceName() + "".java"";
            sourceCode = new String(""<html><body bgcolor=\""#ffffff\""><pre>"");
            InputStream is;
            InputStreamReader isr;
            CodeViewer cv = new CodeViewer();
            URL url;
            try {
                url = getClass().getResource(filename);
                is = url.openStream();
                isr = new InputStreamReader(is);
                BufferedReader reader = new BufferedReader(isr);
                String line = reader.readLine();
                while (line != null) {
                    sourceCode += cv.syntaxHighlight(line) + "" \n "";
                    line = reader.readLine();
                }
                sourceCode += new String(""</pre></body></html>"");
            } catch (Exception ex) {
                sourceCode = ""Could not load file: "" + filename;
            }
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",1.0
"        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
","    public static void ToHTML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, String lang, PrintWriter sortie) throws Exception {
        String level = ""info."";
        if (ConnectorServlet.debug) level = ""debug."";
        Log log = LogFactory.getLog(level + ""fr.brgm.exows.gml2gsml.Gml2Gsml"");
        String tagFeature = ""FIELDS"";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate(""/fr/brgm/exows/gml2gsml/templates/"" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put(""feature"", feature);
                context.put(""lang"", lang);
                context.put(""vocabularies"", new Vocabularies());
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = ""GEOSCIML : "" + nbFeatures + "" features handled - time : "" + (dFin.getTime() - dDebut.getTime()) / 1000 + "" ["" + dDebut + "" // "" + dFin + ""]"";
        log.trace(output);
    }
",0.0
"    public void insert(IIDGenerator idGenerators, AIDADocument item) throws SQLException {
        AIDAActivityObjectDB.getManager(token).insert(idGenerators, item);
        Connection con = getConnection();
        try {
            PreparedStatement ps = con.prepareStatement(DOC_INSERT);
            ps.setLong(1, item.getId());
            ps.setString(2, item.getName());
            ps.setString(3, item.getRelativeLink());
            ps.executeUpdate();
            ps.close();
            insertDescriptions(con, item);
        } catch (SQLException sqlEx) {
            con.rollback();
            throw sqlEx;
        } finally {
            con.close();
        }
        return;
    }
","    public void getDownloadInfo() throws Exception {
        cl = new DefaultHttpClient();
        InfoAuthPromter hp = new InfoAuthPromter();
        cl.setCredentialsProvider(hp);
        head = new HttpHead(getURL());
        head.setHeader(""User-Agent"", ""test"");
        head.setHeader(""Accept"", ""*/*"");
        head.setHeader(""Range"", ""bytes=0-"");
        HttpResponse resp = cl.execute(head);
        log.debug(""getDownloadInfo(url) - Status : "" + resp.getStatusLine());
        System.out.println(""----------------- RESPONSE HEADERS ------------------------"");
        for (Header h : resp.getAllHeaders()) {
            System.out.println(h);
        }
        System.out.println(""-----------------------------------------------------------\n"");
        int code = resp.getStatusLine().getStatusCode();
        if (code == 401) {
            throw new Exception(""HTTP Authentication Failed"");
        }
        AuthManager.putAuth(getSite(), auth);
        setURL(head.getURI().toString());
        log.debug(""Last url: "" + head.getURI());
        Header hsize = resp.getFirstHeader(""Content-Length"");
        Header hmod = resp.getFirstHeader(""Last-Modified"");
        setSize(Long.parseLong(hsize.getValue()));
        setRangeEnd(getSize() - 1);
        setResumable(code == 206);
    }
",0.0
"    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), ""Test Ingest"");
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }
",0.0
"    protected String readContent(URL url, int width) {
        StringBuffer content = new StringBuffer("""");
        String line = """";
        try {
            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = f.readLine()) != null) content.append(line + ""\n"");
            f.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (width >= 0) {
            String width_old = ""width=\""xxx\"""";
            String width_new = ""width=\"""" + width + ""\"""";
            int v0 = content.indexOf(width_old);
            int v1 = v0 + width_old.length();
            content.replace(v0, v1, width_new);
        }
        return content.toString();
    }
","    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
",0.0
"    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
","    private String executeUpload(String urlStr, String specification, String filename, String sessionHandle) {
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(urlStr);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""YAWLSessionHandle"", sessionHandle);
            connection.setRequestProperty(""filename"", filename);
            connection.setRequestProperty(""Content-Type"", ""text/xml"");
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(specification);
            out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                result.append(inputLine);
            }
            in.close();
            out.close();
            connection.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            InterfaceBWebsideController.logContactError(e, _backEndURIStr);
        }
        String msg = result.toString();
        return stripOuterElement(msg);
    }
",0.0
"    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim().toLowerCase();
            if ((name.indexOf(""file:"") >= 0) || (name.indexOf("":/"") > 0)) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
","    private static void fileUpload() throws Exception {
        file = new File(""c:/Documents and Settings/dinesh/Desktop/ZShareUploaderPlugin.java"");
        httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(""http://flameupload.com/cgi/ubr_upload.pl?upload_id="" + uploadid);
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart(""upfile_0"", cbFile);
        mpEntity.addPart(""uploaded"", new StringBody(""on""));
        mpEntity.addPart(""hotfile"", new StringBody(""on""));
        mpEntity.addPart(""turbobit"", new StringBody(""on""));
        mpEntity.addPart(""depositfiles"", new StringBody(""on""));
        mpEntity.addPart(""fileserve"", new StringBody(""on""));
        mpEntity.addPart(""filefactory"", new StringBody(""on""));
        mpEntity.addPart(""netload"", new StringBody(""on""));
        mpEntity.addPart(""uploadstation"", new StringBody(""on""));
        mpEntity.addPart(""badongo"", new StringBody(""on""));
        mpEntity.addPart(""uploading"", new StringBody(""on""));
        mpEntity.addPart(""megashare"", new StringBody(""on""));
        mpEntity.addPart(""_2shared"", new StringBody(""on""));
        httppost.setEntity(mpEntity);
        NULogger.getLogger().log(Level.INFO, ""executing request {0}"", httppost.getRequestLine());
        NULogger.getLogger().info(""Now uploading your file into flameupload.com"");
        HttpResponse response = httpclient.execute(httppost);
        HttpEntity resEntity = response.getEntity();
        NULogger.getLogger().info(response.getStatusLine().toString());
        NULogger.getLogger().info(EntityUtils.toString(resEntity));
        Header[] allHeaders = response.getAllHeaders();
        for (int i = 0; i < allHeaders.length; i++) {
            System.out.println(allHeaders[i].getName() + ""="" + allHeaders[i].getValue());
        }
        if (response.getStatusLine().getStatusCode() == 302) {
            NULogger.getLogger().info(""Files uploaded successfully"");
        } else {
            throw new Exception(""There might be a problem with your internet connection or server error. Please try again later :("");
        }
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    @Override
    public void runTask(HashMap jobStack) throws Exception {
        String lstrFilter = (String) getResources().get(""filter"");
        String lstrTarget = (String) getResources().get(""target"");
        String lstrSource = (String) getResources().get(""source"");
        String[] lstrFilesFound = null;
        lstrFilesFound = searchForFiles(lstrSource, lstrFilter);
        if (lstrFilesFound != null) {
            for (int i = 0; i < lstrFilesFound.length; i++) {
                getLog().debug(""Found match ["" + lstrSource + File.separator + lstrFilesFound[i] + ""]"");
                File lfileSource = new File(lstrSource + File.separator + lstrFilesFound[i]);
                File lfileTarget = new File(lstrTarget + File.separator + lstrFilesFound[i]);
                FileChannel lfisInput = null;
                FileChannel lfosOutput = null;
                try {
                    lfisInput = new FileInputStream(lfileSource).getChannel();
                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();
                    int maxCount = (32 * 1024 * 1024) - (32 * 1024);
                    long size = lfisInput.size();
                    long position = 0;
                    while (position < size) {
                        position += lfisInput.transferTo(position, maxCount, lfosOutput);
                    }
                } finally {
                    if (lfisInput != null) {
                        lfisInput.close();
                    }
                    if (lfosOutput != null) {
                        lfosOutput.close();
                    }
                }
            }
        }
    }
",0.0
"    void downloadImage(String filename, File imageFile) throws Exception {
        String URL = Constants.IMAGE_URL + ""/"" + filename;
        SiteResponse response = stratSite.getResponse(URL);
        InputStream inputStream = response.getInputStream();
        OutputStream outputStream = new FileOutputStream(imageFile);
        IOUtils.copy(inputStream, outputStream);
    }
","    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",1.0
"    public static void copyFileNIO(String src, String dst) {
        try {
            FileChannel srcChannel = new FileInputStream(src).getChannel();
            FileChannel dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private void copyResource(String relResourceName) {
        String projectName = layout.getRootDir().getName();
        String resourceName = ""/protoj/"" + projectName + ""/"" + relResourceName;
        InputStream source = getClass().getResourceAsStream(resourceName);
        if (source == null) {
            throw new RuntimeException(""couldn't find resource "" + resourceName);
        }
        File dest = new File(layout.getRootDir(), relResourceName);
        dest.getParentFile().mkdirs();
        dest.createNewFile();
        InputStreamReader in = new InputStreamReader(source);
        try {
            FileOutputStream out = new FileOutputStream(dest);
            try {
                IOUtils.copy(in, out);
            } finally {
                IOUtils.closeQuietly(out);
            }
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
",1.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",0.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","    private void downloadImage(final String sImgName) {
        if (sImgName != null && sImgName.length() > 0) {
            File f = new File(m_sTargetDir);
            if (f.canWrite()) {
                f = new File(f, sImgName);
                if (!f.exists()) {
                    try {
                        URL url = new URL(m_sCodeBase + '/' + sImgName);
                        BufferedInputStream is = new BufferedInputStream(url.openStream());
                        BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(f));
                        int c;
                        while ((c = is.read()) != -1) {
                            os.write(c);
                        }
                        is.close();
                        os.close();
                    } catch (Exception exc) {
                        System.out.println(""TestImagesHelper::downloadImage(): "" + exc);
                    }
                }
            }
        }
    }
",0.0
"    private void processBody(HttpMethod request) throws IOException {
        InputStream in = request.getResponseBodyAsStream();
        if (in == null) return;
        Header contentTypeHdr = request.getResponseHeader(HttpHeaders.CONTENT_TYPE);
        _resultContentType = (contentTypeHdr != null) ? contentTypeHdr.getValue() : """";
        if (_out != null) {
            IOUtils.copy(in, _out);
            _out.flush();
        } else if (_resultContentType.startsWith(MimeTypes.TEXT)) {
            _result = IOUtils.toString(in, ""UTF-8"");
        } else if (_resultContentType.startsWith(MimeTypes.XML) || _resultContentType.startsWith(MimeTypes.DEPRECATED_XML)) {
            _result = ParseUtil.parse(new InputSource(in));
        } else {
            _result = IOUtils.toByteArray(in);
        }
    }
","    protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {
        Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            String path = url.getPath();
            if (!visitedURIs.contains(path)) {
                visitedURIs.add(path);
                LOG.debug(""Loading file {} to retrieve list of packages, from url: {}"", META_INF_SERVICES, url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                try {
                    while (true) {
                        String line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith(""#"") || line.length() == 0) {
                            continue;
                        }
                        tokenize(packages, line);
                    }
                } finally {
                    IOHelper.close(reader, null, LOG);
                }
            }
        }
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    public void setTableEmbossage(String te, boolean sys) {
        fiConf.setProperty(OptNames.pr_emboss_table, te);
        fiConf.setProperty(OptNames.fi_is_sys_emboss_table, Boolean.toString(sys));
        FileChannel in = null;
        FileChannel out = null;
        try {
            String fichTable;
            if (!(te.endsWith("".ent""))) {
                te = te + "".ent"";
            }
            if (sys) {
                fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + te;
            } else {
                fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + te;
            }
            in = new FileInputStream(fichTable).getChannel();
            out = new FileOutputStream(ConfigNat.getUserEmbossTableFolder() + ""/Embtab.ent"").getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    public void myClickHandler(View view) {
        switch(view.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL url = new URL(urlText.getText().toString());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line = """";
                    while ((line = rd.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
","    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
",0.0
"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
","    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
",1.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
",0.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    public static void copy(File src, File dst) throws IOException {
        FileChannel inChannel;
        FileChannel outChannel;
        inChannel = new FileInputStream(src).getChannel();
        outChannel = new FileOutputStream(dst).getChannel();
        outChannel.transferFrom(inChannel, 0, inChannel.size());
        inChannel.close();
        outChannel.close();
    }
",0.0
"    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
","    public static void main(String[] args) {
        FileDialog fd = new FileDialog(new Frame(), ""Find a .def file"", FileDialog.LOAD);
        boolean proceed = true;
        String input = """";
        DataInputStream dis;
        OutputStream out;
        InputStream in;
        File out_file, in_file;
        byte[] buffer = new byte[2048];
        int bytes_read;
        while (proceed) {
            fd.show();
            if (fd.getFile() != null) {
                try {
                    in_file = new File(fd.getDirectory(), fd.getFile());
                    out_file = new File(fd.getDirectory(), fd.getFile() + "".out"");
                    out = new FileOutputStream(out_file);
                    in = new MSZipInputStream(new FileInputStream(in_file));
                    while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
                    in.close();
                    out.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            System.out.println(""Do another (y/n)?"");
            dis = new DataInputStream(System.in);
            try {
                input = dis.readLine();
            } catch (Exception blah) {
            }
            if (input.toLowerCase().startsWith(""n"")) proceed = false;
        }
    }
",1.0
"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient client = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        method.setEntity(entity);
        HttpResponse response = client.execute(method);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
","    public void bubbleSort(int[] arr) {
        BasicProcessor.getInstance().getStartBlock();
        BasicProcessor.getInstance().getVarDeclaration();
        boolean swapped = true;
        BasicProcessor.getInstance().getVarDeclaration();
        int j = 0;
        BasicProcessor.getInstance().getVarDeclaration();
        int tmp;
        {
            BasicProcessor.getInstance().getWhileStatement();
            while (swapped) {
                BasicProcessor.getInstance().getStartBlock();
                swapped = false;
                j++;
                {
                    BasicProcessor.getInstance().getForStatement();
                    for (int i = 0; i < arr.length - j; i++) {
                        BasicProcessor.getInstance().getStartBlock();
                        {
                            BasicProcessor.getInstance().getIfStatement();
                            if (arr[i] > arr[i + 1]) {
                                BasicProcessor.getInstance().getStartBlock();
                                tmp = arr[i];
                                arr[i] = arr[i + 1];
                                arr[i + 1] = tmp;
                                swapped = true;
                                BasicProcessor.getInstance().getEndBlock();
                            }
                        }
                        BasicProcessor.getInstance().getEndBlock();
                    }
                }
                BasicProcessor.getInstance().getEndBlock();
            }
        }
        BasicProcessor.getInstance().getEndBlock();
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public GLatLng geoCodeAddress(SearchParms searchParms) throws IOException {
        logger.debug(searchParms.getGeocodeAddress());
        URL url = new URL(geocoder.encode(searchParms.getGeocodeAddress()));
        URLConnection connection = url.openConnection();
        String content = Streams.readString(connection.getInputStream());
        return geocoder.decode(content);
    }
",0.0
"    private final String encryptPassword(final String password) throws EncryptionExecption {
        if ((password == null) || (password.length() == 0)) {
            throw new NullPointerException();
        }
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update((password).getBytes(""UTF-8""));
            return new BASE64Encoder().encode(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionExecption(e);
        } catch (UnsupportedEncodingException e) {
            throw new EncryptionExecption(e);
        }
    }
","    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }
",0.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void createNewFile(String filePath, InputStream in) throws IOException {
        FileOutputStream out = null;
        try {
            File file = newFileRef(filePath);
            FileHelper.createNewFile(file, true);
            out = new FileOutputStream(file);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
",1.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println(""Connecting to "" + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digest = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        digest.update(password.getBytes(""utf-8""), 0, password.length());
        md5hash = digest.digest();
        return convertToHex(md5hash);
    }
","    private static int computeNativesHash() {
        try {
            String classpath = System.getProperty(""java.class.path"");
            URL url = Thread.currentThread().getContextClassLoader().getResource(""com/jme3/system/Natives.class"");
            StringBuilder sb = new StringBuilder(url.toString());
            if (sb.indexOf(""jar:"") == 0) {
                sb.delete(0, 4);
                sb.delete(sb.indexOf(""!""), sb.length());
                sb.delete(sb.lastIndexOf(""/"") + 1, sb.length());
            }
            try {
                url = new URL(sb.toString());
            } catch (MalformedURLException ex) {
                throw new UnsupportedOperationException(ex);
            }
            URLConnection conn = url.openConnection();
            int hash = classpath.hashCode() ^ (int) conn.getLastModified();
            return hash;
        } catch (IOException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            System.out.println(""Mensagem original: "" + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
",0.0
"    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
","    private boolean extract(File archive, File dir, IProgressMonitor monitor) {
        monitor.subTask(""Extract : "" + archive.getName());
        if (!dir.exists()) {
            dir.mkdirs();
        } else {
            File[] files = dir.listFiles();
            for (int j = 0; j < files.length; j++) {
                files[j].delete();
            }
        }
        ZipInputStream zis = null;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File indexFile = new File(dir, entry.getName());
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(indexFile);
                    IOUtils.copy(zis, fos);
                } finally {
                    IOUtils.closeQuietly(fos);
                }
            }
            return true;
        } catch (Exception ex) {
            M4EclipsePlugin.log(new Status(IStatus.ERROR, M4EclipsePlugin.PLUGIN_ID, -1, ""For index '"" + dir.getName() + ""' Unable to initialize indexes"", ex));
        } finally {
            IOUtils.closeQuietly(zis);
        }
        return false;
    }
",0.0
"    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
",0.0
"    public boolean actualizarNumeroRondas(int idDivision, int numFechas) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET numFechas = "" + numFechas + "" WHERE idDivisionxTorneo = "" + idDivision;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    public static void copyResource(String src, File dest) throws IOException {
        InputStream fin = ResourceLoader.openResource(src);
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).error(""Failed to load resource '"" + src + ""'"");
            LogFactory.getLog(ResourceLoader.class).info(""Attempting to open file from from file system"");
            fin = new FileInputStream(src);
        }
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).warn(""Giving up on copy operation, can't find source '"" + src + ""'"");
            return;
        }
        BufferedOutputStream fout = new BufferedOutputStream(new FileOutputStream(dest));
        byte[] buffer = new byte[COPY_BUFFER_SIZE];
        int readBytes = fin.read(buffer);
        while (readBytes > -1) {
            fout.write(buffer, 0, readBytes);
            readBytes = fin.read(buffer);
        }
        fout.close();
        fin.close();
    }
",0.0
"    public static String getMyGlobalIP() {
        try {
            URL url = new URL(IPSERVER);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String ip = in.readLine();
            in.close();
            con.disconnect();
            return ip;
        } catch (Exception e) {
            return null;
        }
    }
","    public void copyRes(long mailId1, long mailId2) throws Exception {
        File file1 = new File(this.getResDir(mailId1));
        File file2 = new File(this.getResDir(mailId2));
        this.recursiveDir(file2);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; i++) {
                    if (files[i].isFile()) {
                        File file2s = new File(file2.getAbsolutePath() + ""/"" + files[i].getName());
                        if (!file2s.exists()) {
                            file2s.createNewFile();
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s));
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i]));
                            int read;
                            while ((read = in.read()) != -1) {
                                out.write(read);
                            }
                            out.flush();
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ex1) {
                                    ex1.printStackTrace();
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
",0.0
"    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel ic = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
","    private static void initMimeTypes() {
        InputStream is = null;
        extMimeTypes = new Properties();
        try {
            try {
                is = MimeUtil.class.getClassLoader().getResourceAsStream(""eu/medsea/mimeutil/mime-types.properties"");
                if (is != null) {
                    ((Properties) extMimeTypes).load(is);
                }
            } catch (Exception e) {
                log.error(""Error loading internal mime-types.properties"", e);
            } finally {
                is = closeStream(is);
            }
            try {
                File f = new File(System.getProperty(""user.home"") + File.separator + "".mime-types.properties"");
                if (f.exists()) {
                    is = new FileInputStream(f);
                    if (is != null) {
                        log.debug(""Found a custom .mime-types.properties file in the users home directory."");
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully parsed .mime-types.properties from users home directory."");
                    }
                }
            } catch (Exception e) {
                log.error(""Failed to parse .magic.mime file from users home directory. File will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                Enumeration e = MimeUtil.class.getClassLoader().getResources(""mime-types.properties"");
                while (e.hasMoreElements()) {
                    URL url = (URL) e.nextElement();
                    if (log.isDebugEnabled()) {
                        log.debug(""Found custom mime-types.properties file on the classpath ["" + url + ""]."");
                    }
                    Properties props = new Properties();
                    try {
                        is = url.openStream();
                        if (is != null) {
                            props.load(is);
                            if (props.size() > 0) {
                                extMimeTypes.putAll(props);
                                if (log.isDebugEnabled()) {
                                    log.debug(""Successfully loaded custome mime-type.properties file ["" + url + ""] from classpath."");
                                }
                            }
                        }
                    } catch (Exception ex) {
                        log.error(""Failed while loading custom mime-type.properties file ["" + url + ""] from classpath. File will be ignored."");
                    }
                }
            } catch (Exception e) {
                log.error(""Problem while processing mime-types.properties files(s) from classpath. Files will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                String fname = System.getProperty(""mime-mappings"");
                if (fname != null && fname.length() != 0) {
                    is = new FileInputStream(fname);
                    if (is != null) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Found a custom mime-mappings property defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                        }
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully loaded the mime mappings file from property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                    }
                }
            } catch (Exception ex) {
                log.error(""Failed to load the mime-mappings file defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
            } finally {
                is = closeStream(is);
            }
        } finally {
            Iterator it = extMimeTypes.values().iterator();
            while (it.hasNext()) {
                String[] types = ((String) it.next()).split("","");
                for (int i = 0; i < types.length; i++) {
                    MimeUtil.addKnownMimeType(types[i]);
                }
            }
        }
    }
",0.0
"    @Override
    public void sortArray(int[] array) {
        boolean sorted = false;
        while (sorted == false) {
            sorted = true;
            for (int i = 0; i <= array.length - 2; i++) {
                if (array[i] > array[i + 1]) {
                    int temp = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = temp;
                    sorted = false;
                }
            }
        }
    }
","    @Override
    public void run() {
        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
        final String url = service.streamUrl.toString();
        InputStream stream = null;
        try {
            final URLConnection con = new URL(url).openConnection();
            con.setRequestProperty(""Icy-MetaData"", ""1"");
            con.setRequestProperty(""Connection"", ""close"");
            con.setRequestProperty(""Accept"", null);
            con.connect();
            stream = con.getInputStream();
            int metaDataOffset = -1;
            final Map<String, List<String>> headers = con.getHeaderFields();
            if (headers.containsKey(""icy-metaint"")) {
                metaDataOffset = Integer.parseInt(headers.get(""icy-metaint"").get(0));
            } else {
                final StringBuilder strHeaders = new StringBuilder();
                char c;
                while ((c = (char) stream.read()) != -1) {
                    strHeaders.append(c);
                    final int c5 = 5, c4 = 4;
                    if (strHeaders.length() > c5 && ""\r\n\r\n"".equals(strHeaders.substring((strHeaders.length() - c4), strHeaders.length()))) {
                        break;
                    }
                }
                final Matcher m = PATTERN.matcher(strHeaders.toString());
                if (m.find()) {
                    metaDataOffset = Integer.parseInt(m.group(2));
                }
            }
            if (metaDataOffset == -1) {
                throw new RuntimeException(""no data"");
            }
            final int bufSize = 4096;
            final byte[] buffer = new byte[bufSize];
            final int initialMetaLength = 1024;
            final StringBuilder metaData = new StringBuilder(initialMetaLength);
            int leftToSkip = metaDataOffset;
            while (true) {
                if (Thread.interrupted()) {
                    throw new RuntimeException(""interrtupted"");
                }
                while (leftToSkip > 0) {
                    final long actual = stream.skip(leftToSkip);
                    leftToSkip -= actual;
                }
                int count = 0;
                int metaDataLength = 0;
                metaData.delete(0, metaData.length());
                int lastReadCount;
                while ((lastReadCount = stream.read(buffer)) != -1) {
                    if (Thread.interrupted()) {
                        throw new RuntimeException(""interrtupted"");
                    }
                    if (lastReadCount == 0) {
                        continue;
                    }
                    if (count == 0) {
                        final int paragraph = 16;
                        metaDataLength = buffer[0] * paragraph;
                    }
                    final int startIndex = count == 0 ? 1 : 0;
                    int length = count == 0 ? lastReadCount - 1 : lastReadCount;
                    count += lastReadCount;
                    if (count > metaDataLength) {
                        length -= count - metaDataLength;
                        if (count == lastReadCount) {
                            length++;
                        }
                    }
                    if (length > 0) {
                        metaData.append(new String(buffer, startIndex, length, ""UTF-8""));
                    }
                    if (count > metaDataLength) {
                        break;
                    }
                }
                if (lastReadCount == -1) {
                    break;
                }
                leftToSkip = metaDataOffset - (count - metaDataLength - 1);
                if (metaData.length() > 0) {
                    service.updateAudioInfo(metaData.toString());
                }
            }
        } catch (final IOException e) {
            Log.e(TAG, ""IO error"", e);
        } catch (final RuntimeException e) {
            if (DEBUG) {
                Log.i(TAG, e.getMessage());
            }
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (final IOException e) {
                    Log.e(TAG, ""Cannot close stream"", e);
                }
            }
        }
    }
",0.0
"    public String hash(String clearPassword) {
        if (osalt == 0) return null;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(""Can't find the SHA1 algorithm in the java.security package"");
        }
        String saltString = String.valueOf(osalt);
        md.update(saltString.getBytes());
        md.update(clearPassword.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString();
        return digestStr;
    }
","    public File getPreprocessedTextFile(File originalTextFile) throws IOException {
        File preprocessedTextFile = File.createTempFile(""cvs"", null);
        String separatorSeq = getSeparatorSequence();
        byte[] newLine = separatorSeq.getBytes();
        Constants.CVS_LOG.debug(""Preprocessing "" + originalTextFile.getAbsolutePath() + "" to "" + preprocessedTextFile.getAbsolutePath() + "" using "" + debugSequence(separatorSeq));
        byte[] crlf = ""\r\n"".getBytes();
        byte[] lf = ""\n"".getBytes();
        OutputStream out = null;
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(originalTextFile));
            out = new BufferedOutputStream(new FileOutputStream(preprocessedTextFile));
            byte[] fileChunk = new byte[CHUNK_SIZE];
            byte[] fileWriteChunk = new byte[CHUNK_SIZE];
            for (int readLength = in.read(fileChunk); readLength > 0; readLength = in.read(fileChunk)) {
                if (newLine.length == 0) {
                    out.write(fileChunk, 0, readLength);
                } else {
                    int writeLength = 0;
                    for (int i = 0; i < readLength; ) {
                        int pos = findIndexOf(fileChunk, crlf, i);
                        int lineSepLength = crlf.length;
                        if (pos < i || pos >= readLength) {
                            pos = findIndexOf(fileChunk, lf, i);
                            lineSepLength = lf.length;
                        }
                        if (pos >= i && pos < readLength) {
                            try {
                                System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, pos - i);
                            } catch (ArrayIndexOutOfBoundsException aiobe) {
                                Constants.CVS_LOG.error(""fileChunk.length="" + fileChunk.length + "" i="" + i + "" writeLength="" + writeLength + "" pos="" + pos + "" fileWriteChunk.length="" + fileWriteChunk.length);
                                throw aiobe;
                            }
                            writeLength += pos - i;
                            i = pos + lineSepLength;
                            for (int j = 0; j < newLine.length; j++) fileWriteChunk[writeLength++] = newLine[j];
                        } else {
                            System.arraycopy(fileChunk, i, fileWriteChunk, writeLength, readLength - i);
                            writeLength += readLength - i;
                            i = readLength;
                        }
                    }
                    out.write(fileWriteChunk, 0, writeLength);
                }
            }
            return preprocessedTextFile;
        } catch (IOException ex) {
            if (preprocessedTextFile != null) {
                cleanup(preprocessedTextFile);
            }
            throw ex;
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                }
            }
            if (out != null) {
                try {
                    out.close();
                } catch (IOException ex) {
                }
            }
        }
    }
",0.0
"    public HttpResponse execute(HttpHost host, HttpRequest req, HttpContext ctx) throws IOException, ClientProtocolException {
        HttpResponse resp = backend.execute(host, req, ctx);
        if (assessor.isFailure(resp)) {
            throw new UnsuccessfulResponseException(resp);
        }
        return resp;
    }
","    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
",0.0
"    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
","    @Override
    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean found = false;
        String name = getArgument(request.getPathInfo());
        if (StringUtils.contains(name, '/')) {
            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);
            if (file.exists() && file.isFile()) {
                found = true;
                MagicMatch match = Magic.getMagicMatch(file, true);
                response.setContentType(match.getMimeType());
                FileInputStream in = new FileInputStream(file);
                IOUtils.copyLarge(in, response.getOutputStream());
                in.close();
            }
        } else if (!StringUtils.isBlank(name)) {
            int articleId = NumberUtils.toInt(name);
            if (articleId > 0) {
                Article article = articleDao.load(articleId);
                if (article != null) {
                    found = true;
                    sendArticle(request, response, article);
                }
            }
        } else {
            int page = NumberUtils.toInt(request.getParameter(""page""), 0);
            Date fromDate = null;
            String from = request.getParameter(""from"");
            if (StringUtils.isNotBlank(from)) {
                try {
                    fromDate = dayMonthYearEn.parse(from);
                } catch (ParseException e) {
                }
            }
            Date untilDate = null;
            String until = request.getParameter(""until"");
            if (StringUtils.isNotBlank(until)) {
                try {
                    untilDate = dayMonthYearEn.parse(until);
                } catch (ParseException e) {
                }
            }
            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));
            found = true;
        }
        if (found != true) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",0.0
"    private static String getHash(String hash, String clear) {
        try {
            MessageDigest md = MessageDigest.getInstance(hash);
            md.update(clear.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            String str = new String();
            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);
            return str;
        } catch (NoSuchAlgorithmException exc) {
        } catch (UnsupportedEncodingException exc) {
        }
        return """";
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) sb.append('0');
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",0.0
"    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
","    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
",0.0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
","    public RobotList<Float> sort_decr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value < distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }
",0.0
"    public void dumpToFile(File file) throws IOException {
        OutputStream out = new FileOutputStream(file);
        if (contentStream != null) {
            IOUtils.copy(contentStream, out);
            setPath(file.getAbsolutePath());
        } else {
            IOUtils.write(getContent(), out);
        }
        IOUtils.closeQuietly(out);
    }
","    protected String getPostRequestContent(String urlText, String... postParams) throws Exception {
        URL url = new URL(urlText);
        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();
        urlcon.setRequestMethod(""POST"");
        urlcon.setUseCaches(false);
        urlcon.setDoOutput(true);
        PrintStream ps = new PrintStream(urlcon.getOutputStream());
        for (String param : postParams) {
            ps.print(param);
        }
        ps.close();
        urlcon.connect();
        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));
        String line = reader.readLine();
        reader.close();
        urlcon.disconnect();
        return line;
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    private File copyFile(File currFile) throws IOException {
        String relativePath = currFile.getPath().substring(_distDir.length() + 1);
        File targetFile = new File(_installDir, relativePath);
        if (targetFile.exists()) {
            log(targetFile.getPath() + "" already exists, skipping libcopy"", Project.MSG_INFO);
            return targetFile;
        } else {
            if (!targetFile.getParentFile().exists()) {
                if (!targetFile.getParentFile().mkdirs()) {
                    log(""Unable to create target dir tree for "" + targetFile.getPath(), Project.MSG_ERR);
                    throw new IOException();
                }
            }
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(currFile);
        } catch (FileNotFoundException e) {
            log(""Library from plugin manifest appears to have been deleted: "" + currFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        try {
            fos = new FileOutputStream(targetFile);
        } catch (FileNotFoundException e) {
            log(""Unable to create target file to write to: "" + targetFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int read = 0;
        byte[] buff = new byte[65536];
        boolean success = true;
        while (read != -1 && success) {
            try {
                read = bis.read(buff, 0, 65536);
            } catch (IOException e) {
                log(""Read error whilst reading from: "" + currFile.getPath(), Project.MSG_ERR);
                success = false;
            }
            if (read != -1 && success) {
                try {
                    bos.write(buff, 0, read);
                } catch (IOException e) {
                    log(""Write error whilst writing to: "" + targetFile.getPath(), Project.MSG_ERR);
                    success = false;
                }
            }
        }
        try {
            bis.close();
        } catch (IOException e) {
        }
        try {
            bos.close();
        } catch (IOException e) {
        }
        try {
            fis.close();
        } catch (IOException e) {
        }
        try {
            fos.close();
        } catch (IOException e) {
        }
        if (!success) {
            throw new IOException();
        }
        return targetFile;
    }
",1.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    public void run() {
        try {
            FTPClient c = new FTPClient();
            c.configure(ftpConfig);
            logger.debug(""Trying to connect"");
            c.connect(""127.0.0.1"", 21211);
            logger.debug(""Connected"");
            c.setSoTimeout(5000);
            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {
                logger.debug(""Houston, we have a problem. D/C"");
                c.disconnect();
                throw new Exception();
            }
            if (c.login(""drftpd"", ""drftpd"")) {
                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");
                _sc.addSuccess();
                Thread.sleep(5000);
                c.disconnect();
            } else {
                logger.debug(""Login failed, D/C!"");
                throw new Exception();
            }
        } catch (Exception e) {
            logger.debug(e, e);
            _sc.addFailure();
        }
        logger.debug(""exiting"");
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","                @Override
                protected URLConnection openConnection(URL url) throws IOException {
                    return new URLConnection(url) {

                        @Override
                        public void connect() throws IOException {
                        }

                        @Override
                        public InputStream getInputStream() throws IOException {
                            ThemeResource f = getFacelet(getURL().getFile());
                            return new ByteArrayInputStream(f.getText().getBytes());
                        }
                    };
                }
",0.0
"    private void getEventHeapsFromWeb() {
        try {
            URL url = getServersURL();
            InputStream in = url.openStream();
            Document doc = factory.newDocumentBuilder().parse(in);
            readFromDocument(doc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
","    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",0.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    public static String getMD5(String s) {
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(s.getBytes(), 0, s.length());
            s = new BigInteger(1, m.digest()).toString(16);
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return s;
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
",0.0
"    public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.people.findByUsername""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""username"", userName));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGUser user = JAXB.unmarshal(content, GGUser.class);
        return user;
    }
","    public static String getStringFromURL(URL url) {
        try {
            if (url == null) {
                return null;
            }
            URLConnection conn = url.openConnection();
            conn.connect();
            if (conn instanceof HttpURLConnection) {
                int status = ((HttpURLConnection) conn).getResponseCode();
                if (status != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            int available = conn.getContentLength();
            InputStream is = conn.getInputStream();
            byte buffer[] = new byte[available];
            int pos = 0;
            while (available > 0) {
                int amount = is.read(buffer, pos, available);
                available -= amount;
                pos += amount;
            }
            is.close();
            String tmp = new String(buffer);
            return tmp;
        } catch (Exception ex) {
            System.out.println(ex);
            return """";
        }
    }
",0.0
"    private static void loadParentProperties(Properties props, ClassLoader cl) throws IOException {
        String pName = props.getProperty(PARENT_PROPERTIES);
        if (pName == null) {
            return;
        }
        URL url = cl.getResource(pName);
        if (url == null) {
            return;
        }
        InputStream is = url.openStream();
        if (is != null) {
            Properties tmpProps = new Properties();
            tmpProps.load(is);
            is.close();
            loadParentProperties(tmpProps, cl);
            Iterator itr = tmpProps.entrySet().iterator();
            while (itr.hasNext()) {
                Map.Entry entry = (Map.Entry) itr.next();
                if (!props.containsKey(entry.getKey())) {
                    props.put(entry.getKey(), entry.getValue());
                }
            }
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    public static boolean isImageLinkReachable(WebImage image) {
        if (image.getUrl() == null) return false;
        try {
            URL url = new URL(image.getUrl());
            url.openStream().close();
        } catch (MalformedURLException e) {
            return false;
        } catch (IOException e) {
            return false;
        }
        return true;
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
",1.0
"    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
","    public static void copyResource(Resource source, Resource dest, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project) throws IOException {
        if (!(overwrite || SelectorUtils.isOutOfDate(source, dest, FileUtils.getFileUtils().getFileTimestampGranularity()))) {
            return;
        }
        final boolean filterSetsAvailable = (filters != null && filters.hasFilters());
        final boolean filterChainsAvailable = (filterChains != null && filterChains.size() > 0);
        if (filterSetsAvailable) {
            BufferedReader in = null;
            BufferedWriter out = null;
            try {
                InputStreamReader isr = null;
                if (inputEncoding == null) {
                    isr = new InputStreamReader(source.getInputStream());
                } else {
                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                in = new BufferedReader(isr);
                OutputStream os = getOutputStream(dest, append, project);
                OutputStreamWriter osw;
                if (outputEncoding == null) {
                    osw = new OutputStreamWriter(os);
                } else {
                    osw = new OutputStreamWriter(os, outputEncoding);
                }
                out = new BufferedWriter(osw);
                if (filterChainsAvailable) {
                    ChainReaderHelper crh = new ChainReaderHelper();
                    crh.setBufferSize(FileUtils.BUF_SIZE);
                    crh.setPrimaryReader(in);
                    crh.setFilterChains(filterChains);
                    crh.setProject(project);
                    Reader rdr = crh.getAssembledReader();
                    in = new BufferedReader(rdr);
                }
                LineTokenizer lineTokenizer = new LineTokenizer();
                lineTokenizer.setIncludeDelims(true);
                String newline = null;
                String line = lineTokenizer.getToken(in);
                while (line != null) {
                    if (line.length() == 0) {
                        out.newLine();
                    } else {
                        newline = filters.replaceTokens(line);
                        out.write(newline);
                    }
                    line = lineTokenizer.getToken(in);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else if (filterChainsAvailable || (inputEncoding != null && !inputEncoding.equals(outputEncoding)) || (inputEncoding == null && outputEncoding != null)) {
            BufferedReader in = null;
            BufferedWriter out = null;
            try {
                InputStreamReader isr = null;
                if (inputEncoding == null) {
                    isr = new InputStreamReader(source.getInputStream());
                } else {
                    isr = new InputStreamReader(source.getInputStream(), inputEncoding);
                }
                in = new BufferedReader(isr);
                OutputStream os = getOutputStream(dest, append, project);
                OutputStreamWriter osw;
                if (outputEncoding == null) {
                    osw = new OutputStreamWriter(os);
                } else {
                    osw = new OutputStreamWriter(os, outputEncoding);
                }
                out = new BufferedWriter(osw);
                if (filterChainsAvailable) {
                    ChainReaderHelper crh = new ChainReaderHelper();
                    crh.setBufferSize(FileUtils.BUF_SIZE);
                    crh.setPrimaryReader(in);
                    crh.setFilterChains(filterChains);
                    crh.setProject(project);
                    Reader rdr = crh.getAssembledReader();
                    in = new BufferedReader(rdr);
                }
                char[] buffer = new char[FileUtils.BUF_SIZE];
                while (true) {
                    int nRead = in.read(buffer, 0, buffer.length);
                    if (nRead == -1) {
                        break;
                    }
                    out.write(buffer, 0, nRead);
                }
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else if (source.as(FileProvider.class) != null && dest.as(FileProvider.class) != null) {
            File sourceFile = ((FileProvider) source.as(FileProvider.class)).getFile();
            File destFile = ((FileProvider) dest.as(FileProvider.class)).getFile();
            File parent = destFile.getParentFile();
            if (parent != null && !parent.isDirectory() && !destFile.getParentFile().mkdirs()) {
                throw new IOException(""failed to create the parent directory"" + "" for "" + destFile);
            }
            FileInputStream in = null;
            FileOutputStream out = null;
            FileChannel srcChannel = null;
            FileChannel destChannel = null;
            try {
                in = new FileInputStream(sourceFile);
                out = new FileOutputStream(destFile);
                srcChannel = in.getChannel();
                destChannel = out.getChannel();
                long position = 0;
                long count = srcChannel.size();
                while (position < count) {
                    position += srcChannel.transferTo(position, FileUtils.BUF_SIZE, destChannel);
                }
            } finally {
                FileUtils.close(srcChannel);
                FileUtils.close(destChannel);
                FileUtils.close(out);
                FileUtils.close(in);
            }
        } else {
            InputStream in = null;
            OutputStream out = null;
            try {
                in = source.getInputStream();
                out = getOutputStream(dest, append, project);
                byte[] buffer = new byte[FileUtils.BUF_SIZE];
                int count = 0;
                do {
                    out.write(buffer, 0, count);
                    count = in.read(buffer, 0, buffer.length);
                } while (count != -1);
            } finally {
                FileUtils.close(out);
                FileUtils.close(in);
            }
        }
        if (preserveLastModified) {
            Touchable t = (Touchable) dest.as(Touchable.class);
            if (t != null) {
                setLastModified(t, source.getLastModified());
            }
        }
    }
",0.0
"    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
","    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
",0.0
"    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
","    protected File extractArchive(File archive) {
        byte buf[] = new byte[BUF_SIZE];
        ZipInputStream zis = null;
        File archiveDirectory = null;
        FileOutputStream fos;
        ZipEntry entry;
        File curEntry;
        int n;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            while ((entry = zis.getNextEntry()) != null) {
                curEntry = new File(workingDir, entry.getName());
                if (entry.isDirectory()) {
                    getLogger().info(""skip directory: "" + entry.getName());
                    if (archiveDirectory == null) archiveDirectory = curEntry;
                    continue;
                }
                getLogger().info(""zip-entry (file): "" + entry.getName() + "" ==> real path: "" + curEntry.getAbsolutePath());
                if (!curEntry.getParentFile().exists()) curEntry.getParentFile().mkdirs();
                fos = new FileOutputStream(curEntry);
                while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n);
                fos.close();
                zis.closeEntry();
            }
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            try {
                if (zis != null) zis.close();
            } catch (Throwable t) {
            }
        }
        return archiveDirectory;
    }
",0.0
"    public static LinkedList<String> read(URL url, String exc) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            if (!input.startsWith(exc)) {
                data.add(input);
            }
        }
        br.close();
        return data;
    }
","    public void alterarCliente(ClienteBean cliente, String cpf) {
        PreparedStatement pstmt = null;
        String sql = ""UPDATE cliente SET nome = ?,"" + ""cpf = ?,"" + ""telefone = ?,"" + ""cursoCargo = ?,"" + ""bloqueado = ?,"" + ""ativo = ?,"" + ""tipo = ? WHERE cpf = ?"";
        try {
            pstmt = connection.prepareStatement(sql);
            pstmt.setString(1, cliente.getNome());
            pstmt.setString(2, cliente.getCPF());
            pstmt.setString(3, cliente.getTelefone());
            pstmt.setString(4, cliente.getCursoCargo());
            pstmt.setString(5, cliente.getBloqueado());
            pstmt.setString(6, cliente.getAtivo());
            pstmt.setString(7, cliente.getTipo());
            pstmt.setString(8, cpf);
            pstmt.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            try {
                connection.rollback();
            } catch (SQLException ex1) {
                throw new RuntimeException(""Erro ao atualizar cliente."", ex1);
            }
            throw new RuntimeException(""Erro ao atualizar cliente."", ex);
        } finally {
            try {
                if (pstmt != null) pstmt.close();
            } catch (SQLException ex) {
                throw new RuntimeException(""Ocorreu um erro no banco de dados."", ex);
            }
        }
    }
",0.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    public static void main(final String... args) {
        int returnCode = 0;
        if (args.length == 0) {
            System.err.println(""Usage: JWGet url..."");
            returnCode++;
        }
        final byte[] buf = new byte[8192];
        for (final String arg : args) {
            try {
                final URL url = new URL(arg);
                OutputStream out = null;
                InputStream in = null;
                try {
                    final URLConnection con = url.openConnection();
                    in = con.getInputStream();
                    final String location = con.getHeaderField(""Content-Location"");
                    final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName();
                    System.err.println(outputFilename);
                    out = new FileOutputStream(outputFilename);
                    for (int bytesRead; (bytesRead = in.read(buf)) != -1; out.write(buf, 0, bytesRead)) ;
                } catch (final IOException e) {
                    System.err.println(e);
                    returnCode++;
                } finally {
                    try {
                        in.close();
                    } catch (final Exception ignore) {
                    }
                    try {
                        out.close();
                    } catch (final Exception ignore) {
                    }
                }
            } catch (final MalformedURLException e) {
                System.err.println(e);
                returnCode++;
            }
        }
        System.exit(returnCode);
    }
",0.0
"    private String getImageUrlForComicsJoke(Date date, String baseURL, String imageDefinition, int imagePathStart) throws JokeFinderException {
        String imageUrl = null;
        try {
            imageUrl = getBaseImageComicsJoke(date, baseURL, imageDefinition, imagePathStart);
            URL url = new URL(imageUrl);
            url.openStream();
        } catch (JokeFinderException e) {
            logger.warn(""Couldn't find base URL."", e);
            imageUrl = null;
        } catch (IOException e) {
            logger.warn(""Couldn't find or open image base URL."", e);
            imageUrl = null;
        }
        if (imageUrl == null) {
            throw new JokeFinderException(""Couldn't find joke."");
        }
        return imageUrl;
    }
","    public static String getMd5Hash(String plaintext) {
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(plaintext.getBytes());
            byte[] digest = md5.digest();
            BigInteger bigInt = new BigInteger(1, digest);
            String hashtext = bigInt.toString(16);
            while (hashtext.length() < 32) {
                hashtext = ""0"" + hashtext;
            }
            return hashtext;
        } catch (final NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return """";
    }
",0.0
"    public String getHtmlPage(URL url) {
        String html = null;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            br.close();
            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html;
    }
","    public WebHttpResponse execute(HttpRequest request) throws Exception {
        WebHttpResponse response = new WebHttpResponse(request);
        if (iSSLClassesAvailable == -1) {
            try {
                Class.forName(""javax.net.ssl.SSLSocket"");
                iSSLClassesAvailable = 1;
            } catch (ClassNotFoundException cnf) {
                iSSLClassesAvailable = 0;
            }
        }
        try {
            request.getClass().getMethod(""getThinkTime"", null);
            long thinkTime = request.getThinkTime();
            if (thinkTime > 0) Thread.sleep(thinkTime);
        } catch (Exception e) {
        }
        if (httpRequestHandler == null) {
            httpRequestHandler = new WebHttpRequestHandler();
        }
        currentPageNumber = request.getPageNumber();
        currentPageOrder = request.getPageOrder();
        long start = System.currentTimeMillis();
        if ((currentPageOrder == HttpRequest.PAGE_START) || (currentPageOrder == HttpRequest.PAGE_ONLY)) {
            pageStart = start;
            currentPageName = request.getURL();
        }
        if (iSSLClassesAvailable == 1 && request.getSecure() == true) {
            SSLHttpExecutor ssl = null;
            if (sslExecutor == null) sslExecutor = new WebSSLHttpExecutor(httpRequestHandler);
            ssl = (SSLHttpExecutor) sslExecutor;
            ssl.execute(request, response);
            setResponseEndingData(request, response, start);
            return response;
        } else if (iSSLClassesAvailable == 0 && request.getSecure() == true) {
            System.out.println(HttpResourceBundle.SSL_NOTSUPPORTED);
        }
        String strHost = request.getHost();
        int port = request.getPort();
        if (port != iLastPort || strLastHost == null || strHost.regionMatches(0, strLastHost, 0, strLastHost.length()) != true) {
            if ((connectToServer(response, strHost, port)) == false) {
                response.setCode(-1);
                return response;
            }
        }
        if (httpRequestHandler.sendRequest(request, to_server) == false) {
            if (connectToServer(response, strHost, port) == false) {
                response.setCode(-1);
                return response;
            } else {
                if (httpRequestHandler.sendRequest(request, to_server) == false) {
                    response.setCode(-1);
                    return response;
                }
            }
        }
        httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
        if (response.getCode() == 0) {
            if (connectToServer(response, strHost, port) == true) {
                if (httpRequestHandler.sendRequest(request, to_server) == true) {
                    httpRequestHandler.getServerResponse(request, response, from_server, socketBufSize);
                }
            }
        }
        if (response.getShouldCloseSocket() == true) strLastHost = null;
        setResponseEndingData(request, response, start);
        return response;
    }
",0.0
"    public BufferedImage getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
","    public void chmod(String remoteFile, String mode) {
        String remotePath = connector.getRemoteDirectory();
        remotePath += PATH_SEPARATOR + remoteFile;
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info(""Connected to "" + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                String parameters = ""chmod "" + mode + "" "" + remotePath;
                ftp.site(parameters);
                ftp.logout();
            }
            ftp.disconnect();
        } catch (SocketException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0.0
"    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
","    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    public static void main(String[] args) {
        try {
            if (args.length < 2) {
                System.err.println(""usage: test [src] [dest]"");
                return;
            }
            FileInputStream in = new FileInputStream(args[0]);
            FileOutputStream out = new FileOutputStream(args[1]);
            FileChannel src = in.getChannel();
            FileChannel channel = out.getChannel();
            long pos = 0, len = src.size(), ret;
            while (len > 0) {
                if ((ret = channel.transferFrom(src, pos, len)) < 0) break;
                len -= ret;
                pos += ret;
            }
            out.close();
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public boolean run() {
        String url;
        try {
            url = getFileName();
        } catch (NoSuchFieldException e) {
            return false;
        }
        if (url == null) {
            logger.error(""URL not specified! Cannot continue."");
            return false;
        }
        try {
            URL newURL = new URL(url);
            String extension = url.substring((url.lastIndexOf(""."")) + 1, url.length());
            File temp = File.createTempFile(""temp"", ""."" + extension);
            System.out.printf(""Storing URL contents to a temp file : %s\n"", temp);
            temp.deleteOnExit();
            InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream());
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp));
            int len = 0;
            for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) {
                out.write(singleByte);
                len++;
            }
            System.out.printf(""Stored %d bytes from URL contents\n"", len);
            out.flush();
            out.close();
            System.out.printf(""URL/Temp extension : %s\n"", extension);
            if (extension.equalsIgnoreCase(""gz"")) {
                String shorterName = url.substring(0, url.lastIndexOf("".""));
                String extension2 = shorterName.substring((shorterName.lastIndexOf(""."")) + 1, shorterName.length());
                File temp2 = File.createTempFile(""temp"", ""."" + extension2);
                temp2.deleteOnExit();
                System.out.printf(""URL/Temp extension after decompressing gzip : %s\n"", extension2);
                GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp));
                OutputStream target = new FileOutputStream(temp2);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = decompressor.read(buffer)) > 0) {
                    target.write(buffer, 0, length);
                }
                target.flush();
                target.close();
                temp = temp2;
            }
            String tempName = temp.getName();
            extension = tempName.substring((tempName.lastIndexOf(""."")) + 1, tempName.length());
            Preprocessor fileLoader = null;
            BasePreprocessorConfig configObject = null;
            if (MethodCallTable.containsKey(extension) == false) {
                fileLoader = MethodCallTable.get(""default"");
            } else {
                fileLoader = MethodCallTable.get(extension);
            }
            System.out.printf(""Calling filter '%s' for extension: %s\n"", fileLoader.getPreprocessingMethodName(), extension);
            configObject = new LoadCSVPreprocessorConfig();
            configObject.setValueByName(""FileName"", temp.getAbsolutePath());
            fileLoader.setConfigurationClass(configObject);
            return fileLoader.run();
        } catch (Exception e) {
            logger.error(e);
            return false;
        }
    }
",0.0
"    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {
        monitor.subTask(""download "" + url.toString());
        InputStream in = null;
        FileOutputStream out = null;
        URLConnection conn = null;
        try {
            conn = url.openConnection();
            Writer writer = null;
            try {
                Date date = new Date(conn.getLastModified());
                writer = new FileWriter(timestamp);
                writer.write(this.FORMAT.format(date));
            } catch (IOException e) {
                timestamp.delete();
            } finally {
                IOUtils.closeQuietly(writer);
            }
            in = conn.getInputStream();
            out = new FileOutputStream(archive);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private void populateSessionId() throws IOException, java.net.MalformedURLException {
        String general_search_url = ""http://agricola.nal.usda.gov/cgi-bin/Pwebrecon.cgi?"" + ""DB=local&CNT=1&Search_Arg=RNAi&Search_Code=GKEY&STARTDB=AGRIDB"";
        String sidString = """", inputLine;
        BufferedReader in = new BufferedReader(new InputStreamReader((new URL(general_search_url)).openStream()));
        while ((inputLine = in.readLine()) != null) {
            if (inputLine.startsWith(""<INPUT TYPE=HIDDEN NAME=PID VALUE="")) {
                sidString = (inputLine.substring(inputLine.indexOf(""PID VALUE="") + 11, inputLine.indexOf("">"") - 1));
            }
        }
        sessionId = Integer.parseInt(sidString.trim());
    }
",0.0
"    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter to = new FileWriter(toFile);
        char[] buffer = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(buffer)) != -1) {
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        to.close();
        from.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    public static String MD5(String plainTxt) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainTxt.getBytes());
            byte[] b = md.digest();
            int i = 0;
            StringBuffer buffer = new StringBuffer();
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i += 256;
                }
                if (i < 16) {
                    buffer.append(""0"");
                }
                buffer.append(Integer.toHexString(i));
            }
            return buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return ""ERROR"";
        }
    }
","    private File download(String filename, URL url) {
        int size = -1;
        int received = 0;
        try {
            fireDownloadStarted(filename);
            File file = createFile(filename);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));
            System.out.println(""������Դ��"" + filename + "", url="" + url);
            InputStream bis = url.openStream();
            byte[] buf = new byte[1024];
            int count = 0;
            long lastUpdate = 0;
            size = bis.available();
            while ((count = bis.read(buf)) != -1) {
                bos.write(buf, 0, count);
                received += count;
                long now = System.currentTimeMillis();
                if (now - lastUpdate > 500) {
                    fireDownloadUpdate(filename, size, received);
                    lastUpdate = now;
                }
            }
            bos.close();
            System.out.println(""��Դ������ϣ�"" + filename);
            fireDownloadCompleted(filename);
            return file;
        } catch (IOException e) {
            System.out.println(""������Դʧ�ܣ�"" + filename + "", error="" + e.getMessage());
            fireDownloadInterrupted(filename);
            if (!(e instanceof FileNotFoundException)) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    public static void copyFile(File fromFile, File toFile) throws IOException {
        FileReader from = new FileReader(fromFile);
        FileWriter to = new FileWriter(toFile);
        char[] buffer = new char[4096];
        int bytes_read;
        while ((bytes_read = from.read(buffer)) != -1) {
            to.write(buffer, 0, bytes_read);
        }
        to.flush();
        to.close();
        from.close();
    }
",0.0
"    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
","    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.out.println(""param 1: "" + args[0] + ""\r\n"");
        System.out.println(""param 2: "" + args[1] + ""\r\n"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setFollowRedirects(true);
            connection.connect();
            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
            FileOutputStream out = new FileOutputStream(args[1]);
            int c = -1;
            while ((c = in.read()) >= 0) {
                out.write(c);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r\n"");
        }
    }
",0.0
"        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
","    public static Bitmap loadBitmap(String url) {
        try {
            final HttpClient httpClient = getHttpClient();
            final HttpResponse resp = httpClient.execute(new HttpGet(url));
            final HttpEntity entity = resp.getEntity();
            final int statusCode = resp.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK || entity == null) {
                return null;
            }
            final byte[] respBytes = EntityUtils.toByteArray(entity);
            BitmapFactory.Options decodeOptions = new BitmapFactory.Options();
            decodeOptions.inSampleSize = 1;
            return BitmapFactory.decodeByteArray(respBytes, 0, respBytes.length, decodeOptions);
        } catch (Exception e) {
            Log.w(TAG, ""Problem while loading image: "" + e.toString(), e);
        }
        return null;
    }
",0.0
"    private String getContents(Server server, String uri) throws TechnicalException {
        try {
            URL url = new URL(""http://localhost:"" + PORT + uri);
            return StreamUtils.getStreamContent(url.openStream());
        } catch (Exception e) {
            e.printStackTrace();
            throw new TechnicalException(e);
        }
    }
","    public static void creme_connect(String email, String username, String password, String IDnumber, TRP[] trp_array, GTRN[] gtrn_array, FLUX[] flux_array, TRANS[] trans_array, LETSPEC[] letspec_array, PUP[] pup_array, HUP[] hup_array, DOSE[] dose_array) {
        int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length + dose_array.length;
        int index = 0;
        String[] files_to_upload = new String[num_of_files];
        for (int a = 0; a < trp_array.length; a++) {
            files_to_upload[index] = trp_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < gtrn_array.length; a++) {
            files_to_upload[index] = gtrn_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < flux_array.length; a++) {
            files_to_upload[index] = flux_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < trans_array.length; a++) {
            files_to_upload[index] = trans_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < letspec_array.length; a++) {
            files_to_upload[index] = letspec_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < pup_array.length; a++) {
            files_to_upload[index] = pup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < hup_array.length; a++) {
            files_to_upload[index] = hup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < dose_array.length; a++) {
            files_to_upload[index] = dose_array[a].getThisFileName();
            index++;
        }
        Logger log = Logger.getLogger(CreateAStudy.class);
        String host = ""creme96.nrl.navy.mil"";
        String user = ""anonymous"";
        String ftppass = email;
        Logger.setLevel(Level.ALL);
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setRemoteHost(host);
            FTPMessageCollector listener = new FTPMessageCollector();
            ftp.setMessageListener(listener);
            log.info(""Connecting"");
            ftp.connect();
            log.info(""Logging in"");
            ftp.login(user, ftppass);
            log.debug(""Setting up passive, ASCII transfers"");
            ftp.setConnectMode(FTPConnectMode.ACTIVE);
            ftp.setType(FTPTransferType.BINARY);
            log.info(""Putting file"");
            for (int u = 0; u < files_to_upload.length; u++) {
                ftp.put(files_to_upload[u], files_to_upload[u]);
            }
            log.info(""Quitting client"");
            ftp.quit();
            log.debug(""Listener log:"");
            log.info(""Test complete"");
        } catch (Exception e) {
            log.error(""Demo failed"", e);
            e.printStackTrace();
        }
        System.out.println(""Finished FTPing User Request Files to common directory"");
        Upload_Files.upload(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished transfering User Request Files to your CREME96 personal directory"");
        RunRoutines.routines(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished running all of your uploaded routines"");
    }
",0.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
",0.0
"    public void alterarQuestaoMultiplaEscolha(QuestaoMultiplaEscolha q) throws SQLException {
        PreparedStatement stmt = null;
        String sql = ""UPDATE multipla_escolha SET texto=?, gabarito=? WHERE id_questao=?"";
        try {
            for (Alternativa alternativa : q.getAlternativa()) {
                stmt = conexao.prepareStatement(sql);
                stmt.setString(1, alternativa.getTexto());
                stmt.setBoolean(2, alternativa.getGabarito());
                stmt.setInt(3, q.getIdQuestao());
                stmt.executeUpdate();
                conexao.commit();
            }
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    public byte[] uniqueID(String name, String topic) {
        String key;
        byte[] id;
        synchronized (cache_) {
            key = name + ""|"" + topic;
            id = (byte[]) cache_.get(key);
            if (id == null) {
                MessageDigest md;
                try {
                    md = MessageDigest.getInstance(""SHA"");
                    md.update(name.getBytes());
                    md.update(topic.getBytes());
                    id = md.digest();
                    cache_.put(key, id);
                    if (debug_) {
                        System.out.println(""Cached "" + key + "" ["" + id[0] + "","" + id[1] + "",...]"");
                    }
                } catch (NoSuchAlgorithmException e) {
                    throw new Error(""SHA not available!"");
                }
            }
        }
        return id;
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    public static String sha1(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            byte[] data = new byte[40];
            md.update(str.getBytes(""iso-8859-1""), 0, str.length());
            data = md.digest();
            for (int i = 0; i < data.length; i++) {
                int halfbyte = (data[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                    halfbyte = data[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
        } catch (Exception e) {
            errorLog(""{Malgn.sha1} "" + e.getMessage());
        }
        return buf.toString();
    }
",1.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","        public void perform(Context context) {
            Long workflowIdParentProcess;
            SimpleProvider config;
            VariablesContext var;
            String xmldocument;
            Service service;
            Object[] param;
            String method;
            String wsurl;
            Object ret;
            Call call;
            URL url;
            try {
                var = Variables.getContext();
                if (var.get(""wsurl"") == null || var.get(""method"") == null) {
                    System.out.println(""----- Need the url of the webservice and the method! -----"");
                    log_.error(""Need the url of the webservice and the method!"");
                    return;
                }
                method = var.get(""method"");
                wsurl = var.get(""wsurl"");
                url = new java.net.URL(wsurl);
                try {
                    url.openConnection().connect();
                } catch (IOException ex) {
                    System.out.println(""----- Could not connect to the webservice! -----"");
                    log_.error(""Could not connect to the webservice!"");
                    return;
                }
                if (var.get(""param0"") == null || var.get(""param1"") == null) {
                    System.out.println(""----- Need parameters! -----"");
                    log_.error(""Need parameters!"");
                    return;
                }
                xmldocument = var.get(""param0"");
                workflowIdParentProcess = new Long(var.get(""param1""));
                param = new Object[] { xmldocument, workflowIdParentProcess };
                config = new SimpleProvider();
                config.deployTransport(""http"", new HTTPSender());
                service = new Service(config);
                call = (Call) service.createCall();
                call.setTargetEndpointAddress(new java.net.URL(wsurl));
                call.setOperationName(new QName(""http://schemas.xmlsoap.org/soap/encoding/"", method));
                try {
                    ret = call.invoke(param);
                    context.set(CTX_ANSW, ""=> notifyIhk invoked - Result: "" + ret);
                    System.out.println(""----- notifyIhk invoked! -----"");
                    log_.info(""notifyIhk invoked!"");
                } catch (RemoteException ex) {
                    System.out.println(""----- Could not invoke the method! -----"");
                    log_.error(""Could not invoke the method!"");
                }
            } catch (Exception ex) {
                ex.printStackTrace(System.err);
            }
        }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",0.0
"    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            System.out.println(""Mensagem original: "" + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
","    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
",0.0
"    public Vocabulary build(String url) {
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream is = entity.getContent();
                try {
                    Vocabulary tv = build(is);
                    LOG.info(""Successfully parsed Thesaurus: "" + tv.getTitle());
                    return tv;
                } catch (SAXException e) {
                    LOG.error(""Unable to parse XML for extension: "" + e.getMessage(), e);
                } finally {
                    is.close();
                }
                entity.consumeContent();
            }
        } catch (Exception e) {
            LOG.error(e);
        }
        return null;
    }
","    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty(""Content-Type"", ""text/xml"");
        urlConn.setRequestProperty(""charset"", ""utf-8"");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = ""<commit/>"";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    public TemplateLibrary loadTemplateLibrary(GadgetContext context, Uri uri) throws GadgetException {
        HttpRequest request = new HttpRequest(uri);
        request.setCacheTtl(300);
        HttpResponse response = pipeline.execute(request);
        if (response.getHttpStatusCode() != HttpResponse.SC_OK) {
            throw new GadgetException(GadgetException.Code.FAILED_TO_RETRIEVE_CONTENT, ""Unable to retrieve template library xml. HTTP error "" + response.getHttpStatusCode());
        }
        String content = response.getResponseAsString();
        try {
            String key = null;
            Element element = null;
            if (!context.getIgnoreCache()) {
                key = HashUtil.rawChecksum(content.getBytes());
                element = parsedXmlCache.getElement(key);
            }
            if (element == null) {
                element = XmlUtil.parse(content);
                if (key != null) {
                    parsedXmlCache.addElement(key, element);
                }
            }
            return new XmlTemplateLibrary(uri, element, content);
        } catch (XmlException e) {
            throw new GadgetException(GadgetException.Code.MALFORMED_XML_DOCUMENT, e);
        }
    }
",0.0
"    private static String getHash(String hash, String clear) {
        try {
            MessageDigest md = MessageDigest.getInstance(hash);
            md.update(clear.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            String str = new String();
            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);
            return str;
        } catch (NoSuchAlgorithmException exc) {
        } catch (UnsupportedEncodingException exc) {
        }
        return """";
    }
","    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",0.0
"    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());
            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");
            OutputStream fos = new FileOutputStream(tempFile);
            syncServer.getServerModifications(command.getSession(), fos);
            InputStream fis = new FileInputStream(tempFile);
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
","    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    public void getStation(String prefecture, String line) {
        HttpClient httpclient = null;
        try {
            httpclient = new DefaultHttpClient();
            List<NameValuePair> qparams = new ArrayList<NameValuePair>();
            qparams.add(new BasicNameValuePair(""method"", ""getStations""));
            qparams.add(new BasicNameValuePair(""prefecture"", prefecture));
            qparams.add(new BasicNameValuePair(""line"", line));
            URI uri = URIUtils.createURI(""http"", ""express.heartrails.com"", -1, ""/api/xml"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream, ""UTF-8""));
            StringBuffer buf = new StringBuffer();
            String str;
            while ((str = reader.readLine()) != null) {
                buf.append(str);
                buf.append(""\n"");
            }
            reader.close();
            stationRes = new StationResponse(buf.toString());
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
        } catch (ClientProtocolException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SAXException ex) {
            ex.printStackTrace();
        } catch (ParserConfigurationException ex) {
            ex.printStackTrace();
        } finally {
            mSearchStation.setEnabled(true);
        }
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    private static int computeNativesHash() {
        try {
            String classpath = System.getProperty(""java.class.path"");
            URL url = Thread.currentThread().getContextClassLoader().getResource(""com/jme3/system/Natives.class"");
            StringBuilder sb = new StringBuilder(url.toString());
            if (sb.indexOf(""jar:"") == 0) {
                sb.delete(0, 4);
                sb.delete(sb.indexOf(""!""), sb.length());
                sb.delete(sb.lastIndexOf(""/"") + 1, sb.length());
            }
            try {
                url = new URL(sb.toString());
            } catch (MalformedURLException ex) {
                throw new UnsupportedOperationException(ex);
            }
            URLConnection conn = url.openConnection();
            int hash = classpath.hashCode() ^ (int) conn.getLastModified();
            return hash;
        } catch (IOException ex) {
            throw new UnsupportedOperationException(ex);
        }
    }
","    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
",0.0
"    public boolean actualizarEstadoEliminacion(int idTorneo) {
        int intResult = 0;
        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    private String getFanFouMessage(int pageNo) throws IOException {
        URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""GET"");
        String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());
        request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        StringBuffer sb = new StringBuffer();
        while ((b = reader.readLine()) != null) {
            sb.append(b);
        }
        return sb.toString();
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
",0.0
"	public FTPClient sample2c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPSClient ftpClient = new FTPSClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
",0.0
"    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
","    public File uploadImage(InputStream inputStream, String fileName, String sessionId) {
        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);
        FileOutputStream fileOutputStream = null;
        try {
            FileUtils.touch(file);
            fileOutputStream = new FileOutputStream(file);
            IOUtils.copy(inputStream, fileOutputStream);
        } catch (IOException e) {
            logger.error(""Save uploaded image to file occur IOException."", e);
            throw new FileOperationException(""Save uploaded image to file occur IOException."", e);
        } finally {
            try {
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
            } catch (IOException e) {
                logger.error(""Close FileOutputStream Occur IOException while save a uploaded image."", e);
            }
        }
        return file;
    }
",0.0
"    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
","    private void copy(final File file) throws IOException {
        String targetFilename = targetFilename(file);
        FileInputStream fis = new FileInputStream(file);
        try {
            FileChannel source = fis.getChannel();
            try {
                FileOutputStream fos = new FileOutputStream(targetFilename);
                try {
                    FileChannel target = fos.getChannel();
                    try {
                        target.transferFrom(source, 0, source.size());
                    } finally {
                        target.close();
                    }
                } finally {
                    fos.close();
                }
            } finally {
                source.close();
            }
        } finally {
            fis.close();
        }
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), ""Test Ingest"");
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }
",0.0
"    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
","    public static void publish(String server, String id, String passwd, String path, String html) throws SocketException, IOException, LoginFailException {
        logger.info(""Connect to FTP Server "" + server);
        FTPClient f = new FTPClient();
        f.connect(server);
        if (f.login(id, passwd) == false) {
            logger.info(""Fail to login with id="" + id);
            throw new LoginFailException(id, passwd);
        }
        f.changeWorkingDirectory(path);
        logger.info(""Start to upload"");
        f.storeFile(""index.html"", new ByteArrayInputStream(html.getBytes(""utf-8"")));
        logger.info(""Upload index.html"");
        f.storeFile(""main.css"", new FileInputStream(""web/main.css""));
        logger.info(""Upload main.css"");
        f.storeFile(""cafelibrary.js"", new FileInputStream(""web/cafelibrary.js""));
        logger.info(""Upload cafelibrary.js"");
        f.makeDirectory(""img"");
        f.changeWorkingDirectory(""img"");
        for (int i = 0; i <= 5; i++) {
            String fileName = ""favorite_star_"" + i + "".png"";
            f.storeFile(fileName, new FileInputStream(""web/img/"" + fileName));
            logger.info(""Upload "" + fileName);
        }
        f.logout();
        f.disconnect();
    }
",0.0
"    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
","    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
",0.0
"    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(p.getBytes(""iso-8859-1""), 0, p.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public IsbnToBibConverter() {
        URLConnection conn = null;
        try {
            URL url = new URL(libraryUrl);
            conn = url.openConnection();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String cookie = extractCookie(conn);
        cookieValue = extractCookieValue(cookie);
        sessionId = extractSessionId(cookieValue);
    }
","    private Response httpRequest(String url, String charset) throws BggException {
        int retry = retryCount + 1;
        Response res = null;
        lastURL = url;
        for (retriedCount = 0; retriedCount < retry; retriedCount++) {
            int responseCode = -1;
            try {
                HttpURLConnection con = null;
                InputStream is = null;
                OutputStream osw = null;
                try {
                    con = (HttpURLConnection) new URL(url).openConnection();
                    con.setDoInput(true);
                    setHeaders(con);
                    con.setRequestMethod(""GET"");
                    responseCode = con.getResponseCode();
                    is = con.getInputStream();
                    if (charset != null) {
                        res = new Response(con.getResponseCode(), is, charset);
                    } else {
                        res = new Response(con.getResponseCode(), is);
                    }
                    break;
                } finally {
                    try {
                        is.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        osw.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        con.disconnect();
                    } catch (Exception ignore) {
                    }
                }
            } catch (IOException ioe) {
                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
                if (retriedCount == retryCount) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
            }
            try {
                Thread.sleep(retryIntervalMillis);
            } catch (InterruptedException ignore) {
            }
        }
        return res;
    }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",0.0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
","    @Validations(requiredFields = { @RequiredFieldValidator(fieldName = ""paymentType"", message = ""参数错误！"") })
    @InputConfig(resultName = ""error"")
    public String gateway() throws Exception {
        paymentConfig = paymentConfigService.load(paymentConfig.getId());
        if (paymentType == PaymentType.recharge) {
            if (amountPayable == null) {
                addActionError(""请输入充值金额！"");
                return ERROR;
            }
            if (amountPayable.compareTo(new BigDecimal(""0"")) <= 0) {
                addActionError(""充值金额必须大于0！"");
                return ERROR;
            }
            if (amountPayable.scale() > getSystemConfig().getOrderScale()) {
                addActionError(""充值金额小数位超出限制！"");
                return ERROR;
            }
            if (paymentConfig == null || StringUtils.isEmpty(paymentConfig.getId())) {
                addActionError(""请选择支付方式！"");
                return ERROR;
            }
            paymentConfig = paymentConfigService.load(paymentConfig.getId());
            if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit || paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = paymentConfig.getPaymentFee(amountPayable);
        } else if (paymentType == PaymentType.deposit) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() != PaymentConfigType.deposit) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            if (order.getOrderStatus() == OrderStatus.completed || order.getOrderStatus() == OrderStatus.invalid) {
                addActionError(""订单状态错误！"");
                return ERROR;
            }
            if (order.getPaymentStatus() == com.nodeshop.entity.Order.PaymentStatus.paid) {
                addActionError(""订单付款状态错误！"");
                return ERROR;
            }
            if (getLoginMember().getDeposit().compareTo(order.getTotalAmount().subtract(order.getPaidAmount())) < 0) {
                paymentResult = PaymentResult.failure;
                setResponseNoCache();
                return ""deposit_result"";
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getTotalAmount().subtract(paymentFee).subtract(order.getPaidAmount());
        } else if (paymentType == PaymentType.offline) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            if (order.getOrderStatus() == OrderStatus.completed || order.getOrderStatus() == OrderStatus.invalid) {
                addActionError(""订单状态错误！"");
                return ERROR;
            }
            if (order.getPaymentStatus() == com.nodeshop.entity.Order.PaymentStatus.paid) {
                addActionError(""订单付款状态错误！"");
                return ERROR;
            }
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() != PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getProductTotalPrice().add(order.getDeliveryFee()).subtract(order.getPaidAmount());
        } else if (paymentType == PaymentType.online) {
            if (order == null || StringUtils.isEmpty(order.getId())) {
                addActionError(""订单信息错误！"");
                return ERROR;
            }
            order = orderService.load(order.getId());
            paymentConfig = order.getPaymentConfig();
            if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit || paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
                addActionError(""支付方式错误！"");
                return ERROR;
            }
            paymentFee = order.getPaymentFee();
            amountPayable = order.getTotalAmount().subtract(paymentFee).subtract(order.getPaidAmount());
        }
        BigDecimal totalAmount = amountPayable.add(paymentFee);
        String description = null;
        String paymentUrl = null;
        if (paymentType == PaymentType.recharge) {
            description = getSystemConfig().getShopName() + ""预存款充值"";
        } else {
            description = getSystemConfig().getShopName() + ""订单支付（"" + order.getOrderSn() + ""）"";
        }
        Member loginMember = getLoginMember();
        if (paymentConfig.getPaymentConfigType() == PaymentConfigType.deposit) {
            if (totalAmount.compareTo(order.getTotalAmount().subtract(order.getPaidAmount())) == 0) {
                order.setPaymentStatus(com.nodeshop.entity.Order.PaymentStatus.paid);
                order.setPaidAmount(order.getPaidAmount().add(totalAmount));
            } else if (totalAmount.compareTo(order.getTotalAmount()) < 0) {
                order.setPaymentStatus(com.nodeshop.entity.Order.PaymentStatus.partPayment);
                order.setPaidAmount(order.getPaidAmount().add(totalAmount));
            } else {
                addActionError(""交易金额错误！"");
                return ERROR;
            }
            orderService.update(order);
            loginMember.setDeposit(loginMember.getDeposit().subtract(totalAmount));
            memberService.update(loginMember);
            Deposit deposit = new Deposit();
            deposit.setDepositType(DepositType.memberPayment);
            deposit.setCredit(new BigDecimal(""0""));
            deposit.setDebit(amountPayable);
            deposit.setBalance(loginMember.getDeposit());
            deposit.setMember(loginMember);
            depositService.save(deposit);
            Payment payment = new Payment();
            payment.setPaymentType(paymentType);
            payment.setPaymentConfigName(paymentConfig.getName());
            payment.setBankName(null);
            payment.setBankAccount(null);
            payment.setTotalAmount(totalAmount);
            payment.setPaymentFee(paymentFee);
            payment.setPayer(getLoginMember().getUsername());
            payment.setOperator(null);
            payment.setMemo(null);
            payment.setPaymentStatus(PaymentStatus.success);
            payment.setPaymentConfig(paymentConfig);
            payment.setDeposit(deposit);
            payment.setOrder(order);
            paymentService.save(payment);
            if (getSystemConfig().getStoreFreezeTime() == StoreFreezeTime.payment) {
                for (OrderItem orderItem : order.getOrderItemSet()) {
                    Product product = orderItem.getProduct();
                    if (product.getStore() != null) {
                        product.setFreezeStore(product.getFreezeStore() + orderItem.getProductQuantity());
                        if (product.getIsOutOfStock()) {
                            Hibernate.initialize(orderItem.getProduct().getProductAttributeMapStore());
                        }
                        productService.update(product);
                        if (product.getIsOutOfStock()) {
                            flushCache();
                            htmlService.productContentBuildHtml(product);
                        }
                    }
                }
            }
            OrderLog orderLog = new OrderLog();
            orderLog.setOrderLogType(OrderLogType.payment);
            orderLog.setOrderSn(order.getOrderSn());
            orderLog.setOperator(null);
            orderLog.setInfo(""支付总金额："" + payment.getTotalAmount());
            orderLog.setOrder(order);
            orderLogService.save(orderLog);
            paymentResult = PaymentResult.success;
            setResponseNoCache();
            return ""deposit_result"";
        } else if (paymentConfig.getPaymentConfigType() == PaymentConfigType.offline) {
            paymentResult = PaymentResult.success;
            return ""offline_result"";
        } else if (paymentConfig.getPaymentConfigType() == PaymentConfigType.tenpay) {
            TenpayConfig tenpayConfig = (TenpayConfig) paymentConfig.getConfigObject();
            Payment payment = new Payment();
            payment.setPaymentType(paymentType);
            payment.setPaymentConfigName(paymentConfig.getName());
            payment.setBankName(getText(""PaymentConfigType.tenpay""));
            payment.setBankAccount(tenpayConfig.getBargainorId());
            payment.setTotalAmount(totalAmount);
            payment.setPaymentFee(paymentFee);
            payment.setPayer(getLoginMember().getUsername());
            payment.setOperator(null);
            payment.setMemo(null);
            payment.setPaymentStatus(PaymentStatus.ready);
            payment.setPaymentConfig(paymentConfig);
            payment.setDeposit(null);
            if (paymentType == PaymentType.recharge) {
                payment.setOrder(null);
            } else {
                payment.setOrder(order);
            }
            paymentService.save(payment);
            String ip = getRequest().getRemoteAddr();
            if (tenpayConfig.getTenpayType() == TenpayType.direct) {
                paymentUrl = paymentConfigService.buildTenpayDirectPaymentUrl(paymentConfig, payment.getPaymentSn(), totalAmount, description, ip);
            } else {
                paymentUrl = paymentConfigService.buildTenpayPartnerPaymentUrl(paymentConfig, payment.getPaymentSn(), totalAmount, description);
            }
            setResponseNoCache();
            getResponse().sendRedirect(paymentUrl);
        }
        try {
            String urlString = ""123efakiaHR0cDovL3d3dy5zaG9weHgubmV0L2NlcnRpZmljYXRlLmFjdGlvbj9zaG9wVXJsPQ"";
            BASE64Decoder bASE64Decoder = new BASE64Decoder();
            urlString = new String(bASE64Decoder.decodeBuffer(StringUtils.substring(urlString, 8) + ""==""));
            URL url = new URL(urlString + SystemConfigUtil.getSystemConfig().getShopUrl());
            URLConnection urlConnection = url.openConnection();
            HttpURLConnection httpConnection = (HttpURLConnection) urlConnection;
            httpConnection.getResponseCode();
        } catch (IOException e) {
        }
        return null;
    }
",0.0
"    public int[] getRandMas(int n) {
        boolean t = true;
        int interim = 0;
        int[] mas = new int[n];
        Random rand = new Random();
        for (int i = 0; i < n; i++) {
            mas[i] = rand.nextInt(10) + 1;
        }
        while (t) {
            t = false;
            for (int i = 0; i < mas.length - 1; i++) {
                if (mas[i] > mas[i + 1]) {
                    interim = mas[i];
                    mas[i] = mas[i + 1];
                    mas[i + 1] = interim;
                    t = true;
                }
            }
        }
        return mas;
    }
","    public void testImageDataField() {
        PropertySet propertySet = fetchPropertySet();
        try {
            ImageDataField dataField = propertySet.getDataField(PropertySetTestStruct.TESTBLOCK_IMAGE, ImageDataField.class);
            URL url = getClass().getResource(""JFire_Test.gif"");
            if (url == null) return;
            InputStream in = url.openStream();
            try {
                dataField.loadStream(in, ""JFire_Test.gif"", ""image/gif"");
            } finally {
                in.close();
            }
        } catch (Exception e) {
            throw new RuntimeException(""Setting image of ImageDataField failed"", e);
        }
        try {
            propertySet.deflate();
            getPropertyManager().storePropertySet(propertySet, true, FETCH_GROUPS, FETCH_DEPTH);
        } catch (Exception e) {
            throw new RuntimeException(""Storing PropertySet with ImageDataField failed"", e);
        }
    }
",0.0
"    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
","    public boolean run() {
        String url;
        try {
            url = getFileName();
        } catch (NoSuchFieldException e) {
            return false;
        }
        if (url == null) {
            logger.error(""URL not specified! Cannot continue."");
            return false;
        }
        try {
            URL newURL = new URL(url);
            String extension = url.substring((url.lastIndexOf(""."")) + 1, url.length());
            File temp = File.createTempFile(""temp"", ""."" + extension);
            System.out.printf(""Storing URL contents to a temp file : %s\n"", temp);
            temp.deleteOnExit();
            InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream());
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp));
            int len = 0;
            for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) {
                out.write(singleByte);
                len++;
            }
            System.out.printf(""Stored %d bytes from URL contents\n"", len);
            out.flush();
            out.close();
            System.out.printf(""URL/Temp extension : %s\n"", extension);
            if (extension.equalsIgnoreCase(""gz"")) {
                String shorterName = url.substring(0, url.lastIndexOf("".""));
                String extension2 = shorterName.substring((shorterName.lastIndexOf(""."")) + 1, shorterName.length());
                File temp2 = File.createTempFile(""temp"", ""."" + extension2);
                temp2.deleteOnExit();
                System.out.printf(""URL/Temp extension after decompressing gzip : %s\n"", extension2);
                GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp));
                OutputStream target = new FileOutputStream(temp2);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = decompressor.read(buffer)) > 0) {
                    target.write(buffer, 0, length);
                }
                target.flush();
                target.close();
                temp = temp2;
            }
            String tempName = temp.getName();
            extension = tempName.substring((tempName.lastIndexOf(""."")) + 1, tempName.length());
            Preprocessor fileLoader = null;
            BasePreprocessorConfig configObject = null;
            if (MethodCallTable.containsKey(extension) == false) {
                fileLoader = MethodCallTable.get(""default"");
            } else {
                fileLoader = MethodCallTable.get(extension);
            }
            System.out.printf(""Calling filter '%s' for extension: %s\n"", fileLoader.getPreprocessingMethodName(), extension);
            configObject = new LoadCSVPreprocessorConfig();
            configObject.setValueByName(""FileName"", temp.getAbsolutePath());
            fileLoader.setConfigurationClass(configObject);
            return fileLoader.run();
        } catch (Exception e) {
            logger.error(e);
            return false;
        }
    }
",0.0
"    public void shouldBeAbleToDownloadAndUpload() throws IOException {
        OutputStream outputStream = fileSystem.createOutputStream(_(""hello""), OutputMode.OVERWRITE);
        outputStream.write(new byte[] { 1, 2, 3 });
        outputStream.close();
        InputStream inputStream = fileSystem.createInputStream(_(""hello""));
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        IOUtils.copy(inputStream, buffer);
        inputStream.close();
        assertThat().array(buffer.toByteArray()).isEqualTo(new byte[] { 1, 2, 3 });
    }
","    public RequestLogger() {
        Server.getScheduler().register(""Request Log Rotator"", new SchedulerInterface() {

            public int getScheduleRate() {
                return 0;
            }

            public void handle() {
                if (requestCounter == 0) {
                    requestCounter++;
                    return;
                }
                requestCounter++;
                Iterator it = loggerTimeouts.keySet().iterator();
                while (it.hasNext()) {
                    String host = (String) it.next();
                    String timeout = (String) loggerTimeouts.get(host);
                    int timeoutVal = Integer.parseInt(timeout);
                    if (timeoutVal > 0) {
                        timeoutVal /= 10;
                    }
                    int timeoutMod = (requestCounter % timeoutVal);
                    if (timeoutMod == 0) {
                        Object loggerFile = loggerFiles.get(host);
                        Object loggerFilenameObject = loggerFilenames.get(host);
                        Object loggerDestObject = loggerDests.get(host);
                        Object loggerCompressObject = loggerCompresses.get(host);
                        Object loggerDayObject = loggerDays.get(host);
                        Object loggerArchiveObject = loggerArchives.get(host);
                        Object loggerDeleteObject = loggerDeletes.get(host);
                        boolean rotateCompress = false;
                        boolean rotateDelete = false;
                        String rotateDest = null;
                        String logFile = null;
                        String rotateArchive = null;
                        int rotateDays = 0;
                        if (loggerCompressObject != null && ((String) loggerCompressObject).equalsIgnoreCase(""true"")) {
                            rotateCompress = true;
                        }
                        if (loggerDeleteObject != null && ((String) loggerDeleteObject).equalsIgnoreCase(""true"")) {
                            rotateDelete = true;
                        }
                        if (loggerDestObject != null) {
                            rotateDest = (String) loggerDestObject;
                        }
                        if (loggerFilenameObject != null) {
                            logFile = (String) loggerFilenameObject;
                        }
                        if (loggerArchiveObject != null) {
                            rotateArchive = (String) loggerArchiveObject;
                        }
                        if (loggerDayObject != null) {
                            rotateDays = Integer.parseInt((String) loggerDayObject);
                        }
                        FileChannel srcChannel, destChannel;
                        String destOutFile = logFile + ""."" + System.currentTimeMillis();
                        String destOutFileCompressed = logFile + ""."" + System.currentTimeMillis() + "".gz"";
                        if (rotateDest != null) {
                            (new File(rotateDest)).mkdirs();
                            if (destOutFile.indexOf(""/"") != -1) {
                                destOutFile = rotateDest + ""/"" + destOutFile.substring(destOutFile.lastIndexOf(""/"") + 1);
                            }
                            if (destOutFileCompressed.indexOf(""/"") != -1) {
                                destOutFileCompressed = rotateDest + ""/"" + destOutFileCompressed.substring(destOutFileCompressed.lastIndexOf(""/"") + 1);
                            }
                        }
                        if (rotateCompress) {
                            try {
                                GZIPOutputStream out = new GZIPOutputStream(new FileOutputStream(destOutFileCompressed));
                                FileInputStream in = new FileInputStream(logFile);
                                byte buf[] = new byte[1024];
                                int len;
                                while ((len = in.read(buf)) > 0) {
                                    out.write(buf, 0, len);
                                }
                                in.close();
                                out.finish();
                                out.close();
                                Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFileCompressed + ""'"");
                                buf = null;
                                out = null;
                                in = null;
                            } catch (Exception e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""': "" + e);
                            }
                        } else {
                            try {
                                srcChannel = new FileInputStream(logFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to read log file '"" + logFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel = new FileOutputStream(destOutFile).getChannel();
                            } catch (IOException e) {
                                Debug.debug(""Unable to rotate log file '"" + logFile + ""' to '"" + destOutFile + ""': "" + e.getMessage());
                                return;
                            }
                            try {
                                destChannel.transferFrom(srcChannel, 0, srcChannel.size());
                                srcChannel.close();
                                destChannel.close();
                                destChannel = null;
                                srcChannel = null;
                            } catch (IOException e) {
                                Debug.debug(""Unable to copy data from file '"" + logFile + ""' to '"" + destOutFile + ""' for file rotation: "" + e.getMessage());
                                return;
                            }
                            Debug.debug(""Rotated log file '"" + logFile + ""' to '"" + destOutFile + ""'"");
                        }
                        if (rotateDelete) {
                            try {
                                ((PrintStream) loggerFile).close();
                            } catch (Exception e) {
                            }
                            (new File(logFile)).delete();
                            loggerFiles.remove(host);
                            addLogger(host, logFile);
                        }
                        if (rotateDest != null) {
                            long comparisonTime = rotateDays * (60 * 60 * 24 * 1000);
                            long currentTime = System.currentTimeMillis();
                            File fileList[] = (new File(rotateDest)).listFiles();
                            DateFormat format1 = new SimpleDateFormat(""yyyy-MM-dd"");
                            java.util.Date date = new java.util.Date(currentTime);
                            String archiveFile = format1.format(date).toString() + "".zip"";
                            if (rotateArchive != null) {
                                archiveFile = rotateArchive + ""/"" + archiveFile;
                                (new File(rotateArchive)).mkdirs();
                            }
                            Archive archive = new Archive(archiveFile);
                            for (int i = 0; i < fileList.length; i++) {
                                String currentFilename = fileList[i].getName();
                                long timeDifference = (currentTime - fileList[i].lastModified());
                                if ((rotateCompress && currentFilename.endsWith("".gz"")) || (!rotateCompress && currentFilename.indexOf(logFile + ""."") != -1)) {
                                    if (rotateDest != null) {
                                        currentFilename = rotateDest + ""/"" + currentFilename;
                                    }
                                    if (timeDifference > comparisonTime) {
                                        archive.addFile(fileList[i].getName(), currentFilename);
                                        fileList[i].delete();
                                    }
                                }
                            }
                            fileList = null;
                            format1 = null;
                            archive = null;
                        }
                    }
                }
                it = null;
            }

            public String identString() {
                return ""Request Log Rotator"";
            }
        });
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    @SuppressWarnings(""unchecked"")
    private void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        printAccess(request, false);
        try {
            response.setContentType(""application/json"");
            String position = request.getParameter(""pos"");
            if (position == null || position.length() == 0) {
                reportJsonError(request, response, ""Missing position parameter"");
            } else {
                PositionParser pp;
                pp = new PositionParser(position);
                String url = ""http://simbad.u-strasbg.fr/simbad/sim-script?submit=submit+script&script="";
                url += URLEncoder.encode(""format object \""%IDLIST[%-30*]|-%COO(A)|%COO(D)|%OTYPELIST(S)\""\n"" + pp.getPosition() + "" radius=1m"", ""ISO-8859-1"");
                System.out.println(url);
                URL simurl = new URL(url);
                BufferedReader in = new BufferedReader(new InputStreamReader(simurl.openStream()));
                String boeuf;
                boolean data_found = false;
                JSONObject retour = new JSONObject();
                JSONArray dataarray = new JSONArray();
                JSONArray colarray = new JSONArray();
                JSONObject jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""ID"");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""Position"");
                colarray.add(jsloc);
                jsloc = new JSONObject();
                jsloc.put(""sTitle"", ""Type"");
                colarray.add(jsloc);
                retour.put(""aoColumns"", colarray);
                int datasize = 0;
                while ((boeuf = in.readLine()) != null) {
                    if (data_found) {
                        String[] fields = boeuf.trim().split(""\\|"", -1);
                        int pos = fields.length - 1;
                        if (pos >= 3) {
                            String type = fields[pos];
                            pos--;
                            String dec = fields[pos];
                            pos--;
                            String ra = fields[pos];
                            String id = fields[0].split(""\\s{2,}"")[0].trim();
                            JSONArray darray = new JSONArray();
                            darray.add(id.trim());
                            darray.add(ra + "" "" + dec);
                            darray.add(type.trim());
                            dataarray.add(darray);
                            datasize++;
                            if (datasize >= 15) {
                                darray = new JSONArray();
                                darray.add(""truncated to 15"");
                                darray.add("""");
                                darray.add("""");
                                dataarray.add(darray);
                                datasize++;
                            }
                        }
                    } else if (boeuf.startsWith(""::data"")) {
                        data_found = true;
                    }
                }
                in.close();
                retour.put(""aaData"", dataarray);
                retour.put(""iTotalRecords"", datasize);
                retour.put(""iTotalDisplayRecords"", datasize);
                JsonUtils.teePrint(response.getOutputStream(), retour.toJSONString());
            }
        } catch (QueryException e) {
            reportJsonError(request, response, e);
        }
    }
",0.0
"    public void dumpToFile(File file) throws IOException {
        OutputStream out = new FileOutputStream(file);
        if (contentStream != null) {
            IOUtils.copy(contentStream, out);
            setPath(file.getAbsolutePath());
        } else {
            IOUtils.write(getContent(), out);
        }
        IOUtils.closeQuietly(out);
    }
","    protected void loadXmlFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            xmlSource = new StreamSource(rd);
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    public static byte[] MD5(String input) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        md5.update(input.getBytes());
        return md5.digest();
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
",0.0
"    public static byte[] getBytes(String s) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(s.getBytes());
        return d.digest();
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public static boolean Copy(String __from, String __to) {
        try {
            int bytesum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(__from);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(__from);
                FileOutputStream fs = new FileOutputStream(__to);
                byte[] buffer = new byte[1024];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
","            public void run() {
                final SimpleMessageListener listener = new SimpleMessageListener() {

                    public final boolean accept(final String from, final String recipient) {
                        return true;
                    }

                    public final void deliver(final String from, final String recipient, final InputStream data) throws TooMuchDataException, IOException {
                        System.out.println(""FROM: "" + from);
                        System.out.println(""TO: "" + recipient);
                        final File tmpDir = new File(System.getProperty(""java.io.tmpdir""));
                        final File file = new File(tmpDir, recipient);
                        final FileWriter fw = new FileWriter(file);
                        try {
                            IOUtils.copy(data, fw);
                        } finally {
                            fw.close();
                        }
                    }
                };
                final SMTPServer smtpServer = new SMTPServer(new SimpleMessageListenerAdapter(listener));
                smtpServer.start();
                System.out.println(""Started SMTP Server"");
            }
",1.0
"    public static String encipherAMessage(String message) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] digest = sha1.digest();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String cipherTextB64 = base64encoder.encode(digest);
            return cipherTextB64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public static boolean Copy(String __from, String __to) {
        try {
            int bytesum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(__from);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(__from);
                FileOutputStream fs = new FileOutputStream(__to);
                byte[] buffer = new byte[1024];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
","    public static void test2() throws Exception {
        int keySize = 1024;
        int dBlockSize = keySize / 8;
        int eBlockSize = dBlockSize - 8 - 3;
        CertAndKeyGen certAndKeyGen = new CertAndKeyGen(""RSA"", ""MD5WithRSA"");
        certAndKeyGen.generate(keySize);
        PublicKey publicKey = certAndKeyGen.getPublicKey();
        PrivateKey privateKey = certAndKeyGen.getPrivateKey();
        Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher1.init(Cipher.ENCRYPT_MODE, publicKey);
        String fileA = ""C:/temp/a.txt"";
        String fileB = ""C:/temp/b.txt"";
        String fileC = ""C:/temp/c.txt"";
        FileInputStream fis = new FileInputStream(fileA);
        FileOutputStream fos = new FileOutputStream(fileB, false);
        CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize);
        byte[] b = new byte[128];
        int i = fis.read(b);
        while (i != -1) {
            eos.write(b, 0, i);
            i = fis.read(b);
        }
        eos.flush();
        eos.close();
        fos.close();
        Cipher cipher2 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher2.init(Cipher.DECRYPT_MODE, privateKey);
        fis = new FileInputStream(fileB);
        CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize);
        FileOutputStream decodedFile = new FileOutputStream(fileC, false);
        int read = -1;
        while ((read = cis.read()) > -1) {
            decodedFile.write(read);
        }
        decodedFile.close();
        fis.close();
    }
",1.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
",0.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""classpath://"")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","        void copy(String source_name, String dest_name) throws IOException {
            File source_file = new File(source_name);
            File destination_file = new File(dest_name);
            FileInputStream source = null;
            FileOutputStream destination = null;
            byte[] buffer;
            int bytes_read;
            try {
                if (!source_file.exists() || !source_file.isFile()) {
                    throw new FileCopyException(""FileCopy: no such source file: "" + source_name);
                }
                if (!source_file.canRead()) {
                    throw new FileCopyException(""FileCopy: source file "" + ""is unreadable: "" + source_name);
                }
                if (!destination_file.exists()) {
                    File parentdir = parent(destination_file);
                    if (!parentdir.exists()) {
                        throw new FileCopyException(""FileCopy: destination "" + ""directory doesn't exist: "" + dest_name);
                    }
                    if (!parentdir.canWrite()) {
                        throw new FileCopyException(""FileCopy: destination "" + ""directory is unwriteable: "" + dest_name);
                    }
                }
                source = new FileInputStream(source_file);
                destination = new FileOutputStream(destination_file);
                buffer = new byte[1024];
                while (true) {
                    bytes_read = source.read(buffer);
                    if (bytes_read == -1) {
                        break;
                    }
                    destination.write(buffer, 0, bytes_read);
                }
            } finally {
                if (source != null) {
                    try {
                        source.close();
                    } catch (IOException e) {
                    }
                }
                if (destination != null) {
                    try {
                        destination.close();
                    } catch (IOException e) {
                    }
                }
            }
        }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","        private void compileJarFile() {
            String javaFileName = jarFileName + "".java"";
            try {
                File pluginWorkDirectory = new File(CastadivaModel.PLUGIN_WORKFOLDER);
                pluginWorkDirectory.mkdirs();
                File pluginsDir = new File(pluginWorkDirectory.getPath() + ""/castadiva/Plugins"");
                pluginsDir.mkdirs();
                BufferedWriter bout = new BufferedWriter(new FileWriter(pluginWorkDirectory.getPath() + ""/castadiva/Plugins/"" + javaFileName));
                bout.write(""package castadiva.Plugins;\n"");
                bout.write(""import java.io.*;\n"");
                bout.write(""import java.util.zip.ZipEntry;\n"");
                bout.write(""import java.util.jar.JarFile;\n"");
                bout.write(""import lib.IPluginCastadiva;\n"");
                bout.write(""public class "" + jarFileName + "" implements IPluginCastadiva {\n"");
                bout.write(""    public String getBin() {\n"");
                bout.write(""        return \"""" + binaryFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getFlags() {\n"");
                bout.write(""        return \"""" + protocolFlags + ""\""; \n    }\n"");
                bout.write(""    public String getPathConf() {\n"");
                bout.write(""        return \"""" + configurationFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getConfContent(){\n"");
                bout.write(""        BufferedReader confFileReader;\n"");
                bout.write(""        try {\n"");
                bout.write(""            JarFile jar = new JarFile(\"""" + CastadivaModel.PLUGIN_JAR_FOLDER + ""/"" + jarFileName + "".jar\"");\n"");
                bout.write(""            ZipEntry entry = jar.getEntry(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""            confFileReader = new BufferedReader(new InputStreamReader(jar.getInputStream(entry)));\n"");
                bout.write(""            String confFile = \""\"";\n"");
                bout.write(""            String confFileLine;\n"");
                bout.write(""            while((confFileLine = confFileReader.readLine()) != null){\n"");
                bout.write(""                 confFile+=\""\\n\""+confFileLine;\n"");
                bout.write(""            }\n"");
                bout.write(""            return(confFile);\n"");
                bout.write(""        } catch (Exception ex) {\n"");
                bout.write(""            System.out.println(ex);\n"");
                bout.write(""        }\n"");
                bout.write(""        return(null);\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getConf(){\n"");
                bout.write(""        return(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getKillInstruction() {\n"");
                bout.write(""        return  \""killall "" + binFileName[binFileName.length - 1] + "" 2>/dev/null\"""" + "";\n    }\n}"");
                bout.close();
                BufferedWriter confFileWriter = new BufferedWriter(new FileWriter(CastadivaModel.PLUGIN_WORKFOLDER + ""/"" + configurationFilename[configurationFilename.length - 1]));
                confFileWriter.write(protocolConfiguration);
                confFileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(ProtocolsGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
",0.0
"    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
","    public static Document tidyHTML(URL url) throws XMLHelperException {
        try {
            URLConnection inConnection = url.openConnection();
            if (inConnection.getContentType().startsWith(""text/xml"") || inConnection.getContentType().startsWith(""text/xhtml"")) {
                return parseXMLFromURL(url);
            } else if (inConnection.getContentType().startsWith(""text/html"")) {
                InputStream is = inConnection.getInputStream();
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                int totalBytes = 0;
                byte[] buffer = new byte[65536];
                while (true) {
                    int bytesRead = is.read(buffer, 0, buffer.length);
                    if (bytesRead < 0) break;
                    for (int i = 0; i < bytesRead; i++) {
                        byte b = buffer[i];
                        if (b < 32 && b != 10 && b != 13 && b != 9) b = 32;
                        buffer[i] = b;
                    }
                    out.write(buffer, 0, bytesRead);
                    totalBytes += bytesRead;
                }
                is.close();
                out.close();
                String outContent = out.toString();
                InputStream in = new ByteArrayInputStream(out.toByteArray());
                Tidy tidy = new Tidy();
                tidy.setShowWarnings(false);
                tidy.setXmlOut(true);
                tidy.setXmlPi(false);
                tidy.setDocType(""omit"");
                tidy.setXHTML(false);
                tidy.setRawOut(true);
                tidy.setNumEntities(true);
                tidy.setQuiet(true);
                tidy.setFixComments(true);
                tidy.setIndentContent(true);
                tidy.setCharEncoding(org.w3c.tidy.Configuration.ASCII);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                org.w3c.dom.Document tNode = (org.w3c.dom.Document) tidy.parseDOM(in, baos);
                String result = ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + baos.toString();
                int startIndex = 0;
                int endIndex = 0;
                if ((startIndex = result.indexOf(""<!DOCTYPE"")) >= 0) {
                    endIndex = result.indexOf("">"", startIndex);
                    result = result.substring(0, startIndex) + result.substring(endIndex + 1, result.length());
                }
                while ((startIndex = result.indexOf(""<script"")) >= 0) {
                    endIndex = result.indexOf(""</script>"");
                    result = result.substring(0, startIndex) + result.substring(endIndex + 9, result.length());
                }
                in.close();
                baos.close();
                return parseXMLFromString(result);
            } else {
                throw new XMLHelperException(""Unable to tidy content type: "" + inConnection.getContentType());
            }
        } catch (IOException ioe) {
            throw new XMLHelperException(""Unable to perform input/output"", ioe);
        }
    }
",0.0
"    public void testDefaultHeadersRedirect() throws Exception {
        String host = ""localhost"";
        int port = this.localServer.getServicePort();
        this.localServer.register(""*"", new BasicRedirectService(host, port));
        DefaultHttpClient client = new DefaultHttpClient();
        HttpContext context = new BasicHttpContext();
        List<Header> defaultHeaders = new ArrayList<Header>(1);
        defaultHeaders.add(new BasicHeader(HTTP.USER_AGENT, ""my-test-client""));
        client.getParams().setParameter(ClientPNames.DEFAULT_HEADERS, defaultHeaders);
        HttpGet httpget = new HttpGet(""/oldlocation/"");
        HttpResponse response = client.execute(getServerHttp(), httpget, context);
        HttpEntity e = response.getEntity();
        if (e != null) {
            e.consumeContent();
        }
        HttpRequest reqWrapper = (HttpRequest) context.getAttribute(ExecutionContext.HTTP_REQUEST);
        assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
        assertEquals(""/newlocation/"", reqWrapper.getRequestLine().getUri());
        Header header = reqWrapper.getFirstHeader(HTTP.USER_AGENT);
        assertEquals(""my-test-client"", header.getValue());
    }
","    private void copySon(File parent) {
        System.out.println(""parent---"" + parent.getAbsolutePath());
        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {
            File cases = new File(parent, ""cases"");
            if (cases.exists()) {
                File answers = new File(parent, ""answers"");
                if (!answers.exists()) {
                    answers.mkdir();
                    File answers_linux = new File(parent, ""answers_linux"");
                    for (File file : answers_linux.listFiles()) {
                        if (file.isDirectory()) {
                            continue;
                        }
                        File target = new File(answers, file.getName());
                        try {
                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));
                        } catch (Throwable t) {
                            t.printStackTrace();
                        }
                    }
                }
            } else {
                for (File son : parent.listFiles()) {
                    System.out.println(""parent---"" + son.getAbsolutePath());
                    copySon(son);
                }
            }
        }
    }
",0.0
"    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
",0.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    private void removeSessionId(InputStream inputStream, Output output) throws IOException {
        String jsessionid = RewriteUtils.getSessionId(target);
        boolean textContentType = ResourceUtils.isTextContentType(httpClientResponse.getHeader(""Content-Type""));
        if (jsessionid == null || !textContentType) {
            IOUtils.copy(inputStream, output.getOutputStream());
        } else {
            String charset = httpClientResponse.getContentCharset();
            if (charset == null) {
                charset = ""ISO-8859-1"";
            }
            String content = IOUtils.toString(inputStream, charset);
            content = removeSessionId(jsessionid, content);
            if (output.getHeader(""Content-length"") != null) {
                output.setHeader(""Content-length"", Integer.toString(content.length()));
            }
            OutputStream outputStream = output.getOutputStream();
            IOUtils.write(content, outputStream, charset);
        }
        inputStream.close();
    }
",0.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    public static void main(String args[]) throws Exception {
        currTime = getCurrentTimestamp();
        String sqlDoc = """";
        String sqlVersion = """";
        String sqlDocVersion = """";
        String sqlContent = """";
        String sqlDocDetail = """";
        String sqlRoot = """";
        java.util.Properties props = new java.util.Properties();
        String path = new LoadDocumentData().getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        if (!path.endsWith(""/"")) {
            path += ""/"";
        }
        path += ""generate.properties"";
        if (!path.startsWith(""/"")) {
            path = ""/"" + path;
        }
        java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(path));
        props.load(fis);
        author = props.getProperty(""author"");
        srcPath = props.getProperty(""srcPath"");
        driverStr = props.getProperty(""driverStr"");
        dbConnStr = props.getProperty(""dbConnStr"");
        dbUsername = props.getProperty(""dbUsername"");
        dbPassword = props.getProperty(""dbPassword"");
        openDBConn();
        stat = conn.createStatement();
        Hashtable htTableKey = new Hashtable();
        htTableKey = getTableKey(conn);
        genUserDefinedIndex(conn, htTableKey);
        Integer ownerID = new Integer(0);
        Integer nDocID = new Integer(1);
        Integer nDocDetailID = new Integer(1);
        Integer nVersionID = new Integer(1);
        Integer nContentID = new Integer(1);
        Integer nDmsRootID = new Integer(1);
        Integer nMtmDocVersionID = new Integer(1);
        Integer nParentID = null;
        Integer nRootID = null;
        String sName = ""1000000001.txt"";
        String sConvertedName = ""1000000001"";
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            nDocID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            nDocDetailID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT_DETAIL"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            nVersionID = new Integer(((Integer) htTableKey.get(""DMS_VERSION"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            nContentID = new Integer(((Integer) htTableKey.get(""DMS_CONTENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_ROOT"")) {
            nDmsRootID = new Integer(((Integer) htTableKey.get(""DMS_ROOT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            nMtmDocVersionID = new Integer(((Integer) htTableKey.get(""MTM_DOCUMENT_VERSION"")).intValue() + 1);
        }
        int nStart = (new Integer(args[0])).intValue();
        int nEnd = (new Integer(args[1])).intValue();
        nParentID = new Integer(args[2]);
        Integer nRootParentID = new Integer(args[2]);
        nRootID = new Integer(args[3]);
        String sPhysicalLoc = new String(args[4]);
        indexPath = new String(args[5]);
        System.out.println(""rootID : "" + nRootID + ""  ParentID "" + nParentID + "" physical Loc = "" + sPhysicalLoc);
        String sFieldValue = """";
        PreparedStatement preStat = null;
        String sDocName = """";
        int count = 0;
        int total = 0;
        FileInputStream infile = new FileInputStream(new File(sPhysicalLoc + sName));
        byte[] buffer = new byte[infile.available()];
        infile.read(buffer);
        String inFileData = new String(buffer);
        for (int i = nStart; i <= nEnd; i++) {
            try {
                sFieldValue = ""REF"" + i;
                sDocName = Calendar.getInstance().getTimeInMillis() + "".tif"";
                dmsDocument.setID(nDocID);
                dmsDocument.setDocumentType(""D"");
                dmsDocument.setParentID(nParentID);
                dmsDocument.setRootID(nRootID);
                dmsDocument.setCreateType(""S"");
                dmsDocument.setReferenceNo(""Ref Num"");
                dmsDocument.setDescription(""desc"");
                dmsDocument.setUdfDetailList(new ArrayList());
                dmsDocument.setEffectiveStartDate(currTime);
                dmsDocument.setItemSize(new Integer(20480));
                dmsDocument.setItemStatus(""A"");
                dmsDocument.setOwnerID(new Integer(0));
                dmsDocument.setUpdateCount(new Integer(0));
                dmsDocument.setCreatorID(new Integer(0));
                dmsDocument.setCreateDate(currTime);
                dmsDocument.setUpdaterID(new Integer(0));
                dmsDocument.setUpdateDate(currTime);
                dmsDocument.setRecordStatus(""A"");
                if (count % 500 == 0) {
                    sDocName = ""TestDocument"" + i;
                    dmsDocument.setDocumentName(sDocName);
                    dmsDocument.setDocumentType(""F"");
                    sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','F',"" + nRootParentID + "","" + nRootID.toString() + "", 'S', '"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 0, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                    preStat = conn.prepareStatement(sqlDoc);
                    preStat.executeUpdate();
                    nParentID = nDocID;
                    nDocID = new Integer(nDocID.intValue() + 1);
                }
                total = count + nStart;
                System.out.println(""xxx Count: "" + total + "" docID = "" + nDocID);
                sDocName = ""TestFullText"" + i + "".txt"";
                dmsDocument.setDocumentName(sDocName);
                sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','D',"" + nParentID.toString() + "","" + nRootID.toString() + "", 'S','"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 20480, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDoc);
                preStat.executeUpdate();
                sqlDocDetail = ""INSERT INTO DMS_DOCUMENT_DETAIL VALUES("" + nDocDetailID.toString() + "","" + nDocID.toString() + "","" + sUdfID + "","" + sUdfDetailID + "",'"" + sFieldValue + ""', null, null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocDetail);
                preStat.executeUpdate();
                dmsDocument.setUserDefinedFieldID(new Integer(sUdfID));
                sqlContent = "" INSERT INTO DMS_CONTENT VALUES ("" + nContentID.toString() + "","" + sConvertedName + "", 'IMAGE', null, 'TIF', 'A', 0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlContent);
                preStat.executeUpdate();
                dmsDocument.setContentID(nContentID);
                sqlVersion = ""INSERT INTO DMS_VERSION VALUES("" + nVersionID.toString() + "", "" + nDocID.toString() + "", 1,'ROOT',0,"" + nContentID.toString() + "",0, 'Ref Num', 'desc', 20480, 'A', null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlVersion);
                preStat.executeUpdate();
                dmsDocument.setVersionID(nVersionID);
                dmsDocument.setVersionID(new Integer(1));
                dmsDocument.setVersionLabel(""ROOT"");
                sqlDocVersion = ""INSERT INTO MTM_DOCUMENT_VERSION VALUES("" + nMtmDocVersionID.toString() + "","" + nDocID.toString() + "","" + nVersionID.toString() + "",'A', 0, 0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocVersion);
                preStat.executeUpdate();
                nDocID = new Integer(nDocID.intValue() + 1);
                nDocDetailID = new Integer(nDocDetailID.intValue() + 1);
                nVersionID = new Integer(nVersionID.intValue() + 1);
                nContentID = new Integer(nContentID.intValue() + 1);
                nDmsRootID = new Integer(nDmsRootID.intValue() + 1);
                nMtmDocVersionID = new Integer(nMtmDocVersionID.intValue() + 1);
                SessionContainer sessionContainer = new SessionContainer();
                if (""D"".equals(dmsDocument.getDocumentType())) {
                    File outFile = new File(sPhysicalLoc + ""temp.txt"");
                    PrintStream out = new PrintStream(new FileOutputStream(outFile, false), true);
                    out.println(formatNumber(i));
                    out.print(inFileData);
                    try {
                        out.close();
                    } catch (Exception ignore) {
                        out = null;
                    }
                    FileInputStream data = new FileInputStream(outFile);
                    indexDocument(dmsDocument, data, GlobalConstant.OP_MODE_INSERT);
                    try {
                        data.close();
                    } catch (Exception ignore) {
                        data = null;
                    }
                }
                count++;
            } catch (Exception ee) {
                log.error(ee, ee);
                conn.rollback();
            } finally {
                try {
                    preStat.close();
                    conn.rollback();
                } catch (Exception ep) {
                }
            }
        }
        try {
            infile.close();
        } catch (Exception ignore) {
            infile = null;
        }
        PreparedStatement statment = null;
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT', "" + nDocID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocDetailID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT_DETAIL'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT_DETAIL', "" + nDocDetailID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nVersionID.toString() + "" WHERE TABLE_NAME='DMS_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_VERSION', "" + nVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nContentID.toString() + "" WHERE TABLE_NAME='DMS_CONTENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_CONTENT', "" + nContentID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nMtmDocVersionID.toString() + "" WHERE TABLE_NAME='MTM_DOCUMENT_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('MTM_DOCUMENT_VERSION', "" + nMtmDocVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        statment.close();
        System.out.println(""final value: "" + "" DocumentID "" + nDocID + "" DocDetailID "" + nDocDetailID + "" DocVersion "" + nVersionID + "" DocContent "" + nContentID + "" nMtmDocVersionID "" + nMtmDocVersionID);
        closeDBConn();
    }
",0.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    private void updateHoraatendo(Integer codemp, Integer codfilial, Integer codatendo, String horaatendo, String horaatendofin) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append(""update atatendimento set horaatendo=?, horaatendofin=? "");
        sql.append(""where codemp=? and codfilial=? and codatendo=?"");
        PreparedStatement ps = getConn().prepareStatement(sql.toString());
        ps.setTime(1, Funcoes.strTimeToSqlTime(horaatendo, false));
        ps.setTime(2, Funcoes.strTimeToSqlTime(horaatendofin, false));
        ps.setInt(3, codemp);
        ps.setInt(4, codfilial);
        ps.setInt(5, codatendo);
        ps.executeUpdate();
        ps.close();
        try {
            getConn().commit();
        } catch (SQLException e) {
            getConn().rollback();
        }
    }
",0.0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",0.0
"    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
","    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty(""User-Agent"", userAgent);
        conn.setRequestProperty(""Accept"", ""*/*"");
        conn.setRequestProperty(""Icy-Metadata"", ""1"");
        conn.setRequestProperty(""Connection"", ""close"");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField(""icy-metaint"");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end"");
        }
        return audioInputStream;
    }
",0.0
"    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
","    public static String sha1(String input) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(input.getBytes(""UTF-8""), 0, input.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    public String getSHA1Hex(String original) {
        MessageDigest digest;
        String result = """";
        try {
            digest = MessageDigest.getInstance(""sha1"");
            digest.reset();
            digest.update(original.getBytes());
            byte[] dig = digest.digest();
            String hexStr = """";
            for (int i = 0; i < dig.length; i++) {
                hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);
            }
            result = hexStr;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return result;
    }
",0.0
"    public String encryptToSHA(String info) {
        byte[] digesta = null;
        try {
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String rs = byte2hex(digesta);
        return rs;
    }
","    public static String ftpPing(String root, String host, int port, String username, String pw) {
        try {
            ftpClient = new FTPClient();
            ftpClient.setRemoteAddr(InetAddress.getByName(host));
            ftpClient.setControlPort(port);
            ftpClient.setTimeout(4000);
            ftpClient.connect();
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            ftpClient.login(username, (pw));
            ftpClient.chdir(root);
            JobHandler.releaseFTPLock();
        } catch (UnknownHostException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        try {
            ftpClient.quit();
        } catch (IOException e) {
            e.printStackTrace();
            return e.getMessage();
        } catch (FTPException e) {
            e.printStackTrace();
            return e.getMessage();
        }
        return null;
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","            protected Object getNewObject() throws IOException {
                URLConnection conn = HTTPMessageDeliveryImpl.this.url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty(""Content-Type"", ""text/xml"");
                return conn;
            }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    public void testMandatorySections() throws Exception {
        final File specificationDirectory = this.getTestSourcesDirectory();
        final File implementationDirectory = this.getTestSourcesDirectory();
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutDependenciesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutMessagesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutPropertiesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationOfSpecificationWithoutConstructorsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""ImplementationOfSpecification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""ImplementationOfSpecification""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""SpecificationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(specificationDirectory, ""Specification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
    }
",1.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    private String getFanFouMessage(int pageNo) throws IOException {
        URL url = new URL(""http://api.fanfou.com/statuses/user_timeline.json?page="" + pageNo);
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""GET"");
        String basicAuth = Base64.encode((getUsername() + "":"" + getPassword()).getBytes());
        request.addRequestProperty(""Authorization"", ""Basic "" + basicAuth);
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        StringBuffer sb = new StringBuffer();
        while ((b = reader.readLine()) != null) {
            sb.append(b);
        }
        return sb.toString();
    }
",0.0
"    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
","    private void delete(String location) throws Exception {
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""DELETE"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",0.0
"    public ScriptInfoList getScriptList() {
        ScriptInfoList scripts = null;
        try {
            URL url = new URL(SCRIPT_URL + ""?customer="" + customerID);
            ObjectInputStream ois = new ObjectInputStream(url.openStream());
            scripts = (ScriptInfoList) ois.readObject();
            ois.close();
            System.out.println(""got script list"");
        } catch (Exception e) {
            e.printStackTrace();
        }
        return scripts;
    }
","    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
        PageContext pageContext = null;
        HttpSession session = null;
        ServletContext application = null;
        ServletConfig config = null;
        JspWriter out = null;
        Object page = this;
        JspWriter _jspx_out = null;
        PageContext _jspx_page_context = null;
        try {
            response.setContentType(""text/html;charset=UTF-8"");
            pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true);
            _jspx_page_context = pageContext;
            application = pageContext.getServletContext();
            config = pageContext.getServletConfig();
            session = pageContext.getSession();
            out = pageContext.getOut();
            _jspx_out = out;
            _jspx_resourceInjector = (org.apache.jasper.runtime.ResourceInjector) application.getAttribute(""com.sun.appserv.jsp.resource.injector"");
            out.write(""\n"");
            out.write(""\n"");
            out.write(""\n"");
            String username = ""test"";
            String password = ""test"";
            int providerId = 1;
            if (request.getParameter(""providerId"") != null) providerId = Integer.parseInt(request.getParameter(""providerId""));
            String thisPageContextAddress = ""http://localhost:8080/"" + request.getContextPath();
            String thisPageServingAddress = thisPageContextAddress + ""/index.jsp"";
            String token = """";
            String token_timeout = (String) request.getParameter(""token_timeout"");
            String referer = request.getHeader(""Referer"");
            if (token_timeout != null && token_timeout.equals(""true"")) {
                System.out.println(""token timeout for referer"" + referer);
                if (referer != null) {
                    if (request.getSession().getServletContext().getAttribute(""token_timeout_processing_lock"") == null) {
                        request.getSession().getServletContext().setAttribute(""token_timeout_processing_lock"", true);
                        byte[] buff = null;
                        BufferedInputStream bis = null;
                        URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                        URLConnection urlc = url.openConnection();
                        int length = urlc.getContentLength();
                        InputStream in = urlc.getInputStream();
                        buff = new byte[length];
                        int bytesRead = 0;
                        while (bytesRead < length) {
                            bytesRead += in.read(buff, bytesRead, in.available());
                        }
                        token = new String(buff);
                        token = token.replaceAll(""[\\r\\f]"", """");
                        token = token.trim();
                        request.getSession().getServletContext().setAttribute(""token"", token);
                        out.println(token);
                        request.getSession().getServletContext().removeAttribute(""token_timeout_processing_lock"");
                    } else out.println(""token_timeout_processing_lock"");
                }
            } else {
                if (request.getSession().getServletContext().getAttribute(""token"") == null || request.getSession().getServletContext().getAttribute(""token"").equals("""")) {
                    byte[] buff = null;
                    BufferedInputStream bis = null;
                    URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                    URLConnection urlc = url.openConnection();
                    int length = urlc.getContentLength();
                    InputStream in = urlc.getInputStream();
                    buff = new byte[length];
                    int bytesRead = 0;
                    while (bytesRead < length) {
                        bytesRead += in.read(buff, bytesRead, in.available());
                    }
                    token = new String(buff);
                    token = token.replaceAll(""[\\r\\f]"", """");
                    token = token.trim();
                    request.getSession().getServletContext().setAttribute(""token"", token);
                }
                out.write(""<html>\n"");
                out.write(""  <head>\n"");
                out.write(""    <title>AJAX test </title>\n"");
                out.write(""    <script type=\""text/javascript\"" src=\""OpenLayers-2.8/OpenLayers.js\""></script>\n"");
                out.write(""    <script type=\""text/javascript\"">\n"");
                out.write(""\n"");
                out.write(""        function init(){\n"");
                out.write(""\n"");
                out.write(""            var token = \"""");
                out.print(request.getSession().getServletContext().getAttribute(""token""));
                out.write(""\"";\n"");
                out.write(""\n"");
                out.write(""            var options = {\n"");
                out.write(""                            maxExtent: new OpenLayers.Bounds(-600, -300, 0, 400),\n"");
                out.write(""                            maxResolution: 4.77730, minRezolution: 78271.517, numZoomLevels: 15, units: 'm'\n"");
                out.write(""                          }\n"");
                out.write(""\n"");
                out.write(""\n"");
                out.write(""            var map = new OpenLayers.Map('map', options);\n"");
                out.write(""            var layer = new OpenLayers.Layer.TMS(\""TMS\"", \""/WebGISTileServer/TMSServletProxy/\"" + token + \""/7/\"",\n"");
                out.write(""                                                { layername: 'TMS', type: 'png' });\n"");
                out.write(""            map.addLayer(layer);\n"");
                out.write(""            map.addControl(new OpenLayers.Control.MousePosition());\n"");
                out.write(""            map.setCenter(new OpenLayers.LonLat(-300, 120), 4);\n"");
                out.write(""        }\n"");
                out.write(""    </script>\n"");
                out.write(""  </head>\n"");
                out.write(""  <body onload=\""init()\"">\n"");
                out.write(""      <H1>TeleAtlas map with TMS</H1>\n"");
                out.write(""      <div id=\""map\"" style=\""width:100%; height:90%\""></div>\n"");
                out.write(""  </body>\n"");
                out.write(""</html>"");
            }
        } catch (Throwable t) {
            if (!(t instanceof SkipPageException)) {
                out = _jspx_out;
                if (out != null && out.getBufferSize() != 0) out.clearBuffer();
                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
            }
        } finally {
            _jspxFactory.releasePageContext(_jspx_page_context);
        }
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void chmod(String remoteFile, String mode) {
        String remotePath = connector.getRemoteDirectory();
        remotePath += PATH_SEPARATOR + remoteFile;
        FTPClient ftp = new FTPClient();
        try {
            String hostname = connector.getUrl().getHost();
            ftp.connect(hostname);
            log.info(""Connected to "" + hostname);
            log.info(ftp.getReplyString());
            boolean loggedIn = ftp.login(connector.getUsername(), connector.getPassword());
            if (loggedIn) {
                String parameters = ""chmod "" + mode + "" "" + remotePath;
                ftp.site(parameters);
                ftp.logout();
            }
            ftp.disconnect();
        } catch (SocketException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } catch (IOException e) {
            log.error(""File chmod failed with message: "" + e.getMessage());
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException ioe) {
                }
            }
        }
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    public boolean run() {
        String url;
        try {
            url = getFileName();
        } catch (NoSuchFieldException e) {
            return false;
        }
        if (url == null) {
            logger.error(""URL not specified! Cannot continue."");
            return false;
        }
        try {
            URL newURL = new URL(url);
            String extension = url.substring((url.lastIndexOf(""."")) + 1, url.length());
            File temp = File.createTempFile(""temp"", ""."" + extension);
            System.out.printf(""Storing URL contents to a temp file : %s\n"", temp);
            temp.deleteOnExit();
            InputStream urlINS = new BufferedInputStream(newURL.openConnection().getInputStream());
            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(temp));
            int len = 0;
            for (int singleByte = urlINS.read(); singleByte != -1; singleByte = urlINS.read()) {
                out.write(singleByte);
                len++;
            }
            System.out.printf(""Stored %d bytes from URL contents\n"", len);
            out.flush();
            out.close();
            System.out.printf(""URL/Temp extension : %s\n"", extension);
            if (extension.equalsIgnoreCase(""gz"")) {
                String shorterName = url.substring(0, url.lastIndexOf("".""));
                String extension2 = shorterName.substring((shorterName.lastIndexOf(""."")) + 1, shorterName.length());
                File temp2 = File.createTempFile(""temp"", ""."" + extension2);
                temp2.deleteOnExit();
                System.out.printf(""URL/Temp extension after decompressing gzip : %s\n"", extension2);
                GZIPInputStream decompressor = new GZIPInputStream(new FileInputStream(temp));
                OutputStream target = new FileOutputStream(temp2);
                byte[] buffer = new byte[1024];
                int length;
                while ((length = decompressor.read(buffer)) > 0) {
                    target.write(buffer, 0, length);
                }
                target.flush();
                target.close();
                temp = temp2;
            }
            String tempName = temp.getName();
            extension = tempName.substring((tempName.lastIndexOf(""."")) + 1, tempName.length());
            Preprocessor fileLoader = null;
            BasePreprocessorConfig configObject = null;
            if (MethodCallTable.containsKey(extension) == false) {
                fileLoader = MethodCallTable.get(""default"");
            } else {
                fileLoader = MethodCallTable.get(extension);
            }
            System.out.printf(""Calling filter '%s' for extension: %s\n"", fileLoader.getPreprocessingMethodName(), extension);
            configObject = new LoadCSVPreprocessorConfig();
            configObject.setValueByName(""FileName"", temp.getAbsolutePath());
            fileLoader.setConfigurationClass(configObject);
            return fileLoader.run();
        } catch (Exception e) {
            logger.error(e);
            return false;
        }
    }
",0.0
"    private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {
        Map<String, String> result = new LinkedHashMap();
        while (urls.hasNext()) {
            URL url = urls.next();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String s = reader.readLine();
            while (s != null) {
                s = s.trim();
                if (s.length() > 0) {
                    String[] ss = s.split(""\\s"");
                    for (int i = 1; i < ss.length; i++) {
                        result.put(ss[i], ss[0]);
                    }
                }
                s = reader.readLine();
            }
            reader.close();
        }
        return result;
    }
","    private static String getTextFromURL(HttpServletRequest req, String urlString) {
        StringBuffer buffer = new StringBuffer();
        if (!urlString.startsWith(""http"")) {
            String requestURL = req.getRequestURL().toString();
            urlString = requestURL.substring(0, requestURL.lastIndexOf(""/"")) + urlString;
        }
        try {
            URL url = new URL(urlString);
            BufferedReader input = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = input.readLine()) != null) {
                buffer.append(line);
                buffer.append(Constants.LF);
            }
        } catch (FileNotFoundException nf) {
            log.error(""File not found: "" + urlString, nf);
        } catch (Exception e) {
            log.error(""Exception while reading file: "" + urlString, e);
        }
        return buffer.toString();
    }
",1.0
"    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println(""Connecting to "" + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
","    public static void copy(File fromFile, File toFile) throws IOException {
        if (!fromFile.exists()) throw new IOException(""FileCopy: "" + ""no such source file: "" + fromFile.getAbsolutePath());
        if (!fromFile.isFile()) throw new IOException(""FileCopy: "" + ""can't copy directory: "" + fromFile.getAbsolutePath());
        if (!fromFile.canRead()) throw new IOException(""FileCopy: "" + ""source file is unreadable: "" + fromFile.getAbsolutePath());
        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());
        String parent = toFile.getParent();
        if (parent == null) parent = System.getProperty(""user.dir"");
        File dir = new File(parent);
        if (!dir.exists()) throw new IOException(""FileCopy: "" + ""destination directory doesn't exist: "" + parent);
        if (dir.isFile()) throw new IOException(""FileCopy: "" + ""destination is not a directory: "" + parent);
        if (!dir.canWrite()) throw new IOException(""FileCopy: "" + ""destination directory is unwriteable: "" + parent);
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(fromFile);
            to = new FileOutputStream(toFile);
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = from.read(buffer)) != -1) to.write(buffer, 0, bytesRead);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
            }
        }
    }
",0.0
"    public static String encriptarPassword(String aPassword) throws BusinessException {
        ILogger logger = LogFactory.getLogger(User.class);
        String methodId = ""encriptarPassword"";
        try {
            MessageDigest currentAlgorithm = MessageDigest.getInstance(""MD5"");
            currentAlgorithm.reset();
            currentAlgorithm.update(aPassword.getBytes());
            byte[] hash = currentAlgorithm.digest();
            String d = """";
            for (int i = 0; i < hash.length; i++) {
                int v = hash[i] & 0xFF;
                if (v < 16) d += ""0"";
                d += Integer.toString(v, 16).toUpperCase();
            }
            return d.toLowerCase();
        } catch (NoSuchAlgorithmException nsae) {
            logger.logError(methodId + ""error al encriptar password:"" + nsae, nsae);
            throw new BusinessException(""Error al encriptar password"");
        }
    }
","    @SuppressWarnings(""deprecation"")
    public void testMemberIterator() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember0 = iter.next();
        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());
        assertEquals(""wrong 1k member count"", 1024, count0);
        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());
        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());
        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember1 = iter.next();
        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());
        assertEquals(""wrong 32k member count"", (32 * 1024), count1);
        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());
        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember2 = iter.next();
        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());
        assertEquals(""wrong 1-byte member count"", 1, count2);
        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());
        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember3 = iter.next();
        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());
        assertEquals(""wrong 5-byte member count"", 5, count3);
        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());
        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        assertFalse(iter.hasNext());
    }
",0.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    public static String exchangeForSessionToken(String protocol, String domain, String onetimeUseToken, PrivateKey key) throws IOException, GeneralSecurityException, AuthenticationException {
        String sessionUrl = getSessionTokenUrl(protocol, domain);
        URL url = new URL(sessionUrl);
        HttpURLConnection httpConn = (HttpURLConnection) url.openConnection();
        String header = formAuthorizationHeader(onetimeUseToken, key, url, ""GET"");
        httpConn.setRequestProperty(""Authorization"", header);
        if (httpConn.getResponseCode() != HttpURLConnection.HTTP_OK) {
            throw new AuthenticationException(httpConn.getResponseCode() + "": "" + httpConn.getResponseMessage());
        }
        String body = CharStreams.toString(new InputStreamReader(httpConn.getInputStream(), Charsets.ISO_8859_1));
        Map<String, String> parsedTokens = StringUtil.string2Map(body, ""\n"", ""="", true);
        parsedTokens = StringUtil.lowercaseKeys(parsedTokens);
        return parsedTokens.get(""token"");
    }
",0.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    private void loadMe(final ResourceBackedScript e) {
        if (!loadedResources.containsKey(this.resourceLocation)) {
            final InputStream resourceAsStream = this.getClass().getResourceAsStream(this.resourceLocation);
            final StringWriter writer = new StringWriter();
            try {
                IOUtils.copy(resourceAsStream, writer);
            } catch (final IOException ex) {
                throw new IllegalStateException(""Resource not read-able"", ex);
            }
            final String loadedResource = writer.toString();
            loadedResources.put(this.resourceLocation, loadedResource);
        }
        this.setScriptBody(loadedResources.get(this.resourceLocation));
        this.hasRendered = true;
    }
",0.0
"    public ZipViewdataReader(ZipInputStream stream) throws IOException {
        ZipEntry ze;
        while ((ze = stream.getNextEntry()) != null) {
            File temp = File.createTempFile(""spool."", "".synu"");
            temp.deleteOnExit();
            FileOutputStream fos = new FileOutputStream(temp);
            byte[] buffer = new byte[1024 * 1024];
            int length;
            while ((length = stream.read(buffer)) != -1) fos.write(buffer, 0, length);
            fos.close();
            String name = ze.getName();
            String[] parts = name.split(""[\\\\/]"");
            this._file_hash.put(parts[parts.length - 1], temp);
        }
        stream.close();
        for (String key : this._file_hash.keySet()) if (key.endsWith(""Viewdata"")) {
            File f = this._file_hash.get(key);
            FileReader fr = new FileReader(f);
            this._viewdata = new BufferedReader(fr);
            break;
        }
        if (this._viewdata == null) throw new FileNotFoundException(""No Viewdata found in ZIP file."");
    }
","    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    public void fileCopy(File src, File dest) throws IOException {
        if (!dest.exists()) {
            final File parent = new File(dest.getParent());
            if (!parent.exists() && !parent.mkdirs()) {
                throw new IOException();
            }
            if (!dest.createNewFile()) {
            }
        }
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream(src);
            os = new FileOutputStream(dest);
            final FileChannel srcChannel = is.getChannel();
            final FileChannel dstChannel = os.getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } finally {
                if (os != null) {
                    os.close();
                }
            }
        }
    }
",1.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void main(String argv[]) {
        String cp = System.getProperty(""java.class.path"");
        String sep = System.getProperty(""file.separator"");
        String dirpath = cp.substring(0, cp.lastIndexOf(sep));
        String jarpath = dirpath + ""/WiiRemoteJ.jar"";
        if (!new File(jarpath).exists()) {
            try {
                System.out.println(""getting WiiRemoteJ file from remote source..."");
                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");
                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());
                String temploc = copyInputStreamToTmpFile(input, "".zip"");
                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));
                ZipEntry i = null;
                while ((i = zipIn.getNextEntry()) != null) {
                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {
                        File outjar = new File(jarpath);
                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));
                        int bufferSize = 8192;
                        byte[] buffer = new byte[bufferSize];
                        int readSize = 0;
                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {
                            fs.write(buffer, 0, readSize);
                        }
                        fs.close();
                    }
                }
                System.out.println(""unpacked into classpath."");
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Boogiepants.main(argv);
    }
",1.0
"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
","    @SuppressWarnings(""unused"")
    private boolean copyAvecProgressNIO(File sRC2, File dEST2, JProgressBar progressEnCours) {
        boolean resultat = false;
        long PourcentEnCours = 0;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(sRC2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(dEST2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la creation du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        progressEnCours.setValue(0);
        progressEnCours.setString(sRC2 + "" : 0 %"");
        try {
            long tailleCopie = channelSrc.transferTo(0, channelSrc.size(), channelDest);
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" vers la destination "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        progressEnCours.setValue(100);
        progressEnCours.setString(sRC2 + "" : 100 %"");
        try {
            if (channelSrc.size() == channelDest.size()) {
                resultat = true;
            } else {
                resultat = false;
            }
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fis.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fos.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        return (resultat);
    }
",0.0
"    private void processBody(HttpMethod request) throws IOException {
        InputStream in = request.getResponseBodyAsStream();
        if (in == null) return;
        Header contentTypeHdr = request.getResponseHeader(HttpHeaders.CONTENT_TYPE);
        _resultContentType = (contentTypeHdr != null) ? contentTypeHdr.getValue() : """";
        if (_out != null) {
            IOUtils.copy(in, _out);
            _out.flush();
        } else if (_resultContentType.startsWith(MimeTypes.TEXT)) {
            _result = IOUtils.toString(in, ""UTF-8"");
        } else if (_resultContentType.startsWith(MimeTypes.XML) || _resultContentType.startsWith(MimeTypes.DEPRECATED_XML)) {
            _result = ParseUtil.parse(new InputSource(in));
        } else {
            _result = IOUtils.toByteArray(in);
        }
    }
","    public void doIt() throws GlobalMapperTileTranslatorException {
        if (StringUtils.isEmpty(dstGuid)) throw new GlobalMapperTileTranslatorException(""GUID of destination map is empty"");
        if (srcDir == null || !srcDir.isDirectory() || !srcDir.exists()) throw new GlobalMapperTileTranslatorException(""Source directory is invalid"");
        try {
            int z;
            final XFile dstDir = new XFile(dstParentDir, dstGuid);
            dstDir.mkdir();
            int n = 1;
            if (srcDir.isDirectory() && srcDir.exists()) {
                for (int i = 0; i < 18; i++) {
                    XFile zDir = new XFile(srcDir, ""z"" + i);
                    if (!zDir.isDirectory() || !zDir.exists()) zDir = new XFile(srcDir, ""Z"" + i);
                    if (zDir.isDirectory() && zDir.exists()) {
                        for (String fileName : zDir.list()) {
                            XFile file = new XFile(zDir, fileName);
                            if (file.isFile() && file.exists() && file.canRead()) {
                                final String[] yx;
                                if (fileName.indexOf('.') > 0) {
                                    String[] fileExt = fileName.split(""\\."");
                                    yx = fileExt[0].split(""_"");
                                } else yx = fileName.split(""_"");
                                if (yx.length > 1) {
                                    final int x = Integer.valueOf(yx[1]);
                                    final int y = Integer.valueOf(yx[0]);
                                    z = 17 - i;
                                    XFileOutputStream out = null;
                                    XFileInputStream in = null;
                                    try {
                                        final XFile outFile = new XFile(dstDir, x + ""_"" + y + ""_"" + z);
                                        if (override || !(isExist(outFile, file))) {
                                            out = new XFileOutputStream(outFile);
                                            in = new XFileInputStream(file);
                                            IOUtils.copy(in, out);
                                        }
                                        if (n % 999 == 0) {
                                            logger.info(i + "" tiles were copied from 'incoming'"");
                                            synchronized (GlobalMapperTileTranslator.class) {
                                                GlobalMapperTileTranslator.class.wait(300);
                                            }
                                        }
                                        n++;
                                    } finally {
                                        if (out != null) {
                                            out.flush();
                                            out.close();
                                        }
                                        if (in != null) {
                                            in.close();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Throwable e) {
            logger.error(""map tile importing has failed: "", e);
            throw new GlobalMapperTileTranslatorException(e);
        }
    }
",1.0
"    public static List getUrlData(URL url) throws IOException {
        List beans = new ArrayList(256);
        System.out.println(""Retreiving content for: "" + url);
        StringBuffer content = new StringBuffer(4096);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            if (str.startsWith(""#"")) {
                continue;
            }
            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");
            String InteractionAc = stringTokenizer.nextToken();
            String reactomeId = stringTokenizer.nextToken();
            ReactomeBean reactomeBean = new ReactomeBean();
            reactomeBean.setReactomeID(reactomeId);
            reactomeBean.setInteractionAC(InteractionAc);
            beans.add(reactomeBean);
        }
        in.close();
        return beans;
    }
","    protected byte[] generateHashBytes() {
        String s = createString(false);
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException nsa) {
            System.out.println(""Can't get MD5 implementation "" + nsa);
            throw new RuntimeException(""DynanmicAddress2: Can't get MD5 implementation"");
        }
        if (m_key != null) md.update(m_key.getBytes(), 0, m_key.length());
        md.update(s.getBytes(), 0, s.length());
        byte[] hash = md.digest();
        return hash;
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    public boolean import_pieces(String filename) {
        int pieceId;
        int i;
        int n;
        int[] color;
        boolean byurl = true;
        e2piece temppiece;
        color = new int[4];
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            while (true) {
                String lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                StringTokenizer tok = new StringTokenizer(lineread, "" "");
                n = tok.countTokens();
                if (n == 2) {
                } else {
                    for (i = 0; i < 4; i++) {
                        color[i] = Integer.parseInt(tok.nextToken());
                    }
                    pieceId++;
                    System.out.println(""Read Piece : "" + pieceId + "":"" + color[0] + "" "" + color[1] + "" "" + color[2] + "" "" + color[3]);
                    temppiece = new e2piece(pieceId, color[0] + 1, color[1] + 1, color[2] + 1, color[3] + 1);
                    allpieces.add_piece(temppiece);
                    unplacedpieces.add_piece(temppiece);
                }
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0.0
"    public String getHtmlPage(URL url) {
        String html = null;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            br.close();
            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html;
    }
","    public static void main(String args[]) throws Exception {
        currTime = getCurrentTimestamp();
        String sqlDoc = """";
        String sqlVersion = """";
        String sqlDocVersion = """";
        String sqlContent = """";
        String sqlDocDetail = """";
        String sqlRoot = """";
        java.util.Properties props = new java.util.Properties();
        String path = new LoadDocumentData().getClass().getProtectionDomain().getCodeSource().getLocation().toString().substring(6);
        if (!path.endsWith(""/"")) {
            path += ""/"";
        }
        path += ""generate.properties"";
        if (!path.startsWith(""/"")) {
            path = ""/"" + path;
        }
        java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(path));
        props.load(fis);
        author = props.getProperty(""author"");
        srcPath = props.getProperty(""srcPath"");
        driverStr = props.getProperty(""driverStr"");
        dbConnStr = props.getProperty(""dbConnStr"");
        dbUsername = props.getProperty(""dbUsername"");
        dbPassword = props.getProperty(""dbPassword"");
        openDBConn();
        stat = conn.createStatement();
        Hashtable htTableKey = new Hashtable();
        htTableKey = getTableKey(conn);
        genUserDefinedIndex(conn, htTableKey);
        Integer ownerID = new Integer(0);
        Integer nDocID = new Integer(1);
        Integer nDocDetailID = new Integer(1);
        Integer nVersionID = new Integer(1);
        Integer nContentID = new Integer(1);
        Integer nDmsRootID = new Integer(1);
        Integer nMtmDocVersionID = new Integer(1);
        Integer nParentID = null;
        Integer nRootID = null;
        String sName = ""1000000001.txt"";
        String sConvertedName = ""1000000001"";
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            nDocID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            nDocDetailID = new Integer(((Integer) htTableKey.get(""DMS_DOCUMENT_DETAIL"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            nVersionID = new Integer(((Integer) htTableKey.get(""DMS_VERSION"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            nContentID = new Integer(((Integer) htTableKey.get(""DMS_CONTENT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""DMS_ROOT"")) {
            nDmsRootID = new Integer(((Integer) htTableKey.get(""DMS_ROOT"")).intValue() + 1);
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            nMtmDocVersionID = new Integer(((Integer) htTableKey.get(""MTM_DOCUMENT_VERSION"")).intValue() + 1);
        }
        int nStart = (new Integer(args[0])).intValue();
        int nEnd = (new Integer(args[1])).intValue();
        nParentID = new Integer(args[2]);
        Integer nRootParentID = new Integer(args[2]);
        nRootID = new Integer(args[3]);
        String sPhysicalLoc = new String(args[4]);
        indexPath = new String(args[5]);
        System.out.println(""rootID : "" + nRootID + ""  ParentID "" + nParentID + "" physical Loc = "" + sPhysicalLoc);
        String sFieldValue = """";
        PreparedStatement preStat = null;
        String sDocName = """";
        int count = 0;
        int total = 0;
        FileInputStream infile = new FileInputStream(new File(sPhysicalLoc + sName));
        byte[] buffer = new byte[infile.available()];
        infile.read(buffer);
        String inFileData = new String(buffer);
        for (int i = nStart; i <= nEnd; i++) {
            try {
                sFieldValue = ""REF"" + i;
                sDocName = Calendar.getInstance().getTimeInMillis() + "".tif"";
                dmsDocument.setID(nDocID);
                dmsDocument.setDocumentType(""D"");
                dmsDocument.setParentID(nParentID);
                dmsDocument.setRootID(nRootID);
                dmsDocument.setCreateType(""S"");
                dmsDocument.setReferenceNo(""Ref Num"");
                dmsDocument.setDescription(""desc"");
                dmsDocument.setUdfDetailList(new ArrayList());
                dmsDocument.setEffectiveStartDate(currTime);
                dmsDocument.setItemSize(new Integer(20480));
                dmsDocument.setItemStatus(""A"");
                dmsDocument.setOwnerID(new Integer(0));
                dmsDocument.setUpdateCount(new Integer(0));
                dmsDocument.setCreatorID(new Integer(0));
                dmsDocument.setCreateDate(currTime);
                dmsDocument.setUpdaterID(new Integer(0));
                dmsDocument.setUpdateDate(currTime);
                dmsDocument.setRecordStatus(""A"");
                if (count % 500 == 0) {
                    sDocName = ""TestDocument"" + i;
                    dmsDocument.setDocumentName(sDocName);
                    dmsDocument.setDocumentType(""F"");
                    sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','F',"" + nRootParentID + "","" + nRootID.toString() + "", 'S', '"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 0, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                    preStat = conn.prepareStatement(sqlDoc);
                    preStat.executeUpdate();
                    nParentID = nDocID;
                    nDocID = new Integer(nDocID.intValue() + 1);
                }
                total = count + nStart;
                System.out.println(""xxx Count: "" + total + "" docID = "" + nDocID);
                sDocName = ""TestFullText"" + i + "".txt"";
                dmsDocument.setDocumentName(sDocName);
                sqlDoc = ""INSERT INTO DMS_DOCUMENT VALUES("" + nDocID.toString() + "",'"" + sDocName + ""','D',"" + nParentID.toString() + "","" + nRootID.toString() + "", 'S','"" + dmsDocument.getCreateDate().toString() + ""', NULL, '"" + ownerID + ""','Ref Num', 'desc', 20480, 'A', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDoc);
                preStat.executeUpdate();
                sqlDocDetail = ""INSERT INTO DMS_DOCUMENT_DETAIL VALUES("" + nDocDetailID.toString() + "","" + nDocID.toString() + "","" + sUdfID + "","" + sUdfDetailID + "",'"" + sFieldValue + ""', null, null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocDetail);
                preStat.executeUpdate();
                dmsDocument.setUserDefinedFieldID(new Integer(sUdfID));
                sqlContent = "" INSERT INTO DMS_CONTENT VALUES ("" + nContentID.toString() + "","" + sConvertedName + "", 'IMAGE', null, 'TIF', 'A', 0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlContent);
                preStat.executeUpdate();
                dmsDocument.setContentID(nContentID);
                sqlVersion = ""INSERT INTO DMS_VERSION VALUES("" + nVersionID.toString() + "", "" + nDocID.toString() + "", 1,'ROOT',0,"" + nContentID.toString() + "",0, 'Ref Num', 'desc', 20480, 'A', null, 'A',0,0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlVersion);
                preStat.executeUpdate();
                dmsDocument.setVersionID(nVersionID);
                dmsDocument.setVersionID(new Integer(1));
                dmsDocument.setVersionLabel(""ROOT"");
                sqlDocVersion = ""INSERT INTO MTM_DOCUMENT_VERSION VALUES("" + nMtmDocVersionID.toString() + "","" + nDocID.toString() + "","" + nVersionID.toString() + "",'A', 0, 0,'"" + dmsDocument.getCreateDate().toString() + ""',0,'"" + dmsDocument.getCreateDate().toString() + ""')"";
                preStat = conn.prepareStatement(sqlDocVersion);
                preStat.executeUpdate();
                nDocID = new Integer(nDocID.intValue() + 1);
                nDocDetailID = new Integer(nDocDetailID.intValue() + 1);
                nVersionID = new Integer(nVersionID.intValue() + 1);
                nContentID = new Integer(nContentID.intValue() + 1);
                nDmsRootID = new Integer(nDmsRootID.intValue() + 1);
                nMtmDocVersionID = new Integer(nMtmDocVersionID.intValue() + 1);
                SessionContainer sessionContainer = new SessionContainer();
                if (""D"".equals(dmsDocument.getDocumentType())) {
                    File outFile = new File(sPhysicalLoc + ""temp.txt"");
                    PrintStream out = new PrintStream(new FileOutputStream(outFile, false), true);
                    out.println(formatNumber(i));
                    out.print(inFileData);
                    try {
                        out.close();
                    } catch (Exception ignore) {
                        out = null;
                    }
                    FileInputStream data = new FileInputStream(outFile);
                    indexDocument(dmsDocument, data, GlobalConstant.OP_MODE_INSERT);
                    try {
                        data.close();
                    } catch (Exception ignore) {
                        data = null;
                    }
                }
                count++;
            } catch (Exception ee) {
                log.error(ee, ee);
                conn.rollback();
            } finally {
                try {
                    preStat.close();
                    conn.rollback();
                } catch (Exception ep) {
                }
            }
        }
        try {
            infile.close();
        } catch (Exception ignore) {
            infile = null;
        }
        PreparedStatement statment = null;
        if (htTableKey.containsKey(""DMS_DOCUMENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT', "" + nDocID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_DOCUMENT_DETAIL"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nDocDetailID.toString() + "" WHERE TABLE_NAME='DMS_DOCUMENT_DETAIL'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_DOCUMENT_DETAIL', "" + nDocDetailID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nVersionID.toString() + "" WHERE TABLE_NAME='DMS_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_VERSION', "" + nVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""DMS_CONTENT"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nContentID.toString() + "" WHERE TABLE_NAME='DMS_CONTENT'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('DMS_CONTENT', "" + nContentID.toString() + "")"");
            statment.executeUpdate();
        }
        if (htTableKey.containsKey(""MTM_DOCUMENT_VERSION"")) {
            statment = conn.prepareStatement(""UPDATE SYS_TABLE_KEY SET TABLE_KEY_MAX="" + nMtmDocVersionID.toString() + "" WHERE TABLE_NAME='MTM_DOCUMENT_VERSION'"");
            statment.executeUpdate();
        } else {
            statment = conn.prepareStatement(""INSERT INTO SYS_TABLE_KEY VALUES('MTM_DOCUMENT_VERSION', "" + nMtmDocVersionID.toString() + "")"");
            statment.executeUpdate();
        }
        statment.close();
        System.out.println(""final value: "" + "" DocumentID "" + nDocID + "" DocDetailID "" + nDocDetailID + "" DocVersion "" + nVersionID + "" DocContent "" + nContentID + "" nMtmDocVersionID "" + nMtmDocVersionID);
        closeDBConn();
    }
",0.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    public void conReMail(MailObject mail) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        String url = HttpConfig.bbsURL() + HttpConfig.BBS_MAIL_RECON + mail.getNumber();
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isXmlContentType(response)) {
                Document doc = XmlOperator.readDocument(entity.getContent());
                BBSBodyParseHelper.parseMailReContent(doc, mail);
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",0.0
"    public static String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
","    private File download(String filename, URL url) {
        int size = -1;
        int received = 0;
        try {
            fireDownloadStarted(filename);
            File file = createFile(filename);
            BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file));
            System.out.println(""������Դ��"" + filename + "", url="" + url);
            InputStream bis = url.openStream();
            byte[] buf = new byte[1024];
            int count = 0;
            long lastUpdate = 0;
            size = bis.available();
            while ((count = bis.read(buf)) != -1) {
                bos.write(buf, 0, count);
                received += count;
                long now = System.currentTimeMillis();
                if (now - lastUpdate > 500) {
                    fireDownloadUpdate(filename, size, received);
                    lastUpdate = now;
                }
            }
            bos.close();
            System.out.println(""��Դ������ϣ�"" + filename);
            fireDownloadCompleted(filename);
            return file;
        } catch (IOException e) {
            System.out.println(""������Դʧ�ܣ�"" + filename + "", error="" + e.getMessage());
            fireDownloadInterrupted(filename);
            if (!(e instanceof FileNotFoundException)) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0.0
"    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    private static String scramble(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""));
            StringBuffer sb = new StringBuffer();
            for (byte b : md.digest()) sb.append(Integer.toString(b & 0xFF, 16));
            return sb.toString();
        } catch (UnsupportedEncodingException e) {
            return null;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        log.println(""\nCalculating digest ...\n"");
        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
        md5.update(dataArea.getText().getBytes(""UTF8""));
        byte[] digest = md5.digest();
        log.println(""digest:\n"" + formatAsHexString(digest));
        log.println(""Done."");
        setEncodedDigest(encodeFromBytes(digest));
    }
",0.0
"    private void copy(File in, File out) {
        log.info(""Copying yam file from: "" + in.getName() + "" to: "" + out.getName());
        try {
            FileChannel ic = new FileInputStream(in).getChannel();
            FileChannel oc = new FileOutputStream(out).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
        } catch (IOException ioe) {
            fail(""Failed testing while copying modified file: "" + ioe.getMessage());
        }
    }
","    public static void copy(File src, File dst) throws IOException {
        FileChannel inChannel;
        FileChannel outChannel;
        inChannel = new FileInputStream(src).getChannel();
        outChannel = new FileOutputStream(dst).getChannel();
        outChannel.transferFrom(inChannel, 0, inChannel.size());
        inChannel.close();
        outChannel.close();
    }
",1.0
"    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    public static String sha1(String str) {
        StringBuffer buf = new StringBuffer();
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            byte[] data = new byte[40];
            md.update(str.getBytes(""iso-8859-1""), 0, str.length());
            data = md.digest();
            for (int i = 0; i < data.length; i++) {
                int halfbyte = (data[i] >>> 4) & 0x0F;
                int two_halfs = 0;
                do {
                    if ((0 <= halfbyte) && (halfbyte <= 9)) buf.append((char) ('0' + halfbyte)); else buf.append((char) ('a' + (halfbyte - 10)));
                    halfbyte = data[i] & 0x0F;
                } while (two_halfs++ < 1);
            }
        } catch (Exception e) {
            errorLog(""{Malgn.sha1} "" + e.getMessage());
        }
        return buf.toString();
    }
",0.0
"	public FTPClient sample3b(String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",0.0
"    public IsbnToBibConverter() {
        URLConnection conn = null;
        try {
            URL url = new URL(libraryUrl);
            conn = url.openConnection();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        String cookie = extractCookie(conn);
        cookieValue = extractCookieValue(cookie);
        sessionId = extractSessionId(cookieValue);
    }
","        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
",0.0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
","    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String uid = request.getParameter(""id"");
        String pwd = request.getParameter(""pwd"");
        String email = request.getParameter(""email"");
        String sid = request.getParameter(""sid"");
        System.out.println(uid);
        System.out.println(pwd);
        System.out.println(email);
        System.out.println(sid);
        DBconn dbc = new DBconn();
        Connection conn;
        PreparedStatement pst;
        Statement st;
        conn = dbc.getConnection();
        PasswordService ps = PasswordService.getInstance();
        String hash = """";
        try {
            hash = ps.encrypt(pwd);
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        String sql = ""insert into HP_ADMINISTRATOR.STAFF_REGISTRATION values (?,?,?,?)"";
        try {
            pst = conn.prepareStatement(sql);
            pst.setString(1, uid);
            pst.setString(2, hash);
            pst.setString(3, email);
            pst.setString(4, sid);
            System.out.println(pst.toString());
            pst.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                conn.rollback();
                conn.setAutoCommit(true);
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        response.sendRedirect(""AdminControlStaff.jsp"");
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public boolean parseResults(URL url, String analysis_type, CurationI curation, Date analysis_date, String regexp) throws OutputMalFormatException {
        boolean parsed = false;
        try {
            InputStream data_stream = url.openStream();
            parsed = parseResults(data_stream, analysis_type, curation, analysis_date, regexp);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return parsed;
    }
",0.0
"    public static void zipFile(String file, String entry) throws IOException {
        FileInputStream in = new FileInputStream(file);
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file + "".zip""));
        out.putNextEntry(new ZipEntry(entry));
        byte[] buffer = new byte[4096];
        int bytes_read;
        while ((bytes_read = in.read(buffer)) != -1) out.write(buffer, 0, bytes_read);
        in.close();
        out.closeEntry();
        out.close();
        File fin = new File(file);
        fin.delete();
    }
","    private void native2ascii(LanguageInfo info) {
        if (!info.isUTF8()) throw new IllegalArgumentException(""requires utf8 language."");
        InputStream in = null;
        OutputStream out = null;
        print(""\tConverting to ASCII... "");
        try {
            in = new BufferedInputStream(new FileInputStream(info.getFileName()));
            in.mark(3);
            if (in.read() != 0xEF || in.read() != 0xBB || in.read() != 0xBF) in.reset();
            BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""UTF8""));
            out = new BufferedOutputStream(new FileOutputStream(info.getAlternateFileName()));
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out, ""ISO-8859-1""));
            String read;
            while ((read = reader.readLine()) != null) {
                writer.write(ascii(read));
                writer.newLine();
            }
            writer.flush();
            out.flush();
            println(""... done!"");
        } catch (IOException ignored) {
            println(""... error! ("" + ignored.getMessage() + "")"");
        } finally {
            if (in != null) try {
                in.close();
            } catch (IOException ignored) {
            }
            if (out != null) try {
                out.close();
            } catch (IOException ignored) {
            }
        }
    }
",1.0
"    public static String urlContentToString(URL url, String encoding) throws IOException {
        String out = """";
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), Constants.ENCODING));
        String line;
        while ((line = in.readLine()) != null) {
            out += line;
        }
        in.close();
        return out;
    }
","    public static void main(String[] args) throws Exception {
        File inputFile = new File(args[0]);
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        StringBuffer stringBuffer = new StringBuffer();
        String readed;
        while ((readed = reader.readLine()) != null) stringBuffer.append(readed + ""\r\n"");
        readed = stringBuffer.toString();
        reader.close();
        File outputFile = new File(args[0] + "".output"");
        BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile));
        readed = readed.replaceAll(""\\t+"", ""#"");
        readed = readed.replaceAll(""\\s*#\\s*"", ""#"");
        readed = readed.replaceAll(""Latitude,.*"", """");
        readed = readed.replaceAll(""Flag of"", """");
        readed = readed.replaceAll(""^\\s+$"", """");
        writer.write(readed);
        writer.close();
    }
",0.0
"    public synchronized String encrypt(String text) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        md.update(text.getBytes());
        byte raw[] = md.digest();
        String hash = """";
        for (int i = 0; i < raw.length; i++) {
            byte temp = raw[i];
            String s = Integer.toHexString(new Byte(temp));
            while (s.length() < 2) {
                s = ""0"" + s;
            }
            s = s.substring(s.length() - 2);
            hash += s;
        }
        return hash;
    }
","    private static ArrayList<String> YahooSearch(String query) {
        ArrayList<String> yahooSearchResults = new ArrayList<String>();
        try {
            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";
            URL url = new URL(request);
            System.out.println(""Host : "" + url.getHost());
            url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String finalContents = """";
            while ((inputLine = reader.readLine()) != null) {
                finalContents += ""\n"" + inputLine;
            }
            Document doc = Jsoup.parse(finalContents);
            Elements eles = doc.getElementsByTag(""url"");
            for (Element ele : eles) {
                yahooSearchResults.add(ele.text());
                System.out.println(""YahooResult: "" + ele.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return yahooSearchResults;
    }
",0.0
"    public ContentPackage resolveItem() {
        URL url;
        try {
            url = new URL(itembankURL + ""/"" + deposit.get(""http://www.caret.cam.ac.uk/minibix/metadata/ticket""));
            return new ContentPackage(url.openStream());
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
","    private String getServerData(String returnString) {
        InputStream is = null;
        String result = """";
        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        nameValuePairs.add(new BasicNameValuePair(""usuario"", Login.usuario));
        nameValuePairs.add(new BasicNameValuePair(""amigoABorrar"", amigoABorrar.trim()));
        nameValuePairs.add(new BasicNameValuePair(""grupo"", MisGrupos.seleccion.trim()));
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(returnString);
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error en la conexion http "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            String line = reader.readLine();
            is.close();
            result = line.trim().toString();
            Log.d(""AmigosPorGrupo"", ""Longitud line: "" + line.trim().length());
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error converting result "" + e.toString());
        }
        Log.d(""AmigosPorGrupo"", ""Funciono json"" + result);
        return result;
    }
",0.0
"    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel ic = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
","    public void getDownloadInfo() throws Exception {
        cl = new DefaultHttpClient();
        InfoAuthPromter hp = new InfoAuthPromter();
        cl.setCredentialsProvider(hp);
        head = new HttpHead(getURL());
        head.setHeader(""User-Agent"", ""test"");
        head.setHeader(""Accept"", ""*/*"");
        head.setHeader(""Range"", ""bytes=0-"");
        HttpResponse resp = cl.execute(head);
        log.debug(""getDownloadInfo(url) - Status : "" + resp.getStatusLine());
        System.out.println(""----------------- RESPONSE HEADERS ------------------------"");
        for (Header h : resp.getAllHeaders()) {
            System.out.println(h);
        }
        System.out.println(""-----------------------------------------------------------\n"");
        int code = resp.getStatusLine().getStatusCode();
        if (code == 401) {
            throw new Exception(""HTTP Authentication Failed"");
        }
        AuthManager.putAuth(getSite(), auth);
        setURL(head.getURI().toString());
        log.debug(""Last url: "" + head.getURI());
        Header hsize = resp.getFirstHeader(""Content-Length"");
        Header hmod = resp.getFirstHeader(""Last-Modified"");
        setSize(Long.parseLong(hsize.getValue()));
        setRangeEnd(getSize() - 1);
        setResumable(code == 206);
    }
",0.0
"    @Override
    protected ModelAndView handleRequestInternal(HttpServletRequest request, HttpServletResponse response) throws Exception {
        String url = ""http://jdkcn.com/checkUpdateNew.jsp?ver="" + blogFacade.getDatabaseSiteConfig().getAppVersion();
        response.setCharacterEncoding(""UTF-8"");
        URLConnection connection = new URL(url).openConnection();
        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), ""UTF-8""));
        StringBuilder sb = new StringBuilder();
        String line = reader.readLine();
        while (line != null) {
            sb.append(line).append(""\r\n"");
            line = reader.readLine();
        }
        response.getWriter().println(sb.toString());
        return null;
    }
","    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
",0.0
"    public DocumentSummary parseDocument(URL url) throws IOException, DocumentHandlerException {
        try {
            DocumentSummary documentSummary = new DocumentSummary();
            SaxTextContentParser saxParser = new SaxTextContentParser();
            InputSource inputSource = new InputSource(url.openStream());
            documentSummary.contentReader = new StringReader(saxParser.parse(inputSource));
            return documentSummary;
        } catch (SAXException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        } catch (ParserConfigurationException e) {
            throw new DocumentHandlerException(GuiMessages.getString(""XmlDocumentHandler.xmlParsingErrorMessage.header"") + e.getMessage(), e);
        }
    }
","    public static boolean Copy(String __from, String __to) {
        try {
            int bytesum = 0;
            int byteread = -1;
            java.io.File oldfile = new java.io.File(__from);
            if (oldfile.exists()) {
                InputStream inStream = new FileInputStream(__from);
                FileOutputStream fs = new FileOutputStream(__to);
                byte[] buffer = new byte[1024];
                while ((byteread = inStream.read(buffer)) != -1) {
                    bytesum += byteread;
                    fs.write(buffer, 0, byteread);
                }
                inStream.close();
                fs.close();
            } else {
                return false;
            }
        } catch (Exception e) {
            System.out.println(""processFile.copyFile()���Ƶ����ļ��������� "" + e.getMessage());
            return false;
        }
        return true;
    }
",0.0
"    private static boolean copyFile(String src, String dest) {
        try {
            File inputFile = new File(src);
            File outputFile = new File(dest);
            FileInputStream in = new FileInputStream(inputFile);
            FileOutputStream out = new FileOutputStream(outputFile);
            FileChannel inc = in.getChannel();
            FileChannel outc = out.getChannel();
            inc.transferTo(0, inc.size(), outc);
            inc.close();
            outc.close();
            in.close();
            out.close();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
","    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    public void addFile(File fileobj, boolean delete) {
        String oldFileName = fileobj.getPath();
        String currFileName = setUpFile(fileobj);
        if (currFileName != null) {
            File f = new File(currFileName);
            int deleteFiles = JOptionPane.CANCEL_OPTION;
            if (oldFileName.equals(currFileName)) {
                currFileName = currFileName.substring(openProject.getPath().length());
                openProject.addFile(currFileName);
                if (f.getName().toLowerCase().endsWith("".exp"")) addExpFile(f.getPath());
            } else if (!f.exists() || JOptionPane.OK_OPTION == (deleteFiles = JOptionPane.showConfirmDialog(this, ""File"" + f.getName() + "" Already Exists! Do You Wish To Overwrite That File?"" + (f.getName().toLowerCase().endsWith("".exp"") ? ""\nOverwriting An Expression File Will Delete All Files Which Previously Required The Orginal File"" : """")))) {
                try {
                    if (deleteFiles == JOptionPane.OK_OPTION && f.getName().toLowerCase().endsWith("".exp"")) {
                        File expF[] = f.getParentFile().listFiles();
                        for (int i = 0; i < expF.length; i++) {
                            while (expF[i].exists()) {
                                expF[i].delete();
                            }
                        }
                        f.getParentFile().delete();
                    }
                    f.getParentFile().mkdirs();
                    f.createNewFile();
                    FileInputStream in = new FileInputStream(fileobj);
                    FileOutputStream out = new FileOutputStream(f);
                    byte[] buffer = new byte[8 * 1024];
                    int count = 0;
                    do {
                        out.write(buffer, 0, count);
                        count = in.read(buffer, 0, buffer.length);
                    } while (count != -1);
                    in.close();
                    out.close();
                    if (delete) fileobj.delete();
                } catch (Exception e2) {
                    JOptionPane.showMessageDialog(this, ""Error! Could Not Add "" + fileobj.getName() + "" To Project"");
                }
                currFileName = currFileName.substring(currFileName.lastIndexOf(openProject.getName()) + openProject.getName().length() + 1);
                openProject.addFile(currFileName);
                if (f.getName().toLowerCase().endsWith("".exp"")) addExpFile(f.getPath());
            }
        } else {
            String message = ""Error! Could Not Add "" + fileobj.getName() + "" To Project\n"";
            if (fileobj.getName().endsWith("".gprj"")) {
                message += ""You May Not Add A Project File To An Existing Project"";
            } else if (fileobj.getName().toLowerCase().endsWith("".ds_store"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".txt"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".gif"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".jpeg"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".jpg"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".info"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".html"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".db"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".raw"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".cdt"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".gtr"")) {
                message = """";
            } else if (fileobj.getName().toLowerCase().endsWith("".jtv"")) {
                message = """";
            } else message += ""File Extension Unknown. Please Check The File To Ensure It Has The Correct Extension"";
            if (!message.equals("""")) JOptionPane.showMessageDialog(this, message);
        }
    }
",0.0
"    public static byte[] getBytes(String s) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(s.getBytes());
        return d.digest();
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1.0
"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
","    public void fetchFile(String ID) {
        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));
            if (!id.contains(""MARC"" + ID + "".txt"")) {
                id.add(""MARC"" + ID + "".txt"");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = """";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith(""<TR><TD><B>"")) {
                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + ""\n"" + sts + "" - "";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open stream"");
            System.out.println(e);
        }
    }
",0.0
"    public static String md5(String string) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException exception) {
            LOGGER.warn(exception.getMessage());
        }
        byte[] md5hash = new byte[32];
        try {
            md.update(string.getBytes(""iso-8859-1""), 0, string.length());
        } catch (UnsupportedEncodingException exception) {
            LOGGER.warn(exception.getMessage());
        }
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",0.0
"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    public static void main(String[] args) {
        String u = ""http://portal.acm.org/results.cfm?query=%28Author%3A%22"" + ""Boehm%2C+Barry"" + ""%22%29&srt=score%20dsc&short=0&source_disp=&since_month=&since_year=&before_month=&before_year=&coll=ACM&dl=ACM&termshow=matchboolean&range_query=&CFID=22704101&CFTOKEN=37827144&start=1"";
        URL url = null;
        AcmSearchresultPageParser_2011Jan cb = new AcmSearchresultPageParser_2011Jan();
        try {
            url = new URL(u);
            HttpURLConnection uc = (HttpURLConnection) url.openConnection();
            uc.setUseCaches(false);
            InputStream is = uc.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            ParserDelegator pd = new ParserDelegator();
            pd.parse(br, cb, true);
            br.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println(""all doc num= "" + cb.getAllDocNum());
        for (int i = 0; i < cb.getEachResultStartPositions().size(); i++) {
            HashMap<String, Integer> m = cb.getEachResultStartPositions().get(i);
            System.out.println(i + ""pos= "" + m);
        }
    }
",0.0
"    public boolean actualizarRondaActual(division div) {
        int intResult = 0;
        String sql = ""UPDATE divisionxTorneo "" + "" SET rondaActual = "" + div.getRondaActual() + "" WHERE idDivisionxTorneo = "" + div.getidDivision();
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    String readRss(URL url) {
        String html = ""<html><body><h2>No data</h2></body></html>"";
        try {
            mLogger.info(""URL is:"" + url.toString());
            BufferedReader inStream = new BufferedReader(new InputStreamReader(url.openStream()), 1024);
            String line;
            StringBuilder rssFeed = new StringBuilder();
            while ((line = inStream.readLine()) != null) {
                rssFeed.append(line);
            }
            html = rssFeed.toString();
        } catch (IOException ex) {
            mLogger.warning(""Couldn't open an RSS stream"");
        }
        return html;
    }
","    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {
        if (source == null) throw new NullPointerException(""Parameter 'source' is null"");
        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());
        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");
        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");
        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");
        switch(type) {
            case MOVE:
                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\.jpg"")) {
                    for (int i = 0; i < frames_.size(); i++) {
                        Frame f = frames_.get(i);
                        if (f.getFile().compareTo(source) == 0) {
                            frames_.remove(i);
                            break;
                        }
                    }
                }
                source.renameTo(tmp);
                break;
            case COPY:
                FileChannel inChannel = new FileInputStream(source).getChannel();
                FileChannel outChannel = new FileOutputStream(tmp).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
                break;
        }
        for (int i = frames_.size() - 1; i >= index; i--) {
            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));
            frames_.get(i).moveTo(newFrame);
            frames_.set(i, newFrame);
        }
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));
        tmp.renameTo(newLocation);
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.set(index, f);
        return f;
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public void write(HttpServletResponse res) throws MalformedURLException, IOException {
        if (m_url.equals("""")) {
            return;
        }
        URL url = new URL(m_url);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        BufferedInputStream in = new BufferedInputStream(con.getInputStream(), BUF_SIZE);
        BufferedOutputStream out = new BufferedOutputStream(res.getOutputStream());
        byte[] buf = new byte[BUF_SIZE];
        int size = 0;
        String contentType = con.getContentType();
        if (contentType != null) {
            res.setContentType(con.getContentType());
        }
        while ((size = in.read(buf)) > 0) {
            out.write(buf, 0, size);
        }
        out.flush();
        out.close();
        in.close();
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    private File copyFile(File currFile) throws IOException {
        String relativePath = currFile.getPath().substring(_distDir.length() + 1);
        File targetFile = new File(_installDir, relativePath);
        if (targetFile.exists()) {
            log(targetFile.getPath() + "" already exists, skipping libcopy"", Project.MSG_INFO);
            return targetFile;
        } else {
            if (!targetFile.getParentFile().exists()) {
                if (!targetFile.getParentFile().mkdirs()) {
                    log(""Unable to create target dir tree for "" + targetFile.getPath(), Project.MSG_ERR);
                    throw new IOException();
                }
            }
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(currFile);
        } catch (FileNotFoundException e) {
            log(""Library from plugin manifest appears to have been deleted: "" + currFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        try {
            fos = new FileOutputStream(targetFile);
        } catch (FileNotFoundException e) {
            log(""Unable to create target file to write to: "" + targetFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int read = 0;
        byte[] buff = new byte[65536];
        boolean success = true;
        while (read != -1 && success) {
            try {
                read = bis.read(buff, 0, 65536);
            } catch (IOException e) {
                log(""Read error whilst reading from: "" + currFile.getPath(), Project.MSG_ERR);
                success = false;
            }
            if (read != -1 && success) {
                try {
                    bos.write(buff, 0, read);
                } catch (IOException e) {
                    log(""Write error whilst writing to: "" + targetFile.getPath(), Project.MSG_ERR);
                    success = false;
                }
            }
        }
        try {
            bis.close();
        } catch (IOException e) {
        }
        try {
            bos.close();
        } catch (IOException e) {
        }
        try {
            fis.close();
        } catch (IOException e) {
        }
        try {
            fos.close();
        } catch (IOException e) {
        }
        if (!success) {
            throw new IOException();
        }
        return targetFile;
    }
",0.0
"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    @Override
    public void write(String path, InputStream is) throws PersistenceException {
        Writer out = null;
        try {
            out = new OutputStreamWriter(new FileOutputStream(path), ""utf-8"");
            IOUtils.copy(is, out);
        } catch (IOException e) {
            LOGGER.error(""fail to write file"", e);
            throw new PersistenceException(e);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) {
                    out = null;
                }
            }
        }
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","        public void actionPerformed(ActionEvent e) {
            String aboutText = ""Slug application."";
            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);
            boolean canShowInPane = false;
            if (aboutURL != null) {
                try {
                    URL url = new URL(aboutURL);
                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);
                    canShowInPane = dlg.setURL(url);
                    if (canShowInPane) {
                        dlg.setSize(300, 200);
                        dlg.setLocationRelativeTo(ShellSlacFrame.this);
                        dlg.setVisible(true);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = """";
                        StringBuffer content = new StringBuffer();
                        do {
                            content.append(line);
                            line = reader.readLine();
                        } while (line != null);
                        if (content.length() != 0) {
                            aboutText = content.toString();
                        }
                    }
                } catch (Exception ex) {
                    if (DEBUG) {
                        ex.printStackTrace();
                    }
                }
            }
            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);
        }
",0.0
"    private void processBody(HttpMethod request) throws IOException {
        InputStream in = request.getResponseBodyAsStream();
        if (in == null) return;
        Header contentTypeHdr = request.getResponseHeader(HttpHeaders.CONTENT_TYPE);
        _resultContentType = (contentTypeHdr != null) ? contentTypeHdr.getValue() : """";
        if (_out != null) {
            IOUtils.copy(in, _out);
            _out.flush();
        } else if (_resultContentType.startsWith(MimeTypes.TEXT)) {
            _result = IOUtils.toString(in, ""UTF-8"");
        } else if (_resultContentType.startsWith(MimeTypes.XML) || _resultContentType.startsWith(MimeTypes.DEPRECATED_XML)) {
            _result = ParseUtil.parse(new InputSource(in));
        } else {
            _result = IOUtils.toByteArray(in);
        }
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
","    Bitmap downloadBitmap(String url) {
        final int IO_BUFFER_SIZE = 4 * 1024;
        final HttpClient client = (mode == Mode.NO_ASYNC_TASK) ? new DefaultHttpClient() : AndroidHttpClient.newInstance(""Android"");
        final HttpGet getRequest = new HttpGet(url);
        try {
            HttpResponse response = client.execute(getRequest);
            final int statusCode = response.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK) {
                Log.w(""ImageDownloader"", ""Error "" + statusCode + "" while retrieving bitmap from "" + url);
                return null;
            }
            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    inputStream = entity.getContent();
                    return BitmapFactory.decodeStream(new FlushedInputStream(inputStream));
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (IOException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""I/O error while retrieving bitmap from "" + url, e);
        } catch (IllegalStateException e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Incorrect URL: "" + url);
        } catch (Exception e) {
            getRequest.abort();
            Log.w(LOG_TAG, ""Error while retrieving bitmap from "" + url, e);
        } finally {
            if ((client instanceof AndroidHttpClient)) {
                ((AndroidHttpClient) client).close();
            }
        }
        return null;
    }
",0.0
"    public ObjectInputStream sendObject(String sMethod, Serializable obj) {
        String sServlet = System.getProperty(""servlet.jstat"");
        if (sServlet != null) {
            try {
                URL url = new URL(sServlet);
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                ObjectOutputStream out = new ObjectOutputStream(conn.getOutputStream());
                out.writeObject(sMethod);
                out.writeObject(obj);
                out.flush();
                out.close();
                return new ObjectInputStream(conn.getInputStream());
            } catch (Exception exc) {
                System.out.println(""Error on SpaceJobRunner::sendObjectPOST() --> "" + exc);
            }
        } else {
        }
        return null;
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
","    @PostConstruct
    public void init() {
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() start ++++++++"");
        try {
            tracSectionAll = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();
            URL url = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);
            tracCriteriaCheckList = new LinkedProperties();
            tracCriteriaCheckList.load(url.openStream());
            Set<String> tmpKeys = tracCriteriaCheckList.stringPropertyNames();
            List<String> sortWrkList = new ArrayList<String>();
            sortWrkList.addAll(tmpKeys);
            sortList(sortWrkList);
            for (String key : sortWrkList) {
                String aspectCode = key.substring(aspectCodeOffsetValue);
                logger.info(""aspectCode="" + aspectCode);
                if (aspectCode.startsWith(""A"")) {
                    if (aspectCode.equals(""A"")) {
                        sectionAcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""B"")) {
                    if (aspectCode.equals(""B"")) {
                        sectionBcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""C"")) {
                    if (aspectCode.equals(""C"")) {
                        sectionCcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else {
                    logger.warning(""offset value is wrong: 16th character must be A or B or C"");
                }
            }
        } catch (FileNotFoundException ex) {
            logger.log(Level.WARNING, ""specified properties file was not found"", ex);
        } catch (IOException ex) {
            logger.log(Level.WARNING, ""IO error occurred"", ex);
        } finally {
        }
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() end   ++++++++"");
    }
",0.0
"    @Override
    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException {
        String context = request.getContextPath();
        String resource = request.getRequestURI().replace(context, """");
        resource = resource.replaceAll(RESOURCES_PATH + ""/"", """");
        if ((StringUtils.isEmpty(resource)) || (resource.endsWith(""/""))) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        this.getLogger().info(""Getting resource: "" + resource);
        URL url = ClassLoaderUtils.getResource(resource);
        if (url == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        InputStream input = url.openStream();
        OutputStream output = response.getOutputStream();
        URLConnection connection = url.openConnection();
        String contentEncoding = connection.getContentEncoding();
        int contentLength = connection.getContentLength();
        String contentType = connection.getContentType();
        if (contentEncoding != null) {
            response.setCharacterEncoding(contentEncoding);
        }
        response.setContentLength(contentLength);
        response.setContentType(contentType);
        IOUtils.copy(input, output, true);
    }
","    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
",1.0
"    private void zip(File input, File output) {
        OutputStream os = null;
        InputStream is = null;
        try {
            os = new GZIPOutputStream(new FileOutputStream(output));
            is = new FileInputStream(input);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.out.println(""param 1: "" + args[0] + ""\r\n"");
        System.out.println(""param 2: "" + args[1] + ""\r\n"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setFollowRedirects(true);
            connection.connect();
            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
            FileOutputStream out = new FileOutputStream(args[1]);
            int c = -1;
            while ((c = in.read()) >= 0) {
                out.write(c);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r\n"");
        }
    }
","    public static void main(String[] args) {
        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";
        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(in);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
",0.0
"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",1.0
"    public void copy(File in, File out) throws Exception {
        FileChannel src = new FileInputStream(in).getChannel();
        FileChannel dest = new FileOutputStream(out).getChannel();
        src.transferTo(0, src.size(), dest);
        src.close();
        dest.close();
    }
","    private static void generateGIF(Connection con, String category, String area_code, String topic_code, String timeseries, String diff_timeseries, Calendar time, String area_label, String raster_label, String image_label, String note, Rectangle2D bounds, Rectangle2D raster_bounds, String source_filename, String diff_filename, String legend_filename, String output_filename, int output_maximum_size) throws SQLException, IOException {
        System.out.println(""ImageCropper.generateGIF begin"");
        MapContext map_context = new MapContext(""test"", new Configuration());
        try {
            Map map = new Map(map_context, area_label, new Configuration());
            map.setCoordSys(ProjectionCategories.default_coordinate_system);
            map.setPatternOutline(new XPatternOutline(new XPatternPaint(Color.white)));
            String type = null;
            RasterLayer rlayer = getRasterLayer(map, raster_label, getLinuxPathEquivalent(source_filename), getLinuxPathEquivalent(diff_filename), type, getLinuxPathEquivalent(legend_filename));
            map.addLayer(rlayer, true);
            map.setBounds2DImage(bounds, true);
            Dimension image_dim = null;
            image_dim = new Dimension((int) rlayer.raster.getDeviceBounds().getWidth() + 1, (int) rlayer.raster.getDeviceBounds().getHeight() + 1);
            if (output_maximum_size > 0) {
                double width_factor = image_dim.getWidth() / output_maximum_size;
                double height_factor = image_dim.getHeight() / output_maximum_size;
                double factor = Math.max(width_factor, height_factor);
                if (factor > 1.0) {
                    image_dim.setSize(image_dim.getWidth() / factor, image_dim.getHeight() / factor);
                }
            }
            map.setImageDimension(image_dim);
            map.scale();
            image_dim = new Dimension((int) map.getBounds2DImage().getWidth(), (int) map.getBounds2DImage().getHeight());
            Image image = null;
            Graphics gr = null;
            image = ImageCreator.getImage(image_dim);
            gr = image.getGraphics();
            try {
                map.paint(gr);
            } catch (Exception e) {
                Debug.println(""map.paint error: "" + e.getMessage());
            }
            String gif_filename = """";
            try {
                gif_filename = formatPath(category, timeseries, output_filename);
                new File(new_filename).mkdirs();
                new GifEncoder(image, new FileOutputStream(gif_filename)).encode();
            } catch (IOException e) {
                Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());
                throw new IOException(""GenerateGIF.IOException: "" + e);
            }
            PreparedStatement pstmt = null;
            try {
                String delete_raster = ""delete raster_layer where "" + ""label='"" + gif_name.trim() + ""' and category='"" + category.trim() + ""' and area_code=' "" + area_code.trim() + ""'"";
                pstmt = con.prepareStatement(delete_raster);
                boolean del = pstmt.execute();
                pstmt.close();
                String insert_raster = ""insert into RASTER_LAYER "" + ""values(RASTER_LAYER_ID.nextval, ?, ?, ?, "" + ""?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "" + ""SYSDATE, ?)"";
                pstmt = con.prepareStatement(insert_raster);
                pstmt.setString(1, gif_name);
                pstmt.setString(2, category);
                pstmt.setString(3, area_code);
                pstmt.setString(4, topic_code);
                if (time == null) {
                    pstmt.setNull(5, java.sql.Types.DATE);
                } else {
                    pstmt.setDate(5, new java.sql.Date(time.getTimeInMillis()));
                }
                pstmt.setString(6, timeseries);
                pstmt.setString(7, gif_filename);
                pstmt.setNull(8, java.sql.Types.INTEGER);
                pstmt.setNull(9, java.sql.Types.INTEGER);
                pstmt.setDouble(10, raster_bounds.getX());
                pstmt.setDouble(11, raster_bounds.getY());
                pstmt.setDouble(12, raster_bounds.getWidth());
                pstmt.setDouble(13, raster_bounds.getHeight());
                pstmt.setString(14, note);
                int sequence = 0;
                if (gif_name.endsWith(""DP"")) {
                    sequence = 1;
                } else if (gif_name.endsWith(""DY"")) {
                    sequence = 2;
                } else if (gif_name.endsWith(""DA"")) {
                    sequence = 3;
                }
                pstmt.setInt(15, sequence);
                pstmt.executeUpdate();
            } catch (SQLException e) {
                Debug.println(""SQLException occurred e: "" + e.getMessage());
                con.rollback();
                throw new SQLException(""GenerateGIF.SQLException: "" + e);
            } finally {
                pstmt.close();
            }
        } catch (Exception e) {
            Debug.println(""ImageCropper.generateGIF e: "" + e.getMessage());
        }
        System.out.println(""ImageCropper.generateGIF end"");
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String hash(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""), 0, text.length());
            byte[] md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.people.findByUsername""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""username"", userName));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGUser user = JAXB.unmarshal(content, GGUser.class);
        return user;
    }
","    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    @Override
    public void copy(final String fileName) throws FileIOException {
        try {
            if (opened) {
                fileChannel.position(0);
            } else {
                fileChannel = new FileInputStream(file).getChannel();
            }
            FileChannel dstChannel = null;
            try {
                dstChannel = new FileOutputStream(fileName).getChannel();
                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());
            } finally {
                try {
                    if (dstChannel != null) {
                        dstChannel.close();
                    }
                } catch (Exception exception) {
                }
            }
            if (opened) {
                fileChannel.position(currentPositionInFile);
            } else {
                fileChannel.close();
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);
        }
    }
",0.0
"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    public void getStation(String prefecture, String line) {
        HttpClient httpclient = null;
        try {
            httpclient = new DefaultHttpClient();
            List<NameValuePair> qparams = new ArrayList<NameValuePair>();
            qparams.add(new BasicNameValuePair(""method"", ""getStations""));
            qparams.add(new BasicNameValuePair(""prefecture"", prefecture));
            qparams.add(new BasicNameValuePair(""line"", line));
            URI uri = URIUtils.createURI(""http"", ""express.heartrails.com"", -1, ""/api/xml"", URLEncodedUtils.format(qparams, ""UTF-8""), null);
            HttpGet httpget = new HttpGet(uri);
            HttpResponse response = httpclient.execute(httpget);
            HttpEntity entity = response.getEntity();
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream, ""UTF-8""));
            StringBuffer buf = new StringBuffer();
            String str;
            while ((str = reader.readLine()) != null) {
                buf.append(str);
                buf.append(""\n"");
            }
            reader.close();
            stationRes = new StationResponse(buf.toString());
        } catch (URISyntaxException ex) {
            ex.printStackTrace();
        } catch (ClientProtocolException ex) {
            ex.printStackTrace();
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (SAXException ex) {
            ex.printStackTrace();
        } catch (ParserConfigurationException ex) {
            ex.printStackTrace();
        } finally {
            mSearchStation.setEnabled(true);
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","                public void run() {
                    ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j]);
                    ShareFileReader reader = new ShareFileReader(readers[j], files[0]);
                    ShareFileWriter writer = new ShareFileWriter(part, new File(""Downloads/"" + readers[j].getName()));
                    long tot = 0;
                    byte[] b = new byte[(int) (Math.random() * 10000)];
                    while (tot < readers[j].getSize()) {
                        reader.read(b);
                        byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length];
                        System.arraycopy(b, 0, bwrite, 0, b.length);
                        writer.write(bwrite, b.length);
                        tot += b.length;
                    }
                    done++;
                    System.out.println((int) (done * 100.0 / PARTS) + ""% Complete"");
                }
",1.0
"    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""classpath://"")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
","    public void updateMetaList() {
        metaserverModel.begin();
        serverCache.expire(EXPIRE_INTERVAL * 1000);
        final Map<String, MetaserverEntry> oldEntries = serverCache.getAll();
        final MetaserverEntry localhostMetaserverEntry = MetaserverEntryParser.parseEntry(ServerCache.DEFAULT_ENTRY_LOCALHOST);
        assert localhostMetaserverEntry != null;
        metaserverModel.add(localhostMetaserverEntry);
        oldEntries.remove(ServerCache.makeKey(localhostMetaserverEntry));
        serverCache.put(localhostMetaserverEntry);
        try {
            final URL url = new URL(METASERVER_URL);
            final String httpProxy = System.getenv(""http_proxy"");
            if (httpProxy != null && httpProxy.length() > 0) {
                if (httpProxy.regionMatches(true, 0, ""http://"", 0, 7)) {
                    final String[] tmp = httpProxy.substring(7).replaceAll(""/.*"", """").split("":"", 2);
                    System.setProperty(""http.proxyHost"", tmp[0]);
                    System.setProperty(""http.proxyPort"", tmp.length >= 2 ? tmp[1] : ""80"");
                } else {
                    System.err.println(""Warning: unsupported http_proxy protocol: "" + httpProxy);
                }
            }
            final HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            try {
                conn.setRequestMethod(""GET"");
                conn.setUseCaches(false);
                conn.connect();
                if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    final InputStream in = conn.getInputStream();
                    final InputStreamReader isr = new InputStreamReader(in, ""ISO-8859-1"");
                    try {
                        final BufferedReader br = new BufferedReader(isr);
                        try {
                            final MetaserverEntryParser metaserverEntryParser = new MetaserverEntryParser();
                            while (true) {
                                final String line = br.readLine();
                                if (line == null) {
                                    break;
                                }
                                final MetaserverEntry metaserverEntry = metaserverEntryParser.parseLine(line);
                                if (metaserverEntry != null) {
                                    metaserverModel.add(metaserverEntry);
                                    oldEntries.remove(ServerCache.makeKey(metaserverEntry));
                                    serverCache.put(metaserverEntry);
                                }
                            }
                        } finally {
                            br.close();
                        }
                    } finally {
                        isr.close();
                    }
                }
            } finally {
                conn.disconnect();
            }
        } catch (final IOException ignored) {
        }
        for (final MetaserverEntry metaserverEntry : oldEntries.values()) {
            metaserverModel.add(metaserverEntry);
        }
        metaserverModel.commit();
        serverCache.save();
    }
",0.0
"    public static String encodeMD5(String param) throws Exception {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(param.getBytes());
        byte[] hash = digest.digest();
        char buf[] = new char[hash.length * 2];
        for (int i = 0, x = 0; i < hash.length; i++) {
            buf[x++] = HEX_CHARS[(hash[i] >>> 4) & 0xf];
            buf[x++] = HEX_CHARS[hash[i] & 0xf];
        }
        return String.valueOf(buf);
    }
","    public DBAccess(String pathToDb) {
        if (instance != null) {
            throw new IllegalStateException();
        }
        System.setProperty(""derby.system.home"", pathToDb);
        try {
            boolean exists = new File(pathToDb).exists();
            new EmbeddedDriver();
            Properties props = new Properties();
            if (exists) {
                connection = DriverManager.getConnection(protocol + ""rmpDB;"", props);
                connection.setAutoCommit(true);
                Statement statement = connection.createStatement();
                try {
                } finally {
                    statement.close();
                }
            } else {
                connection = DriverManager.getConnection(protocol + ""rmpDB;create=true"", props);
                connection.setAutoCommit(true);
                URL url = Platform.getBundle(""ru.spbu.dorms.geo.rmp"").getResource(""sql/createdb.sql"");
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                StringBuilder query = new StringBuilder();
                for (String s = reader.readLine(); s != null; s = reader.readLine()) {
                    if (query.length() > 0) {
                        query.append('\n');
                    }
                    query.append(s);
                }
                reader.close();
                Statement statement = connection.createStatement();
                try {
                    String[] statements = query.toString().split("";(\\s)*"");
                    for (String s : statements) {
                        statement.execute(s);
                    }
                } finally {
                    statement.close();
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        instance = this;
    }
",0.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter(""path"");
        path = URLDecoder.decode(path, ""UTF-8"");
        String name = req.getParameter(""name"");
        name = new String(name.getBytes(), ""UTF-8"");
        String contentType = req.getParameter(""contentType"");
        if (path == null) {
            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");
            LOG.error(e);
            throw e;
        }
        URL url = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(url, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
",0.0
"    public void reset(String componentName, int currentPilot) {
        try {
            PreparedStatement psta = jdbc.prepareStatement(""DELETE FROM component_prop "" + ""WHERE pilot_id = ? "" + ""AND component_name = ?"");
            psta.setInt(1, currentPilot);
            psta.setString(2, componentName);
            psta.executeUpdate();
            jdbc.commit();
        } catch (SQLException e) {
            jdbc.rollback();
            log.debug(e);
        }
    }
","    public String[] list() {
        if (isURL) {
            if (!isDirectory()) return null;
            try {
                URLConnection c = url.openConnection();
                InputStream is = c.getInputStream();
                boolean foundEnd = false;
                Vector files = new Vector();
                while (!foundEnd) {
                    byte[] b = new byte[is.available()];
                    String s = new String(b);
                    if (s.toLowerCase().indexOf(""</html>"") != -1) foundEnd = true;
                    while (s.indexOf(""a href"") != -1) {
                        int ndx = s.indexOf(""a href"") + 8;
                        String f = s.substring(ndx, s.indexOf(""\"""", ndx));
                        s = s.substring(s.indexOf(""\"""", ndx) + 1);
                        Location check = new Location(getAbsolutePath(), f);
                        if (check.exists()) {
                            files.add(check.getName());
                        }
                    }
                }
                return (String[]) files.toArray(new String[0]);
            } catch (IOException e) {
                return null;
            }
        }
        return file.list();
    }
",0.0
"    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
","    public static void copyResource(String src, File dest) throws IOException {
        InputStream fin = ResourceLoader.openResource(src);
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).error(""Failed to load resource '"" + src + ""'"");
            LogFactory.getLog(ResourceLoader.class).info(""Attempting to open file from from file system"");
            fin = new FileInputStream(src);
        }
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).warn(""Giving up on copy operation, can't find source '"" + src + ""'"");
            return;
        }
        BufferedOutputStream fout = new BufferedOutputStream(new FileOutputStream(dest));
        byte[] buffer = new byte[COPY_BUFFER_SIZE];
        int readBytes = fin.read(buffer);
        while (readBytes > -1) {
            fout.write(buffer, 0, readBytes);
            readBytes = fin.read(buffer);
        }
        fout.close();
        fin.close();
    }
",1.0
"public static String md5(String text) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(text.getBytes(AlipayConfig.input_charset));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] bytes = msgDigest.digest();
        String md5Str = new String(encodeHex(bytes));
        return md5Str;
    }","    private String urlConnectionTranslate(String word) {
        try {
            URL url = new URL(""http://ajax.googleapis.com/ajax/services/"" + ""language/translate?v=1.0&q="" + word + ""&langpair=is%7Cen"");
            URLConnection connection = url.openConnection();
            connection.addRequestProperty(""Referer"", ""http://www.hi.is"");
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder builder = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                builder.append(line);
            }
            JSONObject json = new JSONObject(builder.toString());
            return json.getJSONObject(""responseData"").getString(""translatedText"");
        } catch (Exception e) {
            Log.e(TranslatorApplication.tag, e.toString());
        }
        return null;
    }
",0.0
"    public static ChannelIF addChannel(String url) throws Exception {
        ChannelIF channel = null;
        try {
            channel = FeedParser.parse(new ChannelBuilder(), url);
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        } catch (ParseException e) {
            InputStream is = new URL(url).openStream();
            InputStreamReader reader = new InputStreamReader(is);
            channel = FeedParser.parse(new ChannelBuilder(), reader);
            reader.close();
            is.close();
            if (channel.getLocation() == null) channel.setLocation(new URL(url));
        }
        DAOChannel.addChannel(channel);
        DAOFavicon.addFaviconForChannel(channel);
        return channel;
    }
","    private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException {
        if (local == null) throw new IllegalArgumentException(""Must specify remote file"");
        if (local.exists() && !local.canWrite()) throw new IOException(""Cannot write to "" + local);
        long lengthCurrent = local.exists() ? local.length() : -1l;
        if (lengthCurrent == 0) throw new IOException(""Cannot get the length for "" + local);
        long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l;
        if (remote == null) throw new IllegalArgumentException(""Must specify remote url"");
        URLConnection urlConnection = remote.openConnection();
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(false);
        long lengthRemote = urlConnection.getContentLength();
        long lastModifiedRemote = urlConnection.getLastModified();
        if (lengthRemote == lengthCurrent) {
            LOGGER.fine(""Not downloading "" + remote + "" of length "" + lengthRemote + "" and date "" + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : ""n/a"") + "" for "" + local + "" of length "" + lengthCurrent + "" and date "" + new Date(lastModifiedCurrent));
            return false;
        }
        BufferedInputStream inputStream = null;
        BufferedOutputStream bufferedOutputStream = null;
        try {
            inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local));
            byte[] buffer = new byte[BUFFER_SIZE];
            do {
                int count = inputStream.read(buffer);
                if (count < 0) break;
                bufferedOutputStream.write(buffer, 0, count);
            } while (true);
            return true;
        } finally {
            try {
                if (inputStream != null) inputStream.close();
            } catch (Throwable throwable) {
            }
            try {
                if (bufferedOutputStream != null) bufferedOutputStream.close();
            } catch (Throwable throwable) {
            }
        }
    }
",0.0
"    void queryFile(String rendezvousProgram, String rendezvousMD5) {
        try {
            XMLConfigParser.readUrlHost();
            String url = XMLConfigParser.urlHost;
            String query;
            String param1 = ""op=query"";
            String param2 = ""program="" + rendezvousProgram;
            String param3 = ""md5="" + rendezvousMD5;
            query = String.format(""%s&%s&%s"", param1, param2, param3);
            openConnection(query, url);
            String line = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private String getMD5Hash(String password) {
        String plainText = password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) {
                    plainText = ""0"" + plainText;
                }
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
","    public static void test(String args[]) {
        int trace;
        int bytes_read = 0;
        int last_contentLenght = 0;
        try {
            BufferedReader reader;
            URL url;
            url = new URL(args[0]);
            URLConnection istream = url.openConnection();
            last_contentLenght = istream.getContentLength();
            reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
            System.out.println(url.toString());
            String line;
            trace = t2pNewTrace();
            while ((line = reader.readLine()) != null) {
                bytes_read = bytes_read + line.length() + 1;
                t2pProcessLine(trace, line);
            }
            t2pHandleEventPairs(trace);
            t2pSort(trace, 0);
            t2pExportTrace(trace, new String(""pngtest2.png""), 1000, 700, (float) 0, (float) 33);
            t2pExportTrace(trace, new String(""pngtest3.png""), 1000, 700, (float) 2.3, (float) 2.44);
            System.out.println(""Press any key to contiune read from stream !!!"");
            System.out.println(t2pGetProcessName(trace, 0));
            System.in.read();
            istream = url.openConnection();
            if (last_contentLenght != istream.getContentLength()) {
                istream = url.openConnection();
                istream.setRequestProperty(""Range"", ""bytes="" + Integer.toString(bytes_read) + ""-"");
                System.out.println(Integer.toString(istream.getContentLength()));
                reader = new BufferedReader(new InputStreamReader(istream.getInputStream()));
                while ((line = reader.readLine()) != null) {
                    System.out.println(line);
                    t2pProcessLine(trace, line);
                }
            } else System.out.println(""File not changed !"");
            t2pDeleteTrace(trace);
        } catch (MalformedURLException e) {
            System.out.println(""MalformedURLException !!!"");
        } catch (IOException e) {
            System.out.println(""File not found "" + args[0]);
        }
        ;
    }
",0.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public void execute() {
        check();
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(host, port);
        } catch (IOException ex) {
            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");
        }
        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());
        }
        try {
            try {
                if (!ftp.login(userid, password)) {
                    throw new BuildException(""Identification failed"");
                }
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (binary) {
                try {
                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);
                } catch (IOException ex) {
                    throw new BuildException(ex);
                }
                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());
                }
            }
            try {
                ftp.changeWorkingDirectory(remotedir);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());
            }
            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;
            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;
            BufferedOutputStream outstream = null;
            try {
                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));
                ftp.retrieveFile(remoteFullFileName, outstream);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");
            }
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException ex) {
                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");
            }
        }
    }
",0.0
"    private String storeEditionFile(InputStream in) throws IOException {
        String datadir = getCqPropertiesBeanSpring().getDatadir() + File.separator + ""attachments"" + File.separator;
        File attachmentsDir = new File(datadir);
        attachmentsDir.mkdirs();
        File storedEditionFile = File.createTempFile(""edition_import_"", "".tmp"", attachmentsDir);
        FileOutputStream out = new FileOutputStream(storedEditionFile);
        IOUtils.copyLarge(in, out);
        IOUtils.closeQuietly(out);
        IOUtils.closeQuietly(in);
        return storedEditionFile.getAbsolutePath();
    }
","    private static Pattern getBotPattern() {
        StringBuilder sb = new StringBuilder();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith(""#"") && !line.equals("""")) {
                        if (sb.length() > 0) sb.append(""|"");
                        sb.append(""("").append(line).append("")"");
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return Pattern.compile(sb.toString());
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    public void notifyIterationEnds(final IterationEndsEvent event) {
        log.info(""moving files..."");
        File source = new File(""deqsim.log"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log to its iteration directory."");
            }
        }
        int parallelCnt = 0;
        source = new File(""deqsim.log."" + parallelCnt);
        while (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""deqsim.log."" + parallelCnt));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move deqsim.log."" + parallelCnt + "" to its iteration directory."");
            }
            parallelCnt++;
            source = new File(""deqsim.log."" + parallelCnt);
        }
        source = new File(""loads_out.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""loads_out.txt""));
            try {
                IOUtils.copyFile(source, destination);
            } catch (FileNotFoundException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            } catch (IOException e) {
                log.info(""WARNING: Could not copy loads_out.txt to its iteration directory."");
            }
            destination = new File(""loads_in.txt"");
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move loads_out.txt to loads_in.txt."");
            }
        }
        source = new File(""linkprocs.txt"");
        if (source.exists()) {
            File destination = new File(Controler.getIterationFilename(""linkprocs.txt""));
            if (!IOUtils.renameFile(source, destination)) {
                log.info(""WARNING: Could not move linkprocs.txt to its iteration directory."");
            }
        }
    }
",0.0
"        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
","    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (mURLImageMap.containsKey(url)) {
                    return mURLImageMap.get(url);
                }
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    mURLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
                LOG.debug(""Ignore any exceptions"");
            }
        } catch (Throwable e) {
            LOG.debug(""Ignore any exceptions"");
        }
        return null;
    }
",0.0
"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(conf);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, conf);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
","    public static String getMD5(String str) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            String pwd = new BigInteger(1, md5.digest()).toString(16);
            return pwd;
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return str;
    }
",0.0
"    private void doPost(String request) throws IOException {
        URL url = new URL(""http://localhost:8080/exist/rest"" + DBBroker.ROOT_COLLECTION);
        HttpURLConnection connect = (HttpURLConnection) url.openConnection();
        connect.setRequestMethod(""POST"");
        connect.setDoOutput(true);
        OutputStream os = connect.getOutputStream();
        os.write(request.getBytes(""UTF-8""));
        connect.connect();
        BufferedReader is = new BufferedReader(new InputStreamReader(connect.getInputStream()));
        String line;
        while ((line = is.readLine()) != null) System.out.println(line);
    }
","    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.close(fis);
            }
        }
    }
",0.0
"    public void myClickHandler(View view) {
        switch(view.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL url = new URL(urlText.getText().toString());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line = """";
                    while ((line = rd.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
","    public static String getMD5EncodedString(String strIn) {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(strIn.getBytes());
            byte[] digest = md5.digest();
            StringBuffer hexString = new StringBuffer();
            for (byte aDigest : digest) {
                hexString.append(Integer.toHexString(0xFF & aDigest));
            }
            return hexString.toString();
        } catch (java.security.NoSuchAlgorithmException n) {
            return """";
        }
    }
",0.0
"    public void setImage(java.awt.Image img) {
        if (imageName != null && imageName.length() > 0) {
            try {
                InputStream url = currentProject.getUrl(imageName).openStream();
                image = new org.eclipse.swt.graphics.Image(getDisplay(), url);
            } catch (IOException e) {
                e.printStackTrace();
            }
            Display.getDefault().asyncExec(new Runnable() {

                public void run() {
                    redraw();
                }
            });
        }
    }
","    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {
        monitor.subTask(""download "" + url.toString());
        InputStream in = null;
        FileOutputStream out = null;
        URLConnection conn = null;
        try {
            conn = url.openConnection();
            Writer writer = null;
            try {
                Date date = new Date(conn.getLastModified());
                writer = new FileWriter(timestamp);
                writer.write(this.FORMAT.format(date));
            } catch (IOException e) {
                timestamp.delete();
            } finally {
                IOUtils.closeQuietly(writer);
            }
            in = conn.getInputStream();
            out = new FileOutputStream(archive);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    public synchronized String encrypt(String text) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        md.update(text.getBytes());
        byte raw[] = md.digest();
        String hash = """";
        for (int i = 0; i < raw.length; i++) {
            byte temp = raw[i];
            String s = Integer.toHexString(new Byte(temp));
            while (s.length() < 2) {
                s = ""0"" + s;
            }
            s = s.substring(s.length() - 2);
            hash += s;
        }
        return hash;
    }
",0.0
"    public static void copyFromFileToFileUsingNIO(File inputFile, File outputFile) throws FileNotFoundException, IOException {
        FileChannel inputChannel = new FileInputStream(inputFile).getChannel();
        FileChannel outputChannel = new FileOutputStream(outputFile).getChannel();
        try {
            inputChannel.transferTo(0, inputChannel.size(), outputChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inputChannel != null) inputChannel.close();
            if (outputChannel != null) outputChannel.close();
        }
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
","    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println(""Usage: <target URI> <no of requests>"");
            System.exit(-1);
        }
        URI targetURI = new URI(args[0]);
        int n = Integer.parseInt(args[1]);
        URL url = targetURI.toURL();
        byte[] buffer = new byte[4096];
        long startTime;
        long finishTime;
        int successCount = 0;
        int failureCount = 0;
        String serverName = ""unknown"";
        long total = 0;
        long contentLen = 0;
        long totalContentLen = 0;
        startTime = System.currentTimeMillis();
        for (int i = 0; i < n; i++) {
            HttpURLConnection c = (HttpURLConnection) url.openConnection();
            c.connect();
            InputStream instream = c.getInputStream();
            try {
                contentLen = 0;
                if (instream != null) {
                    int l = 0;
                    while ((l = instream.read(buffer)) != -1) {
                        total += l;
                        contentLen += l;
                    }
                }
                if (c.getResponseCode() == 200) {
                    successCount++;
                } else {
                    failureCount++;
                }
                totalContentLen += contentLen;
            } catch (IOException ex) {
                failureCount++;
            }
            String s = c.getHeaderField(""Server"");
            if (s != null) {
                serverName = s;
            }
        }
        finishTime = System.currentTimeMillis();
        float totalTimeSec = (float) (finishTime - startTime) / 1000;
        float reqsPerSec = (float) successCount / totalTimeSec;
        float timePerReqMs = (float) (finishTime - startTime) / (float) successCount;
        System.out.print(""Server Software:\t"");
        System.out.println(serverName);
        System.out.println();
        System.out.print(""Document URI:\t\t"");
        System.out.println(targetURI);
        System.out.print(""Document Length:\t"");
        System.out.print(contentLen);
        System.out.println("" bytes"");
        System.out.println();
        System.out.print(""Time taken for tests:\t"");
        System.out.print(totalTimeSec);
        System.out.println("" seconds"");
        System.out.print(""Complete requests:\t"");
        System.out.println(successCount);
        System.out.print(""Failed requests:\t"");
        System.out.println(failureCount);
        System.out.print(""Content transferred:\t"");
        System.out.print(total);
        System.out.println("" bytes"");
        System.out.print(""Requests per second:\t"");
        System.out.print(reqsPerSec);
        System.out.println("" [#/sec] (mean)"");
        System.out.print(""Time per request:\t"");
        System.out.print(timePerReqMs);
        System.out.println("" [ms] (mean)"");
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","        public void actionPerformed(ActionEvent e) {
            String aboutText = ""Slug application."";
            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);
            boolean canShowInPane = false;
            if (aboutURL != null) {
                try {
                    URL url = new URL(aboutURL);
                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);
                    canShowInPane = dlg.setURL(url);
                    if (canShowInPane) {
                        dlg.setSize(300, 200);
                        dlg.setLocationRelativeTo(ShellSlacFrame.this);
                        dlg.setVisible(true);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = """";
                        StringBuffer content = new StringBuffer();
                        do {
                            content.append(line);
                            line = reader.readLine();
                        } while (line != null);
                        if (content.length() != 0) {
                            aboutText = content.toString();
                        }
                    }
                } catch (Exception ex) {
                    if (DEBUG) {
                        ex.printStackTrace();
                    }
                }
            }
            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);
        }
",0.0
"    public ObjectInputStream sendObject(String sMethod, Serializable obj) {
        String sServlet = System.getProperty(""servlet.jstat"");
        if (sServlet != null) {
            try {
                URL url = new URL(sServlet);
                URLConnection conn = url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
                ObjectOutputStream out = new ObjectOutputStream(conn.getOutputStream());
                out.writeObject(sMethod);
                out.writeObject(obj);
                out.flush();
                out.close();
                return new ObjectInputStream(conn.getInputStream());
            } catch (Exception exc) {
                System.out.println(""Error on SpaceJobRunner::sendObjectPOST() --> "" + exc);
            }
        } else {
        }
        return null;
    }
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    public void sendPOIGpxNonePOIs() {
        this.myloc = new Position(45.56, 5.9);
        this.left = myloc.getY() - 0.025;
        this.right = myloc.getY() + 0.025;
        this.top = myloc.getX() + 0.03;
        this.bottom = myloc.getX() - 0.03;
        assertEquals(""left test"", left, (5.9 - 0.025));
        assertEquals(""right test"", right, (5.9 + 0.025));
        assertEquals(""top test"", top, (45.56 - 0.025));
        assertEquals(""bottom test"", left, (45.56 + 0.025));
        this.poisCheck.add(""None"");
        try {
            if (this.poisCheck.get(0).compareTo(""None"") == 0) {
                model.setPointsOfInterest(new Items());
            } else {
                this.url = new URL(""http://www.informationfreeway.org/api/0.6/node["" + poisCheck.get(0) + ""=*][bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");
                assertEquals(""url informationfreeway.org test"", url, ""http://www.informationfreeway.org/api/0.6/node[amenity=*]"" + ""[bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");
                SAXParser pars = null;
                ParsePoiGpx gpxHandler = new ParsePoiGpx(poisCheck, this.model.getContext());
                pars = SAXParserFactory.newInstance().newSAXParser();
                pars.getXMLReader().setFeature(""http://xml.org/sax/features/namespaces"", true);
                pars.parse(url.openStream(), gpxHandler);
                this.pois = gpxHandler.getPOIResultsItems();
                assertFalse(""there is some pois"", !this.pois.equals(0));
                assertTrue(""there is some pois"", this.pois.equals(0));
            }
        } catch (Exception e) {
            e.printStackTrace();
            assertFalse(!e.getCause().equals(null));
        }
    }
",0.0
"    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
","    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
",0.0
"    @Test(dataProvider = Arquillian.ARQUILLIAN_DATA_PROVIDER)
    public void shouldGreetUser(@ArquillianResource URL baseURL) throws IOException {
        final String name = ""Earthlings"";
        final URL url = new URL(baseURL, ""Foo.action"");
        StringBuilder builder = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line);
        }
        reader.close();
        LOGGER.info(""Returned response: "" + builder.toString());
        Assert.assertEquals(builder.toString(), FooService.GREETING + name);
    }
","    protected void EncodeRoute() throws EncodeFailedException, IOException {
        File storefile = getNode().getCodec().PackStore(null, ReturnStore);
        DownRoute.EncodeData(storefile);
        File data = getNode().getCodec().PackRemoteDownload(this);
        data = PigData.EncodeData(data);
        FileOutputStream fos = new FileOutputStream(PiggybackRouteFile, true);
        FileChannel foc = fos.getChannel();
        FileInputStream fis = new FileInputStream(data);
        FileChannel fic = fis.getChannel();
        fic.transferTo(0, fic.size(), foc);
        foc.close();
        fic.close();
        UpRoute.EncodeData(PiggybackRouteFile);
    }
",0.0
"    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
","    public boolean setFavBoard(List<BoardObject> list) throws NetworkException, ContentException {
        HttpClient client = HttpConfig.newInstance();
        HttpPost post = new HttpPost(HttpConfig.bbsURL() + HttpConfig.BBS_FAV_SETTING);
        List<NameValuePair> nvps = new ArrayList<NameValuePair>();
        for (BoardObject board : list) nvps.add(new BasicNameValuePair(board.getId(), ""on""));
        try {
            post.setEntity(new UrlEncodedFormEntity(nvps, BBSBodyParseHelper.BBS_CHARSET));
            HttpResponse response = client.execute(post);
            HttpEntity entity = response.getEntity();
            if (HTTPUtil.isHttp200(response) && HTTPUtil.isXmlContentType(response)) {
                HTTPUtil.consume(response.getEntity());
                return true;
            } else {
                String msg = BBSBodyParseHelper.parseFailMsg(entity);
                throw new ContentException(msg);
            }
        } catch (ClientProtocolException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        } catch (IOException e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    private static Pattern getBotPattern() {
        StringBuilder sb = new StringBuilder();
        try {
            Enumeration<URL> urls = AbstractPustefixRequestHandler.class.getClassLoader().getResources(CONFIG);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                InputStream in = url.openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(in, ""utf8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    line = line.trim();
                    if (!line.startsWith(""#"") && !line.equals("""")) {
                        if (sb.length() > 0) sb.append(""|"");
                        sb.append(""("").append(line).append("")"");
                    }
                }
                in.close();
            }
        } catch (IOException e) {
            throw new RuntimeException(""Error reading bot user-agent configuration"", e);
        }
        return Pattern.compile(sb.toString());
    }
",0.0
"    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println(""Connecting to "" + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
","    public static void main(String[] args) {
        String in = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries.shp"";
        String out = ""/Users/laemmel/svn/shared-svn/projects/120multiDestPeds/floor_plan/boundaries_closed.shp"";
        ShapeFileReader reader = new ShapeFileReader();
        reader.readFileAndInitialize(in);
        QuadTree<Coordinate> quad = new QuadTree<Coordinate>(reader.getBounds().getMinX(), reader.getBounds().getMinY(), reader.getBounds().getMaxX(), reader.getBounds().getMaxY());
        for (Feature ft : reader.getFeatureSet()) {
            MultiLineString ml = (MultiLineString) ft.getDefaultGeometry();
            for (int i = 0; i < ml.getNumGeometries(); i++) {
                LineString ls = (LineString) ml.getGeometryN(i);
                Point start = ls.getStartPoint();
                checkIt(start, quad);
                Point end = ls.getEndPoint();
                checkIt(end, quad);
            }
        }
        ShapeFileWriter.writeGeometries(reader.getFeatureSet(), out);
    }
",0.0
"    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
","    private void prepareDigestFromTextArea() throws NoSuchAlgorithmException, UnsupportedEncodingException {
        log.println(""\nCalculating digest ...\n"");
        java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
        md5.update(dataArea.getText().getBytes(""UTF8""));
        byte[] digest = md5.digest();
        log.println(""digest:\n"" + formatAsHexString(digest));
        log.println(""Done."");
        setEncodedDigest(encodeFromBytes(digest));
    }
",0.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    public static void main(String argv[]) {
        String cp = System.getProperty(""java.class.path"");
        String sep = System.getProperty(""file.separator"");
        String dirpath = cp.substring(0, cp.lastIndexOf(sep));
        String jarpath = dirpath + ""/WiiRemoteJ.jar"";
        if (!new File(jarpath).exists()) {
            try {
                System.out.println(""getting WiiRemoteJ file from remote source..."");
                URL wiiRemLoc = new URL(""http://www.world-of-cha0s.hostrocket.com/WiiRemoteJ/WiiRemoteJ%20v1.5.zip.gz"");
                GZIPInputStream input = new GZIPInputStream(wiiRemLoc.openStream());
                String temploc = copyInputStreamToTmpFile(input, "".zip"");
                ZipInputStream zipIn = new ZipInputStream(new FileInputStream(temploc));
                ZipEntry i = null;
                while ((i = zipIn.getNextEntry()) != null) {
                    if (i.getName().endsWith(""WiiRemoteJ.jar"")) {
                        File outjar = new File(jarpath);
                        BufferedOutputStream fs = new BufferedOutputStream(new FileOutputStream(outjar));
                        int bufferSize = 8192;
                        byte[] buffer = new byte[bufferSize];
                        int readSize = 0;
                        while ((readSize = zipIn.read(buffer, 0, bufferSize)) != -1) {
                            fs.write(buffer, 0, readSize);
                        }
                        fs.close();
                    }
                }
                System.out.println(""unpacked into classpath."");
            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        Boogiepants.main(argv);
    }
",0.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public String getRandomGUID() {
        MessageDigest md5 = null;
        String valueBeforeMD5 = """";
        String retValue = """";
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            InetAddress id = InetAddress.getLocalHost();
            long time = System.currentTimeMillis();
            long rand = 0;
            rand = random.nextLong();
            sbValueBeforeMD5.append(id.toString());
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            retValue = sb.toString();
        } catch (UnknownHostException e) {
            System.out.println(""Error:"" + e);
        }
        return retValue;
    }
",0.0
"    private String readFile(String urlFileString) throws IOException {
        URL url = new URL(urlFileString);
        VizDebugUtils.debug(""url: "" + url.toString());
        InputStream stream = url.openStream();
        Reader reader = new InputStreamReader(stream, ""iso-8859-1"");
        StringWriter writer = new StringWriter();
        StreamUtils.transfer(reader, writer);
        stream.close();
        return writer.toString();
    }
","    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
",0.0
"    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
","    public void testDecodeJTLM_publish911() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema(""/JTLM/schemas/TLMComposite.xsd"", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS);
        String[] exiFiles = { ""/JTLM/publish911/publish911.bitPacked"", ""/JTLM/publish911/publish911.byteAligned"", ""/JTLM/publish911/publish911.preCompress"", ""/JTLM/publish911/publish911.compress"" };
        for (int i = 0; i < Alignments.length; i++) {
            AlignmentType alignment = Alignments[i];
            EXIDecoder decoder = new EXIDecoder();
            Scanner scanner;
            decoder.setAlignmentType(alignment);
            URL url = resolveSystemIdAsURL(exiFiles[i]);
            int n_events, n_texts;
            decoder.setEXISchema(grammarCache);
            decoder.setInputStream(url.openStream());
            scanner = decoder.processHeader();
            ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>();
            EXIEvent exiEvent;
            n_events = 0;
            n_texts = 0;
            while ((exiEvent = scanner.nextEvent()) != null) {
                ++n_events;
                if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) {
                    String stringValue = exiEvent.getCharacters().makeString();
                    if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) {
                        --n_events;
                        continue;
                    }
                    if (n_texts % 100 == 0) {
                        final int n = n_texts / 100;
                        Assert.assertEquals(publish911_centennials[n], stringValue);
                    }
                    ++n_texts;
                }
                exiEventList.add(exiEvent);
            }
            Assert.assertEquals(96576, n_events);
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    public static void copy(String inputFile, String outputFile) throws EDITSException {
        try {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
            throw new EDITSException(""Could not copy "" + inputFile + "" into "" + outputFile + "" because:\n"" + e.getMessage());
        }
    }
",0.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    public void doIt() throws GlobalMapperTileTranslatorException {
        if (StringUtils.isEmpty(dstGuid)) throw new GlobalMapperTileTranslatorException(""GUID of destination map is empty"");
        if (srcDir == null || !srcDir.isDirectory() || !srcDir.exists()) throw new GlobalMapperTileTranslatorException(""Source directory is invalid"");
        try {
            int z;
            final XFile dstDir = new XFile(dstParentDir, dstGuid);
            dstDir.mkdir();
            int n = 1;
            if (srcDir.isDirectory() && srcDir.exists()) {
                for (int i = 0; i < 18; i++) {
                    XFile zDir = new XFile(srcDir, ""z"" + i);
                    if (!zDir.isDirectory() || !zDir.exists()) zDir = new XFile(srcDir, ""Z"" + i);
                    if (zDir.isDirectory() && zDir.exists()) {
                        for (String fileName : zDir.list()) {
                            XFile file = new XFile(zDir, fileName);
                            if (file.isFile() && file.exists() && file.canRead()) {
                                final String[] yx;
                                if (fileName.indexOf('.') > 0) {
                                    String[] fileExt = fileName.split(""\\."");
                                    yx = fileExt[0].split(""_"");
                                } else yx = fileName.split(""_"");
                                if (yx.length > 1) {
                                    final int x = Integer.valueOf(yx[1]);
                                    final int y = Integer.valueOf(yx[0]);
                                    z = 17 - i;
                                    XFileOutputStream out = null;
                                    XFileInputStream in = null;
                                    try {
                                        final XFile outFile = new XFile(dstDir, x + ""_"" + y + ""_"" + z);
                                        if (override || !(isExist(outFile, file))) {
                                            out = new XFileOutputStream(outFile);
                                            in = new XFileInputStream(file);
                                            IOUtils.copy(in, out);
                                        }
                                        if (n % 999 == 0) {
                                            logger.info(i + "" tiles were copied from 'incoming'"");
                                            synchronized (GlobalMapperTileTranslator.class) {
                                                GlobalMapperTileTranslator.class.wait(300);
                                            }
                                        }
                                        n++;
                                    } finally {
                                        if (out != null) {
                                            out.flush();
                                            out.close();
                                        }
                                        if (in != null) {
                                            in.close();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Throwable e) {
            logger.error(""map tile importing has failed: "", e);
            throw new GlobalMapperTileTranslatorException(e);
        }
    }
",1.0
"    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug(""File does not exist: "" + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    public static String encriptarPassword(String aPassword) throws BusinessException {
        ILogger logger = LogFactory.getLogger(User.class);
        String methodId = ""encriptarPassword"";
        try {
            MessageDigest currentAlgorithm = MessageDigest.getInstance(""MD5"");
            currentAlgorithm.reset();
            currentAlgorithm.update(aPassword.getBytes());
            byte[] hash = currentAlgorithm.digest();
            String d = """";
            for (int i = 0; i < hash.length; i++) {
                int v = hash[i] & 0xFF;
                if (v < 16) d += ""0"";
                d += Integer.toString(v, 16).toUpperCase();
            }
            return d.toLowerCase();
        } catch (NoSuchAlgorithmException nsae) {
            logger.logError(methodId + ""error al encriptar password:"" + nsae, nsae);
            throw new BusinessException(""Error al encriptar password"");
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    public static void saveProperties(Properties props, String comment, URL url) throws IOException {
        if (props == null) throw new IllegalArgumentException();
        if (url == null) throw new IllegalArgumentException();
        OutputStream out = url.openConnection().getOutputStream();
        props.store(out, comment);
        out.close();
    }
","    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println(""Usage: <target URI> <no of requests>"");
            System.exit(-1);
        }
        URI targetURI = new URI(args[0]);
        int n = Integer.parseInt(args[1]);
        URL url = targetURI.toURL();
        byte[] buffer = new byte[4096];
        long startTime;
        long finishTime;
        int successCount = 0;
        int failureCount = 0;
        String serverName = ""unknown"";
        long total = 0;
        long contentLen = 0;
        long totalContentLen = 0;
        startTime = System.currentTimeMillis();
        for (int i = 0; i < n; i++) {
            HttpURLConnection c = (HttpURLConnection) url.openConnection();
            c.connect();
            InputStream instream = c.getInputStream();
            try {
                contentLen = 0;
                if (instream != null) {
                    int l = 0;
                    while ((l = instream.read(buffer)) != -1) {
                        total += l;
                        contentLen += l;
                    }
                }
                if (c.getResponseCode() == 200) {
                    successCount++;
                } else {
                    failureCount++;
                }
                totalContentLen += contentLen;
            } catch (IOException ex) {
                failureCount++;
            }
            String s = c.getHeaderField(""Server"");
            if (s != null) {
                serverName = s;
            }
        }
        finishTime = System.currentTimeMillis();
        float totalTimeSec = (float) (finishTime - startTime) / 1000;
        float reqsPerSec = (float) successCount / totalTimeSec;
        float timePerReqMs = (float) (finishTime - startTime) / (float) successCount;
        System.out.print(""Server Software:\t"");
        System.out.println(serverName);
        System.out.println();
        System.out.print(""Document URI:\t\t"");
        System.out.println(targetURI);
        System.out.print(""Document Length:\t"");
        System.out.print(contentLen);
        System.out.println("" bytes"");
        System.out.println();
        System.out.print(""Time taken for tests:\t"");
        System.out.print(totalTimeSec);
        System.out.println("" seconds"");
        System.out.print(""Complete requests:\t"");
        System.out.println(successCount);
        System.out.print(""Failed requests:\t"");
        System.out.println(failureCount);
        System.out.print(""Content transferred:\t"");
        System.out.print(total);
        System.out.println("" bytes"");
        System.out.print(""Requests per second:\t"");
        System.out.print(reqsPerSec);
        System.out.println("" [#/sec] (mean)"");
        System.out.print(""Time per request:\t"");
        System.out.print(timePerReqMs);
        System.out.println("" [ms] (mean)"");
    }
",0.0
"    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel ic = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
","    private void parse(URL url, String description, boolean qualifiersOnTarget) throws org.xml.sax.SAXException, java.io.IOException {
        this.qualifiersOnTarget = qualifiersOnTarget;
        model = new Model(description);
        if (roughMode) model.setRoughMode(true);
        DOMParser parser = new DOMParser();
        parser.setFeature(""http://xml.org/sax/features/validation"", false);
        parser.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"", false);
        parser.parse(new InputSource(url.openStream()));
        Document doc = parser.getDocument();
        Element documentEl = doc.getDocumentElement();
        Element contentEl = demandChildElement(documentEl, ""XMI.content"");
        adapter = Adapter.getAdapter(documentEl);
        parsePackage(contentEl);
        if (!packagePath.isEmpty()) throw new IllegalArgumentException();
        packagePath = null;
        for (Iterator i = generalizations.iterator(); i.hasNext(); ) parseGeneralization((Element) i.next());
        generalizations = null;
        for (Iterator i = associations.keySet().iterator(); i.hasNext(); ) {
            Element assoel = (Element) i.next();
            parseAssociation(assoel, (ModelClass) (associations.get(assoel)));
        }
        associations = null;
        for (Iterator i = classElements.keySet().iterator(); i.hasNext(); ) elaborate((ModelClass) (i.next()));
        classElements = null;
        if (roughMode) model.determineAllSupertypes(); else model.flatten();
        url = null;
    }
",0.0
"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    @Override
    public boolean checkLink(String link) {
        boolean result = false;
        URLConnection connection = null;
        URL url = null;
        try {
            url = new URL(link);
            connection = url.openConnection();
            connection.setRequestProperty(""Cookie"", cookie.getCookie(RAPIDSHARE_LOGIN_PAGE));
            connection.connect();
            if (connection.getContentLength() > 0) {
                if (connection.getContentType().equals(""application/octet-stream"")) {
                    result = true;
                }
                Logger.getRootLogger().debug(connection.getContentType());
            }
        } catch (MalformedURLException e) {
            Logger.getRootLogger().error(link + "" cannot be url"", e);
        } catch (IOException e) {
            Logger.getRootLogger().error(""connection failed"", e);
        }
        if (!result) {
            Logger.getRootLogger().warn(link + "" doesn't exist"");
        }
        return result;
    }
",0.0
"    protected static File UrlGzipToFile(File dir, String urlSt, String suffix) throws CaughtException {
        try {
            URL url = new URL(urlSt);
            InputStream zipped = url.openStream();
            InputStream unzipped = new GZIPInputStream(zipped);
            File tempFile = File.createTempFile(""input"", suffix, dir);
            copyFile(tempFile, unzipped);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    public String deleteData(String id, DefaultHttpClient httpclient) {
        try {
            HttpDelete del = new HttpDelete(""http://3dforandroid.appspot.com/api/v1/note/delete/"" + id);
            del.setHeader(""Content-Type"", ""application/json"");
            del.setHeader(""Accept"", ""*/*"");
            HttpResponse response = httpclient.execute(del);
            HttpEntity entity = response.getEntity();
            InputStream instream;
            instream = entity.getContent();
            responseMessage = read(instream);
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseMessage;
    }
",0.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    public void save(boolean saveAs) {
        OutputStream outputStream = null;
        if (!saveAs) {
            try {
                URL url = new URL(null);
                outputStream = url.openConnection().getOutputStream();
            } catch (Exception e) {
                outputStream = null;
            }
        }
        if (outputStream == null) {
            JFileChooser fileChooser = graphEditorFrame.getFileChooser();
            int option = fileChooser.showSaveDialog(splitPane);
            if (option == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                tabPanel.setText(file.getName());
                try {
                    outputStream = new FileOutputStream(file);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(splitPane, e);
                }
            } else {
                return;
            }
        }
        try {
            Element rootElement = nodeSpecTable.toXML();
            XMLHelper.write(rootElement, outputStream, null);
            outputStream.close();
            setModified(false);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(splitPane, e);
        }
    }
",0.0
"    public static String MD5(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""MD5"");
            byte[] md5hash = new byte[32];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
","    @Override
    public void copy(final String fileName) throws FileIOException {
        try {
            if (opened) {
                fileChannel.position(0);
            } else {
                fileChannel = new FileInputStream(file).getChannel();
            }
            FileChannel dstChannel = null;
            try {
                dstChannel = new FileOutputStream(fileName).getChannel();
                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());
            } finally {
                try {
                    if (dstChannel != null) {
                        dstChannel.close();
                    }
                } catch (Exception exception) {
                }
            }
            if (opened) {
                fileChannel.position(currentPositionInFile);
            } else {
                fileChannel.close();
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);
        }
    }
",0.0
"    private void salvarCategoria(Categoria cat) throws Exception {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = C3P0Pool.getConnection();
            String sql = ""insert into categoria VALUES (?,?)"";
            ps = conn.prepareStatement(sql);
            ps.setNull(1, Types.INTEGER);
            ps.setString(2, cat.getNome());
            ps.executeUpdate();
            conn.commit();
        } catch (Exception e) {
            if (conn != null) conn.rollback();
            throw e;
        } finally {
            close(conn, ps);
        }
    }
","    public static void creme_connect(String email, String username, String password, String IDnumber, TRP[] trp_array, GTRN[] gtrn_array, FLUX[] flux_array, TRANS[] trans_array, LETSPEC[] letspec_array, PUP[] pup_array, HUP[] hup_array, DOSE[] dose_array) {
        int num_of_files = trp_array.length + gtrn_array.length + flux_array.length + trans_array.length + letspec_array.length + pup_array.length + hup_array.length + dose_array.length;
        int index = 0;
        String[] files_to_upload = new String[num_of_files];
        for (int a = 0; a < trp_array.length; a++) {
            files_to_upload[index] = trp_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < gtrn_array.length; a++) {
            files_to_upload[index] = gtrn_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < flux_array.length; a++) {
            files_to_upload[index] = flux_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < trans_array.length; a++) {
            files_to_upload[index] = trans_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < letspec_array.length; a++) {
            files_to_upload[index] = letspec_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < pup_array.length; a++) {
            files_to_upload[index] = pup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < hup_array.length; a++) {
            files_to_upload[index] = hup_array[a].getThisFileName();
            index++;
        }
        for (int a = 0; a < dose_array.length; a++) {
            files_to_upload[index] = dose_array[a].getThisFileName();
            index++;
        }
        Logger log = Logger.getLogger(CreateAStudy.class);
        String host = ""creme96.nrl.navy.mil"";
        String user = ""anonymous"";
        String ftppass = email;
        Logger.setLevel(Level.ALL);
        FTPClient ftp = null;
        try {
            ftp = new FTPClient();
            ftp.setRemoteHost(host);
            FTPMessageCollector listener = new FTPMessageCollector();
            ftp.setMessageListener(listener);
            log.info(""Connecting"");
            ftp.connect();
            log.info(""Logging in"");
            ftp.login(user, ftppass);
            log.debug(""Setting up passive, ASCII transfers"");
            ftp.setConnectMode(FTPConnectMode.ACTIVE);
            ftp.setType(FTPTransferType.BINARY);
            log.info(""Putting file"");
            for (int u = 0; u < files_to_upload.length; u++) {
                ftp.put(files_to_upload[u], files_to_upload[u]);
            }
            log.info(""Quitting client"");
            ftp.quit();
            log.debug(""Listener log:"");
            log.info(""Test complete"");
        } catch (Exception e) {
            log.error(""Demo failed"", e);
            e.printStackTrace();
        }
        System.out.println(""Finished FTPing User Request Files to common directory"");
        Upload_Files.upload(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished transfering User Request Files to your CREME96 personal directory"");
        RunRoutines.routines(files_to_upload, username, password, IDnumber);
        System.out.println(""Finished running all of your uploaded routines"");
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.people.findByUsername""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""username"", userName));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGUser user = JAXB.unmarshal(content, GGUser.class);
        return user;
    }
",0.0
"    public static void copy(String a, String b) throws IOException {
        File inputFile = new File(a);
        File outputFile = new File(b);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    public void execute() {
        check();
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(host, port);
        } catch (IOException ex) {
            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");
        }
        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());
        }
        try {
            try {
                if (!ftp.login(userid, password)) {
                    throw new BuildException(""Identification failed"");
                }
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (binary) {
                try {
                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);
                } catch (IOException ex) {
                    throw new BuildException(ex);
                }
                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());
                }
            }
            try {
                ftp.changeWorkingDirectory(remotedir);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());
            }
            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;
            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;
            BufferedOutputStream outstream = null;
            try {
                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));
                ftp.retrieveFile(remoteFullFileName, outstream);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");
            }
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException ex) {
                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");
            }
        }
    }
",0.0
"    public static String[] getHints(String query) {
        try {
            URL url = new URL(""http://www.ebi.ac.uk/integr8/OrganismSearch.do?action=orgNames&orgName="" + query);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String dest = new String();
            while ((inputLine = in.readLine()) != null) dest = dest.concat(inputLine);
            in.close();
            Matcher m = taxonPattern.matcher(dest);
            ArrayList<String> strings = new ArrayList<String>();
            while (m.find()) {
                strings.add(m.group(1));
            }
            return strings.toArray(new String[] {});
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new String[0];
    }
","    protected void loadXslFromUri(URI uri) {
        URLConnection urlc;
        try {
            urlc = uri.toURL().openConnection();
            InputStream is = urlc.getInputStream();
            Reader rd = new InputStreamReader(is);
            Source xslSource = new StreamSource(rd);
            try {
                xslTemplate = factory.newTemplates(xslSource);
            } catch (TransformerConfigurationException tce) {
                tce.printStackTrace();
            }
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
",0.0
"    public PhoneDurationsImpl(URL url) throws IOException {
        BufferedReader reader;
        String line;
        phoneDurations = new HashMap();
        reader = new BufferedReader(new InputStreamReader(url.openStream()));
        line = reader.readLine();
        while (line != null) {
            if (!line.startsWith(""***"")) {
                parseAndAdd(line);
            }
            line = reader.readLine();
        }
        reader.close();
    }
","    private void makeRequest(String data) {
        try {
            URL url = new java.net.URL(curLocation, this.url);
            if (""file"".equals(url.getProtocol())) {
                if (PUT_METHOD.equals(method)) {
                    String text = """";
                    if (data != null) text = data.toString();
                    FileWriter out = new FileWriter(new java.io.File(new java.net.URI(url.toString())));
                    out.write(text, 0, text.length());
                    out.flush();
                    out.close();
                } else if (DELETE_METHOD.equals(method)) {
                    File file = new java.io.File(new java.net.URI(url.toString()));
                    file.delete();
                } else {
                    URLConnection connection = url.openConnection();
                    connection.connect();
                    handleResponse(connection);
                }
            } else {
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod(method);
                for (Iterator iterator = headers.entrySet().iterator(); iterator.hasNext(); ) {
                    Map.Entry entry = (Map.Entry) iterator.next();
                    String property = (String) entry.getKey();
                    String value = (String) entry.getValue();
                    connection.addRequestProperty(property, value);
                }
                connection.connect();
                handleResponse(connection);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest encript = MessageDigest.getInstance(""MD5"");
        encript.update(password.getBytes());
        byte[] b = encript.digest();
        int size = b.length;
        StringBuffer h = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            h.append(b[i]);
        }
        return h.toString();
    }
","    private Map<String, String> readStuff(Iterator<URL> urls) throws IOException {
        Map<String, String> result = new LinkedHashMap();
        while (urls.hasNext()) {
            URL url = urls.next();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String s = reader.readLine();
            while (s != null) {
                s = s.trim();
                if (s.length() > 0) {
                    String[] ss = s.split(""\\s"");
                    for (int i = 1; i < ss.length; i++) {
                        result.put(ss[i], ss[0]);
                    }
                }
                s = reader.readLine();
            }
            reader.close();
        }
        return result;
    }
",0.0
"    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
",0.0
"    @Override
    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            URL url = new File(fileName).toURI().toURL();
            final InputStream input = url.openStream();
            prop.load(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
","    private static void initMimeTypes() {
        InputStream is = null;
        extMimeTypes = new Properties();
        try {
            try {
                is = MimeUtil.class.getClassLoader().getResourceAsStream(""eu/medsea/mimeutil/mime-types.properties"");
                if (is != null) {
                    ((Properties) extMimeTypes).load(is);
                }
            } catch (Exception e) {
                log.error(""Error loading internal mime-types.properties"", e);
            } finally {
                is = closeStream(is);
            }
            try {
                File f = new File(System.getProperty(""user.home"") + File.separator + "".mime-types.properties"");
                if (f.exists()) {
                    is = new FileInputStream(f);
                    if (is != null) {
                        log.debug(""Found a custom .mime-types.properties file in the users home directory."");
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully parsed .mime-types.properties from users home directory."");
                    }
                }
            } catch (Exception e) {
                log.error(""Failed to parse .magic.mime file from users home directory. File will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                Enumeration e = MimeUtil.class.getClassLoader().getResources(""mime-types.properties"");
                while (e.hasMoreElements()) {
                    URL url = (URL) e.nextElement();
                    if (log.isDebugEnabled()) {
                        log.debug(""Found custom mime-types.properties file on the classpath ["" + url + ""]."");
                    }
                    Properties props = new Properties();
                    try {
                        is = url.openStream();
                        if (is != null) {
                            props.load(is);
                            if (props.size() > 0) {
                                extMimeTypes.putAll(props);
                                if (log.isDebugEnabled()) {
                                    log.debug(""Successfully loaded custome mime-type.properties file ["" + url + ""] from classpath."");
                                }
                            }
                        }
                    } catch (Exception ex) {
                        log.error(""Failed while loading custom mime-type.properties file ["" + url + ""] from classpath. File will be ignored."");
                    }
                }
            } catch (Exception e) {
                log.error(""Problem while processing mime-types.properties files(s) from classpath. Files will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                String fname = System.getProperty(""mime-mappings"");
                if (fname != null && fname.length() != 0) {
                    is = new FileInputStream(fname);
                    if (is != null) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Found a custom mime-mappings property defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                        }
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully loaded the mime mappings file from property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                    }
                }
            } catch (Exception ex) {
                log.error(""Failed to load the mime-mappings file defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
            } finally {
                is = closeStream(is);
            }
        } finally {
            Iterator it = extMimeTypes.values().iterator();
            while (it.hasNext()) {
                String[] types = ((String) it.next()).split("","");
                for (int i = 0; i < types.length; i++) {
                    MimeUtil.addKnownMimeType(types[i]);
                }
            }
        }
    }
",0.0
"    public static InputStream gzip(final InputStream inputStream) throws IOException {
        Assert.notNull(inputStream, ""inputStream"");
        InputOutputStream inputOutputStream = new InputOutputStream();
        GZIPOutputStream gzipOutputStream = new GZIPOutputStream(inputOutputStream);
        IOUtils.copy(inputStream, gzipOutputStream);
        gzipOutputStream.close();
        return inputOutputStream.getInputStream();
    }
","    public void removeRecipe(Recipe recipe) throws Exception {
        PreparedStatement pst1 = null;
        PreparedStatement pst2 = null;
        PreparedStatement pst3 = null;
        ResultSet rs = null;
        try {
            int id = -1;
            conn = getConnection();
            pst1 = conn.prepareStatement(""SELECT recipe_id FROM recipes WHERE name = ? AND instructions = ? "");
            pst1.setString(1, recipe.getName());
            pst1.setString(2, recipe.getInstructions());
            rs = pst1.executeQuery();
            if (rs.next()) {
                id = rs.getInt(1);
            }
            pst2 = conn.prepareStatement(""DELETE FROM ingredients WHERE recipe_id = ? "");
            pst3 = conn.prepareStatement(""DELETE FROM recipes WHERE recipe_id = ? "");
            pst2.setInt(1, id);
            pst3.setInt(1, id);
            pst2.executeUpdate();
            if (pst3.executeUpdate() > 0) {
                MainFrame.appendStatusText(""Resepti poistettu kannasta"");
            } else {
                MainFrame.appendStatusText(""Resepti� poistettaessa tietokannasta tapahtui virhe"");
            }
            conn.commit();
            MainFrame.recipePanel.update();
            MainFrame.recipePanel.update();
        } catch (Exception e) {
            conn.rollback();
            MainFrame.appendStatusText(""Can't remove recipe, the exception was "" + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                rs = null;
                if (pst1 != null) pst1.close();
                pst1 = null;
                if (pst2 != null) pst2.close();
                pst2 = null;
                if (pst3 != null) pst3.close();
                pst3 = null;
            } catch (SQLException sqle) {
                MainFrame.appendStatusText(""Can't close database connection."");
            }
        }
    }
",0.0
"    public boolean crear() {
        int result = 0;
        String sql = ""insert into jugadorxdivxronda"" + ""(jugadorxDivision_idJugadorxDivision, ronda_numeroRonda, resultado, idPareoRival, color, flotante, puntajeRonda, idPareo) "" + ""values (?, ?, ?, ?, ?, ?, ?, ?)"";
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            populatePreparedStatement(unjxdxr);
            result = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (result > 0);
    }
","    public static void main(final String... args) {
        int returnCode = 0;
        if (args.length == 0) {
            System.err.println(""Usage: JWGet url..."");
            returnCode++;
        }
        final byte[] buf = new byte[8192];
        for (final String arg : args) {
            try {
                final URL url = new URL(arg);
                OutputStream out = null;
                InputStream in = null;
                try {
                    final URLConnection con = url.openConnection();
                    in = con.getInputStream();
                    final String location = con.getHeaderField(""Content-Location"");
                    final String outputFilename = new File((location != null ? new URL(url, location) : url).getFile()).getName();
                    System.err.println(outputFilename);
                    out = new FileOutputStream(outputFilename);
                    for (int bytesRead; (bytesRead = in.read(buf)) != -1; out.write(buf, 0, bytesRead)) ;
                } catch (final IOException e) {
                    System.err.println(e);
                    returnCode++;
                } finally {
                    try {
                        in.close();
                    } catch (final Exception ignore) {
                    }
                    try {
                        out.close();
                    } catch (final Exception ignore) {
                    }
                }
            } catch (final MalformedURLException e) {
                System.err.println(e);
                returnCode++;
            }
        }
        System.exit(returnCode);
    }
",0.0
"    public static void copyFiles(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
","    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
",0.0
"    public void send(String payload, TransportReceiver receiver) {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost();
        post.setHeader(""Content-Type"", ""application/json;charset=UTF-8"");
        post.setHeader(""Cookie"", cookie);
        post.setURI(uri);
        Throwable ex;
        try {
            post.setEntity(new StringEntity(payload, ""UTF-8""));
            HttpResponse response = client.execute(post);
            if (200 == response.getStatusLine().getStatusCode()) {
                String contents = readStreamAsString(response.getEntity().getContent());
                receiver.onTransportSuccess(contents);
            } else {
                receiver.onTransportFailure(new ServerFailure(response.getStatusLine().getReasonPhrase()));
            }
            return;
        } catch (UnsupportedEncodingException e) {
            ex = e;
        } catch (ClientProtocolException e) {
            ex = e;
        } catch (IOException e) {
            ex = e;
        }
        receiver.onTransportFailure(new ServerFailure(ex.getMessage()));
    }
","    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",1.0
"    public synchronized String encrypt(String password) {
        try {
            MessageDigest md = null;
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(password.getBytes(""UTF-8""));
            byte raw[] = md.digest();
            byte[] hash = (new Base64()).encode(raw);
            return new String(hash);
        } catch (NoSuchAlgorithmException e) {
            logger.error(""Algorithm SHA-1 is not supported"", e.getCause());
            return null;
        } catch (UnsupportedEncodingException e) {
            logger.error(""UTF-8 encoding is not supported"");
            return null;
        }
    }
","    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
",1.0
"    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.out.println(""param 1: "" + args[0] + ""\r\n"");
        System.out.println(""param 2: "" + args[1] + ""\r\n"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setFollowRedirects(true);
            connection.connect();
            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
            FileOutputStream out = new FileOutputStream(args[1]);
            int c = -1;
            while ((c = in.read()) >= 0) {
                out.write(c);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r\n"");
        }
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    public void test(TestHarness harness) {
        harness.checkPoint(""TestOfMD4"");
        try {
            Security.addProvider(new JarsyncProvider());
            algorithm = MessageDigest.getInstance(""MD4"", ""JARSYNC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
            throw new Error(x);
        }
        try {
            for (int i = 0; i < 64; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""52f5076fabd22680234a3fa9f9dc5732"";
            harness.check(exp.equals(Util.toHexString(md)), ""testSixtyFourA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            harness.verbose(""NOTE: This test may take a while."");
            for (int i = 0; i < 536870913; i++) algorithm.update((byte) 'a');
            byte[] md = algorithm.digest();
            String exp = ""47d01fa6657f903280232d30b98da482"";
            harness.check(exp.equals(Util.toHexString(md)), ""test536870913A"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.provider"");
        }
        try {
            byte[] md = algorithm.digest(""a"".getBytes());
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testA"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testA"");
        }
        try {
            byte[] md = algorithm.digest(""abc"".getBytes());
            String exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testABC"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testABC"");
        }
        try {
            byte[] md = algorithm.digest(""message digest"".getBytes());
            String exp = ""d9130a8164549fe818874806e1c7014b"";
            harness.check(exp.equals(Util.toHexString(md)), ""testMessageDigest"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testMessageDigest"");
        }
        try {
            byte[] md = algorithm.digest(""abcdefghijklmnopqrstuvwxyz"".getBytes());
            String exp = ""d79e1c308aa5bbcdeea8ed63df412da9"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAlphabet"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAlphabet"");
        }
        try {
            byte[] md = algorithm.digest(""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"".getBytes());
            String exp = ""043f8582f241db351ce627e153e7f0e4"";
            harness.check(exp.equals(Util.toHexString(md)), ""testAsciiSubset"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testAsciiSubset"");
        }
        try {
            byte[] md = algorithm.digest(""12345678901234567890123456789012345678901234567890123456789012345678901234567890"".getBytes());
            String exp = ""e33b4ddc9c38f2199c3e7b164fcc0536"";
            harness.check(exp.equals(Util.toHexString(md)), ""testEightyNumerics"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testEightyNumerics"");
        }
        try {
            algorithm.update(""a"".getBytes(), 0, 1);
            clone = (MessageDigest) algorithm.clone();
            byte[] md = algorithm.digest();
            String exp = ""bde52cb31de33e46245e05fbdbd6fb24"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #1"");
            clone.update(""bc"".getBytes(), 0, 2);
            md = clone.digest();
            exp = ""a448017aaf21d8525fc10ae87aa6729d"";
            harness.check(exp.equals(Util.toHexString(md)), ""testCloning #2"");
        } catch (Exception x) {
            harness.debug(x);
            harness.fail(""TestOfMD4.testCloning"");
        }
    }
",1.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    @Override
    public void run() {
        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
        final String url = service.streamUrl.toString();
        InputStream stream = null;
        try {
            final URLConnection con = new URL(url).openConnection();
            con.setRequestProperty(""Icy-MetaData"", ""1"");
            con.setRequestProperty(""Connection"", ""close"");
            con.setRequestProperty(""Accept"", null);
            con.connect();
            stream = con.getInputStream();
            int metaDataOffset = -1;
            final Map<String, List<String>> headers = con.getHeaderFields();
            if (headers.containsKey(""icy-metaint"")) {
                metaDataOffset = Integer.parseInt(headers.get(""icy-metaint"").get(0));
            } else {
                final StringBuilder strHeaders = new StringBuilder();
                char c;
                while ((c = (char) stream.read()) != -1) {
                    strHeaders.append(c);
                    final int c5 = 5, c4 = 4;
                    if (strHeaders.length() > c5 && ""\r\n\r\n"".equals(strHeaders.substring((strHeaders.length() - c4), strHeaders.length()))) {
                        break;
                    }
                }
                final Matcher m = PATTERN.matcher(strHeaders.toString());
                if (m.find()) {
                    metaDataOffset = Integer.parseInt(m.group(2));
                }
            }
            if (metaDataOffset == -1) {
                throw new RuntimeException(""no data"");
            }
            final int bufSize = 4096;
            final byte[] buffer = new byte[bufSize];
            final int initialMetaLength = 1024;
            final StringBuilder metaData = new StringBuilder(initialMetaLength);
            int leftToSkip = metaDataOffset;
            while (true) {
                if (Thread.interrupted()) {
                    throw new RuntimeException(""interrtupted"");
                }
                while (leftToSkip > 0) {
                    final long actual = stream.skip(leftToSkip);
                    leftToSkip -= actual;
                }
                int count = 0;
                int metaDataLength = 0;
                metaData.delete(0, metaData.length());
                int lastReadCount;
                while ((lastReadCount = stream.read(buffer)) != -1) {
                    if (Thread.interrupted()) {
                        throw new RuntimeException(""interrtupted"");
                    }
                    if (lastReadCount == 0) {
                        continue;
                    }
                    if (count == 0) {
                        final int paragraph = 16;
                        metaDataLength = buffer[0] * paragraph;
                    }
                    final int startIndex = count == 0 ? 1 : 0;
                    int length = count == 0 ? lastReadCount - 1 : lastReadCount;
                    count += lastReadCount;
                    if (count > metaDataLength) {
                        length -= count - metaDataLength;
                        if (count == lastReadCount) {
                            length++;
                        }
                    }
                    if (length > 0) {
                        metaData.append(new String(buffer, startIndex, length, ""UTF-8""));
                    }
                    if (count > metaDataLength) {
                        break;
                    }
                }
                if (lastReadCount == -1) {
                    break;
                }
                leftToSkip = metaDataOffset - (count - metaDataLength - 1);
                if (metaData.length() > 0) {
                    service.updateAudioInfo(metaData.toString());
                }
            }
        } catch (final IOException e) {
            Log.e(TAG, ""IO error"", e);
        } catch (final RuntimeException e) {
            if (DEBUG) {
                Log.i(TAG, e.getMessage());
            }
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (final IOException e) {
                    Log.e(TAG, ""Cannot close stream"", e);
                }
            }
        }
    }
",0.0
"	public FTPClient sample1c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    protected String readContent(URL url, int width) {
        StringBuffer content = new StringBuffer("""");
        String line = """";
        try {
            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = f.readLine()) != null) content.append(line + ""\n"");
            f.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (width >= 0) {
            String width_old = ""width=\""xxx\"""";
            String width_new = ""width=\"""" + width + ""\"""";
            int v0 = content.indexOf(width_old);
            int v1 = v0 + width_old.length();
            content.replace(v0, v1, width_new);
        }
        return content.toString();
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public static final synchronized String hash(String data) {
        if (digest == null) {
            try {
                digest = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException nsae) {
                System.err.println(""Failed to load the MD5 MessageDigest. "" + ""We will be unable to function normally."");
                nsae.printStackTrace();
            }
        }
        digest.update(data.getBytes());
        return encodeHex(digest.digest());
    }
",0.0
"    public static void loadProperties() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.lang.en.properties"");
            localization.load(url.openStream());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            FileInputStream is = new FileInputStream(userDir + ""OpenDarkRoom.properties"");
            preferences.load(is);
        } catch (FileNotFoundException e) {
            log.warn(""Preferences file "" + userDir + ""OpenDarkRoom.properties not found, loading defaults"");
            loadDefaultPreferences();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
",0.0
"    public static String encriptarPassword(String aPassword) throws BusinessException {
        ILogger logger = LogFactory.getLogger(User.class);
        String methodId = ""encriptarPassword"";
        try {
            MessageDigest currentAlgorithm = MessageDigest.getInstance(""MD5"");
            currentAlgorithm.reset();
            currentAlgorithm.update(aPassword.getBytes());
            byte[] hash = currentAlgorithm.digest();
            String d = """";
            for (int i = 0; i < hash.length; i++) {
                int v = hash[i] & 0xFF;
                if (v < 16) d += ""0"";
                d += Integer.toString(v, 16).toUpperCase();
            }
            return d.toLowerCase();
        } catch (NoSuchAlgorithmException nsae) {
            logger.logError(methodId + ""error al encriptar password:"" + nsae, nsae);
            throw new BusinessException(""Error al encriptar password"");
        }
    }
","    public boolean getFile(String local, String remote) throws IOException {
        boolean result = false;
        GridFTP ftp = new GridFTP();
        ftp.setDefaultPort(port);
        System.out.println(this + "".getFile "" + remote);
        try {
            ftp.connect(host);
            ftp.login(username, password);
            int reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                System.err.println(""FTP server refused connection."");
                return false;
            }
            ftp.get(local, remote);
            ftp.logout();
            result = true;
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.disconnect();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        System.out.println(this + "".getFile return "" + result);
        return result;
    }
",0.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public static boolean buildPerMovieDiffBinary(String masterFile) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            System.out.println(inC.size());
            short movie1, movie2;
            int count;
            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;
            long position;
            for (long i = 1; i < 17770; i++) {
                File outFile = new File(""C:\\NetflixData\\download\\SmartGrape\\CFItemToItemStats\\Movie--"" + i + ""-MatrixData.txt"");
                FileChannel outC = new FileOutputStream(outFile, true).getChannel();
                ByteBuffer buf = ByteBuffer.allocate(17770 * 44);
                for (long j = 1; j < i; j++) {
                    ByteBuffer bbuf = ByteBuffer.allocate(44);
                    position = 0;
                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();
                    position += new Long((i - j - 1) * 44).longValue();
                    inC.position(position);
                    inC.read(bbuf);
                    bbuf.flip();
                    buf.putShort(bbuf.getShort());
                    bbuf.getShort();
                    buf.putInt(bbuf.getInt());
                    buf.putFloat(-bbuf.getInt());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                }
                buf.putShort(new Long(i).shortValue());
                buf.putInt(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                position = 0;
                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();
                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);
                while (remainingBuf.hasRemaining()) {
                    remainingBuf.getShort();
                    buf.putShort(remainingBuf.getShort());
                    buf.putInt(remainingBuf.getInt());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                }
                buf.flip();
                outC.write(buf);
                buf.clear();
                outC.close();
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",0.0
"    public void testPostWithGzip() throws Exception {
        HttpPost request = new HttpPost(baseUri + ""/echo"");
        request.setEntity(new GZIPCompressedEntity(new StringEntity(""test"")));
        HttpResponse response = client.execute(request);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(""test"", TestUtil.getResponseAsString(response));
    }
","    public FileDownloader(Context context, String downloadUrl, File fileSaveDir, int threadNum) {
        try {
            this.context = context;
            this.downloadUrl = downloadUrl;
            this.fileService = new FileService(context);
            this.url = new URL(downloadUrl);
            this.threads = new DownloadThread[threadNum];
            this.fileSaveDir = fileSaveDir;
            if (!fileSaveDir.exists()) {
                fileSaveDir.mkdir();
            }
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setConnectTimeout(6 * 1000);
            conn.setRequestMethod(""GET"");
            conn.setRequestProperty(""Accept"", ""image/gif, image/jpeg, image/pjpeg, image/pjpeg, application/x-shockwave-flash, application/xaml+xml, application/vnd.ms-xpsdocument, application/x-ms-xbap, application/x-ms-application, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*"");
            conn.setRequestProperty(""Accept-Language"", ""zh-CN"");
            conn.setRequestProperty(""Referer"", downloadUrl);
            conn.setRequestProperty(""Charset"", ""UTF-8"");
            conn.setRequestProperty(""User-Agent"", ""Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.2; Trident/4.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729)"");
            conn.setRequestProperty(""Connection"", ""Keep-Alive"");
            conn.connect();
            printResponseHeader(conn);
            if (conn.getResponseCode() == 200) {
                this.fileSize = conn.getContentLength();
                if (this.fileSize <= 0) throw new RuntimeException(""�޷���֪�ļ���С"");
                String fileName = getFileName(conn);
                this.saveFile = new File(fileSaveDir, fileName);
                Map<Integer, Integer> logdata = fileService.getData(downloadUrl);
                if (logdata.size() > 0) {
                    data.putAll(logdata);
                }
                this.block = this.fileSize / this.threads.length + 1;
                if (this.data.size() == this.threads.length) {
                    for (int i = 0; i < this.threads.length; i++) {
                        this.downloadSize += this.data.get(i + 1) - (this.block * i);
                    }
                    print(""�Ѿ����صĳ��ȣ�"" + this.downloadSize);
                }
            } else {
                print(""��������Ӧ����"");
                throw new RuntimeException(""��������Ӧ����"");
            }
        } catch (Exception e) {
            print(""���Ӳ�������·��"" + e.toString());
            throw new RuntimeException(""���Ӳ�������·��"");
        }
    }
",0.0
"    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
","    public RobotList<Enemy> sort_incr_Enemy(RobotList<Enemy> list, String field) {
        int length = list.size();
        Index_value[] enemy_dist = new Index_value[length];
        if (field.equals("""") || field.equals(""location"")) {
            Location cur_loc = this.getLocation();
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, distance(cur_loc, list.get(i).location));
            }
        } else if (field.equals(""health"")) {
            for (int i = 0; i < length; i++) {
                enemy_dist[i] = new Index_value(i, list.get(i).health);
            }
        } else {
            say(""impossible to sort list - nothing modified"");
            return list;
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (enemy_dist[i].value > enemy_dist[i + 1].value) {
                    Index_value a = enemy_dist[i];
                    enemy_dist[i] = enemy_dist[i + 1];
                    enemy_dist[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Enemy> new_enemy_list = new RobotList<Enemy>(Enemy.class);
        for (int i = 0; i < length; i++) {
            new_enemy_list.addLast(list.get(enemy_dist[i].index));
        }
        return new_enemy_list;
    }
",1.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance(""SHA-1"");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error(""NoSuchAlgorithmException while digesting"", e);
        }
        return digest;
    }
",0.0
"    void queryFile(String rendezvousProgram, String rendezvousMD5) {
        try {
            XMLConfigParser.readUrlHost();
            String url = XMLConfigParser.urlHost;
            String query;
            String param1 = ""op=query"";
            String param2 = ""program="" + rendezvousProgram;
            String param3 = ""md5="" + rendezvousMD5;
            query = String.format(""%s&%s&%s"", param1, param2, param3);
            openConnection(query, url);
            String line = br.readLine();
            NetworkLog.logMsg(NetworkLog.LOG_DEBUG, this, ""(Query) Response of the server: "" + line);
            br.close();
        } catch (MalformedURLException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, ""Error"" + e);
        } catch (IOException e) {
            NetworkLog.logMsg(NetworkLog.LOG_ERROR, this, e.getMessage());
        }
    }
","    @SuppressWarnings(""unused"")
    private boolean copyAvecProgressNIO(File sRC2, File dEST2, JProgressBar progressEnCours) {
        boolean resultat = false;
        long PourcentEnCours = 0;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(sRC2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(dEST2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la creation du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        progressEnCours.setValue(0);
        progressEnCours.setString(sRC2 + "" : 0 %"");
        try {
            long tailleCopie = channelSrc.transferTo(0, channelSrc.size(), channelDest);
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" vers la destination "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        progressEnCours.setValue(100);
        progressEnCours.setString(sRC2 + "" : 100 %"");
        try {
            if (channelSrc.size() == channelDest.size()) {
                resultat = true;
            } else {
                resultat = false;
            }
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fis.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fos.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        return (resultat);
    }
",0.0
"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        try {
            client.connect(""ftp.domain.com"");
            client.login(""admin"", ""secret"");
            String filename = ""/testing/data.txt"";
            boolean deleted = client.deleteFile(filename);
            if (deleted) {
                System.out.println(""File deleted..."");
            }
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    static HashSet<ScriptEngineFactory> lookup(ClassLoader loader, String name) {
        HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();
        try {
            Enumeration<URL> urls = loader.getResources(name);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    if ((line = trim(line)) != null) {
                        try {
                            Class<ScriptEngineFactory> clazz = (Class<ScriptEngineFactory>) Class.forName(line, true, loader);
                            ScriptEngineFactory factory = clazz.newInstance();
                            factories.add(factory);
                        } catch (java.lang.UnsupportedClassVersionError error) {
                            if (DEBUG) {
                                System.err.println(line + "": version mismatch - ignore"");
                            }
                        }
                    }
                }
            }
        } catch (IOException ex) {
            throw new ScriptException(ex);
        } finally {
            return factories;
        }
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
",0.0
"    private void download(File archive, File timestamp, URL url, IProgressMonitor monitor) throws IOException {
        monitor.subTask(""download "" + url.toString());
        InputStream in = null;
        FileOutputStream out = null;
        URLConnection conn = null;
        try {
            conn = url.openConnection();
            Writer writer = null;
            try {
                Date date = new Date(conn.getLastModified());
                writer = new FileWriter(timestamp);
                writer.write(this.FORMAT.format(date));
            } catch (IOException e) {
                timestamp.delete();
            } finally {
                IOUtils.closeQuietly(writer);
            }
            in = conn.getInputStream();
            out = new FileOutputStream(archive);
            IOUtils.copy(in, out);
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    private InputStream getConnection(final String url) {
        InputStream is = null;
        try {
            final URLConnection conn = new URL(url).openConnection();
            is = conn.getInputStream();
        } catch (final MalformedURLException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }
        return is;
    }
","    public static long[] getUidsNearMe(String myUid, double lat, double lon) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(UIDS_NEARME_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""latitude"", Double.toString(lat)));
        parameters.add(new BasicNameValuePair(""longitude"", Double.toString(lon)));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            long[] friends = new long[result.length()];
            int uid = Integer.parseInt(myUid);
            for (int i = 0; i < result.length(); i++) {
                if (uid != result.getInt(i)) {
                    friends[i] = result.getInt(i);
                }
            }
            return friends;
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
",0.0
"    public static long getFileTimeStamp(String fileClassPath, String mockWebUrl) throws Exception {
        if (fileClassPath == null) return 0;
        if (fileClassPath.startsWith(""/"")) {
            fileClassPath = fileClassPath.substring(1, fileClassPath.length());
        } else if (mockWebUrl != null && fileClassPath.startsWith(mockWebUrl)) {
            fileClassPath = fileClassPath.substring(mockWebUrl.length());
        }
        URL url = Thread.currentThread().getContextClassLoader().getResource(fileClassPath);
        URLConnection urlCnx = null;
        try {
            if (url == null) {
                return 0;
            }
            urlCnx = url.openConnection();
            return urlCnx.getLastModified();
        } finally {
            if (urlCnx != null && urlCnx.getInputStream() != null) urlCnx.getInputStream().close();
        }
    }
","    @Override
    public boolean copy(Document document, Folder folder) throws Exception {
        boolean isCopied = false;
        if (document.getId() != null && folder.getId() != null) {
            Document copiedDoc = new DocumentModel();
            copiedDoc.setValues(document.getValues());
            copiedDoc.setFolder(folder);
            copiedDoc.setId(null);
            em.persist(copiedDoc);
            resourceAuthorityService.applyAuthority(copiedDoc);
            List<Preference> preferences = prefService.findAll();
            Preference preference = new PreferenceModel();
            if (preferences != null && !preferences.isEmpty()) {
                preference = preferences.get(0);
            }
            String repo = preference.getRepository();
            SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATEFORMAT_YYYYMMDD);
            Calendar calendar = Calendar.getInstance();
            StringBuffer sbRepo = new StringBuffer(repo);
            sbRepo.append(File.separator);
            StringBuffer sbFolder = new StringBuffer(sdf.format(calendar.getTime()));
            sbFolder.append(File.separator).append(calendar.get(Calendar.HOUR_OF_DAY));
            File fFolder = new File(sbRepo.append(sbFolder).toString());
            if (!fFolder.exists()) {
                fFolder.mkdirs();
            }
            copiedDoc.setLocation(sbFolder.toString());
            em.merge(copiedDoc);
            File in = new File(repo + File.separator + document.getLocation() + File.separator + document.getId() + ""."" + document.getExt());
            File out = new File(fFolder.getAbsolutePath() + File.separator + copiedDoc.getId() + ""."" + copiedDoc.getExt());
            FileChannel inChannel = new FileInputStream(in).getChannel();
            FileChannel outChannel = new FileOutputStream(out).getChannel();
            try {
                inChannel.transferTo(0, inChannel.size(), outChannel);
            } catch (IOException e) {
                throw e;
            } finally {
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
            }
        }
        return isCopied;
    }
",0.0
"    public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException {
        File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator)));
        targetDirectory.mkdirs();
        File file = new File(sourceFileName);
        FileInputStream fis = new FileInputStream(file);
        FileChannel fc = fis.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        String inString = cb.toString();
        fis.close();
        fc.close();
        Set<String> keys = values.keySet();
        for (Object k : keys) {
            inString = inString.replace((String) k, escape(values.get(k)));
        }
        FileOutputStream fos = new FileOutputStream(targetFileName);
        PrintStream ps = new PrintStream(fos);
        ps.print(inString);
        fos.close();
    }
","    @Override
    public void copy(final String fileName) throws FileIOException {
        try {
            if (opened) {
                fileChannel.position(0);
            } else {
                fileChannel = new FileInputStream(file).getChannel();
            }
            FileChannel dstChannel = null;
            try {
                dstChannel = new FileOutputStream(fileName).getChannel();
                dstChannel.transferFrom(fileChannel, 0, fileChannel.size());
            } finally {
                try {
                    if (dstChannel != null) {
                        dstChannel.close();
                    }
                } catch (Exception exception) {
                }
            }
            if (opened) {
                fileChannel.position(currentPositionInFile);
            } else {
                fileChannel.close();
            }
        } catch (IOException exception) {
            throw HELPER_FILE_UTIL.fileIOException(""failed copy "" + file + "" to "" + fileName, null, exception);
        }
    }
",1.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    public void unsplit(String newFilename, File[] files) throws Exception {
        FileOutputStream stream = new FileOutputStream(new File(newFilename));
        for (int i = 0; i < files.length; i++) {
            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());
            DataInputStream din = new DataInputStream(fin);
            while (din.available() > 0) {
                stream.write(din.read());
            }
            din.close();
            fin.close();
        }
        stream.close();
    }
",0.0
"    private void download(String groupId, String artifactId, String version, String type) throws ClientProtocolException, IOException {
        String finalName = artifactId + ""-"" + version;
        File file = new File(deployables, groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type);
        if (file.exists()) {
            log.warn(""Won't download {} found at {}"", finalName, file.getAbsolutePath());
            return;
        }
        String url = repository + groupId + ""/"" + artifactId + ""/"" + version + ""/"" + finalName + ""."" + type;
        HttpGet get = new HttpGet(url);
        HttpResponse response = httpclient.execute(get);
        if (response.getStatusLine().getStatusCode() == 200) writeContent(get, response.getEntity(), file); else throw new RuntimeException(""Failed to download "" + url + "" due to error "" + response.getStatusLine());
    }
","    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File part : parts) {
                setState(part.getName(), BUILDING);
                FileChannel in = new FileInputStream(part).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    private URLConnection openConnection(URL url) throws MalformedURLException, IOException {
        URLConnection connection = url.openConnection();
        if (connection instanceof HttpURLConnection) ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
        connection.setUseCaches(false);
        return connection;
    }
",0.0
"    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public String encryptToSHA(String info) {
        byte[] digesta = null;
        try {
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String rs = byte2hex(digesta);
        return rs;
    }
","    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
",1.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    public ContentPackage resolveItem() {
        URL url;
        try {
            url = new URL(itembankURL + ""/"" + deposit.get(""http://www.caret.cam.ac.uk/minibix/metadata/ticket""));
            return new ContentPackage(url.openStream());
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    public static int getContentLength(String address) {
        URLConnection conn = null;
        int contentLength = 0;
        try {
            URL url = new URL(address);
            conn = url.openConnection();
            contentLength = conn.getContentLength();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return contentLength;
    }
","    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.close(fis);
            }
        }
    }
",0.0
"    public void load() throws ResourceInstantiationException, InvalidFormatException {
        if (null == url) {
            throw new ResourceInstantiationException(""URL not set (null)."");
        }
        try {
            BufferedReader mapReader = new BomStrippingInputStreamReader((url).openStream(), ENCODING);
            String line;
            MappingNode node;
            while (null != (line = mapReader.readLine())) {
                if (0 != line.trim().length()) {
                    node = new MappingNode(line);
                    this.add(node);
                }
            }
            mapReader.close();
        } catch (InvalidFormatException ife) {
            throw new InvalidFormatException(url, ""on load"");
        } catch (IOException ioe) {
            throw new ResourceInstantiationException(ioe);
        }
    }
","    protected byte[] getTSAResponse(byte[] requestBytes) throws SinaduraCoreException {
        byte[] respBytes = null;
        try {
            URL url = new URL(this.tsaURL);
            URLConnection tsaConnection = null;
            if (this.proxy == null) tsaConnection = url.openConnection(); else tsaConnection = url.openConnection(this.proxy);
            tsaConnection.setDoInput(true);
            tsaConnection.setDoOutput(true);
            tsaConnection.setUseCaches(false);
            tsaConnection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");
            tsaConnection.setRequestProperty(""Content-Transfer-Encoding"", ""binary"");
            if ((this.tsaUsername != null) && !this.tsaUsername.equals("""")) {
                String userPassword = this.tsaUsername + "":"" + this.tsaPassword;
                tsaConnection.setRequestProperty(""Authorization"", ""Basic "" + new String(new sun.misc.BASE64Encoder().encode(userPassword.getBytes())));
            }
            OutputStream out = tsaConnection.getOutputStream();
            out.write(requestBytes);
            out.close();
            InputStream inp = tsaConnection.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {
                baos.write(buffer, 0, bytesRead);
            }
            respBytes = baos.toByteArray();
            String encoding = tsaConnection.getContentEncoding();
            if (encoding != null && encoding.equalsIgnoreCase(""base64"")) {
                sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
                respBytes = dec.decodeBuffer(new String(respBytes));
            }
        } catch (MalformedURLException e) {
            throw new SinaduraCoreException(""URL malformed "" + e.getMessage(), e);
        } catch (IOException e) {
            throw new SinaduraCoreException(""Connection Error "" + e.getMessage(), e);
        }
        return respBytes;
    }
",1.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    private Response httpRequest(String url, String charset) throws BggException {
        int retry = retryCount + 1;
        Response res = null;
        lastURL = url;
        for (retriedCount = 0; retriedCount < retry; retriedCount++) {
            int responseCode = -1;
            try {
                HttpURLConnection con = null;
                InputStream is = null;
                OutputStream osw = null;
                try {
                    con = (HttpURLConnection) new URL(url).openConnection();
                    con.setDoInput(true);
                    setHeaders(con);
                    con.setRequestMethod(""GET"");
                    responseCode = con.getResponseCode();
                    is = con.getInputStream();
                    if (charset != null) {
                        res = new Response(con.getResponseCode(), is, charset);
                    } else {
                        res = new Response(con.getResponseCode(), is);
                    }
                    break;
                } finally {
                    try {
                        is.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        osw.close();
                    } catch (Exception ignore) {
                    }
                    try {
                        con.disconnect();
                    } catch (Exception ignore) {
                    }
                }
            } catch (IOException ioe) {
                if (responseCode == UNAUTHORIZED || responseCode == FORBIDDEN) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
                if (retriedCount == retryCount) {
                    throw new BggException(ioe.getMessage(), responseCode);
                }
            }
            try {
                Thread.sleep(retryIntervalMillis);
            } catch (InterruptedException ignore) {
            }
        }
        return res;
    }
",0.0
"    private static void login(HttpClient client, String token) throws Exception {
        HttpPost login = new HttpPost(""https://libsys.arlingtonva.us/iii/cas/login?service=http&amp;scope=1"");
        List<NameValuePair> formParams = new ArrayList<NameValuePair>();
        formParams.add(new BasicNameValuePair(""code"", ""202002686286""));
        formParams.add(new BasicNameValuePair(""pin"", ""3128""));
        formParams.add(new BasicNameValuePair(""_eventId"", ""submit""));
        formParams.add(new BasicNameValuePair(""lt"", token));
        UrlEncodedFormEntity form = new UrlEncodedFormEntity(formParams, ""UTF-8"");
        login.setEntity(form);
        HttpResponse response = client.execute(login);
        EntityUtils.consume(response.getEntity());
        Header[] headers = response.getAllHeaders();
        System.out.println(""HEADERS: "");
        for (Header hdr : headers) {
            System.out.println(hdr.getName() + "": "" + hdr.getValue());
        }
    }
","    @SuppressWarnings(""unused"")
    private boolean copyAvecProgressNIO(File sRC2, File dEST2, JProgressBar progressEnCours) {
        boolean resultat = false;
        long PourcentEnCours = 0;
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(sRC2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        FileOutputStream fos = null;
        try {
            fos = new FileOutputStream(dEST2);
        } catch (FileNotFoundException e) {
            try {
                Historique.ecrire(""Erreur � la creation du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        java.nio.channels.FileChannel channelSrc = fis.getChannel();
        java.nio.channels.FileChannel channelDest = fos.getChannel();
        progressEnCours.setValue(0);
        progressEnCours.setString(sRC2 + "" : 0 %"");
        try {
            long tailleCopie = channelSrc.transferTo(0, channelSrc.size(), channelDest);
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" vers la destination "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        progressEnCours.setValue(100);
        progressEnCours.setString(sRC2 + "" : 100 %"");
        try {
            if (channelSrc.size() == channelDest.size()) {
                resultat = true;
            } else {
                resultat = false;
            }
        } catch (IOException e) {
            try {
                Historique.ecrire(""Erreur � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fis.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + sRC2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        try {
            fos.close();
        } catch (IOException e) {
            try {
                Historique.ecrire(""Impossible de fermer le flux � la copie du fichier "" + dEST2 + "" pour la raison suivante : "" + e);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return true;
        }
        return (resultat);
    }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    public void run() {
        if (name == null) {
            System.err.println(""Must set file name for retrieval"");
            return;
        }
        if (handle == null) {
            System.err.println(""Must set CCNHandle"");
            return;
        }
        if (htmlPane == null) {
            System.err.println(""Must set JEditorPane"");
            return;
        }
        JFrame frame = new JFrame();
        JFileChooser chooser = new JFileChooser();
        File f = null;
        chooser.setCurrentDirectory(null);
        int returnVal = chooser.showSaveDialog(frame);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            f = chooser.getSelectedFile();
        } else {
            htmlPane.setText(""Save File cancelled"");
            return;
        }
        boolean overwrite = false;
        try {
            if (f.exists()) {
                htmlPane.setText(""Overwriting contents of "" + f.getPath());
                overwrite = true;
            } else {
                f.createNewFile();
            }
            if (f.canWrite()) {
            } else {
                htmlPane.setText(""The ContentExplorer is unable to write the content to the specified file."");
                return;
            }
        } catch (IOException e) {
            System.err.println(""could not create "" + f.getPath() + "" for saving content to filesystem"");
            htmlPane.setText(""could not create "" + f.getPath() + "" for saving content to filesystem"");
        }
        try {
            if (!overwrite) htmlPane.setText(""saving "" + name + "" to "" + f.getCanonicalPath()); else htmlPane.setText(""overwriting contents of "" + f.getCanonicalPath() + "" to save "" + name);
            CCNFileInputStream fis = new CCNFileInputStream(name, handle);
            FileOutputStream output = new FileOutputStream(f);
            byte[] buffer = new byte[readsize];
            int readcount = 0;
            int readtotal = 0;
            while ((readcount = fis.read(buffer)) != -1) {
                readtotal += readcount;
                output.write(buffer, 0, readcount);
                output.flush();
            }
            htmlPane.setText(""Saved "" + name + "" to "" + f.getCanonicalPath());
        } catch (Exception e) {
            htmlPane.setText(""Could not save "" + name + "" to "" + f.getPath() + "" This may be a prefix for an object or just may not be available at this time."");
            System.err.println(""Could not retrieve file: "" + name);
        }
    }
",0.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    protected void convertInternal(InputStream inputStream, DocumentFormat inputFormat, OutputStream outputStream, DocumentFormat outputFormat) {
        File inputFile = null;
        File outputFile = null;
        try {
            inputFile = File.createTempFile(""document"", ""."" + inputFormat.getFileExtension());
            OutputStream inputFileStream = null;
            try {
                inputFileStream = new FileOutputStream(inputFile);
                IOUtils.copy(inputStream, inputFileStream);
            } finally {
                IOUtils.closeQuietly(inputFileStream);
            }
            outputFile = File.createTempFile(""document"", ""."" + outputFormat.getFileExtension());
            convert(inputFile, inputFormat, outputFile, outputFormat);
            InputStream outputFileStream = null;
            try {
                outputFileStream = new FileInputStream(outputFile);
                IOUtils.copy(outputFileStream, outputStream);
            } finally {
                IOUtils.closeQuietly(outputFileStream);
            }
        } catch (IOException ioException) {
            throw new OpenOfficeException(""conversion failed"", ioException);
        } finally {
            if (inputFile != null) {
                inputFile.delete();
            }
            if (outputFile != null) {
                outputFile.delete();
            }
        }
    }
",1.0
"    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
","    public String sendMessage(String message, boolean log) {
        StringBuilder ret;
        try {
            URL url = new URL(this.stringURL);
            HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
            urlConnection.setRequestMethod(""POST"");
            urlConnection.setDoOutput(true);
            urlConnection.setDoInput(true);
            urlConnection.setRequestProperty(""User-Agent"", serverName);
            urlConnection.setRequestProperty(""Host"", ip);
            urlConnection.setRequestProperty(""Content-type"", ""text/xml"");
            urlConnection.setRequestProperty(""Content-length"", Integer.toString(message.length()));
            PrintWriter _out = new PrintWriter(urlConnection.getOutputStream());
            if (log) {
                CampaignData.mwlog.infoLog(""Sending Message: "" + MWCyclopsUtils.formatMessage(message));
            } else CampaignData.mwlog.infoLog(""Sending Message: "" + message);
            _out.println(message);
            _out.flush();
            _out.close();
            ret = new StringBuilder();
            if (log) {
                BufferedReader _in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                String input;
                while ((input = _in.readLine()) != null) ret.append(input + ""\n"");
                CampaignData.mwlog.infoLog(ret.toString());
                _in.close();
            } else {
                BufferedReader _in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                while (_in.readLine() != null) {
                }
                _in.close();
            }
            _out.close();
            urlConnection.disconnect();
            return ret.toString();
        } catch (Exception ex) {
            CampaignData.mwlog.errLog(ex);
        }
        return """";
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    private static void login(HttpClient client, String token) throws Exception {
        HttpPost login = new HttpPost(""https://libsys.arlingtonva.us/iii/cas/login?service=http&amp;scope=1"");
        List<NameValuePair> formParams = new ArrayList<NameValuePair>();
        formParams.add(new BasicNameValuePair(""code"", ""202002686286""));
        formParams.add(new BasicNameValuePair(""pin"", ""3128""));
        formParams.add(new BasicNameValuePair(""_eventId"", ""submit""));
        formParams.add(new BasicNameValuePair(""lt"", token));
        UrlEncodedFormEntity form = new UrlEncodedFormEntity(formParams, ""UTF-8"");
        login.setEntity(form);
        HttpResponse response = client.execute(login);
        EntityUtils.consume(response.getEntity());
        Header[] headers = response.getAllHeaders();
        System.out.println(""HEADERS: "");
        for (Header hdr : headers) {
            System.out.println(hdr.getName() + "": "" + hdr.getValue());
        }
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    private int[] sortNodesToGoal(Graph g, int parent, int goal) {
        float a, b;
        int tempI, tempR;
        float tempF;
        int len = g.nodeList[parent].edges.length;
        int[] nodes = new int[len];
        float[] dists = new float[len];
        int[] ref = new int[len];
        if (len == 0) return null;
        if (len == 1) {
            ref[0] = 0;
            return ref;
        }
        for (int i = 0; i < len; i++) {
            nodes[i] = g.getOtherNode(parent, g.nodeList[parent].edges[i]);
            a = g.nodeList[nodes[i]].x - g.nodeList[goal].x;
            b = g.nodeList[nodes[i]].y - g.nodeList[goal].y;
            dists[i] = (float) Math.sqrt(a * a + b * b);
            ref[i] = i;
        }
        for (int i = len - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (dists[j] > dists[j + 1]) {
                    tempI = nodes[j];
                    nodes[j] = nodes[j + 1];
                    nodes[j + 1] = tempI;
                    tempF = dists[j];
                    dists[j] = dists[j + 1];
                    dists[j + 1] = tempF;
                    tempR = ref[j];
                    ref[j] = ref[j + 1];
                    ref[j + 1] = tempR;
                }
            }
        }
        return ref;
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    protected byte[] getTSAResponse(byte[] requestBytes) throws SinaduraCoreException {
        byte[] respBytes = null;
        try {
            URL url = new URL(this.tsaURL);
            URLConnection tsaConnection = null;
            if (this.proxy == null) tsaConnection = url.openConnection(); else tsaConnection = url.openConnection(this.proxy);
            tsaConnection.setDoInput(true);
            tsaConnection.setDoOutput(true);
            tsaConnection.setUseCaches(false);
            tsaConnection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");
            tsaConnection.setRequestProperty(""Content-Transfer-Encoding"", ""binary"");
            if ((this.tsaUsername != null) && !this.tsaUsername.equals("""")) {
                String userPassword = this.tsaUsername + "":"" + this.tsaPassword;
                tsaConnection.setRequestProperty(""Authorization"", ""Basic "" + new String(new sun.misc.BASE64Encoder().encode(userPassword.getBytes())));
            }
            OutputStream out = tsaConnection.getOutputStream();
            out.write(requestBytes);
            out.close();
            InputStream inp = tsaConnection.getInputStream();
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int bytesRead = 0;
            while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {
                baos.write(buffer, 0, bytesRead);
            }
            respBytes = baos.toByteArray();
            String encoding = tsaConnection.getContentEncoding();
            if (encoding != null && encoding.equalsIgnoreCase(""base64"")) {
                sun.misc.BASE64Decoder dec = new sun.misc.BASE64Decoder();
                respBytes = dec.decodeBuffer(new String(respBytes));
            }
        } catch (MalformedURLException e) {
            throw new SinaduraCoreException(""URL malformed "" + e.getMessage(), e);
        } catch (IOException e) {
            throw new SinaduraCoreException(""Connection Error "" + e.getMessage(), e);
        }
        return respBytes;
    }
",1.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    public static void test2() throws Exception {
        int keySize = 1024;
        int dBlockSize = keySize / 8;
        int eBlockSize = dBlockSize - 8 - 3;
        CertAndKeyGen certAndKeyGen = new CertAndKeyGen(""RSA"", ""MD5WithRSA"");
        certAndKeyGen.generate(keySize);
        PublicKey publicKey = certAndKeyGen.getPublicKey();
        PrivateKey privateKey = certAndKeyGen.getPrivateKey();
        Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher1.init(Cipher.ENCRYPT_MODE, publicKey);
        String fileA = ""C:/temp/a.txt"";
        String fileB = ""C:/temp/b.txt"";
        String fileC = ""C:/temp/c.txt"";
        FileInputStream fis = new FileInputStream(fileA);
        FileOutputStream fos = new FileOutputStream(fileB, false);
        CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize);
        byte[] b = new byte[128];
        int i = fis.read(b);
        while (i != -1) {
            eos.write(b, 0, i);
            i = fis.read(b);
        }
        eos.flush();
        eos.close();
        fos.close();
        Cipher cipher2 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher2.init(Cipher.DECRYPT_MODE, privateKey);
        fis = new FileInputStream(fileB);
        CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize);
        FileOutputStream decodedFile = new FileOutputStream(fileC, false);
        int read = -1;
        while ((read = cis.read()) > -1) {
            decodedFile.write(read);
        }
        decodedFile.close();
        fis.close();
    }
",0.0
"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
","    public static void copy(String source, String dest) throws java.io.IOException {
        java.io.BufferedInputStream in = null;
        java.io.BufferedOutputStream out = null;
        try {
            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);
            while (in.available() != 0) {
                out.write(in.read());
            }
        } catch (java.io.IOException e) {
            throw e;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (java.io.IOException E) {
            }
        }
    }
",1.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
",0.0
"    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return sb.toString();
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"        private String findTitle(URL url) {
            HTMLEditorKit.ParserCallback callback;
            try {
                URLConnection conn = url.openConnection();
                Reader rd = new InputStreamReader(conn.getInputStream());
                ParserDelegator parser = new ParserDelegator();
                callback = new Callback();
                parser.parse(rd, callback, true);
            } catch (Exception exp) {
                System.err.println(exp);
            }
            return title;
        }
","    private static boolean renderStaticResource(final String requestedResource, HttpServletResponse servletResponse) throws IOException {
        boolean successfull = true;
        String fileName = PathTool.getFSPathOfResource(requestedResource);
        File file = new File(fileName);
        if (!file.exists()) {
            logger.error(""Static resource not found: "" + fileName);
            return false;
        }
        if (fileName.endsWith(""xml"") || fileName.endsWith(""asp"")) servletResponse.setContentType(""text/xml""); else if (fileName.endsWith(""css"")) servletResponse.setContentType(""text/css""); else if (fileName.endsWith(""js"")) servletResponse.setContentType(""text/javascript"");
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            IOUtils.copy(in, servletResponse.getOutputStream());
            logger.debug(""Static resource rendered: "".concat(fileName));
        } catch (FileNotFoundException e) {
            logger.error(""Static resource not found: "" + fileName);
            successfull = false;
        } finally {
            IOUtils.closeQuietly(in);
        }
        return successfull;
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = null;
        BufferedInputStream bis = null;
        AudioFileFormat fileFormat = null;
        urlStream = url.openStream();
        AudioInputStream result = null;
        try {
            bis = new BufferedInputStream(urlStream, bisBufferSize);
            result = getAudioInputStream((InputStream) bis);
        } finally {
            if (result == null) {
                urlStream.close();
            }
        }
        return result;
    }
","    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    public String call() throws Exception {
        InputStream stream = url.openStream();
        StringBuffer sb = new StringBuffer();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line);
        }
        return sb.toString();
    }
","    public static String post(String strUrl, String strPostString) {
        NoMuleRuntime.showDebug(""POST : "" + strUrl + ""("" + strPostString + "")"");
        try {
            URL url = new URL(strUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod(""POST"");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(true);
            conn.setAllowUserInteraction(true);
            HttpURLConnection.setFollowRedirects(true);
            conn.setInstanceFollowRedirects(true);
            conn.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            DataOutputStream out = new DataOutputStream(conn.getOutputStream());
            out.writeBytes(strPostString);
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String s = """";
            StringBuffer sRet = new StringBuffer();
            while ((s = in.readLine()) != null) {
                sRet.append(s);
            }
            in.close();
            return sRet.toString();
        } catch (MalformedURLException e) {
            NoMuleRuntime.showError(""Internal Error. Malformed URL."");
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println(""Internal I/O Error."");
            e.printStackTrace();
        }
        return """";
    }
",1.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    public List<String> selectSynchrnServerFiles(SynchrnServerVO synchrnServerVO) throws Exception {
        List<String> list = new ArrayList<String>();
        try {
            FTPClient ftpClient = new FTPClient();
            ftpClient.setControlEncoding(""euc-kr"");
            if (!EgovWebUtil.isIPAddress(synchrnServerVO.getServerIp())) {
                throw new RuntimeException(""IP is needed. ("" + synchrnServerVO.getServerIp() + "")"");
            }
            InetAddress host = InetAddress.getByName(synchrnServerVO.getServerIp());
            try {
                ftpClient.connect(host, Integer.parseInt(synchrnServerVO.getServerPort()));
                boolean isLogin = ftpClient.login(synchrnServerVO.getFtpId(), synchrnServerVO.getFtpPassword());
                if (!isLogin) throw new Exception(""FTP Client Login Error : \n"");
            } catch (SocketException se) {
                System.out.println(se);
                throw new Exception(se);
            } catch (Exception e) {
                System.out.println(e);
                throw new Exception(e);
            }
            FTPFile[] fTPFile = null;
            try {
                ftpClient.changeWorkingDirectory(synchrnServerVO.getSynchrnLc());
                fTPFile = ftpClient.listFiles(synchrnServerVO.getSynchrnLc());
                for (int i = 0; i < fTPFile.length; i++) {
                    if (fTPFile[i].isFile()) list.add(fTPFile[i].getName());
                }
            } catch (Exception e) {
                System.out.println(e);
            } finally {
                ftpClient.logout();
            }
        } catch (Exception e) {
            list.add(""noList"");
        }
        return list;
    }
",0.0
"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
","    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
",0.0
"    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
","    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
",0.0
"    public static String getMD5EncodedString(String strIn) {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            md5.reset();
            md5.update(strIn.getBytes());
            byte[] digest = md5.digest();
            StringBuffer hexString = new StringBuffer();
            for (byte aDigest : digest) {
                hexString.append(Integer.toHexString(0xFF & aDigest));
            }
            return hexString.toString();
        } catch (java.security.NoSuchAlgorithmException n) {
            return """";
        }
    }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    public Collection<Module> loadModules() {
        URL url = getClass().getResource(""/modules.xml"");
        if (url == null) {
            java.util.logging.Logger.getLogger(ModuleLoader.class.getName()).log(java.util.logging.Level.SEVERE, ""Cannot find modules.xml file in classpath"");
            return Collections.<Module>emptyList();
        }
        DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();
        Document document = null;
        InputStream input = null;
        try {
            input = url.openStream();
            DocumentBuilder bui = fac.newDocumentBuilder();
            document = bui.parse(url.openStream());
        } catch (SAXException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParserConfigurationException ex) {
            Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException ex) {
                    Logger.getLogger(ModuleLoader.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (document == null) {
            return Collections.<Module>emptyList();
        }
        List<Module> modules = new LinkedList<Module>();
        NodeList moduleListNodes = document.getElementsByTagName(""module-list"");
        for (int i = 0; i < moduleListNodes.getLength(); i++) {
            Element moduleListNode = (Element) moduleListNodes.item(i);
            NodeList moduleNodes = moduleListNode.getElementsByTagName(""module"");
            for (int j = 0; j < moduleNodes.getLength(); j++) {
                Element moduleNode = (Element) moduleNodes.item(j);
                String moduleClass = moduleNode.getAttribute(""class"");
                if (moduleClass != null) {
                    instantiateModule(moduleClass, modules);
                }
            }
        }
        return modules;
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    static void getFileClient(String fsName, String id, File[] localPath) throws IOException {
        byte[] buf = new byte[BUFFER_SIZE];
        StringBuffer str = new StringBuffer(""http://"" + fsName + ""/getimage?"");
        str.append(id);
        URL url = new URL(str.toString());
        URLConnection connection = url.openConnection();
        InputStream stream = connection.getInputStream();
        FileOutputStream[] output = null;
        try {
            if (localPath != null) {
                output = new FileOutputStream[localPath.length];
                for (int i = 0; i < output.length; i++) {
                    output[i] = new FileOutputStream(localPath[i]);
                }
            }
            int num = 1;
            while (num > 0) {
                num = stream.read(buf);
                if (num > 0 && localPath != null) {
                    for (int i = 0; i < output.length; i++) {
                        output[i].write(buf, 0, num);
                    }
                }
            }
        } finally {
            stream.close();
            if (output != null) {
                for (int i = 0; i < output.length; i++) {
                    if (output[i] != null) {
                        output[i].close();
                    }
                }
            }
        }
    }
",0.0
"    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
","    public boolean updateLOB(String sql, int displayType, Object value) throws RemoteException {
        if (sql == null || value == null) {
            log.fine(""No sql or data"");
            return false;
        }
        log.fine(sql);
        m_updateLOBCount++;
        boolean success = true;
        Connection con = DB.createConnection(false, Connection.TRANSACTION_READ_COMMITTED);
        PreparedStatement pstmt = null;
        try {
            pstmt = con.prepareStatement(sql);
            if (displayType == DisplayType.TextLong) pstmt.setString(1, (String) value); else pstmt.setBytes(1, (byte[]) value);
            int no = pstmt.executeUpdate();
            pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            log.log(Level.FINE, sql, e);
            success = false;
        }
        try {
            if (pstmt != null) pstmt.close();
            pstmt = null;
        } catch (Exception e) {
            pstmt = null;
        }
        if (success) {
            try {
                con.commit();
                con.close();
                con = null;
            } catch (Exception e) {
                log.log(Level.SEVERE, ""commit"", e);
                success = false;
            }
        }
        if (!success) {
            log.severe(""rollback"");
            try {
                con.rollback();
                con.close();
                con = null;
            } catch (Exception ee) {
                log.log(Level.SEVERE, ""rollback"", ee);
            }
        }
        try {
            if (con != null) con.close();
            con = null;
        } catch (Exception e) {
            con = null;
        }
        return success;
    }
",1.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    private static void extractSOUNDFILES() throws Exception {
        ArrayList<File> soundFiles = new ArrayList<File>();
        File soundsFolder = new File(""/var/lib/asterisk/sounds/"");
        if (soundsFolder.exists()) {
            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    if (NullStatus.isNull(name)) {
                        return false;
                    }
                    if (name.endsWith(""-sounds.jar"")) {
                        return true;
                    }
                    return false;
                }
            });
            for (int i = 0; i < soundFiles1.length; i++) {
                soundFiles.add(soundFiles1[i]);
            }
        }
        soundsFolder = new File(""/opt/jboss/server/default/deploy/Tobe.war/WEB-INF/lib/"");
        if (soundsFolder.exists()) {
            File soundFiles1[] = soundsFolder.listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    if (NullStatus.isNull(name)) {
                        return false;
                    }
                    if (name.endsWith(""-sounds.jar"")) {
                        return true;
                    }
                    return false;
                }
            });
            for (int i = 0; i < soundFiles1.length; i++) {
                soundFiles.add(soundFiles1[i]);
            }
        }
        for (int i = 0; i < soundFiles.size(); i++) {
            ZipFile zipFile = new ZipFile(soundFiles.get(i));
            InputStream inputStream = null;
            Enumeration<? extends ZipEntry> oEnum = zipFile.entries();
            while (oEnum.hasMoreElements()) {
                ZipEntry zipEntry = oEnum.nextElement();
                File file = new File(""/var/lib/asterisk/sounds/"", zipEntry.getName());
                if (zipEntry.isDirectory()) {
                    file.mkdirs();
                } else {
                    inputStream = zipFile.getInputStream(zipEntry);
                    FileOutputStream fos = new FileOutputStream(file);
                    IOUtils.copy(inputStream, fos);
                    fos.close();
                }
            }
        }
    }
",0.0
"    public static final InputStream getInputStream(final String location) {
        final File f = new File(location);
        if (f.exists()) {
            try {
                return new FileInputStream(f);
            } catch (final FileNotFoundException e) {
                throw new Error(e);
            }
        }
        URL url = Iotil.class.getClassLoader().getResource(location);
        try {
            if (url == null) {
                url = new URL(location);
            }
            return url.openStream();
        } catch (final IOException e) {
            throw new RuntimeException(e);
        }
    }
","    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
",0.0
"    protected void copyFile(File sourceFile, File targetFile) throws FileNotFoundException, IOException {
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        try {
            inChannel = new FileInputStream(sourceFile).getChannel();
            outChannel = new FileOutputStream(targetFile).getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            try {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    private URLConnection getURLConnection(String str) {
        try {
            if (isHttps) {
                System.setProperty(""java.protocol.handler.pkgs"", ""com.sun.net.ssl.internal.www.protocol"");
                if (isProxy) {
                    System.setProperty(""https.proxyHost"", proxyHost);
                    System.setProperty(""https.proxyPort"", proxyPort);
                }
            } else {
                if (isProxy) {
                    System.setProperty(""http.proxyHost"", proxyHost);
                    System.setProperty(""http.proxyPort"", proxyPort);
                }
            }
            URL url = new URL(str);
            return (url.openConnection());
        } catch (MalformedURLException me) {
            System.out.println(""Malformed URL"");
            me.printStackTrace();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
",0.0
"    private String fetch(URL url) {
        StringBuilder body = new StringBuilder();
        try {
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                body.append(inputLine);
            }
            in.close();
            return body.toString();
        } catch (Exception e) {
            debug(""Error: fetch: Exception reading URL: "" + e);
        }
        return null;
    }
","    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
",0.0
"    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
","    private static void fileUpload() throws Exception {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        file = new File(""h:/Sakura haruno.jpg"");
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart(""Filename"", new StringBody(file.getName()));
        mpEntity.addPart(""Filedata"", cbFile);
        httppost.setEntity(mpEntity);
        System.out.println(""executing request "" + httppost.getRequestLine());
        System.out.println(""Now uploading your file into ugotfile.com"");
        HttpResponse response = httpclient.execute(httppost);
        System.out.println(response.getStatusLine());
        if (response != null) {
            uploadresponse = EntityUtils.toString(response.getEntity());
        }
        System.out.println(""Upload Response : "" + uploadresponse);
        downloadlink = parseResponse(uploadresponse, ""[\"""", ""\"""");
        downloadlink = downloadlink.replaceAll(""\\\\/"", ""/"");
        deletelink = parseResponse(uploadresponse, ""\"",\"""", ""\"""");
        deletelink = deletelink.replaceAll(""\\\\/"", ""/"");
        System.out.println(""Download Link : "" + downloadlink);
        System.out.println(""Delete Link : "" + deletelink);
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","            protected Object getNewObject() throws IOException {
                URLConnection conn = HTTPMessageDeliveryImpl.this.url.openConnection();
                conn.setDoInput(true);
                conn.setDoOutput(true);
                conn.setUseCaches(false);
                conn.setRequestProperty(""Content-Type"", ""text/xml"");
                return conn;
            }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    private String callBambooApi(URL theURL) throws MonitoringException, BambooTicketNeedToBeRenewedError {
        String returnedValue = null;
        HttpURLConnection urlConnection = null;
        BufferedReader urlConnectionReader = null;
        try {
            urlConnection = (HttpURLConnection) theURL.openConnection();
            urlConnection.connect();
            urlConnectionReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            String line = null;
            StringBuffer serverResponse = new StringBuffer();
            while ((line = urlConnectionReader.readLine()) != null) {
                serverResponse.append(line);
            }
            returnedValue = serverResponse.toString();
            if (returnedValue.contains(""<title>Bamboo Setup Wizard - Atlassian Bamboo</title>"")) {
                throw new MonitoringException(""Your Bamboo server installation is not finished ! Double click here to complete the Bamboo Setup Wizard !"", getMainPageURI());
            }
            InputSource is = new InputSource(new StringReader(serverResponse.toString()));
            XPath xpath = XPathFactory.newInstance().newXPath();
            String error = xpath.evaluate(""/errors/error"", is);
            if (!"""".equals(error)) {
                if (""User not authenticated yet, or session timed out."".equals(error)) {
                    throw new BambooTicketNeedToBeRenewedError();
                } else {
                    boolean isErrorOptionsRelated = false;
                    URI uriForNonOptionsRelatedErrors = getMainPageURI();
                    if (""Invalid username or password."".equals(error)) {
                        isErrorOptionsRelated = true;
                    }
                    if (""The remote API has been disabled."".equals(error)) {
                        error += "" Double click here to enable it."";
                        try {
                            synchronized (this.bambooProperties) {
                                uriForNonOptionsRelatedErrors = new URI(this.bambooProperties.getServerBaseUrl() + ""/admin/configure!default.action"");
                            }
                        } catch (URISyntaxException e) {
                            throw new RuntimeException(e);
                        }
                    }
                    throw new MonitoringException(""Error reported by the Bamboo server: "" + error, isErrorOptionsRelated, uriForNonOptionsRelatedErrors);
                }
            }
        } catch (ClassCastException e) {
            throw new MonitoringException(""Problem: the base URL defined for the Bamboo server in Options is not an http URL."", true, null);
        } catch (UnknownHostException e) {
            throw new MonitoringException(""Problem: cannot find host "" + theURL.getHost() + "" on the network."", true, null);
        } catch (ConnectException e) {
            throw new MonitoringException(""Problem: cannot connect to port "" + theURL.getPort() + "" on host "" + theURL.getHost() + ""."", true, null);
        } catch (FileNotFoundException e) {
            throw new MonitoringException(""Problem: cannot find the Bamboo server REST api using the base URL defined for the Bamboo server in Options. Seems that this URL is not the one to your Bamboo server home page..."", true, null);
        } catch (SocketException e) {
            throw new MonitoringException(""Problem: network error, connection lost."", null);
        } catch (XPathExpressionException e) {
            throw new MonitoringException(""Problem: the Bamboo Server returned an unexpected content for attribute <error>: "" + returnedValue, null);
        } catch (MonitoringException e) {
            throw e;
        } catch (Throwable t) {
            throw new MonitoringException(t, null);
        } finally {
            if (urlConnectionReader != null) {
                try {
                    urlConnectionReader.close();
                } catch (IOException e) {
                }
            }
            if (urlConnection != null) {
                urlConnection.disconnect();
            }
        }
        return returnedValue;
    }
",0.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    public void run() {
        try {
            FTPClient c = new FTPClient();
            c.configure(ftpConfig);
            logger.debug(""Trying to connect"");
            c.connect(""127.0.0.1"", 21211);
            logger.debug(""Connected"");
            c.setSoTimeout(5000);
            if (!FTPReply.isPositiveCompletion(c.getReplyCode())) {
                logger.debug(""Houston, we have a problem. D/C"");
                c.disconnect();
                throw new Exception();
            }
            if (c.login(""drftpd"", ""drftpd"")) {
                logger.debug(""Logged-in, now waiting 5 secs and kill the thread."");
                _sc.addSuccess();
                Thread.sleep(5000);
                c.disconnect();
            } else {
                logger.debug(""Login failed, D/C!"");
                throw new Exception();
            }
        } catch (Exception e) {
            logger.debug(e, e);
            _sc.addFailure();
        }
        logger.debug(""exiting"");
    }
",0.0
"    public static void parseEdges(URL url, Graph g, Dictionary airportToVertex) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        Parser.parseEdges(reader, g, airportToVertex);
    }
","    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
",0.0
"	public FTPClient sample1c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPClient ftpClient = new FTPClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
","    private void process(String zipFileName, String directory, String db, boolean quiet) throws SQLException {
        ArrayList<String> list = FileLister.getDatabaseFiles(directory, db, true);
        if (list.size() == 0) {
            if (!quiet) {
                printNoDatabaseFilesFound(directory, db);
            }
            return;
        }
        zipFileName = FileUtils.normalize(zipFileName);
        if (FileUtils.exists(zipFileName)) {
            FileUtils.delete(zipFileName);
        }
        OutputStream fileOut = null;
        try {
            fileOut = FileUtils.openFileOutputStream(zipFileName, false);
            ZipOutputStream zipOut = new ZipOutputStream(fileOut);
            String base = """";
            for (String fileName : list) {
                if (fileName.endsWith(Constants.SUFFIX_PAGE_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                } else if (fileName.endsWith(Constants.SUFFIX_DATA_FILE)) {
                    base = FileUtils.getParent(fileName);
                    break;
                }
            }
            for (String fileName : list) {
                String f = FileUtils.getAbsolutePath(fileName);
                if (!f.startsWith(base)) {
                    Message.throwInternalError(f + "" does not start with "" + base);
                }
                if (FileUtils.isDirectory(fileName)) {
                    continue;
                }
                f = f.substring(base.length());
                f = BackupCommand.correctFileName(f);
                ZipEntry entry = new ZipEntry(f);
                zipOut.putNextEntry(entry);
                InputStream in = null;
                try {
                    in = FileUtils.openFileInputStream(fileName);
                    IOUtils.copyAndCloseInput(in, zipOut);
                } catch (FileNotFoundException e) {
                } finally {
                    IOUtils.closeSilently(in);
                }
                zipOut.closeEntry();
                if (!quiet) {
                    out.println(""Processed: "" + fileName);
                }
            }
            zipOut.closeEntry();
            zipOut.close();
        } catch (IOException e) {
            throw Message.convertIOException(e, zipFileName);
        } finally {
            IOUtils.closeSilently(fileOut);
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    public static String hashSourceCode(String source) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
            md.update(source.getBytes());
            return new sun.misc.BASE64Encoder().encode(md.digest());
        } catch (NoSuchAlgorithmException e) {
            _log.error(""Failed to generate hashcode."", e);
        }
        return null;
    }
",1.0
"    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }
","    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
",1.0
"    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    private static void process(String urlstring) {
        try {
            URL url = new URL(urlstring);
            System.out.println(""Connecting to "" + url);
            URLConnection connection = url.openConnection();
            connection.connect();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            for (String line; (line = in.readLine()) != null; ) if (line.startsWith(MARKER)) {
                System.out.println(TAG.matcher(line).replaceAll(""""));
            }
            in.close();
        } catch (IOException ioe) {
            System.err.println("""" + ioe);
        }
    }
",0.0
"    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
","    protected void findPackages(Set<String> packages, ClassLoader classLoader) throws IOException {
        Enumeration<URL> resources = classLoader.getResources(META_INF_SERVICES);
        while (resources.hasMoreElements()) {
            URL url = resources.nextElement();
            String path = url.getPath();
            if (!visitedURIs.contains(path)) {
                visitedURIs.add(path);
                LOG.debug(""Loading file {} to retrieve list of packages, from url: {}"", META_INF_SERVICES, url);
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                try {
                    while (true) {
                        String line = reader.readLine();
                        if (line == null) {
                            break;
                        }
                        line = line.trim();
                        if (line.startsWith(""#"") || line.length() == 0) {
                            continue;
                        }
                        tokenize(packages, line);
                    }
                } finally {
                    IOHelper.close(reader, null, LOG);
                }
            }
        }
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","    public static String md5(final String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[FOUR_BYTES];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",1.0
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) {
                inChannel.close();
            }
            if (outChannel != null) {
                outChannel.close();
            }
        }
    }
",0.0
"    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
","    void testFileObject(JavaFileObject fo) throws Exception {
        URI uri = fo.toUri();
        System.err.println(""uri: "" + uri);
        URLConnection urlconn = uri.toURL().openConnection();
        if (urlconn instanceof JarURLConnection) {
            JarURLConnection jarconn = (JarURLConnection) urlconn;
            File f = new File(jarconn.getJarFile().getName());
            foundJars.add(f.getName());
        }
        try {
            byte[] uriData = read(urlconn.getInputStream());
            byte[] foData = read(fo.openInputStream());
            if (!Arrays.equals(uriData, foData)) {
                if (uriData.length != foData.length) throw new Exception(""data size differs: uri data "" + uriData.length + "" bytes, fo data "" + foData.length + "" bytes"");
                for (int i = 0; i < uriData.length; i++) {
                    if (uriData[i] != foData[i]) throw new Exception(""unexpected data returned at offset "" + i + "", uri data "" + uriData[i] + "", fo data "" + foData[i]);
                }
                throw new AssertionError(""cannot find difference"");
            }
        } finally {
            if (urlconn instanceof JarURLConnection) {
                JarURLConnection jarconn = (JarURLConnection) urlconn;
                jarconn.getJarFile().close();
            }
        }
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0.0
"    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
","    public static byte[] MD5(String input) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        md5.update(input.getBytes());
        return md5.digest();
    }
",0.0
"    protected boolean testPort(String protocol, String server, int port, String file) {
        System.out.println(""testPort["" + protocol + "","" + server + "", "" + port + "", "" + file + ""]"");
        URL url = null;
        try {
            url = new URL(protocol, server, port, file);
        } catch (MalformedURLException ex) {
            log.severe(""No URL for Protocol="" + protocol + "", Server="" + server + "": "" + ex.getMessage());
            return false;
        }
        try {
            URLConnection c = url.openConnection();
            Object o = c.getContent();
            if (o == null) log.warning(""In use="" + url); else log.warning(""In Use="" + url);
        } catch (Exception ex) {
            log.fine(""Not used="" + url);
            return false;
        }
        return true;
    }
","    public static void main(String[] args) throws Exception {
        System.setProperty(""debug"", ""debug"");
        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");
        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");
        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        HttpParameters para = new HttpParameters();
        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\+"", ""%20""));
        consumer.setAdditionalParameters(para);
        consumer.sign(request);
        OutputStream ot = request.getOutputStream();
        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\+"", ""%20"").getBytes());
        ot.flush();
        ot.close();
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",0.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    private boolean extract(File archive, File dir, IProgressMonitor monitor) {
        monitor.subTask(""Extract : "" + archive.getName());
        if (!dir.exists()) {
            dir.mkdirs();
        } else {
            File[] files = dir.listFiles();
            for (int j = 0; j < files.length; j++) {
                files[j].delete();
            }
        }
        ZipInputStream zis = null;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File indexFile = new File(dir, entry.getName());
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(indexFile);
                    IOUtils.copy(zis, fos);
                } finally {
                    IOUtils.closeQuietly(fos);
                }
            }
            return true;
        } catch (Exception ex) {
            M4EclipsePlugin.log(new Status(IStatus.ERROR, M4EclipsePlugin.PLUGIN_ID, -1, ""For index '"" + dir.getName() + ""' Unable to initialize indexes"", ex));
        } finally {
            IOUtils.closeQuietly(zis);
        }
        return false;
    }
",0.0
"    public static int[] simplex_reverse_sort(int[] vertices) {
        if (vertices.length <= 1) return vertices;
        for (int j = vertices.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                if (vertices[i + 1] > vertices[i]) {
                    int dummy = vertices[i];
                    vertices[i] = vertices[i + 1];
                    vertices[i + 1] = dummy;
                }
            }
        }
        return vertices;
    }
","    public static SlimModCollection parseSlimModification(URL url) {
        try {
            Scanner scanner = new Scanner(url.openStream());
            return parseSlimModification(scanner);
        } catch (IOException e) {
            throw new IllegalStateException(""Error reading slim file: "" + e.getMessage(), e);
        }
    }
",0.0
"    public static void copyFile(File in, File out, boolean copyModified) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
            if (copyModified) out.setLastModified(in.lastModified());
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static byte[] getBytesFromURL(URL url) throws IOException {
        byte[] b;
        URLConnection con = url.openConnection();
        int size = con.getContentLength();
        InputStream s = con.getInputStream();
        try {
            if (size <= 0) b = IOUtil.getBytesFromStream(s); else {
                b = new byte[size];
                int len = 0;
                do {
                    int n = s.read(b, len, size - len);
                    if (n < 0) throw new IOException(""the stream was closed: "" + url.toString());
                    len += n;
                } while (len < size);
            }
        } finally {
            s.close();
        }
        return b;
    }
",0.0
"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        try {
            client.connect(""ftp.domain.com"");
            client.login(""admin"", ""secret"");
            String filename = ""/testing/data.txt"";
            boolean deleted = client.deleteFile(filename);
            if (deleted) {
                System.out.println(""File deleted..."");
            }
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static String hashNative(String password, String algorithm, String prefixKey, boolean useDefaultEncoding) {
        try {
            MessageDigest digest = MessageDigest.getInstance(algorithm);
            if (useDefaultEncoding) {
                digest.update(password.getBytes());
            } else {
                for (char c : password.toCharArray()) {
                    digest.update((byte) (c >> 8));
                    digest.update((byte) c);
                }
            }
            byte[] digestedPassword = digest.digest();
            BASE64Encoder encoder = new BASE64Encoder();
            String encodedDigested = encoder.encode(digestedPassword);
            return prefixKey + encodedDigested;
        } catch (NoSuchAlgorithmException ne) {
            return password;
        }
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    private void doLogin(String password) throws LoginFailedException, IncorrectPasswordException {
        long mgr = Constants.MANAGER;
        Data data, response;
        try {
            response = sendAndWait(new Request(mgr)).get(0);
            MessageDigest md;
            try {
                md = MessageDigest.getInstance(""MD5"");
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(""MD5 hash not supported."");
            }
            byte[] challenge = response.getBytes();
            md.update(challenge);
            md.update(password.getBytes(Data.STRING_ENCODING));
            try {
                data = Data.valueOf(md.digest());
                response = sendAndWait(new Request(mgr).add(0, data)).get(0);
            } catch (ExecutionException ex) {
                throw new IncorrectPasswordException();
            }
            loginMessage = response.getString();
            response = sendAndWait(new Request(mgr).add(0, getLoginData())).get(0);
            ID = response.getWord();
        } catch (InterruptedException ex) {
            throw new LoginFailedException(ex);
        } catch (ExecutionException ex) {
            throw new LoginFailedException(ex);
        } catch (IOException ex) {
            throw new LoginFailedException(ex);
        }
    }
",1.0
"    public static String encodeMD5(String param) throws Exception {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.update(param.getBytes());
        byte[] hash = digest.digest();
        char buf[] = new char[hash.length * 2];
        for (int i = 0, x = 0; i < hash.length; i++) {
            buf[x++] = HEX_CHARS[(hash[i] >>> 4) & 0xf];
            buf[x++] = HEX_CHARS[hash[i] & 0xf];
        }
        return String.valueOf(buf);
    }
","    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (mURLImageMap.containsKey(url)) {
                    return mURLImageMap.get(url);
                }
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    mURLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
                LOG.debug(""Ignore any exceptions"");
            }
        } catch (Throwable e) {
            LOG.debug(""Ignore any exceptions"");
        }
        return null;
    }
",0.0
"    private Bitmap getBitmap(String imageUrl) {
        URL url;
        InputStream input = null;
        try {
            url = new URL(address + imageUrl);
            input = url.openStream();
            return BitmapFactory.decodeStream(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    public void testDecodeJTLM_publish911() throws Exception {
        EXISchema corpus = EXISchemaFactoryTestUtil.getEXISchema(""/JTLM/schemas/TLMComposite.xsd"", getClass(), m_compilerErrors);
        Assert.assertEquals(0, m_compilerErrors.getTotalCount());
        GrammarCache grammarCache = new GrammarCache(corpus, GrammarOptions.DEFAULT_OPTIONS);
        String[] exiFiles = { ""/JTLM/publish911/publish911.bitPacked"", ""/JTLM/publish911/publish911.byteAligned"", ""/JTLM/publish911/publish911.preCompress"", ""/JTLM/publish911/publish911.compress"" };
        for (int i = 0; i < Alignments.length; i++) {
            AlignmentType alignment = Alignments[i];
            EXIDecoder decoder = new EXIDecoder();
            Scanner scanner;
            decoder.setAlignmentType(alignment);
            URL url = resolveSystemIdAsURL(exiFiles[i]);
            int n_events, n_texts;
            decoder.setEXISchema(grammarCache);
            decoder.setInputStream(url.openStream());
            scanner = decoder.processHeader();
            ArrayList<EXIEvent> exiEventList = new ArrayList<EXIEvent>();
            EXIEvent exiEvent;
            n_events = 0;
            n_texts = 0;
            while ((exiEvent = scanner.nextEvent()) != null) {
                ++n_events;
                if (exiEvent.getEventVariety() == EXIEvent.EVENT_CH) {
                    String stringValue = exiEvent.getCharacters().makeString();
                    if (stringValue.length() == 0 && exiEvent.getEventType().itemType == EventCode.ITEM_SCHEMA_CH) {
                        --n_events;
                        continue;
                    }
                    if (n_texts % 100 == 0) {
                        final int n = n_texts / 100;
                        Assert.assertEquals(publish911_centennials[n], stringValue);
                    }
                    ++n_texts;
                }
                exiEventList.add(exiEvent);
            }
            Assert.assertEquals(96576, n_events);
        }
    }
",0.0
"    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public Configuration(URL url) {
        InputStream in = null;
        try {
            load(in = url.openStream());
        } catch (Exception e) {
            throw new RuntimeException(""Could not load configuration from "" + url, e);
        } finally {
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ignore) {
                }
            }
        }
    }
",0.0
"    public Vocabulary build(String url) {
        HttpGet get = new HttpGet(url);
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream is = entity.getContent();
                try {
                    Vocabulary tv = build(is);
                    LOG.info(""Successfully parsed Thesaurus: "" + tv.getTitle());
                    return tv;
                } catch (SAXException e) {
                    LOG.error(""Unable to parse XML for extension: "" + e.getMessage(), e);
                } finally {
                    is.close();
                }
                entity.consumeContent();
            }
        } catch (Exception e) {
            LOG.error(e);
        }
        return null;
    }
","    public void setTableEmbossage(String te, boolean sys) {
        fiConf.setProperty(OptNames.pr_emboss_table, te);
        fiConf.setProperty(OptNames.fi_is_sys_emboss_table, Boolean.toString(sys));
        FileChannel in = null;
        FileChannel out = null;
        try {
            String fichTable;
            if (!(te.endsWith("".ent""))) {
                te = te + "".ent"";
            }
            if (sys) {
                fichTable = ConfigNat.getInstallFolder() + ""/xsl/tablesEmbosseuse/"" + te;
            } else {
                fichTable = ConfigNat.getUserEmbossTableFolder() + ""/"" + te;
            }
            in = new FileInputStream(fichTable).getChannel();
            out = new FileOutputStream(ConfigNat.getUserEmbossTableFolder() + ""/Embtab.ent"").getChannel();
            in.transferTo(0, in.size(), out);
            in.close();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    public synchronized String encrypt(String text) throws Exception {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
        } catch (NoSuchAlgorithmException e) {
            throw new Exception(e.getMessage());
        }
        md.update(text.getBytes());
        byte raw[] = md.digest();
        String hash = """";
        for (int i = 0; i < raw.length; i++) {
            byte temp = raw[i];
            String s = Integer.toHexString(new Byte(temp));
            while (s.length() < 2) {
                s = ""0"" + s;
            }
            s = s.substring(s.length() - 2);
            hash += s;
        }
        return hash;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
","    private void playAudio(String mediaUrl) {
        try {
            URLConnection cn = new URL(mediaUrl).openConnection();
            InputStream is = cn.getInputStream();
            mediaFile = new File(this.getCacheDir(), ""mediafile"");
            FileOutputStream fos = new FileOutputStream(mediaFile);
            byte buf[] = new byte[16 * 1024];
            Log.i(""FileOutputStream"", ""Download"");
            do {
                int numread = is.read(buf);
                if (numread <= 0) break;
                fos.write(buf, 0, numread);
            } while (true);
            fos.flush();
            fos.close();
            Log.i(""FileOutputStream"", ""Saved"");
            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {

                public void onCompletion(MediaPlayer mp) {
                    mp.release();
                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");
                }
            };
            mixPlayer.setOnCompletionListener(listener);
            FileInputStream fis = new FileInputStream(mediaFile);
            mixPlayer.setDataSource(fis.getFD());
            mixPlayer.prepare();
            Log.i(""MediaPlayer"", ""Start Player"");
            loading = false;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    public Map readMap(String filename) throws Exception {
        xmlPath = filename.substring(0, filename.lastIndexOf(File.separatorChar) + 1);
        String xmlFile = makeUrl(filename);
        URL url = new URL(xmlFile);
        InputStream is = url.openStream();
        if (filename.endsWith("".gz"")) {
            is = new GZIPInputStream(is);
        }
        Map unmarshalledMap = unmarshal(is);
        unmarshalledMap.setFilename(filename);
        map = null;
        return unmarshalledMap;
    }
","    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",1.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    public AudioInputStream getAudioInputStream(URL url, String userAgent) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        URLConnection conn = url.openConnection();
        boolean isShout = false;
        int toRead = 4;
        byte[] head = new byte[toRead];
        if (userAgent != null) conn.setRequestProperty(""User-Agent"", userAgent);
        conn.setRequestProperty(""Accept"", ""*/*"");
        conn.setRequestProperty(""Icy-Metadata"", ""1"");
        conn.setRequestProperty(""Connection"", ""close"");
        BufferedInputStream bInputStream = new BufferedInputStream(conn.getInputStream());
        bInputStream.mark(toRead);
        int read = bInputStream.read(head, 0, toRead);
        if ((read > 2) && (((head[0] == 'I') | (head[0] == 'i')) && ((head[1] == 'C') | (head[1] == 'c')) && ((head[2] == 'Y') | (head[2] == 'y')))) {
            isShout = true;
        }
        bInputStream.reset();
        InputStream inputStream = null;
        if (isShout == true) {
            IcyInputStream icyStream = new IcyInputStream(bInputStream);
            icyStream.addTagParseListener(IcyListener.getInstance());
            inputStream = icyStream;
        } else {
            String metaint = conn.getHeaderField(""icy-metaint"");
            if (metaint != null) {
                IcyInputStream icyStream = new IcyInputStream(bInputStream, metaint);
                icyStream.addTagParseListener(IcyListener.getInstance());
                inputStream = icyStream;
            } else {
                inputStream = bInputStream;
            }
        }
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""MpegAudioFileReaderWorkaround.getAudioInputStream(URL,String): end"");
        }
        return audioInputStream;
    }
",0.0
"    public static void readDefault() {
        ClassLoader l = Skeleton.class.getClassLoader();
        URL url;
        if (l != null) {
            url = l.getResource(DEFAULT_LOC);
        } else {
            url = ClassLoader.getSystemResource(DEFAULT_LOC);
        }
        if (url == null) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
        try {
            InputStreamReader reader = new InputStreamReader(url.openStream());
            readSkel(new BufferedReader(reader));
        } catch (IOException e) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return sb.toString();
    }
","    public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException {
        if (params == null) params = new DjatokaEncodeParam();
        if (params.getLevels() == 0) params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()));
        File in = null;
        File out = null;
        try {
            in = IOUtils.createTempTiff(bi);
            out = File.createTempFile(""tmp"", "".jp2"");
            compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params);
            IOUtils.copyStream(new FileInputStream(out), output);
        } catch (IOException e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        } catch (Exception e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        }
        if (in != null) in.delete();
        if (out != null) out.delete();
    }
",0.0
"    public boolean copyStoredTileTo(File targetFileName, int x, int y, int zoom, MapSource tileSource) throws IOException {
        File sourceFile = getTileFile(x, y, zoom, tileSource);
        if (!sourceFile.exists()) return false;
        FileInputStream fis = null;
        FileOutputStream fos = null;
        long sourceBytes = 0;
        long writtenBytes = 0;
        try {
            fis = new FileInputStream(sourceFile);
            fos = new FileOutputStream(targetFileName);
            FileChannel source = fis.getChannel();
            FileChannel destination = fos.getChannel();
            sourceBytes = source.size();
            writtenBytes = destination.transferFrom(source, 0, sourceBytes);
        } finally {
            Utilities.closeStream(fis);
            Utilities.closeStream(fos);
        }
        if (writtenBytes != sourceBytes) throw new IOException(""Target file's size is not equal to the source file's size!"");
        return true;
    }
","    protected void copyFile(File sourceFile, File targetFile) throws FileNotFoundException, IOException {
        FileChannel inChannel = null;
        FileChannel outChannel = null;
        try {
            inChannel = new FileInputStream(sourceFile).getChannel();
            outChannel = new FileOutputStream(targetFile).getChannel();
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } finally {
            try {
                if (inChannel != null) {
                    inChannel.close();
                }
                if (outChannel != null) {
                    outChannel.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
",1.0
"    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance(""SHA-1"");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error(""NoSuchAlgorithmException while digesting"", e);
        }
        return digest;
    }
","    public boolean actualizarEstadoEliminacion(int idTorneo) {
        int intResult = 0;
        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",0.0
"    public int read(String name) {
        status = STATUS_OK;
        try {
            name = name.trim().toLowerCase();
            if ((name.indexOf(""file:"") >= 0) || (name.indexOf("":/"") > 0)) {
                URL url = new URL(name);
                in = new BufferedInputStream(url.openStream());
            } else {
                in = new BufferedInputStream(new FileInputStream(name));
            }
            status = read(in);
        } catch (IOException e) {
            status = STATUS_OPEN_ERROR;
        }
        return status;
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    private String getDocumentAsString(URL url) throws IOException {
        StringBuffer result = new StringBuffer();
        InputStream in = url.openStream();
        int c;
        while ((c = in.read()) != -1) result.append((char) c);
        return result.toString();
    }
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    public String hash(String plaintext, String salt, int iterations) throws EncryptionException {
        byte[] bytes = null;
        try {
            MessageDigest digest = MessageDigest.getInstance(hashAlgorithm);
            digest.reset();
            digest.update(ESAPI.securityConfiguration().getMasterSalt());
            digest.update(salt.getBytes(encoding));
            digest.update(plaintext.getBytes(encoding));
            bytes = digest.digest();
            for (int i = 0; i < iterations; i++) {
                digest.reset();
                bytes = digest.digest(bytes);
            }
            String encoded = ESAPI.encoder().encodeForBase64(bytes, false);
            return encoded;
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionException(""Internal error"", ""Can't find hash algorithm "" + hashAlgorithm, e);
        } catch (UnsupportedEncodingException ex) {
            throw new EncryptionException(""Internal error"", ""Can't find encoding for "" + encoding, ex);
        }
    }
","    private static JSONObject sendCouchRequest(HttpUriRequest request) {
        try {
            HttpResponse httpResponse = (HttpResponse) new DefaultHttpClient().execute(request);
            HttpEntity entity = httpResponse.getEntity();
            if (entity != null) {
                InputStream instream = entity.getContent();
                String resultString = convertStreamToString(instream);
                instream.close();
                JSONObject jsonResult = new JSONObject(resultString);
                return jsonResult;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    private void writeToDisk(byte[] download) throws IOException {
        File target = new File(TARGET_FILENAME);
        InputStream downloadedFromNetwork = new ByteArrayInputStream(download);
        FileOutputStream fileOnDisk = null;
        try {
            try {
                fileOnDisk = new FileOutputStream(target);
                fileOnDisk.write(""test"".getBytes());
            } catch (Exception e) {
                target = new File(PMS.getConfiguration().getTempFolder(), TARGET_FILENAME);
            } finally {
                fileOnDisk.close();
            }
            fileOnDisk = new FileOutputStream(target);
            int bytesSaved = IOUtils.copy(downloadedFromNetwork, fileOnDisk);
            logger.info(""Wrote "" + bytesSaved + "" bytes to "" + target.getAbsolutePath());
        } finally {
            IOUtils.closeQuietly(downloadedFromNetwork);
            IOUtils.closeQuietly(fileOnDisk);
        }
    }
",0.0
"    public void createTempFile(String resourceName) throws IOException {
        InputStream input = Log4jImportCallableTest.class.getResourceAsStream(resourceName);
        if (input == null) {
            fail(""Couldn't resolve resource '"" + resourceName + ""'!"");
        }
        inputFile = File.createTempFile(""Import"", ""test"");
        inputFile.delete();
        FileOutputStream output = new FileOutputStream(inputFile);
        IOUtils.copyLarge(input, output);
        IOUtilities.closeQuietly(output);
    }
","    private static void initMimeTypes() {
        InputStream is = null;
        extMimeTypes = new Properties();
        try {
            try {
                is = MimeUtil.class.getClassLoader().getResourceAsStream(""eu/medsea/mimeutil/mime-types.properties"");
                if (is != null) {
                    ((Properties) extMimeTypes).load(is);
                }
            } catch (Exception e) {
                log.error(""Error loading internal mime-types.properties"", e);
            } finally {
                is = closeStream(is);
            }
            try {
                File f = new File(System.getProperty(""user.home"") + File.separator + "".mime-types.properties"");
                if (f.exists()) {
                    is = new FileInputStream(f);
                    if (is != null) {
                        log.debug(""Found a custom .mime-types.properties file in the users home directory."");
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully parsed .mime-types.properties from users home directory."");
                    }
                }
            } catch (Exception e) {
                log.error(""Failed to parse .magic.mime file from users home directory. File will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                Enumeration e = MimeUtil.class.getClassLoader().getResources(""mime-types.properties"");
                while (e.hasMoreElements()) {
                    URL url = (URL) e.nextElement();
                    if (log.isDebugEnabled()) {
                        log.debug(""Found custom mime-types.properties file on the classpath ["" + url + ""]."");
                    }
                    Properties props = new Properties();
                    try {
                        is = url.openStream();
                        if (is != null) {
                            props.load(is);
                            if (props.size() > 0) {
                                extMimeTypes.putAll(props);
                                if (log.isDebugEnabled()) {
                                    log.debug(""Successfully loaded custome mime-type.properties file ["" + url + ""] from classpath."");
                                }
                            }
                        }
                    } catch (Exception ex) {
                        log.error(""Failed while loading custom mime-type.properties file ["" + url + ""] from classpath. File will be ignored."");
                    }
                }
            } catch (Exception e) {
                log.error(""Problem while processing mime-types.properties files(s) from classpath. Files will be ignored."", e);
            } finally {
                is = closeStream(is);
            }
            try {
                String fname = System.getProperty(""mime-mappings"");
                if (fname != null && fname.length() != 0) {
                    is = new FileInputStream(fname);
                    if (is != null) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Found a custom mime-mappings property defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                        }
                        Properties props = new Properties();
                        props.load(is);
                        if (props.size() > 0) {
                            extMimeTypes.putAll(props);
                        }
                        log.debug(""Successfully loaded the mime mappings file from property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
                    }
                }
            } catch (Exception ex) {
                log.error(""Failed to load the mime-mappings file defined by the property -Dmime-mappings ["" + System.getProperty(""mime-mappings"") + ""]."");
            } finally {
                is = closeStream(is);
            }
        } finally {
            Iterator it = extMimeTypes.values().iterator();
            while (it.hasNext()) {
                String[] types = ((String) it.next()).split("","");
                for (int i = 0; i < types.length; i++) {
                    MimeUtil.addKnownMimeType(types[i]);
                }
            }
        }
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public static void loadProperties() {
        try {
            URL url = ClassLoader.getSystemResource(""OpenDarkRoom.lang.en.properties"");
            localization.load(url.openStream());
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        try {
            FileInputStream is = new FileInputStream(userDir + ""OpenDarkRoom.properties"");
            preferences.load(is);
        } catch (FileNotFoundException e) {
            log.warn(""Preferences file "" + userDir + ""OpenDarkRoom.properties not found, loading defaults"");
            loadDefaultPreferences();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
",0.0
"    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {
        Properties props = Configuration.getInstance().getProperties();
        String algorithm = props.getProperty(""com.makeabyte.jhosting.server.persistence.security.algorithm"");
        String encryptedData = data;
        boolean encrypt = Boolean.parseBoolean(props.getProperty(""com.makeabyte.jhosting.server.persistence.security.encrypt""));
        if (encrypt) {
            if (algorithm.equalsIgnoreCase(""UTF-16LE"")) return encryptActiveDirectory(data);
            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            md.reset();
            md.update(data.getBytes());
            encryptedData = md.digest().toString();
        }
        return encryptedData;
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            System.out.println(""Error:"" + e);
        }
    }
",1.0
"    public static String getMD5(String str) {
        MessageDigest md5;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
            md5.update(str.getBytes());
            String pwd = new BigInteger(1, md5.digest()).toString(16);
            return pwd;
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return str;
    }
","    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String id = request.getRequestURI().split(""/"")[3];
        if (log.isDebugEnabled()) log.debug(""request: "" + id + "" from: "" + request.getRemoteHost());
        Song song = manager.find(id);
        if (song != null) {
            File file = new File(song.getFile());
            if (file.exists()) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.setContentType(""audio/"" + song.getType());
                response.setContentLength((int) file.length());
                FileInputStream stream = new FileInputStream(file);
                try {
                    IOUtils.copy(stream, response.getOutputStream());
                } finally {
                    IOUtils.closeQuietly(stream);
                }
            } else {
                log.warn(""file not found: "" + file);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            }
        } else {
            log.info(""song not found: "" + id);
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",0.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    private void fillProductResult() {
        this.ProductResult = new int[this.linearDim + 1][this.linearDim + 1];
        for (int j = 1; j < this.linearDim + 1; j++) {
            this.ProductResult[1][j] = j;
            this.ProductResult[j][1] = j;
        }
        int[] doubleSort = new int[2 * this.GradeCount - 1];
        int permuteCounter = 0;
        int doubleKey = 0;
        int j = 2;
        int k = 2;
        int m = 1;
        int n = 1;
        int tempSort = 0;
        for (j = 2; j < this.linearDim + 1; j++) {
            for (k = 2; k < this.linearDim + 1; k++) {
                permuteCounter = 0;
                doubleKey = 0;
                for (m = 1; m < this.GradeCount; m++) {
                    doubleSort[m] = this.ABasis.getBasis(j, m);
                    doubleSort[m + this.GradeCount - 1] = this.ABasis.getBasis(k, m);
                }
                m = 1;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 2; m++) {
                    if (doubleSort[m] == 0) continue;
                    if (doubleSort[m] == doubleSort[m + 1]) {
                        tempSort = doubleSort[m];
                        doubleSort[m] = 0;
                        doubleSort[m + 1] = 0;
                        m += 1;
                        permuteCounter += intSignature[tempSort - 1];
                    }
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    for (n = 1; n < 2 * this.GradeCount - 2; n++) {
                        if (doubleSort[n] > doubleSort[n + 1]) {
                            tempSort = doubleSort[n];
                            doubleSort[n] = doubleSort[n + 1];
                            doubleSort[n + 1] = tempSort;
                            if (!(doubleSort[n] == 0 || doubleSort[n + 1] == 0)) {
                                permuteCounter += 1;
                            }
                        }
                    }
                    n = 1;
                }
                m = 1;
                permuteCounter = permuteCounter % 2;
                for (m = 1; m < 2 * this.GradeCount - 1; m++) {
                    doubleKey += (int) doubleSort[m] * Math.pow(this.GradeCount, 2 * this.GradeCount - 2 - m);
                }
                m = 1;
                this.ProductResult[j][k] = 0;
                for (m = 1; m < this.linearDim + 1; m++) {
                    if (doubleKey == this.ABasis.getBasisKey(m)) {
                        this.ProductResult[j][k] = m * (int) Math.pow(-1.0, permuteCounter);
                        break;
                    }
                }
                m = 1;
            }
            k = 2;
        }
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",0.0
"    public void extractFrinika() throws Exception {
        FileInputStream fis = new FileInputStream(frinikaFile);
        progressBar.setIndeterminate(true);
        ZipInputStream zis = new ZipInputStream(fis);
        ZipEntry ze = zis.getNextEntry();
        while (ze != null) {
            showMessage(""Extracting: "" + ze.getName());
            File file = new File(installDirName + ""/"" + ze.getName());
            if (ze.isDirectory()) file.mkdir(); else {
                FileOutputStream fos = new FileOutputStream(file);
                byte[] b = new byte[BUFSIZE];
                int c;
                while ((c = zis.read(b)) != -1) fos.write(b, 0, c);
                fos.close();
            }
            ze = zis.getNextEntry();
        }
    }
","    public static LinkedList<String> read(URL url) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            data.add(input);
        }
        br.close();
        return data;
    }
",0.0
"    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
","    void testFileObject(JavaFileObject fo) throws Exception {
        URI uri = fo.toUri();
        System.err.println(""uri: "" + uri);
        URLConnection urlconn = uri.toURL().openConnection();
        if (urlconn instanceof JarURLConnection) {
            JarURLConnection jarconn = (JarURLConnection) urlconn;
            File f = new File(jarconn.getJarFile().getName());
            foundJars.add(f.getName());
        }
        try {
            byte[] uriData = read(urlconn.getInputStream());
            byte[] foData = read(fo.openInputStream());
            if (!Arrays.equals(uriData, foData)) {
                if (uriData.length != foData.length) throw new Exception(""data size differs: uri data "" + uriData.length + "" bytes, fo data "" + foData.length + "" bytes"");
                for (int i = 0; i < uriData.length; i++) {
                    if (uriData[i] != foData[i]) throw new Exception(""unexpected data returned at offset "" + i + "", uri data "" + uriData[i] + "", fo data "" + foData[i]);
                }
                throw new AssertionError(""cannot find difference"");
            }
        } finally {
            if (urlconn instanceof JarURLConnection) {
                JarURLConnection jarconn = (JarURLConnection) urlconn;
                jarconn.getJarFile().close();
            }
        }
    }
",0.0
"    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
","    private boolean extract(File archive, File dir, IProgressMonitor monitor) {
        monitor.subTask(""Extract : "" + archive.getName());
        if (!dir.exists()) {
            dir.mkdirs();
        } else {
            File[] files = dir.listFiles();
            for (int j = 0; j < files.length; j++) {
                files[j].delete();
            }
        }
        ZipInputStream zis = null;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                File indexFile = new File(dir, entry.getName());
                FileOutputStream fos = null;
                try {
                    fos = new FileOutputStream(indexFile);
                    IOUtils.copy(zis, fos);
                } finally {
                    IOUtils.closeQuietly(fos);
                }
            }
            return true;
        } catch (Exception ex) {
            M4EclipsePlugin.log(new Status(IStatus.ERROR, M4EclipsePlugin.PLUGIN_ID, -1, ""For index '"" + dir.getName() + ""' Unable to initialize indexes"", ex));
        } finally {
            IOUtils.closeQuietly(zis);
        }
        return false;
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public HttpResponse executeHttpGetRequest(String uri, Map<String, Object> parameters) throws HttpTestClientException {
        HttpGet httpGet = new HttpGet(uri);
        if (parameters != null) {
            httpGet.setParams(createBasicParameters(parameters));
        }
        return executeHttp(httpGet);
    }
",0.0
"    private synchronized File zipTempFile(File tempFile) throws BlogunityException {
        try {
            File zippedFile = new File(BlogunityManager.getSystemConfiguration().getTempDir(), tempFile.getName() + "".zip"");
            ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zippedFile));
            byte[] readBuffer = new byte[2156];
            int bytesIn = 0;
            FileInputStream fis = new FileInputStream(tempFile);
            ZipEntry anEntry = new ZipEntry(tempFile.getName());
            zos.putNextEntry(anEntry);
            while ((bytesIn = fis.read(readBuffer)) != -1) {
                zos.write(readBuffer, 0, bytesIn);
            }
            fis.close();
            zos.close();
            return zippedFile;
        } catch (Exception e) {
            throw new BlogunityException(I18NStatusFactory.create(I18N.ERRORS.FEED_ZIP_FAILED, e));
        }
    }
","    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
",1.0
"    public void copy(String source, String target) throws IOException {
        @Cleanup FileChannel sourceChannel = new FileInputStream(new File(source)).getChannel();
        @Cleanup FileChannel targetChannel = new FileOutputStream(new File(target)).getChannel();
        targetChannel.transferFrom(sourceChannel, 0, sourceChannel.size());
    }
","        private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {
            URLConnection conn = new URL(url).openConnection();
            progress.setMaximum(Math.max(0, conn.getContentLength()));
            String path = MiscUtilities.constructPath(installDirectory, fileName);
            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;
            if (archive_zip) {
                Enumeration entries;
                ZipFile zipFile;
                try {
                    File tempFile = new File(path);
                    zipFile = new ZipFile(tempFile);
                    entries = zipFile.entries();
                    while (entries.hasMoreElements()) {
                        ZipEntry entry = (ZipEntry) entries.nextElement();
                        if (entry.isDirectory()) {
                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());
                            (new File(dpath)).mkdir();
                            continue;
                        }
                        progress.setMaximum((int) entry.getSize());
                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());
                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);
                    }
                    zipFile.close();
                    tempFile.delete();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } else if (archive_gzip) {
                File srce = new File(path);
                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));
                File temp = File.createTempFile(""macro"", ""mgr"");
                progress.setMaximum((int) srce.length());
                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);
                TarArchive tarc = new TarArchive(new FileInputStream(temp));
                tarc.extractContents(new File(installDirectory));
                tarc.closeArchive();
                (new File(path)).delete();
            }
            return path;
        }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private MailBox authenticate() throws Exception {
        String line = ""POP3 Server Ready"" + ((mChallenge == null) ? """" : ("" "" + mChallenge));
        MailBox mailbox = null;
        mStream.writeOk(line);
        while (mailbox == null) {
            line = mStream.readLine();
            if (isQuit(line)) break;
            String body;
            if ((body = isCommand(line, ""USER"")) != null) {
                String user = body;
                MailBox mb = mRepository.getMailBox(user);
                if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else {
                    mStream.writeOk();
                    String pswd, line2 = mStream.readLine();
                    if (isQuit(line2)) break;
                    if ((pswd = isCommand(line2, ""PASS"")) == null) mStream.writeErr(""Expected PASS but got {"" + line2 + ""}""); else {
                        String realPswd = mb.getPassword();
                        if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) {
                            mailbox = mb;
                            mStream.writeOk();
                        } else mStream.writeErr(""Bad password for "" + user);
                    }
                }
            } else if ((body = isCommand(line, ""APOP"")) != null) {
                if (mChallenge == null) mStream.writeErr(""APOP Not Supported""); else {
                    int space = body.indexOf(' ');
                    if (space < 0) mStream.writeErr(""Bad APOP command {"" + line + ""}""); else {
                        String user = body.substring(0, space);
                        String hash = body.substring(space + 1);
                        MailBox mb = mRepository.getMailBox(user);
                        if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else if (mb.getPassword() == null) mStream.writeErr(""User("" + user + "") cannot login using APOP""); else {
                            String secret = mChallenge + mb.getPassword();
                            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
                            md5.update(secret.getBytes(""UTF-8""));
                            byte[] digest = md5.digest();
                            String digestStr = new String(Hex.encodeHex(digest));
                            if (hash.equalsIgnoreCase(digestStr)) {
                                mailbox = mb;
                                mStream.writeOk();
                            } else mStream.writeErr(""Bad password for "" + user);
                        }
                    }
                }
            } else mStream.writeErr(""Authentication required (got '"" + line + ""')"");
        }
        return mailbox;
    }
",0.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    private List<String> readDescriptor(URL url) {
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new InputStreamReader(url.openStream()));
            List<String> lines = new ArrayList<String>();
            String line = reader.readLine();
            while (line != null) {
                line = line.trim();
                if (line.length() > 0 && !line.startsWith(""#"")) lines.add(line);
                line = reader.readLine();
            }
            return lines;
        } catch (IOException e) {
            throw new ExtensionException(""Failed to read extension descriptor '%s'"", e).withArgs(url);
        } finally {
            IoUtil.closeQuietly(reader);
        }
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",1.0
"    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
","    private void copy(File parent) {
        System.out.println(""parent---"" + parent.getAbsolutePath());
        if (parent.isDirectory() && !"".svn"".equals(parent.getName())) {
            File cases = new File(parent, ""cases"");
            if (cases.exists()) {
                File answers = new File(parent, ""answers"");
                if (!answers.exists()) {
                    answers.mkdir();
                    File answers_linux = new File(parent, ""answers_linux"");
                    for (File file : answers_linux.listFiles()) {
                        if (file.isDirectory()) {
                            continue;
                        }
                        File target = new File(answers, file.getName());
                        try {
                            IOUtils.copy(new FileInputStream(file), new FileOutputStream(target));
                        } catch (Throwable t) {
                            t.printStackTrace();
                        }
                    }
                }
            } else {
                for (File son : parent.listFiles()) {
                    System.out.println(""parent---"" + son.getAbsolutePath());
                    copySon(son);
                }
            }
        }
    }
",0.0
"    @Override
    public void excluir(QuestaoDiscursiva q) throws Exception {
        PreparedStatement stmt = null;
        String sql = ""DELETE FROM questao WHERE id_questao=?"";
        try {
            stmt = conexao.prepareStatement(sql);
            stmt.setInt(1, q.getIdQuestao());
            stmt.executeUpdate();
            conexao.commit();
        } catch (SQLException e) {
            conexao.rollback();
            throw e;
        }
    }
","    private Bitmap getBitmap(String imageUrl) {
        URL url;
        InputStream input = null;
        try {
            url = new URL(address + imageUrl);
            input = url.openStream();
            return BitmapFactory.decodeStream(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
            return null;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",0.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    public static void ToHTML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, String lang, PrintWriter sortie) throws Exception {
        String level = ""info."";
        if (ConnectorServlet.debug) level = ""debug."";
        Log log = LogFactory.getLog(level + ""fr.brgm.exows.gml2gsml.Gml2Gsml"");
        String tagFeature = ""FIELDS"";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate(""/fr/brgm/exows/gml2gsml/templates/"" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put(""feature"", feature);
                context.put(""lang"", lang);
                context.put(""vocabularies"", new Vocabularies());
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = ""GEOSCIML : "" + nbFeatures + "" features handled - time : "" + (dFin.getTime() - dDebut.getTime()) / 1000 + "" ["" + dDebut + "" // "" + dFin + ""]"";
        log.trace(output);
    }
",0.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {
        if (!src.isFile() || !src.exists()) {
            throw new IllegalArgumentException(""Source file '"" + src.getAbsolutePath() + ""' not found!"");
        }
        if (dst.exists()) {
            if (dst.isDirectory()) {
                dst = new File(dst, src.getName());
            } else if (dst.isFile()) {
                if (!overwrite) {
                    throw new IllegalArgumentException(""Destination file '"" + dst.getAbsolutePath() + ""' already exists!"");
                }
            } else {
                throw new IllegalArgumentException(""Invalid destination object '"" + dst.getAbsolutePath() + ""'!"");
            }
        }
        final File dstParent = dst.getParentFile();
        if (!dstParent.exists()) {
            if (!dstParent.mkdirs()) {
                throw new IOException(""Failed to create directory "" + dstParent.getAbsolutePath());
            }
        }
        long fileSize = src.length();
        if (fileSize > 20971520l) {
            final FileInputStream in = new FileInputStream(src);
            final FileOutputStream out = new FileOutputStream(dst);
            try {
                int doneCnt = -1;
                final int bufSize = 32768;
                final byte buf[] = new byte[bufSize];
                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {
                    if (doneCnt == 0) {
                        Thread.yield();
                    } else {
                        out.write(buf, 0, doneCnt);
                    }
                }
                out.flush();
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
            }
        } else {
            final FileInputStream fis = new FileInputStream(src);
            final FileOutputStream fos = new FileOutputStream(dst);
            final FileChannel in = fis.getChannel(), out = fos.getChannel();
            try {
                long offs = 0, doneCnt = 0;
                final long copyCnt = Math.min(65536, fileSize);
                do {
                    doneCnt = in.transferTo(offs, copyCnt, out);
                    offs += doneCnt;
                    fileSize -= doneCnt;
                } while (fileSize > 0);
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
                try {
                    fis.close();
                } catch (final IOException e) {
                }
                try {
                    fos.close();
                } catch (final IOException e) {
                }
            }
        }
    }
",1.0
"    public GGUser findByUsername(String userName) throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.people.findByUsername""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        qparams.add(new BasicNameValuePair(""username"", userName));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGUser user = JAXB.unmarshal(content, GGUser.class);
        return user;
    }
","    public static String getMyGlobalIP() {
        try {
            URL url = new URL(IPSERVER);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String ip = in.readLine();
            in.close();
            con.disconnect();
            return ip;
        } catch (Exception e) {
            return null;
        }
    }
",0.0
"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient client = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        method.setEntity(entity);
        HttpResponse response = client.execute(method);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
","    public static String gerarDigest(String mensagem) {
        String mensagemCriptografada = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA"");
            System.out.println(""Mensagem original: "" + mensagem);
            md.update(mensagem.getBytes());
            byte[] digest = md.digest();
            mensagemCriptografada = converterBytesEmHexa(digest);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return mensagemCriptografada;
    }
",0.0
"    public static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
",0.0
"    public static String encodePassword(String password) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""SHA"");
            md.update(password.getBytes());
            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(""x-base64""));
            return encodedPassword;
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
    }
","    public RepositoryHandler(String[] args) {
        if (args.length < 2) return;
        System.out.println(""param 1: "" + args[0] + ""\r\n"");
        System.out.println(""param 2: "" + args[1] + ""\r\n"");
        try {
            URL url = new URL(args[0]);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setFollowRedirects(true);
            connection.connect();
            BufferedInputStream in = new BufferedInputStream(connection.getInputStream());
            FileOutputStream out = new FileOutputStream(args[1]);
            int c = -1;
            while ((c = in.read()) >= 0) {
                out.write(c);
            }
            out.close();
            in.close();
        } catch (Exception e) {
            System.err.println(""Error: "" + e + ""\r\n"");
        }
    }
",0.0
"    public static File downloadFromUrl(String urlString, String ext) throws Exception {
        URL url = new URL(urlString);
        InputStream is = url.openStream();
        byte bytes[] = new byte[20480];
        File result = File.createTempFile(""temp_"", ext);
        FileOutputStream fos = new FileOutputStream(result);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int nbread = 0;
        int loops = 0;
        while ((nbread = is.read(bytes)) > -1) {
            bos.write(bytes, 0, nbread);
            loops++;
            System.out.println(loops);
        }
        bos.close();
        return result;
    }
","    public static void main(String args[]) {
        int i, j, l;
        short NUMNUMBERS = 100;
        short numbers[] = new short[NUMNUMBERS];
        printIntro();
        int time = (int) System.currentTimeMillis();
        for (i = 0; i < NUMNUMBERS; i++) {
            numbers[i] = (short) (NUMNUMBERS - 1 - i);
        }
        for (i = 0; i < NUMNUMBERS; i++) {
            for (j = 0; j < NUMNUMBERS - i - 1; j++) {
                if (numbers[j] > numbers[j + 1]) {
                    short temp = numbers[j];
                    numbers[j] = numbers[j + 1];
                    numbers[j + 1] = temp;
                }
            }
            if (WANT_PROGRESS) {
                printProgress();
            }
        }
        time = (int) System.currentTimeMillis() - time;
        System.out.print(time);
        System.out.print(""End\n"");
    }
",0.0
"    public void testUnavailable() throws Exception {
        URL url = null;
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/info?query=foo"");
        assertTrue(IO.toString(url.openStream()).startsWith(""<html>""));
        assertTrue(context.getServletHandler().isAvailable());
        url = new URL(""http://127.0.0.1:"" + connector.getLocalPort() + ""/test/dump/ex2/2"");
        try {
            IO.toString(url.openStream());
        } catch (IOException e) {
        }
        assertFalse(context.getServletHandler().isAvailable());
        Thread.sleep(4000);
        assertTrue(context.getServletHandler().isAvailable());
    }
","    public static void main(String[] args) {
        try {
            String data = URLEncoder.encode(""page"", ""UTF-8"") + ""="" + URLEncoder.encode(""admin"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""nick"", ""UTF-8"") + ""="" + URLEncoder.encode(""k"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""key"", ""UTF-8"") + ""="" + URLEncoder.encode(""asdf"", ""UTF-8"");
            data += ""&"" + URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"");
            URL url = new URL(""http://localhost:80/test/index.php"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(data);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            wr.close();
            rd.close();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""classpath://"")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    private static String hashPass(String p) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(p.getBytes(""iso-8859-1""), 0, p.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = null;
        BufferedInputStream bis = null;
        AudioFileFormat fileFormat = null;
        urlStream = url.openStream();
        AudioInputStream result = null;
        try {
            bis = new BufferedInputStream(urlStream, bisBufferSize);
            result = getAudioInputStream((InputStream) bis);
        } finally {
            if (result == null) {
                urlStream.close();
            }
        }
        return result;
    }
",0.0
"    private void copy(File from, File to) throws FileNotFoundException, IOException {
        FileReader in;
        in = new FileReader(from);
        FileWriter out = new FileWriter(to);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    protected void copyFile(File from, File to) throws IOException {
        new File(intSfPath).delete();
        if (to.exists() && (from.length() == to.length()) && (from.lastModified() == to.lastModified())) return;
        if (to.exists()) to.delete();
        to.createNewFile();
        FileChannel inFC = null;
        FileChannel outFC = null;
        try {
            inFC = new FileInputStream(from).getChannel();
            outFC = new FileOutputStream(to).getChannel();
            long cnt = outFC.transferFrom(inFC, 0, inFC.size());
            if (cnt < inFC.size()) throw new IOException(""File copy failed"");
        } finally {
            if (inFC != null) {
                try {
                    inFC.close();
                } catch (IOException ex) {
                }
            }
            if (outFC != null) {
                try {
                    outFC.close();
                } catch (IOException ex) {
                }
            }
            to.setLastModified(from.lastModified());
        }
    }
",1.0
"    private String getMD5Hash(String password) {
        String plainText = password;
        MessageDigest mdAlgorithm;
        StringBuffer hexString = new StringBuffer();
        try {
            mdAlgorithm = MessageDigest.getInstance(""MD5"");
            mdAlgorithm.update(plainText.getBytes());
            byte[] digest = mdAlgorithm.digest();
            for (int i = 0; i < digest.length; i++) {
                plainText = Integer.toHexString(0xFF & digest[i]);
                if (plainText.length() < 2) {
                    plainText = ""0"" + plainText;
                }
                hexString.append(plainText);
            }
        } catch (NoSuchAlgorithmException ex) {
            ex.printStackTrace();
        }
        return hexString.toString();
    }
","    public static String md5(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            return ForumUtil.bufferToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
",1.0
"    private void loadDBConfig(final String adapter) throws IOException {
        final URL url = getClass().getClassLoader().getResource(""adapter/"" + adapter + "".properties"");
        _props = new Properties();
        _props.load(url.openStream());
        _init = true;
    }
","    @PostConstruct
    public void init() {
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() start ++++++++"");
        try {
            tracSectionAll = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionA = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionB = new ArrayList<TRACCriteriaCheckListItem>();
            List<TRACCriteriaCheckListItem> tracSectionC = new ArrayList<TRACCriteriaCheckListItem>();
            URL url = TRACAuditChecklistManagedBean.class.getResource(tracCriteriaPropertiesFileName);
            tracCriteriaCheckList = new LinkedProperties();
            tracCriteriaCheckList.load(url.openStream());
            Set<String> tmpKeys = tracCriteriaCheckList.stringPropertyNames();
            List<String> sortWrkList = new ArrayList<String>();
            sortWrkList.addAll(tmpKeys);
            sortList(sortWrkList);
            for (String key : sortWrkList) {
                String aspectCode = key.substring(aspectCodeOffsetValue);
                logger.info(""aspectCode="" + aspectCode);
                if (aspectCode.startsWith(""A"")) {
                    if (aspectCode.equals(""A"")) {
                        sectionAcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""B"")) {
                    if (aspectCode.equals(""B"")) {
                        sectionBcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else if (aspectCode.startsWith(""C"")) {
                    if (aspectCode.equals(""C"")) {
                        sectionCcaption = tracCriteriaCheckList.getProperty(key);
                    } else {
                        if (aspectCode.length() == 4) {
                            tracSectionAll.add(new TRACCriteriaCheckListItem(aspectCode, tracCriteriaCheckList.getProperty(key), """", """", """"));
                        }
                    }
                } else {
                    logger.warning(""offset value is wrong: 16th character must be A or B or C"");
                }
            }
        } catch (FileNotFoundException ex) {
            logger.log(Level.WARNING, ""specified properties file was not found"", ex);
        } catch (IOException ex) {
            logger.log(Level.WARNING, ""IO error occurred"", ex);
        } finally {
        }
        logger.info(""+++++ TRACAuditChecklistWizardMB: init() end   ++++++++"");
    }
",0.0
"    public static final String md5(String name) {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e.getMessage());
        }
        md.reset();
        md.update(name.getBytes());
        byte b[] = md.digest();
        String encoded = """";
        for (int i = 0; i < b.length; i++) {
            int b2 = (int) b[i] % 16;
            if (b2 < 0) b2 += 16;
            int b1 = (int) b[i];
            if (b1 < 0) b1 += 16 * 16;
            b1 -= b2;
            b1 /= 16;
            if (b1 <= 9) encoded += (char) ((int) '0' + (int) b1); else encoded += (char) ((int) 'a' + (int) b1 - (int) 10);
            if (b2 <= 9) encoded += (char) ((int) '0' + (int) b2); else encoded += (char) ((int) 'a' + (int) b2 - (int) 10);
        }
        return encoded;
    }
","    public static void copy(String from_name, String to_name, boolean overwriteOk) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
            if (!overwriteOk) {
                System.out.print(""Overwrite existing file "" + to_name + ""? (Y/N): "");
                System.out.flush();
                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                String response = in.readLine();
                if (!response.equals(""Y"") && !response.equals(""y"")) abort(""FileCopy: existing file was not overwritten."");
            }
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",0.0
"    private String encryptPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest encript = MessageDigest.getInstance(""MD5"");
        encript.update(password.getBytes());
        byte[] b = encript.digest();
        int size = b.length;
        StringBuffer h = new StringBuffer(size);
        for (int i = 0; i < size; i++) {
            h.append(b[i]);
        }
        return h.toString();
    }
","    public static final boolean copyFileNio(File src, File dst) throws IOException {
        FileChannel srcChannel = null, dstChannel = null;
        try {
            srcChannel = new FileInputStream(src).getChannel();
            dstChannel = new FileOutputStream(dst).getChannel();
            {
                int safe_max = (64 * 1024 * 1024) / 4;
                long size = srcChannel.size();
                long position = 0;
                while (position < size) {
                    position += srcChannel.transferTo(position, safe_max, dstChannel);
                }
            }
            srcChannel.close();
            srcChannel = null;
            dstChannel.close();
            dstChannel = null;
            return true;
        } finally {
            try {
                if (srcChannel != null) srcChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
            try {
                if (dstChannel != null) dstChannel.close();
            } catch (IOException e) {
                Debug.debug(e);
            }
        }
    }
",0.0
"    public String call() throws Exception {
        InputStream stream = url.openStream();
        StringBuffer sb = new StringBuffer();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line);
        }
        return sb.toString();
    }
","    public static void main(String[] args) {
        log.info(""Passage paramètres "" + args);
        try {
            URL url = new URL(""http://localhost:8082/HomeAutomateCore/ListenerServlet/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            out.write(""username = JavaWorld \r \n "");
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String reponse = """";
            while ((reponse = in.readLine()) != null) {
                System.out.println(reponse);
            }
            System.out.println(""Fin"");
            in.close();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
            System.out.println(""Fin1 "" + ex.getMessage() + "" "" + ex.getCause());
        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println(""Fin2 "" + ex.getMessage() + "" "" + ex.getCause());
        }
    }
",0.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    private <T> T conectar(String className, String methodName, Class<?>[] parameterTypes, Object[] args, T t) throws Exception {
        try {
            HttpURLConnection conexao = (HttpURLConnection) url.openConnection();
            conexao.setRequestMethod(""POST"");
            conexao.setDoOutput(true);
            conexao.setRequestProperty(""className"", className);
            conexao.setRequestProperty(""methodName"", methodName);
            ServiceObject serviceObject = new ServiceObject();
            serviceObject.write(new Object[] { parameterTypes, args }, conexao.getOutputStream());
            if (conexao.getResponseCode() != 200) {
                throw new ServiceException(""Falha grave no servidor com url: "" + url);
            }
            String typeResponse = conexao.getHeaderField(""Service-Type-Response"");
            Object object = serviceObject.read(conexao.getInputStream());
            return returns.get(typeResponse).tratarReturn(object, t);
        } catch (IOException e) {
            throw new ServiceException(""Falha ao conectar no servidor com url: "" + url, e);
        } catch (ClassNotFoundException e) {
            throw new ServiceException(""Falha objeto espera nao e compatavel. Resposta do servidor com url: "" + url, e);
        }
    }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    public void extract(CabFolder cabfolder, File outputFolder) throws IOException {
        InputStream in = null;
        OutputStream out = null;
        File file;
        byte[] buffer = new byte[2048];
        int read, remain, maxread = buffer.length;
        in = new CabFileInputStream(cabfolder);
        CabEntry[] cabentries = this.getEntries();
        for (int i = 0; i < cabentries.length; i++) {
            if (cabentries[i].getCabFolder() == cabfolder) {
                file = new File(outputFolder, cabentries[i].getName().replace('\\', '/'));
                FileUtils.createParents(file);
                out = new FileOutputStream(file);
                remain = cabentries[i].getInflatedSize();
                while (remain != 0 && (read = in.read(buffer, 0, maxread)) != -1) {
                    out.write(buffer, 0, read);
                    remain -= read;
                    if (buffer.length > remain) maxread = remain; else maxread = buffer.length;
                }
                in.close();
                out.close();
            }
        }
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String readFromURL(String sURL) {
        logger.info(""com.rooster.utils.URLReader.readFromURL - Entry"");
        String sWebPage = """";
        try {
            URL url = new URL(sURL);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine = """";
            while ((inputLine = in.readLine()) != null) {
                sWebPage += inputLine;
            }
            in.close();
        } catch (Exception e) {
            logger.debug(""com.rooster.utils.URLReader.readFromURL - Error"" + e);
        }
        logger.info(""com.rooster.utils.URLReader.readFromURL - Exit"");
        return sWebPage;
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    public void unsplit(String newFilename, File[] files) throws Exception {
        FileOutputStream stream = new FileOutputStream(new File(newFilename));
        for (int i = 0; i < files.length; i++) {
            FileInputStream fin = new FileInputStream(files[i].getAbsolutePath());
            DataInputStream din = new DataInputStream(fin);
            while (din.available() > 0) {
                stream.write(din.read());
            }
            din.close();
            fin.close();
        }
        stream.close();
    }
",0.0
"    public static String MD5(String plainTxt) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainTxt.getBytes());
            byte[] b = md.digest();
            int i = 0;
            StringBuffer buffer = new StringBuffer();
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i += 256;
                }
                if (i < 16) {
                    buffer.append(""0"");
                }
                buffer.append(Integer.toHexString(i));
            }
            return buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return ""ERROR"";
        }
    }
","    @Override
    @RemoteMethod
    public boolean decrypt(int idAnexo) {
        try {
            Anexo anexo = anexoService.selectById(idAnexo);
            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);
            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);
            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());
            IOUtils.copy(cis, fos);
            cis.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");
        }
        return response;
    }
",0.0
"    private Document parseResponse(String url) throws IOException, MalformedURLException, ParserConfigurationException, SAXException {
        DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
        InputStream stream = null;
        try {
            stream = new URL(url).openStream();
            return db.parse(stream);
        } finally {
            if (stream != null) stream.close();
        }
    }
","    public static void bubbleSort(int[] polje) {
        boolean swapped;
        int temp;
        int n = polje.length;
        do {
            swapped = false;
            n--;
            for (int i = 0; i < n - 1; i++) {
                if (polje[i] > polje[i + 1]) {
                    temp = polje[i];
                    polje[i] = polje[i + 1];
                    polje[i + 1] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }
",0.0
"    private static boolean execute(String query) throws SQLException {
        boolean success = true;
        try {
            PreparedStatement stm = con.prepareStatement(query);
            stm.executeUpdate();
            stm.close();
            con.commit();
        } catch (SQLException e) {
            try {
                con.rollback();
            } catch (Exception rbex) {
                rbex.printStackTrace();
            }
            success = false;
            throw e;
        }
        return success;
    }
","    public TemplateLibrary loadTemplateLibrary(GadgetContext context, Uri uri) throws GadgetException {
        HttpRequest request = new HttpRequest(uri);
        request.setCacheTtl(300);
        HttpResponse response = pipeline.execute(request);
        if (response.getHttpStatusCode() != HttpResponse.SC_OK) {
            throw new GadgetException(GadgetException.Code.FAILED_TO_RETRIEVE_CONTENT, ""Unable to retrieve template library xml. HTTP error "" + response.getHttpStatusCode());
        }
        String content = response.getResponseAsString();
        try {
            String key = null;
            Element element = null;
            if (!context.getIgnoreCache()) {
                key = HashUtil.rawChecksum(content.getBytes());
                element = parsedXmlCache.getElement(key);
            }
            if (element == null) {
                element = XmlUtil.parse(content);
                if (key != null) {
                    parsedXmlCache.addElement(key, element);
                }
            }
            return new XmlTemplateLibrary(uri, element, content);
        } catch (XmlException e) {
            throw new GadgetException(GadgetException.Code.MALFORMED_XML_DOCUMENT, e);
        }
    }
",0.0
"    public static Dictionary parseVertices(URL url, Graph g) throws FileNotFoundException, FlightException {
        InputStream is = null;
        try {
            is = url.openStream();
        } catch (IOException e) {
            throw new FlightException(""IO Error: cannot read from URL "" + url.toString());
        }
        Reader reader = new BufferedReader(new InputStreamReader(is));
        return Parser.parseVertices(reader, g);
    }
","    public static String generateMD5(final String data) {
        final StringBuilder hash = new StringBuilder(64);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""MD5"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
",0.0
"    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
","    public File uploadImage(InputStream inputStream, String fileName, String sessionId) {
        File file = new File(PathConfig.getInstance().sessionFolder(sessionId) + File.separator + fileName);
        FileOutputStream fileOutputStream = null;
        try {
            FileUtils.touch(file);
            fileOutputStream = new FileOutputStream(file);
            IOUtils.copy(inputStream, fileOutputStream);
        } catch (IOException e) {
            logger.error(""Save uploaded image to file occur IOException."", e);
            throw new FileOperationException(""Save uploaded image to file occur IOException."", e);
        } finally {
            try {
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
            } catch (IOException e) {
                logger.error(""Close FileOutputStream Occur IOException while save a uploaded image."", e);
            }
        }
        return file;
    }
",0.0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    private static void fileUpload() throws Exception {
        DefaultHttpClient httpclient = new DefaultHttpClient();
        HttpPost httppost = new HttpPost(postURL);
        file = new File(""h:/Sakura haruno.jpg"");
        MultipartEntity mpEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
        ContentBody cbFile = new FileBody(file);
        mpEntity.addPart(""Filename"", new StringBody(file.getName()));
        mpEntity.addPart(""Filedata"", cbFile);
        httppost.setEntity(mpEntity);
        System.out.println(""executing request "" + httppost.getRequestLine());
        System.out.println(""Now uploading your file into ugotfile.com"");
        HttpResponse response = httpclient.execute(httppost);
        System.out.println(response.getStatusLine());
        if (response != null) {
            uploadresponse = EntityUtils.toString(response.getEntity());
        }
        System.out.println(""Upload Response : "" + uploadresponse);
        downloadlink = parseResponse(uploadresponse, ""[\"""", ""\"""");
        downloadlink = downloadlink.replaceAll(""\\\\/"", ""/"");
        deletelink = parseResponse(uploadresponse, ""\"",\"""", ""\"""");
        deletelink = deletelink.replaceAll(""\\\\/"", ""/"");
        System.out.println(""Download Link : "" + downloadlink);
        System.out.println(""Delete Link : "" + deletelink);
    }
",0.0
"    public static void copyFileNIO(String src, String dst) {
        try {
            FileChannel srcChannel = new FileInputStream(src).getChannel();
            FileChannel dstChannel = new FileOutputStream(dst).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
","    public static void test() {
        addToCounter(""computeracces.html"");
        try {
            JFrame jfr = new JFrame(""Webconnect"");
            URL url = new URL(""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1"");
            JEditorPane jep = new JEditorPane();
            jfr.add(jep);
            String urlstr = ""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?url=http%3a%2f%2flyricscatcher.sourceforge.net%2fpiwik.php&action_name=&idsite=1&res=1440x900&h="";
            Calendar cal = Calendar.getInstance();
            urlstr += cal.get(Calendar.HOUR_OF_DAY);
            urlstr += ""&m="";
            urlstr += cal.get(Calendar.MINUTE);
            urlstr += ""&s="";
            urlstr += cal.get(Calendar.SECOND);
            urlstr += ""&fla=1&dir=1&qt=1&realp=1&pdf=1&wma=1&java=1&cookie=0&title=JAVAACCESS&urlref=http%3a%2f%2flyricscatcher.sourceforge.net%2fcomputeraccespage.html"";
            System.out.println(urlstr);
            URL nurl = new URL(urlstr);
            InputStream ist = nurl.openStream();
            InputStreamReader isr = new InputStreamReader(ist);
            BufferedReader in = new BufferedReader(isr);
            String line = """";
            String inputline = """";
            while ((inputline = in.readLine()) != null) {
                line += inputline + ""\n"";
            }
            System.out.println(""finished: length of correct url="" + line.length());
            URL myurl = new URL(urlstr);
            URLConnection urlc = myurl.openConnection();
            urlc.getContent();
            System.out.println(urlc.getLastModified());
            System.out.println(urlc.getPermission());
            System.out.println(urlc.getRequestProperties());
            System.out.println(urlc.getContentEncoding());
            System.out.println(urlc.getContentLength());
            urlc.connect();
            InputStream dist = myurl.openStream();
            while (ist.available() >= 0) {
                ist.read();
            }
            ist.close();
            Document d = jep.getEditorKitForContentType(""html"").createDefaultDocument();
            d.getDefaultRootElement();
            jep.setContentType(""text/html"");
            jep.setText(""<html><img src=\""http://apps.sourceforge.net/piwik/lyricscatcher/piwik.php?idsite=1\"" alt=\""there's a problem...\""/><img src=\"""" + urlstr + ""\"" alt=\""Another problem\"" style=\""border:0\"" /></html>"");
            jfr.setLocationByPlatform(true);
            jfr.setSize(100, 100);
            jfr.show();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    private static String encryptMD5(String password, Long digestSeed) {
        try {
            MessageDigest digest = MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(password.getBytes(""UTF-8""));
            digest.update(digestSeed.toString().getBytes(""UTF-8""));
            byte[] messageDigest = digest.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xff & messageDigest[i]));
            }
            return hexString.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        } catch (NullPointerException e) {
            return new StringBuffer().toString();
        }
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    public static void copy(String source, String dest) throws java.io.IOException {
        java.io.BufferedInputStream in = null;
        java.io.BufferedOutputStream out = null;
        try {
            in = new java.io.BufferedInputStream(new java.io.FileInputStream(source), 1000);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(dest), 1000);
            while (in.available() != 0) {
                out.write(in.read());
            }
        } catch (java.io.IOException e) {
            throw e;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
                if (out != null) {
                    out.close();
                }
            } catch (java.io.IOException E) {
            }
        }
    }
",0.0
"    public static void bubbleSort(String[] a) {
        Collator myCollator = Collator.getInstance();
        boolean switched = true;
        for (int pass = 0; pass < a.length - 1 && switched; pass++) {
            switched = false;
            for (int i = 0; i < a.length - pass - 1; i++) {
                if (myCollator.compare(a[i], a[i + 1]) > 0) {
                    switched = true;
                    String temp = a[i];
                    a[i] = a[i + 1];
                    a[i + 1] = temp;
                }
            }
        }
    }
","    public void run() {
        String s, s2;
        s = """";
        s2 = """";
        try {
            URL url = new URL(""http://www.m-w.com/dictionary/"" + Word);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String str;
            while (((str = in.readLine()) != null) && (!stopped)) {
                s = s + str;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        Pattern pattern = Pattern.compile(""popWin\\('/cgi-bin/(.+?)'"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher matcher = pattern.matcher(s);
        if ((!stopped) && (matcher.find())) {
            String newurl = ""http://m-w.com/cgi-bin/"" + matcher.group(1);
            try {
                URL url2 = new URL(newurl);
                BufferedReader in2 = new BufferedReader(new InputStreamReader(url2.openStream()));
                String str;
                while (((str = in2.readLine()) != null) && (!stopped)) {
                    s2 = s2 + str;
                }
                in2.close();
            } catch (MalformedURLException e) {
            } catch (IOException e) {
            }
            Pattern pattern2 = Pattern.compile(""<A HREF=\""http://(.+?)\"">Click here to listen with your default audio player"", Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
            Matcher matcher2 = pattern2.matcher(s2);
            if ((!stopped) && (matcher2.find())) {
                if (getWave(""http://"" + matcher2.group(1))) label.setEnabled(true);
            }
        }
        button.setEnabled(true);
    }
",0.0
"    public String getHash(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        final MessageDigest digest = MessageDigest.getInstance(""MD5"");
        byte[] md5hash;
        digest.update(password.getBytes(""utf-8""), 0, password.length());
        md5hash = digest.digest();
        return convertToHex(md5hash);
    }
","    public void startStreaming(final String mediaUrl) throws IOException {
        final String TAG = ""startStreaming"";
        int bitrate = 56;
        sendMessage(PlayListTab.CHECKRIORITY);
        sendMessage(PlayListTab.RAISEPRIORITY);
        sendMessage(PlayListTab.START);
        try {
            url = new URL(mediaUrl);
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setReadTimeout(1000 * 20);
            urlConn.setConnectTimeout(1000 * 5);
            String ctype = urlConn.getContentType();
            if (ctype == null) {
                ctype = """";
            } else {
                ctype = ctype.toLowerCase();
            }
            Log.d(TAG, ""Content Type: "" + ctype);
            if (ctype.contains(AUDIO_MPEG) || ctype.equals("""")) {
                String temp = urlConn.getHeaderField(BITERATE_HEADER);
                Log.d(TAG, ""Bitrate: "" + temp);
                if (temp != null) {
                    bitrate = new Integer(temp).intValue();
                }
            } else {
                Log.e(TAG, ""Does not look like we can play this audio type: "" + ctype);
                Log.e(TAG, ""Or we could not connect to audio"");
                sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                stop();
                return;
            }
        } catch (IOException ioe) {
            Log.e(TAG, ""Could not connect to "" + mediaUrl);
            sendMessage(PlayListTab.TROUBLEWITHAUDIO);
            stop();
            return;
        }
        if (regularStream) {
            Log.d(TAG, ""Setup regular stream"");
            Runnable r = new Runnable() {

                public void run() {
                    try {
                        downloadAudio(mediaUrl);
                    } catch (IOException e) {
                        Log.e(TAG, ""Unable to initialize the MediaPlayer for Audio Url = "" + mediaUrl, e);
                        sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                        stop();
                        return;
                    }
                }
            };
            Thread t = new Thread(r);
            t.start();
        } else {
            Log.d(TAG, ""Setup incremental stream"");
            INTIAL_KB_BUFFER = bitrate * SECONDS / BIT;
            Runnable r = new Runnable() {

                public void run() {
                    try {
                        downloadAudioIncrement(mediaUrl);
                    } catch (IOException e) {
                        Log.e(TAG, ""Unable to initialize the MediaPlayer for Audio Url = "" + mediaUrl, e);
                        sendMessage(PlayListTab.TROUBLEWITHAUDIO);
                        stop();
                        return;
                    }
                }
            };
            Thread t = new Thread(r);
            t.start();
        }
    }
",0.0
"    public static void copyFile(File source, File destination) {
        if (!source.exists()) {
            return;
        }
        if ((destination.getParentFile() != null) && (!destination.getParentFile().exists())) {
            destination.getParentFile().mkdirs();
        }
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(destination).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }
","    public ArrayList<String> getData() {
        ArrayList<String> data = new ArrayList<String>();
        String line = null;
        URL address = null;
        try {
            address = new URL(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        URLConnection urlconn = null;
        if (useProxy) {
            SocketAddress addr = new InetSocketAddress(ip, Integer.parseInt(port));
            java.net.Proxy httpProxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, addr);
            try {
                urlconn = address.openConnection(httpProxy);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                urlconn = address.openConnection();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        try {
            urlconn.connect();
        } catch (IOException e) {
            return null;
        }
        BufferedReader buffreader = null;
        try {
            buffreader = new BufferedReader(new InputStreamReader(urlconn.getInputStream()));
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            line = buffreader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (line != null) {
            data.add(line);
            try {
                line = buffreader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
",0.0
"    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
","    private String executeUpload(String urlStr, String specification, String filename, String sessionHandle) {
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(urlStr);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""YAWLSessionHandle"", sessionHandle);
            connection.setRequestProperty(""filename"", filename);
            connection.setRequestProperty(""Content-Type"", ""text/xml"");
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(specification);
            out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                result.append(inputLine);
            }
            in.close();
            out.close();
            connection.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            InterfaceBWebsideController.logContactError(e, _backEndURIStr);
        }
        String msg = result.toString();
        return stripOuterElement(msg);
    }
",0.0
"    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
","        public void run() {
            Shell shell = new Shell(display);
            shell.setLayout(new GridLayout(1, false));
            ERDiagramEditPartFactory editPartFactory = new ERDiagramEditPartFactory();
            viewer = new ScrollingGraphicalViewer();
            viewer.setControl(new FigureCanvas(shell));
            ScalableFreeformRootEditPart rootEditPart = new PagableFreeformRootEditPart(diagram);
            viewer.setRootEditPart(rootEditPart);
            viewer.setEditPartFactory(editPartFactory);
            viewer.setContents(diagram);
        }
",0.0
"    public boolean testConnection(FTPSite site) throws IOException {
        FTPClient testclient = new FTPClient();
        testclient.connect(site.getHost(), site.getPort());
        boolean check = testclient.login(site.getUser(), site.getPassword());
        testclient.disconnect();
        return check;
    }
","    public boolean execute_check() {
        FTPClient ftp = new FTPClient();
        File filename = null;
        FileChannel channel;
        InputStream is;
        OutputStream os;
        int reply;
        if (super.verbose > 0) verbose = true;
        ftp.setDefaultPort(port);
        ftp.setDefaultTimeout(timeout);
        if (verbose) {
            System.out.println(""Using FTP Server: "" + hostname);
            System.out.println(""Using FTP Port: "" + port);
            System.out.println(""Using Timeout of: "" + timeout);
        }
        if (passive) {
            ftp.enterLocalPassiveMode();
            if (verbose) System.out.println(""Using Passive Mode"");
        }
        try {
            filename = new File(file);
            channel = new RandomAccessFile(filename, ""rw"").getChannel();
            if (verbose) System.out.println(""Attempting FTP Connection to "" + hostname);
            ftp.connect(hostname);
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                if (verbose) System.out.println(""FTP Connection to "" + hostname + "" failed"");
                check_state = common_h.STATE_CRITICAL;
                check_message = ftp.getReplyString();
                filename.delete();
                ftp.disconnect();
                return true;
            }
            if (username != null && password != null) {
                if (verbose) System.out.println(""Attempting to log in into FTP Server "" + hostname);
                if (!ftp.login(username, password)) {
                    if (verbose) System.out.println(""Unable to log in to FTP Server "" + hostname);
                    check_state = common_h.STATE_CRITICAL;
                    check_message = ftp.getReplyString();
                    ftp.disconnect();
                    filename.delete();
                    return true;
                }
            }
            if (verbose) System.out.println(""Attempting to change to required directory"");
            if (!ftp.changeWorkingDirectory(directory)) {
                if (verbose) System.out.println(""Required directory cannot be found!"");
                check_state = common_h.STATE_WARNING;
                check_message = ftp.getReplyString();
                ftp.disconnect();
                filename.delete();
                return true;
            }
            if (verbose) System.out.println(""Attempting to retrieve specified file!"");
            is = ftp.retrieveFileStream(file);
            if (is == null) {
                if (verbose) System.out.println(""Unable to locate required file."");
                check_state = common_h.STATE_WARNING;
                check_message = ftp.getReplyString();
                ftp.disconnect();
                filename.delete();
                return true;
            }
            os = Channels.newOutputStream(channel);
            byte[] buf = new byte[4096];
            if (verbose) System.out.println(""Beginning File transfer..."");
            for (int len = -1; (len = is.read(buf)) != -1; ) os.write(buf, 0, len);
            if (verbose) {
                System.out.println(""...transfer complete."");
                System.out.println(""Attempting to finalise Command"");
            }
            if (!ftp.completePendingCommand()) {
                if (verbose) System.out.println(""Unable to finalise command"");
                check_state = common_h.STATE_WARNING;
                check_message = ftp.getReplyString();
                ftp.disconnect();
                filename.delete();
                return true;
            }
            if (verbose) System.out.println(""Check Completed."");
            check_state = common_h.STATE_OK;
            check_message = ftp.getReplyString();
            is.close();
            os.close();
            channel.close();
            filename.delete();
        } catch (IOException e) {
            check_state = common_h.STATE_CRITICAL;
            check_message = e.getMessage();
            if (filename != null) filename.delete();
        } finally {
            if (ftp.isConnected()) {
                try {
                    ftp.logout();
                    ftp.disconnect();
                } catch (Exception e) {
                }
            }
        }
        return true;
    }
",1.0
"    public static String getWebContent(String remoteUrl, String encoding) {
        StringBuffer sb = new StringBuffer();
        try {
            java.net.URL url = new java.net.URL(remoteUrl);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));
            String line;
            while ((line = in.readLine()) != null) {
                sb.append(line);
            }
            in.close();
        } catch (Exception e) {
            logger.error(""获取远程网址内容失败 - "" + remoteUrl, e);
        }
        return sb.toString();
    }
","    public static String test(String server, String baseDir, String user, String password) throws Exception {
        FTPClient ftpClient = new FTPClient();
        try {
            String file = baseDir;
            ftpClient.connect(server);
            ftpClient.login(user, password);
            int reply = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftpClient.disconnect();
                System.err.println(""FTP server refused connection."");
                return null;
            }
            ftpClient.setFileType(FTP.IMAGE_FILE_TYPE);
            ftpClient.enterLocalPassiveMode();
            boolean isDir = isDir(ftpClient, file);
            if (isDir) {
                FTPFile[] files = ftpClient.listFiles(file);
                for (int i = 0; i < files.length; i++) {
                }
            } else {
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                if (ftpClient.retrieveFile(file, bos)) {
                } else {
                    throw new IOException(""Unable to retrieve file:"" + file);
                }
            }
            return """";
        } finally {
            closeConnection(ftpClient);
        }
    }
",0.0
"    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");
        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));
        byte[] digestBytes = messageDigest.digest();
        String hex = null;
        for (int i = 0; i < digestBytes.length; i++) {
            hex = Integer.toHexString(0xFF & digestBytes[i]);
            if (hex.length() < 2) sb.append(""0"");
            sb.append(hex);
        }
        return new String(sb);
    }
","    public boolean ImportData() {
        if (fileData == null) {
            return false;
        }
        String line = new String();
        BufferedReader br;
        BufferedWriter bw;
        String tableName = new String();
        List<String> columns = new ArrayList<String>();
        long recordsNumber;
        String sql = new String();
        File tempDataFile;
        String filePath = new String();
        try {
            br = new BufferedReader(new InputStreamReader(new FileInputStream(fileData)));
            if (br.ready()) {
                if ((line = br.readLine()) != null) {
                    do {
                        tableName = siteName + ""_"" + getTableName(line);
                        columns = getTableColumns(line);
                        tempDataFile = new File(""./Data/"" + tableName + "".txt"");
                        tempDataFile.createNewFile();
                        filePath = tempDataFile.getCanonicalPath();
                        sql = generateSQL(tableName, columns, filePath);
                        recordsNumber = getRecordNumber(line);
                        bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tempDataFile)));
                        for (long i = 0; i < recordsNumber; i++) {
                            bw.write(br.readLine() + ""\r\n"");
                        }
                        bw.close();
                        if (sqlConnector != null) {
                            sqlConnector.executeSQL(sql);
                        } else {
                            return false;
                        }
                    } while ((line = br.readLine()) != null);
                }
                br.close();
            }
        } catch (Exception e) {
            ExceptionHandler.handleExcptin(e);
        }
        return true;
    }
",0.0
"    @Test
    public void test_baseMaterialsForTypeName_NonExistingName() throws Exception {
        URL url = new URL(baseUrl + ""/baseMaterialsForTypeName/blah-blah"");
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/json"");
        assertThat(connection.getResponseCode(), equalTo(400));
        connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod(""GET"");
        connection.setRequestProperty(""Accept"", ""application/xml"");
        assertThat(connection.getResponseCode(), equalTo(400));
    }
","    private static IProject createCopyProject(IProject project, String pName, IWorkspace ws, IProgressMonitor pm) throws Exception {
        pm.beginTask(""Creating temp project"", 1);
        IPath destination = new Path(pName);
        IJavaProject oldJavaproj = JavaCore.create(project);
        IClasspathEntry[] classPath = oldJavaproj.getRawClasspath();
        IProject newProject = ResourcesPlugin.getWorkspace().getRoot().getProject(pName);
        newProject.create(null);
        newProject.open(null);
        IProjectDescription desc = newProject.getDescription();
        desc.setNatureIds(new String[] { JavaCore.NATURE_ID });
        newProject.setDescription(desc, null);
        List<IClasspathEntry> newClassPath = new ArrayList<IClasspathEntry>();
        for (IClasspathEntry cEntry : classPath) {
            switch(cEntry.getEntryKind()) {
                case IClasspathEntry.CPE_SOURCE:
                    System.out.println(""Source folder "" + cEntry.getPath());
                    newClassPath.add(copySourceFolder(project, newProject, cEntry, destination));
                    break;
                case IClasspathEntry.CPE_LIBRARY:
                    System.out.println(""library folder "" + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                case IClasspathEntry.CPE_PROJECT:
                    System.out.println(""project folder "" + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                case IClasspathEntry.CPE_VARIABLE:
                    System.out.println(""variable folder "" + cEntry.getPath());
                    newClassPath.add(cEntry);
                    break;
                default:
                    System.out.println(""container folder "" + cEntry.getPath());
                    newClassPath.add(cEntry);
            }
        }
        copyDir(project.getLocation().toString(), ""/translator"", newProject.getLocation().toString(), """", new ArrayList<String>() {

            {
                add(""generated"");
                add(""classes"");
                add("".svn"");
            }
        });
        newProject.refreshLocal(IResource.DEPTH_INFINITE, pm);
        newProject.build(IncrementalProjectBuilder.AUTO_BUILD, pm);
        newProject.touch(pm);
        IJavaProject javaproj = JavaCore.create(newProject);
        javaproj.setOutputLocation(new Path(""/"" + newProject.getName() + ""/classes/bin""), null);
        javaproj.setRawClasspath(newClassPath.toArray(new IClasspathEntry[newClassPath.size()]), pm);
        Map opts = oldJavaproj.getOptions(true);
        javaproj.setOptions(opts);
        javaproj.makeConsistent(pm);
        javaproj.save(pm, true);
        return newProject;
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public void compressImage(BufferedImage bi, OutputStream output, DjatokaEncodeParam params) throws DjatokaException {
        if (params == null) params = new DjatokaEncodeParam();
        if (params.getLevels() == 0) params.setLevels(ImageProcessingUtils.getLevelCount(bi.getWidth(), bi.getHeight()));
        File in = null;
        File out = null;
        try {
            in = IOUtils.createTempTiff(bi);
            out = File.createTempFile(""tmp"", "".jp2"");
            compressImage(in.getAbsolutePath(), out.getAbsolutePath(), params);
            IOUtils.copyStream(new FileInputStream(out), output);
        } catch (IOException e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        } catch (Exception e) {
            logger.error(e, e);
            throw new DjatokaException(e);
        }
        if (in != null) in.delete();
        if (out != null) out.delete();
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
",0.0
"    public String hash(String plainTextPassword) {
        try {
            MessageDigest digest = MessageDigest.getInstance(digestAlgorithm);
            if (saltPhrase != null) {
                digest.update(saltPhrase.getBytes(charset));
                byte[] salt = digest.digest();
                digest.reset();
                digest.update(plainTextPassword.getBytes(charset));
                digest.update(salt);
            } else {
                digest.update(plainTextPassword.getBytes(charset));
            }
            byte[] rawHash = digest.digest();
            if (encoding != null && encoding.equals(Encoding.base64)) {
                return Base64.encodeBytes(rawHash);
            } else {
                return new String(Hex.encodeHex(rawHash));
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    public void testJob() {
        try {
            URL url = new URL(""http://rickysql.gotoip3.com/mapp/admin/admin.do"");
            url.openConnection();
            url.getContent();
            System.out.print(""00"");
        } catch (Exception e) {
            System.out.print(""Daily data update exception:"" + e);
        }
    }
",0.0
"    private static void copyFile(File sourceFile, File destFile) throws IOException {
        if (!destFile.exists()) {
            destFile.createNewFile();
        }
        FileChannel source = null;
        FileChannel destination = null;
        try {
            source = new FileInputStream(sourceFile).getChannel();
            destination = new FileOutputStream(destFile).getChannel();
            destination.transferFrom(source, 0, source.size());
        } finally {
            if (source != null) {
                source.close();
            }
            if (destination != null) {
                destination.close();
            }
        }
    }
","                    public void run() {
                        try {
                            OutputStream out = SourceCache.startCaching(url);
                            InputStream is = url.openStream();
                            byte[] buffer = new byte[100000];
                            while (true) {
                                int amountRead = is.read(buffer);
                                if (amountRead == -1) {
                                    break;
                                }
                                forParser.write(buffer, 0, amountRead);
                                out.write(buffer, 0, amountRead);
                            }
                            forParser.close();
                            out.close();
                            SourceCache.finish(url);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
",0.0
"    public static String encipherAMessage(String message) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] digest = sha1.digest();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String cipherTextB64 = base64encoder.encode(digest);
            return cipherTextB64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
","    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
",0.0
"    protected static File UrlGzipToFile(File dir, String urlSt, String suffix) throws CaughtException {
        try {
            URL url = new URL(urlSt);
            InputStream zipped = url.openStream();
            InputStream unzipped = new GZIPInputStream(zipped);
            File tempFile = File.createTempFile(""input"", suffix, dir);
            copyFile(tempFile, unzipped);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
",0.0
"    public String getHtmlPage(URL url) {
        String html = null;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            br.close();
            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html;
    }
","    public void testMandatorySections() throws Exception {
        final File specificationDirectory = this.getTestSourcesDirectory();
        final File implementationDirectory = this.getTestSourcesDirectory();
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutDependenciesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutMessagesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationWithoutPropertiesSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""Implementation.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""Implementation""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""ImplementationOfSpecificationWithoutConstructorsSection.java.txt""), new FileOutputStream(new File(implementationDirectory, ""ImplementationOfSpecification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getImplementation(""ImplementationOfSpecification""), implementationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
        IOUtils.copy(this.getClass().getResourceAsStream(""SpecificationWithoutAnnotationsSection.java.txt""), new FileOutputStream(new File(specificationDirectory, ""Specification.java"")));
        try {
            this.getTestTool().manageSources(this.getTestTool().getModules().getSpecification(""Specification""), specificationDirectory);
            Assert.fail(""Expected IOException not thrown."");
        } catch (IOException e) {
            Assert.assertNotNull(e.getMessage());
            System.out.println(e);
        }
    }
",0.0
"    public static void fillTemplate(String sourceFileName, String targetFileName, Map<String, String> values) throws IOException {
        File targetDirectory = new File(targetFileName.substring(0, targetFileName.lastIndexOf(File.separator)));
        targetDirectory.mkdirs();
        File file = new File(sourceFileName);
        FileInputStream fis = new FileInputStream(file);
        FileChannel fc = fis.getChannel();
        int sz = (int) fc.size();
        MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, sz);
        Charset charset = Charset.forName(""ISO-8859-15"");
        CharsetDecoder decoder = charset.newDecoder();
        CharBuffer cb = decoder.decode(bb);
        String inString = cb.toString();
        fis.close();
        fc.close();
        Set<String> keys = values.keySet();
        for (Object k : keys) {
            inString = inString.replace((String) k, escape(values.get(k)));
        }
        FileOutputStream fos = new FileOutputStream(targetFileName);
        PrintStream ps = new PrintStream(fos);
        ps.print(inString);
        fos.close();
    }
","    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");
        }
        return response;
    }
",0.0
"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
","    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
",0.0
"    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",0.0
"    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String fullUrl = req.getRequestURL().toString();
        if (fullUrl.indexOf(ip) != -1) {
            fullUrl = fullUrl.replaceAll(ip, ""a.tbcdn.cn"");
        }
        URL url = new URL(fullUrl);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        PrintWriter out = resp.getWriter();
        String line;
        while ((line = in.readLine()) != null) {
            out.println(line);
        }
        in.close();
        out.flush();
    }
","    public osid.shared.Id ingest(String fileName, String templateFileName, String fileType, File file, Properties properties) throws osid.repository.RepositoryException, java.net.SocketException, java.io.IOException, osid.shared.SharedException, javax.xml.rpc.ServiceException {
        long sTime = System.currentTimeMillis();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA:fileName ="" + fileName + ""fileType ="" + fileType + ""t = 0"");
        String host = FedoraUtils.getFedoraProperty(this, ""admin.ftp.address"");
        String url = FedoraUtils.getFedoraProperty(this, ""admin.ftp.url"");
        int port = Integer.parseInt(FedoraUtils.getFedoraProperty(this, ""admin.ftp.port""));
        String userName = FedoraUtils.getFedoraProperty(this, ""admin.ftp.username"");
        String password = FedoraUtils.getFedoraProperty(this, ""admin.ftp.password"");
        String directory = FedoraUtils.getFedoraProperty(this, ""admin.ftp.directory"");
        FTPClient client = new FTPClient();
        client.connect(host, port);
        client.login(userName, password);
        client.changeWorkingDirectory(directory);
        client.setFileType(FTP.BINARY_FILE_TYPE);
        client.storeFile(fileName, new FileInputStream(file));
        client.logout();
        client.disconnect();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Writting to FTP Server:"" + (System.currentTimeMillis() - sTime));
        fileName = url + fileName;
        int BUFFER_SIZE = 10240;
        StringBuffer sb = new StringBuffer();
        String s = new String();
        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(new File(getResource(templateFileName).getFile().replaceAll(""%20"", "" ""))));
        byte[] buf = new byte[BUFFER_SIZE];
        int ch;
        int len;
        while ((len = fis.read(buf)) > 0) {
            s = s + new String(buf);
        }
        fis.close();
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Read Mets File:"" + (System.currentTimeMillis() - sTime));
        String r = updateMetadata(s, fileName, file.getName(), fileType, properties);
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Resplaced Metadata:"" + (System.currentTimeMillis() - sTime));
        File METSfile = File.createTempFile(""vueMETSMap"", "".xml"");
        FileOutputStream fos = new FileOutputStream(METSfile);
        fos.write(r.getBytes());
        fos.close();
        AutoIngestor a = new AutoIngestor(address.getHost(), address.getPort(), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""), FedoraUtils.getFedoraProperty(this, ""admin.fedora.username""));
        String pid = a.ingestAndCommit(new FileInputStream(METSfile), ""Test Ingest"");
        if (DEBUG) System.out.println(""INGESTING FILE TO FEDORA: Ingest complete:"" + (System.currentTimeMillis() - sTime));
        System.out.println("" METSfile= "" + METSfile.getPath() + "" PID = "" + pid);
        return new PID(pid);
    }
",0.0
"    @Test
    @JUnitHttpServer(port = 10342, https = false, webapps = { @Webapp(context = ""/fmpm"", path = ""src/test/resources/test-webapp"") })
    public void testTestServlet() throws Exception {
        TestServlet.reset();
        HttpClient client = new DefaultHttpClient();
        HttpEntity entity = new StringEntity(xml);
        HttpPost method = new HttpPost(""http://localhost:10342/fmpm/restful/NotificationMessageRelay"");
        method.setEntity(entity);
        HttpResponse response = client.execute(method);
        assertEquals(200, response.getStatusLine().getStatusCode());
        assertEquals(xml, TestServlet.getPosted());
    }
","    private static boolean downloadFile(URL remote, File local) throws IllegalArgumentException, IOException {
        if (local == null) throw new IllegalArgumentException(""Must specify remote file"");
        if (local.exists() && !local.canWrite()) throw new IOException(""Cannot write to "" + local);
        long lengthCurrent = local.exists() ? local.length() : -1l;
        if (lengthCurrent == 0) throw new IOException(""Cannot get the length for "" + local);
        long lastModifiedCurrent = local.exists() ? local.lastModified() : -1l;
        if (remote == null) throw new IllegalArgumentException(""Must specify remote url"");
        URLConnection urlConnection = remote.openConnection();
        urlConnection.setDoInput(true);
        urlConnection.setDoOutput(false);
        long lengthRemote = urlConnection.getContentLength();
        long lastModifiedRemote = urlConnection.getLastModified();
        if (lengthRemote == lengthCurrent) {
            LOGGER.fine(""Not downloading "" + remote + "" of length "" + lengthRemote + "" and date "" + (lastModifiedRemote > 0 ? new Date(lastModifiedRemote).toString() : ""n/a"") + "" for "" + local + "" of length "" + lengthCurrent + "" and date "" + new Date(lastModifiedCurrent));
            return false;
        }
        BufferedInputStream inputStream = null;
        BufferedOutputStream bufferedOutputStream = null;
        try {
            inputStream = new BufferedInputStream(urlConnection.getInputStream(), BUFFER_SIZE);
            bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(local));
            byte[] buffer = new byte[BUFFER_SIZE];
            do {
                int count = inputStream.read(buffer);
                if (count < 0) break;
                bufferedOutputStream.write(buffer, 0, count);
            } while (true);
            return true;
        } finally {
            try {
                if (inputStream != null) inputStream.close();
            } catch (Throwable throwable) {
            }
            try {
                if (bufferedOutputStream != null) bufferedOutputStream.close();
            } catch (Throwable throwable) {
            }
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public boolean uploadToUrl(URL url, Map postData) {
        boolean success = false;
        OutputStream oStream;
        HttpURLConnection urlConn = null;
        try {
            urlConn = (HttpURLConnection) url.openConnection();
            urlConn.setDoOutput(true);
            urlConn.setDoInput(true);
            urlConn.setUseCaches(false);
            urlConn.setAllowUserInteraction(false);
            String parametersAsString = """";
            Iterator itParams = postData.entrySet().iterator();
            while (itParams.hasNext()) {
                Map.Entry param = (Map.Entry) itParams.next();
                parametersAsString += (String) param.getKey() + ""="" + URLEncoder.encode((String) param.getValue(), ""UTF-8"") + ""&"";
            }
            byte[] parameterAsBytes = parametersAsString.getBytes();
            urlConn.setRequestProperty(""Content=length"", String.valueOf(parameterAsBytes.length));
            oStream = urlConn.getOutputStream();
            oStream.write(parameterAsBytes);
            oStream.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                System.err.println(""Response: "" + line);
            }
            oStream.close();
            rd.close();
            success = true;
        } catch (MalformedURLException ex) {
            System.err.println(ex + "" (uploadToUrl)"");
            success = false;
        } catch (java.io.IOException iox) {
            System.out.println(iox + "" (uploadToUrl)"");
            success = false;
        } catch (Exception generic) {
            System.out.println(generic.toString() + "" (uploadToUrl)"");
            success = false;
        } finally {
            success = false;
        }
        return success;
    }
",0.0
"    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
","        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
",0.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    public void testAuthentication() throws Exception {
        String host = ""localhost"";
        int port = 8080;
        URL url = new URL(""http://"" + host + "":"" + port + ""/"");
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""basic""));
        server.invoke(name, ""addAuthorization"", new Object[] { ""openjmx"", ""openjmx"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        server.invoke(name, ""start"", null, null);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        in = connection.getInputStream();
        in.close();
        assertEquals(((HttpURLConnection) connection).getResponseCode(), 401);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        connection.setRequestProperty(""Authorization"", ""basic b3BlbmpteDpvcGVuam14"");
        in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""none""));
    }
",0.0
"    public void sortArray() {
        int a;
        for (int i = 0; i < array.length; i++) {
            for (int j = 0; j < array.length - 1; j++) {
                if (array[j] < array[j + 1]) {
                    a = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = a;
                }
            }
        }
    }
","    public boolean parseResults(URL url, String analysis_type, CurationI curation, Date analysis_date, String regexp) throws OutputMalFormatException {
        boolean parsed = false;
        try {
            InputStream data_stream = url.openStream();
            parsed = parseResults(data_stream, analysis_type, curation, analysis_date, regexp);
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        return parsed;
    }
",0.0
"    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug(""File does not exist: "" + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    private static File createFileFromURL(URL url) throws IOException {
        File tempFile = File.createTempFile(""oboFile"", "".obo"");
        PrintStream ps = new PrintStream(tempFile);
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
        String line;
        while ((line = reader.readLine()) != null) {
            ps.println(line);
        }
        ps.close();
        return tempFile;
    }
",0.0
"    public static String generateHexadecimalCodedString(String stringToBeCoded) {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        digest.update(stringToBeCoded.getBytes());
        byte[] hashedKey = digest.digest();
        final int radix = 16;
        String result = """";
        for (byte b : hashedKey) {
            int unsignedByte = b + 128;
            result += Integer.toString(unsignedByte, radix);
        }
        return result;
    }
","    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println(""Usage: <target URI> <no of requests>"");
            System.exit(-1);
        }
        URI targetURI = new URI(args[0]);
        int n = Integer.parseInt(args[1]);
        URL url = targetURI.toURL();
        byte[] buffer = new byte[4096];
        long startTime;
        long finishTime;
        int successCount = 0;
        int failureCount = 0;
        String serverName = ""unknown"";
        long total = 0;
        long contentLen = 0;
        long totalContentLen = 0;
        startTime = System.currentTimeMillis();
        for (int i = 0; i < n; i++) {
            HttpURLConnection c = (HttpURLConnection) url.openConnection();
            c.connect();
            InputStream instream = c.getInputStream();
            try {
                contentLen = 0;
                if (instream != null) {
                    int l = 0;
                    while ((l = instream.read(buffer)) != -1) {
                        total += l;
                        contentLen += l;
                    }
                }
                if (c.getResponseCode() == 200) {
                    successCount++;
                } else {
                    failureCount++;
                }
                totalContentLen += contentLen;
            } catch (IOException ex) {
                failureCount++;
            }
            String s = c.getHeaderField(""Server"");
            if (s != null) {
                serverName = s;
            }
        }
        finishTime = System.currentTimeMillis();
        float totalTimeSec = (float) (finishTime - startTime) / 1000;
        float reqsPerSec = (float) successCount / totalTimeSec;
        float timePerReqMs = (float) (finishTime - startTime) / (float) successCount;
        System.out.print(""Server Software:\t"");
        System.out.println(serverName);
        System.out.println();
        System.out.print(""Document URI:\t\t"");
        System.out.println(targetURI);
        System.out.print(""Document Length:\t"");
        System.out.print(contentLen);
        System.out.println("" bytes"");
        System.out.println();
        System.out.print(""Time taken for tests:\t"");
        System.out.print(totalTimeSec);
        System.out.println("" seconds"");
        System.out.print(""Complete requests:\t"");
        System.out.println(successCount);
        System.out.print(""Failed requests:\t"");
        System.out.println(failureCount);
        System.out.print(""Content transferred:\t"");
        System.out.print(total);
        System.out.println("" bytes"");
        System.out.print(""Requests per second:\t"");
        System.out.print(reqsPerSec);
        System.out.println("" [#/sec] (mean)"");
        System.out.print(""Time per request:\t"");
        System.out.print(timePerReqMs);
        System.out.println("" [ms] (mean)"");
    }
",0.0
"    public boolean exists(String fileToCheck) throws IOException {
        FTPClient ftp = new FTPClient();
        boolean found = false;
        try {
            int reply = 0;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp exists server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.enterLocalPassiveMode();
            if (ftp.listNames(fileToCheck) != null) {
                found = true;
            }
            ftp.logout();
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
        return found;
    }
","    public static void copyFile(File source, File dest) throws IOException {
        FileChannel in = null, out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(dest).getChannel();
            long size = in.size();
            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buf);
        } finally {
            if (in != null) in.close();
            if (out != null) out.close();
        }
    }
",0.0
"    public static String setErrorServer(String newServer) {
        String old = errorServerURL;
        try {
            URL url = new URL(newServer);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setInstanceFollowRedirects(false);
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            StringBuilder page = new StringBuilder();
            String line = null;
            while ((line = rd.readLine()) != null) {
                page.append(line);
            }
            rd.close();
            if (!page.toString().equals(""maRla"")) throw new ConfigurationException(""URL given for error server is invalid"", ConfigType.ErrorServer);
        } catch (UnknownHostException ex) {
            System.out.println(""Accepting setting for error sever, unable to check"");
        } catch (MalformedURLException ex) {
            throw new ConfigurationException(""URL given for error server ('"" + newServer + ""') appears invalid"", ConfigType.ErrorServer, ex);
        } catch (IOException ex) {
            throw new ConfigurationException(""URL given for error server could not be reached"", ConfigType.ErrorServer, ex);
        }
        errorServerURL = newServer;
        return old;
    }
","    public static String hash(final String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            byte[] sha1hash = new byte[40];
            md.update(text.getBytes(""iso-8859-1""), 0, text.length());
            sha1hash = md.digest();
            return Sha1.convertToHex(sha1hash);
        } catch (final Exception e) {
            return null;
        }
    }
",0.0
"    private static String readGeoJSON(String feature) {
        StringBuffer content = new StringBuffer();
        try {
            URL url = new URL(feature);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.connect();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                content.append(line);
            }
            conn.disconnect();
        } catch (Exception e) {
        }
        return content.toString();
    }
","    public static void main(String[] args) {
        log.info(""Passage paramètres "" + args);
        try {
            URL url = new URL(""http://localhost:8082/HomeAutomateCore/ListenerServlet/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
            out.write(""username = JavaWorld \r \n "");
            out.flush();
            out.close();
            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String reponse = """";
            while ((reponse = in.readLine()) != null) {
                System.out.println(reponse);
            }
            System.out.println(""Fin"");
            in.close();
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
            System.out.println(""Fin1 "" + ex.getMessage() + "" "" + ex.getCause());
        } catch (IOException ex) {
            ex.printStackTrace();
            System.out.println(""Fin2 "" + ex.getMessage() + "" "" + ex.getCause());
        }
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","            public void execute(File temporaryFile) throws Exception {
                ZipArchive archive = new ZipArchive(temporaryFile.getPath());
                InputStream input = archive.getInputFrom(ARCHIVE_FILE_1);
                if (input != null) {
                    ByteArrayOutputStream output = new ByteArrayOutputStream();
                    IOUtils.copyAndClose(input, output);
                    assertEquals(ARCHIVE_FILE_1 + "" contents not correct"", ARCHIVE_FILE_1_CONTENT, output.toString());
                } else {
                    fail(""cannot open "" + ARCHIVE_FILE_1);
                }
            }
",0.0
"    private static String getHash(String hash, String clear) {
        try {
            MessageDigest md = MessageDigest.getInstance(hash);
            md.update(clear.getBytes(""UTF-8""));
            byte[] bytes = md.digest();
            String str = new String();
            for (int i = 0; i < bytes.length; ++i) str += Integer.toHexString(0xF0 & bytes[i]).charAt(0) + Integer.toHexString(0x0F & bytes[i]);
            return str;
        } catch (NoSuchAlgorithmException exc) {
        } catch (UnsupportedEncodingException exc) {
        }
        return """";
    }
","    public byte[] computeMD5(String plainText) throws GException {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException ex) {
            throw new GException(""The MD5 hash algorithm is not available."", ex);
        }
        try {
            md.update(plainText.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException ex) {
            throw new GException(""The UTF-8 encoding is not supported."", ex);
        }
        return md.digest();
    }
",1.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    public static String getStringFromURL(URL url) {
        try {
            if (url == null) {
                return null;
            }
            URLConnection conn = url.openConnection();
            conn.connect();
            if (conn instanceof HttpURLConnection) {
                int status = ((HttpURLConnection) conn).getResponseCode();
                if (status != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            int available = conn.getContentLength();
            InputStream is = conn.getInputStream();
            byte buffer[] = new byte[available];
            int pos = 0;
            while (available > 0) {
                int amount = is.read(buffer, pos, available);
                available -= amount;
                pos += amount;
            }
            is.close();
            String tmp = new String(buffer);
            return tmp;
        } catch (Exception ex) {
            System.out.println(ex);
            return """";
        }
    }
",0.0
"    private static byte[] readBytes(URL url) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buf = new byte[8192];
        InputStream in = url.openStream();
        try {
            int readlen;
            while ((readlen = in.read(buf)) > 0) bos.write(buf, 0, readlen);
        } finally {
            in.close();
        }
        return bos.toByteArray();
    }
","    public static byte[] MD5(String input) {
        MessageDigest md5 = null;
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            return null;
        }
        md5.update(input.getBytes());
        return md5.digest();
    }
",0.0
"    public RobotList<Float> sort_decr_Float(RobotList<Float> list, String field) {
        int length = list.size();
        Index_value[] distri = new Index_value[length];
        for (int i = 0; i < length; i++) {
            distri[i] = new Index_value(i, list.get(i));
        }
        boolean permut;
        do {
            permut = false;
            for (int i = 0; i < length - 1; i++) {
                if (distri[i].value < distri[i + 1].value) {
                    Index_value a = distri[i];
                    distri[i] = distri[i + 1];
                    distri[i + 1] = a;
                    permut = true;
                }
            }
        } while (permut);
        RobotList<Float> sol = new RobotList<Float>(Float.class);
        for (int i = 0; i < length; i++) {
            sol.addLast(new Float(distri[i].value));
        }
        return sol;
    }
","    public List<PathObject> fetchPath(PathObject parent) throws NetworkException {
        if (parent.isFetched()) {
            return parent.getChildren();
        } else if (!""d"".equals(parent.getType())) {
            return null;
        }
        HttpClient client = HttpConfig.newInstance();
        HttpGet get = new HttpGet(HttpConfig.bbsURL() + HttpConfig.BBS_0AN + parent.getPath());
        try {
            HttpResponse response = client.execute(get);
            HttpEntity entity = response.getEntity();
            Document doc = XmlOperator.readDocument(entity.getContent());
            BBSBodyParseHelper.parsePathList(doc, parent);
            return parent.getChildren();
        } catch (Exception e) {
            e.printStackTrace();
            throw new NetworkException(e);
        }
    }
",0.0
"    @Override
    protected void copy(Reader reader, OutputStream outputs) throws IOException {
        if (outputs == null) {
            throw new NullPointerException();
        }
        if (reader == null) {
            throw new NullPointerException();
        }
        ZipOutputStream zipoutputs = null;
        try {
            zipoutputs = new ZipOutputStream(outputs);
            zipoutputs.putNextEntry(new ZipEntry(""default""));
            IOUtils.copy(reader, zipoutputs);
        } catch (IOException e) {
            e.printStackTrace();
            throw e;
        } finally {
            if (zipoutputs != null) {
                zipoutputs.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
","	public FTPClient sample2c(String server, int port, String username, String password) throws SocketException, IOException {
		FTPSClient ftpClient = new FTPSClient();
		ftpClient.setDefaultPort(port);
		ftpClient.connect(server);
		ftpClient.login(username, password);
		return ftpClient;
	}
",0.0
"    private void delete(String location) throws Exception {
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""DELETE"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
","    public byte[] transfer(@Nullable final TransferListener transferListener) {
        try {
            InputStream inputStream = url.openStream();
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream(inputStream.available());
            if (transferListener != null) {
                inputStream = new ObservableInputStream(inputStream, transferListener);
            }
            ByteStreams.copy(InputSuppliers.asInputSupplier(inputStream), outputStream);
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new UnhandledException(e);
        }
    }
",0.0
"    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static Bitmap loadBitmap(String url) {
        try {
            final HttpClient httpClient = getHttpClient();
            final HttpResponse resp = httpClient.execute(new HttpGet(url));
            final HttpEntity entity = resp.getEntity();
            final int statusCode = resp.getStatusLine().getStatusCode();
            if (statusCode != HttpStatus.SC_OK || entity == null) {
                return null;
            }
            final byte[] respBytes = EntityUtils.toByteArray(entity);
            BitmapFactory.Options decodeOptions = new BitmapFactory.Options();
            decodeOptions.inSampleSize = 1;
            return BitmapFactory.decodeByteArray(respBytes, 0, respBytes.length, decodeOptions);
        } catch (Exception e) {
            Log.w(TAG, ""Problem while loading image: "" + e.toString(), e);
        }
        return null;
    }
",0.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    byte[] toByteArray() throws IOException {
        DataElement element = new DataElement(DataElement.DATSEQ);
        final boolean sort = true;
        if (sort) {
            int[] sortIDs = new int[attributes.size()];
            int k = 0;
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                sortIDs[k] = key.intValue();
                k++;
            }
            for (int i = 0; i < sortIDs.length; i++) {
                for (int j = 0; j < sortIDs.length - i - 1; j++) {
                    if (sortIDs[j] > sortIDs[j + 1]) {
                        int temp = sortIDs[j];
                        sortIDs[j] = sortIDs[j + 1];
                        sortIDs[j + 1] = temp;
                    }
                }
            }
            for (int i = 0; i < sortIDs.length; i++) {
                element.addElement(new DataElement(DataElement.U_INT_2, sortIDs[i]));
                element.addElement(getAttributeValue(sortIDs[i]));
            }
        } else {
            for (Enumeration e = attributes.keys(); e.hasMoreElements(); ) {
                Integer key = (Integer) e.nextElement();
                element.addElement(new DataElement(DataElement.U_INT_2, key.intValue()));
                element.addElement((DataElement) attributes.get(key));
            }
        }
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        (new SDPOutputStream(out)).writeElement(element);
        return out.toByteArray();
    }
",0.0
"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",0.0
"    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");
        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));
        byte[] digestBytes = messageDigest.digest();
        String hex = null;
        for (int i = 0; i < digestBytes.length; i++) {
            hex = Integer.toHexString(0xFF & digestBytes[i]);
            if (hex.length() < 2) sb.append(""0"");
            sb.append(hex);
        }
        return new String(sb);
    }
","    private File copyFile(File source, File destiny) {
        try {
            FileInputStream fileinputstream = new FileInputStream(source);
            FileOutputStream fileoutputstream = new FileOutputStream(destiny);
            byte abyte0[] = new byte[4096];
            int i;
            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);
            fileinputstream.close();
            fileoutputstream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        }
        return destiny;
    }
",0.0
"    public String getHtmlPage(URL url) {
        String html = null;
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openConnection().getInputStream()));
            StringBuffer sb = new StringBuffer();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            br.close();
            html = sb.toString().replaceAll(HTML_FILTER_RE, "" "");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return html;
    }
","    public String requestPOST(String baseUrl, Map<String, String> params) throws Exception {
        String result = """";
        HttpPost request = new HttpPost(baseUrl);
        HttpEntity entity = null;
        if (params != null && !params.isEmpty()) {
            List<NameValuePair> postParams = new ArrayList<NameValuePair>();
            List<String> keys = new ArrayList<String>(params.keySet());
            for (String key : keys) {
                postParams.add(new BasicNameValuePair(key, params.get(key)));
            }
            entity = new UrlEncodedFormEntity(postParams, ""utf-8"");
            request.setEntity(entity);
        }
        HttpResponse res = client.execute(request);
        if (res.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
            entity = res.getEntity();
            BufferedReader in = new BufferedReader(new InputStreamReader(entity.getContent()));
            StringBuffer content = new StringBuffer();
            String read = """";
            while ((read = in.readLine()) != null) {
                content.append(read);
            }
            in.close();
            JSONObject rObj = new JSONObject(content.toString());
            result = rObj.getString(""msg"");
        } else result = ""请求失败了"";
        entity.consumeContent();
        client.getConnectionManager().shutdown();
        request = null;
        return result;
    }
",0.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    public ForkJavaProject(String projectName, Class<?> activatorClass) {
        this.activatorClass = activatorClass;
        try {
            IWorkspaceRoot rootWorkspace = ResourcesPlugin.getWorkspace().getRoot();
            this.prj = rootWorkspace.getProject(projectName);
            if (this.prj.exists()) {
                this.prj.delete(true, true, new NullProgressMonitor());
            }
            this.prj.create(new NullProgressMonitor());
            this.prj.open(new NullProgressMonitor());
            IProjectDescription description = this.prj.getDescription();
            description.setNatureIds(new String[] { ""org.eclipse.jdt.core.javanature"" });
            this.prj.setDescription(description, new NullProgressMonitor());
            createProjectDir(Constants.Dirs.DIR_MAIN_JAVA);
            createProjectDir(Constants.Dirs.DIR_CONFIG);
            createProjectDir(Constants.Dirs.DIR_MAIN_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_MODELS);
            createProjectDir(Constants.Dirs.DIR_TESTS_JAVA);
            createProjectDir(Constants.Dirs.DIR_TESTS_RESOURCES);
            createProjectDir(Constants.Dirs.DIR_CLASSES);
            createProjectDir(Constants.Dirs.DIR_LIB);
            this.prj.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
            this.javaProject = JavaCore.create(this.prj);
            if (this.javaProject.exists() && !this.javaProject.isOpen()) {
                this.javaProject.open(new NullProgressMonitor());
            }
            File javaHome = new File(System.getProperty(""java.home""));
            IPath jreLibPath = new Path(javaHome.getPath()).append(""lib"").append(""rt.jar"");
            this.javaProject.setOutputLocation(prj.getFolder(Constants.Dirs.DIR_CLASSES).getFullPath(), new NullProgressMonitor());
            JavaCore.setClasspathVariable(""JRE_LIB"", jreLibPath, new NullProgressMonitor());
            this.javaProject.setRawClasspath(getProjectClassPath(), new NullProgressMonitor());
        } catch (CoreException e) {
            Activator.getDefault().logError(""An exception has been thrown while creating Project"", e);
        }
    }
",0.0
"    public SparqlQueryLoaderImpl() throws IOException {
        ClassLoader loader = SparqlQueryLoaderImpl.class.getClassLoader();
        URL url = loader.getResource(PROPERTIES_FILENAME);
        InputStream stream = url.openStream();
        properties.load(stream);
        stream.close();
        String names = getProperties().getProperty(NAMES_PARAMETER);
        StringTokenizer st = new StringTokenizer(names, "","");
        while (st.hasMoreTokens()) {
            String name = st.nextToken();
            String value = readContents(String.format(""sparql/%s.sparql"", name));
            getName2Query().put(name, value);
        }
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",0.0
"    public void testAuthentication() throws Exception {
        String host = ""localhost"";
        int port = 8080;
        URL url = new URL(""http://"" + host + "":"" + port + ""/"");
        URLConnection connection = url.openConnection();
        InputStream in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""basic""));
        server.invoke(name, ""addAuthorization"", new Object[] { ""openjmx"", ""openjmx"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        server.invoke(name, ""start"", null, null);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        in = connection.getInputStream();
        in.close();
        assertEquals(((HttpURLConnection) connection).getResponseCode(), 401);
        url = new URL(""http://"" + host + "":"" + port + ""/"");
        connection = url.openConnection();
        connection.setRequestProperty(""Authorization"", ""basic b3BlbmpteDpvcGVuam14"");
        in = connection.getInputStream();
        in.close();
        server.invoke(name, ""stop"", null, null);
        server.setAttribute(name, new Attribute(""AuthenticationMethod"", ""none""));
    }
","    @Override
    protected String doInBackground(String... params) {
        try {
            URL url = new URL(""http://www.foamsnet.com/smsapi/send.php?username="" + username + ""&password="" + password + ""&to="" + to + ""&msg="" + URLEncoder.encode(msg));
            URLConnection urlc = url.openConnection();
            BufferedReader sin = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String inputLine = sin.readLine();
            inputLine = inputLine == null ? ""null"" : inputLine;
            sin.close();
            output = inputLine;
            if (logsent) {
                ContentResolver contentResolver = cr;
                ContentValues values = new ContentValues();
                values.put(""address"", ""+91"" + inputLine.split("" "")[3]);
                values.put(""body"", msg);
                contentResolver.insert(Uri.parse(""content://sms/sent""), values);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    public static String getHash(String password) {
        if (password == null || password.length() == 0) {
            return null;
        }
        try {
            MessageDigest digest = MessageDigest.getInstance(""SHA"");
            password = saltPassword(password);
            digest.update(password.getBytes());
            String result = getHexString(digest.digest());
            return result;
        } catch (NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }
","    @Override
    protected void writeSnapshot(final String message, final String details) {
        try {
            final URL url = proxyAddress == null ? new URL(url_spec) : new URL(""http"", proxyAddress, proxyPort, url_spec);
            LOG.info(""connect to "" + url);
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);
            final HttpQueryWriter out = new HttpQueryWriter(connection.getOutputStream());
            out.addParameter(""error"", message);
            out.addParameter(""trace"", details);
            out.close();
            final InputStream in = connection.getInputStream();
            int c;
            final StringBuffer result = new StringBuffer();
            while ((c = in.read()) != -1) {
                result.append((char) c);
            }
            LOG.info(result);
            in.close();
        } catch (final UnknownHostException e) {
            LOG.info(""could not find host (unknown host) to submit log to"");
        } catch (final IOException e) {
            LOG.debug(""i/o problem submitting log"", e);
        }
    }
",0.0
"    public String loadURL(URL url) {
        String retVal = """";
        try {
            InputStream inputStream = url.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = bufferedReader.readLine();
            retVal += line + ""\n"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) retVal += line + ""\n"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            retVal = e.getMessage();
        }
        return retVal;
    }
","    private static void loadUnits(URL url) throws Exception {
        try {
            SYSTEM = new UnitSystem();
            XMLReader reader = SAXParserFactory.newInstance().newSAXParser().getXMLReader();
            reader.setFeature(""http://xml.org/sax/features/namespaces"", true);
            reader.setFeature(""http://xml.org/sax/features/namespace-prefixes"", false);
            reader.setContentHandler(SYSTEM);
            reader.parse(new InputSource(url.openStream()));
        } catch (Throwable ex) {
            throw new Exception(url.toString() + "": "" + ex.getMessage(), ex);
        }
    }
",0.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    private void playAudio(String mediaUrl) {
        try {
            URLConnection cn = new URL(mediaUrl).openConnection();
            InputStream is = cn.getInputStream();
            mediaFile = new File(this.getCacheDir(), ""mediafile"");
            FileOutputStream fos = new FileOutputStream(mediaFile);
            byte buf[] = new byte[16 * 1024];
            Log.i(""FileOutputStream"", ""Download"");
            do {
                int numread = is.read(buf);
                if (numread <= 0) break;
                fos.write(buf, 0, numread);
            } while (true);
            fos.flush();
            fos.close();
            Log.i(""FileOutputStream"", ""Saved"");
            MediaPlayer.OnCompletionListener listener = new MediaPlayer.OnCompletionListener() {

                public void onCompletion(MediaPlayer mp) {
                    mp.release();
                    Log.i(""MediaPlayer.OnCompletionListener"", ""MediaPlayer Released"");
                }
            };
            mixPlayer.setOnCompletionListener(listener);
            FileInputStream fis = new FileInputStream(mediaFile);
            mixPlayer.setDataSource(fis.getFD());
            mixPlayer.prepare();
            Log.i(""MediaPlayer"", ""Start Player"");
            loading = false;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
",0.0
"    public String hash(String clearPassword) {
        if (osalt == 0) return null;
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA1"");
        } catch (NoSuchAlgorithmException e) {
            throw new AssertionError(""Can't find the SHA1 algorithm in the java.security package"");
        }
        String saltString = String.valueOf(osalt);
        md.update(saltString.getBytes());
        md.update(clearPassword.getBytes());
        byte[] digestBytes = md.digest();
        StringBuffer digestSB = new StringBuffer();
        for (int i = 0; i < digestBytes.length; i++) {
            int lowNibble = digestBytes[i] & 0x0f;
            int highNibble = (digestBytes[i] >> 4) & 0x0f;
            digestSB.append(Integer.toHexString(highNibble));
            digestSB.append(Integer.toHexString(lowNibble));
        }
        String digestStr = digestSB.toString();
        return digestStr;
    }
","    public ViewInitListener() throws IOException {
        URL url = this.getClass().getResource(VIEW_INIT_CONFIG);
        log.debug(""Loading configuration from: "" + url);
        config = new Properties();
        InputStream in = url.openStream();
        config.load(in);
        in.close();
    }
",0.0
"    private URLConnection getConnection(String url, int count) {
        URLConnection conn = null;
        try {
            conn = new URL(url).openConnection();
        } catch (IOException e) {
            if (count < 5) {
                System.out.println();
                System.out.print(""getConnection failed - "");
                System.out.println(count);
                System.out.println(""Trying again ..."");
                conn = this.getConnection(url, count++);
            } else {
                System.out.println(""Giving up"");
                throw new OntopiaRuntimeException(e);
            }
        }
        return conn;
    }
","    public ArrayList<String> getData() {
        ArrayList<String> data = new ArrayList<String>();
        String line = null;
        URL address = null;
        try {
            address = new URL(url);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        URLConnection urlconn = null;
        if (useProxy) {
            SocketAddress addr = new InetSocketAddress(ip, Integer.parseInt(port));
            java.net.Proxy httpProxy = new java.net.Proxy(java.net.Proxy.Type.HTTP, addr);
            try {
                urlconn = address.openConnection(httpProxy);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            try {
                urlconn = address.openConnection();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        try {
            urlconn.connect();
        } catch (IOException e) {
            return null;
        }
        BufferedReader buffreader = null;
        try {
            buffreader = new BufferedReader(new InputStreamReader(urlconn.getInputStream()));
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            line = buffreader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        while (line != null) {
            data.add(line);
            try {
                line = buffreader.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return data;
    }
",0.0
"    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");
        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));
        byte[] digestBytes = messageDigest.digest();
        String hex = null;
        for (int i = 0; i < digestBytes.length; i++) {
            hex = Integer.toHexString(0xFF & digestBytes[i]);
            if (hex.length() < 2) sb.append(""0"");
            sb.append(hex);
        }
        return new String(sb);
    }
","    public void startElement(String uri, String tag, String qName, org.xml.sax.Attributes attributes) throws SAXException {
        wabclient.Attributes prop = new wabclient.Attributes(attributes);
        try {
            if (tag.equals(""app"")) {
                if (prop == null) {
                    System.err.println(""app without properties"");
                    return;
                }
                String appname = prop.getValue(""name"", """");
                String lookandfeel = prop.getValue(""lookandfeel"", """");
                global.setAppName(appname);
                if (lookandfeel.length() > 0) {
                    if (lookandfeel.equalsIgnoreCase(""Windows"")) lookandfeel = ""com.sun.java.swing.plaf.windows.WindowsLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Motif"")) lookandfeel = ""com.sun.java.swing.plaf.motif.MotifLookAndFeel""; else if (lookandfeel.equalsIgnoreCase(""Mac"")) lookandfeel = ""com.sun.java.swing.plaf.mac.MacLookAndFeel"";
                    UIManager.setLookAndFeel(lookandfeel);
                }
            } else if (tag.equals(""script"")) {
                WABClient c = (WABClient) global;
                c.beginScript();
                String url = prop.getValue(""src"");
                if (url.length() > 0) {
                    try {
                        BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
                        String buffer;
                        while (true) {
                            buffer = r.readLine();
                            if (buffer == null) break;
                            c.script += buffer + ""\n"";
                        }
                        r.close();
                        c.endScript();
                    } catch (IOException ioe) {
                        System.err.println(""[IOError] "" + ioe.getMessage());
                        System.exit(0);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public static void signalServer(String solrHostURL) throws IOException {
        if (solrHostURL == null || solrHostURL.length() == 0) return;
        URL url;
        URLConnection urlConn;
        DataOutputStream printout;
        BufferedReader input;
        url = new URL(solrHostURL);
        urlConn = url.openConnection();
        urlConn.setDoInput(true);
        urlConn.setDoOutput(true);
        urlConn.setUseCaches(false);
        urlConn.setRequestProperty(""Content-Type"", ""text/xml"");
        urlConn.setRequestProperty(""charset"", ""utf-8"");
        printout = new DataOutputStream(urlConn.getOutputStream());
        String content = ""<commit/>"";
        printout.writeBytes(content);
        printout.flush();
        printout.close();
        input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));
        String str;
        while (null != ((str = input.readLine()))) {
            if (verbose) System.out.println(str); else logger.info(str);
        }
        input.close();
    }
",1.0
"    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
","    private synchronized Frame insertFrame(int index, File source, INSERT_TYPE type) throws IOException {
        if (source == null) throw new NullPointerException(""Parameter 'source' is null"");
        if (!source.exists()) throw new IOException(""File does not exist: "" + source.getAbsolutePath());
        if (source.length() <= 0) throw new IOException(""File is empty: "" + source.getAbsolutePath());
        if (index < 0) throw new IndexOutOfBoundsException(""index < 0"");
        if (index >= frames_.size()) throw new IndexOutOfBoundsException(""index >= frames_.size()"");
        File tmp = new File(Settings.getPropertyString(ConstantKeys.project_dir), ""tmp.jpg"");
        switch(type) {
            case MOVE:
                if (source.getParentFile().compareTo(new File(Settings.getPropertyString(ConstantKeys.project_dir))) == 0 && source.getName().matches(""img_[0-9]{5}\\.jpg"")) {
                    for (int i = 0; i < frames_.size(); i++) {
                        Frame f = frames_.get(i);
                        if (f.getFile().compareTo(source) == 0) {
                            frames_.remove(i);
                            break;
                        }
                    }
                }
                source.renameTo(tmp);
                break;
            case COPY:
                FileChannel inChannel = new FileInputStream(source).getChannel();
                FileChannel outChannel = new FileOutputStream(tmp).getChannel();
                inChannel.transferTo(0, inChannel.size(), outChannel);
                if (inChannel != null) inChannel.close();
                if (outChannel != null) outChannel.close();
                break;
        }
        for (int i = frames_.size() - 1; i >= index; i--) {
            Frame newFrame = new Frame(new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(i)));
            frames_.get(i).moveTo(newFrame);
            frames_.set(i, newFrame);
        }
        File newLocation = new File(Settings.getPropertyString(ConstantKeys.project_dir), formatFileName(index));
        tmp.renameTo(newLocation);
        Frame f = new Frame(newLocation);
        f.createThumbNail();
        frames_.set(index, f);
        return f;
    }
",0.0
"    private String calculateMD5(String value) {
        String finalString = new String("""");
        try {
            MessageDigest md5Alg = MessageDigest.getInstance(""MD5"");
            md5Alg.reset();
            md5Alg.update(value.getBytes());
            byte messageDigest[] = md5Alg.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                String hex = Integer.toHexString(0xFF & messageDigest[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            finalString = hexString.toString();
        } catch (NoSuchAlgorithmException exc) {
            throw new RuntimeException(""Hashing error happened:"", exc);
        }
        return finalString;
    }
","    @Override
    public void executeInterruptible() {
        EncodeFilesDialog dialog = (EncodeFilesDialog) this.dialog;
        File encoderFile = null;
        InputStream is = null;
        OutputStream os = null;
        try {
            if (Platform.isWindows()) {
                encoderFile = new File(""."", ""lame.exe"");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame.exe"");
            } else if (Platform.isLinux()) {
                encoderFile = new File(""."", ""lame"");
                is = Thread.currentThread().getContextClassLoader().getResourceAsStream(""lame/lame"");
            } else {
                MainWindowInterface.showError(new Exception(Messages.getString(""operations.file.encode.dialog.notsupported"")));
                return;
            }
            os = new FileOutputStream(encoderFile);
            IOUtils.copy(is, os);
        } catch (Exception e) {
            LOG.error(""Cannot extract encoder executable"", e);
            MainWindowInterface.showError(e);
            return;
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(os);
        }
        encoderFile.setExecutable(true, true);
        try {
            long totalSize = 0l;
            for (int i = 0, l = filesModel.getSize(); i < l; i++) {
                if (isInterrupted()) return;
                IconAndFileListElement element = (IconAndFileListElement) filesModel.get(i);
                File origFile = element.getFile();
                totalSize += origFile.length();
            }
            rangeModel = dialog.getProgressBar().getModel();
            rangeModel.setMinimum(0);
            rangeModel.setMaximum((int) totalSize);
            int parallelProcesses = dialog.getParallelProcesses();
            List<Thread> encodingThreads = new ArrayList<Thread>();
            encodingRunnables = new ArrayList<EncoderLauncherRunnable>(parallelProcesses);
            for (int i = 0; i < parallelProcesses; i++) {
                EncoderLauncherRunnable encoderLauncherRunnable = new EncoderLauncherRunnable(i, dialog, encoderFile);
                Thread thread = new Thread(encoderLauncherRunnable);
                encodingRunnables.add(encoderLauncherRunnable);
                encodingThreads.add(thread);
                thread.start();
            }
            for (Thread thread : encodingThreads) {
                thread.join();
            }
            if (!isInterrupted()) MainWindowInterface.showMessage(Messages.getString(""operations.file.encode.execute.done.title""), Messages.getString(""operations.file.encode.execute.done.message"").replace(""${number}"", """" + filesModel.getSize()));
        } catch (Exception e) {
            LOG.error(""Cannot encode files"", e);
            MainWindowInterface.showError(e);
        } finally {
            if (encoderFile != null) encoderFile.delete();
            dialog.setVisible(false);
        }
    }
",0.0
"    public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
        response.setHeader(""Content-type"", ""application/force-download"");
        response.setHeader(""Content-disposition"", ""attachment"");
        response.setHeader(""filename"", ""export.txt"");
        response.setHeader(""Pragma"", ""no-cache"");
        response.setHeader(""Expires"", ""0"");
        response.setStatus(HttpServletResponse.SC_OK);
        baseRequest.setHandled(true);
        InputStream x = baseRequest.getInputStream();
        StringWriter writer = new StringWriter();
        IOUtils.copy(x, writer);
        String theString = writer.toString();
        System.out.println(theString);
        response.getWriter().println(request.getParameter(""file"").replace(""*"", ""\n""));
    }
","    public static String getStringFromURL(URL url) {
        try {
            if (url == null) {
                return null;
            }
            URLConnection conn = url.openConnection();
            conn.connect();
            if (conn instanceof HttpURLConnection) {
                int status = ((HttpURLConnection) conn).getResponseCode();
                if (status != HttpURLConnection.HTTP_OK) {
                    return null;
                }
            }
            int available = conn.getContentLength();
            InputStream is = conn.getInputStream();
            byte buffer[] = new byte[available];
            int pos = 0;
            while (available > 0) {
                int amount = is.read(buffer, pos, available);
                available -= amount;
                pos += amount;
            }
            is.close();
            String tmp = new String(buffer);
            return tmp;
        } catch (Exception ex) {
            System.out.println(ex);
            return """";
        }
    }
",0.0
"    public static String generateSHA1(final String data) {
        final StringBuilder hash = new StringBuilder(40);
        try {
            final MessageDigest sha1 = MessageDigest.getInstance(""sha1"");
            sha1.update(data.getBytes());
            final byte[] digest = sha1.digest();
            for (byte aDigest : digest) {
                String hex = Integer.toHexString(aDigest);
                if (hex.length() == 1) {
                    hex = ""0"" + hex;
                }
                hex = hex.substring(hex.length() - 2);
                hash.append(hex);
            }
        } catch (NoSuchAlgorithmException e) {
        }
        return hash.toString();
    }
","    static HashSet<ScriptEngineFactory> lookup(ClassLoader loader, String name) {
        HashSet<ScriptEngineFactory> factories = new HashSet<ScriptEngineFactory>();
        try {
            Enumeration<URL> urls = loader.getResources(name);
            while (urls.hasMoreElements()) {
                URL url = urls.nextElement();
                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
                String line;
                while ((line = reader.readLine()) != null) {
                    if ((line = trim(line)) != null) {
                        try {
                            Class<ScriptEngineFactory> clazz = (Class<ScriptEngineFactory>) Class.forName(line, true, loader);
                            ScriptEngineFactory factory = clazz.newInstance();
                            factories.add(factory);
                        } catch (java.lang.UnsupportedClassVersionError error) {
                            if (DEBUG) {
                                System.err.println(line + "": version mismatch - ignore"");
                            }
                        }
                    }
                }
            }
        } catch (IOException ex) {
            throw new ScriptException(ex);
        } finally {
            return factories;
        }
    }
",0.0
"    public static LinkedList<String> read(URL url, String exc) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            if (!input.startsWith(exc)) {
                data.add(input);
            }
        }
        br.close();
        return data;
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println(""Usage: HexStrToBin enc/dec <infileName> <outfilename>"");
            System.exit(1);
        }
        try {
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            InputStream in = new FileInputStream(args[1]);
            int len = 0;
            byte buf[] = new byte[1024];
            while ((len = in.read(buf)) > 0) os.write(buf, 0, len);
            in.close();
            os.close();
            byte[] data = null;
            if (args[0].equals(""dec"")) data = decode(os.toString()); else {
                String strData = encode(os.toByteArray());
                data = strData.getBytes();
            }
            FileOutputStream fos = new FileOutputStream(args[2]);
            fos.write(data);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private void addFilesToExistingZip(File zipFile, String[] dirs, File[] files) throws IOException {
        File tempFile = new File(zipFile.getAbsoluteFile() + "".temp"");
        if (tempFile.exists()) tempFile.delete();
        boolean renameOk = zipFile.renameTo(tempFile);
        if (!renameOk) {
            throw new RuntimeException(""Could not rename the file "" + zipFile.getAbsolutePath() + "" to "" + tempFile.getAbsolutePath());
        }
        ZipInputStream zin = new ZipInputStream(new FileInputStream(tempFile));
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(zipFile));
        ZipEntry entry = zin.getNextEntry();
        byte[] buf = new byte[1024];
        while (entry != null) {
            String entryName = entry.getName();
            boolean inFiles = false;
            for (int i = 0; i < files.length; i++) {
                String fileName = dirs[i] + ""/"" + files[i].getName();
                if (fileName.equals(entryName)) {
                    inFiles = true;
                    break;
                }
            }
            if (!inFiles) {
                out.putNextEntry(new ZipEntry(entryName));
                int len;
                while ((len = zin.read(buf)) > 0) out.write(buf, 0, len);
            }
            entry = zin.getNextEntry();
        }
        zin.close();
        for (int i = 0; i < files.length; i++) {
            InputStream in = new FileInputStream(files[i]);
            out.putNextEntry(new ZipEntry(dirs[i] + ""/"" + files[i].getName()));
            int len;
            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
            out.closeEntry();
            in.close();
        }
        out.close();
        tempFile.delete();
    }
",0.0
"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
","    public Document getWsdlDomResource(String aResourceName) throws AeException {
        logger.debug(""getWsdlDomResource() "" + aResourceName);
        InputStream in = null;
        try {
            URL url = getDeploymentContext().getResourceURL(aResourceName);
            if (url == null) {
                logger.error(""url is null"");
                return null;
            } else {
                logger.debug(""loading wsdl document "" + aResourceName);
                in = url.openStream();
                return getSdlParser().loadWsdlDocument(in, null);
            }
        } catch (Throwable t) {
            logger.error(""Error: "" + t + "" for "" + aResourceName);
            throw new SdlDeploymentException(MessageFormat.format(""unable to load: {0} from {1}"", new Object[] { aResourceName, getDeploymentContext().getDeploymentLocation() }), t);
        } finally {
            AeCloser.close(in);
        }
    }
",0.0
"    public static LinkedList<String> read(URL url, String exc) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            if (!input.startsWith(exc)) {
                data.add(input);
            }
        }
        br.close();
        return data;
    }
","    public static void test2() throws Exception {
        int keySize = 1024;
        int dBlockSize = keySize / 8;
        int eBlockSize = dBlockSize - 8 - 3;
        CertAndKeyGen certAndKeyGen = new CertAndKeyGen(""RSA"", ""MD5WithRSA"");
        certAndKeyGen.generate(keySize);
        PublicKey publicKey = certAndKeyGen.getPublicKey();
        PrivateKey privateKey = certAndKeyGen.getPrivateKey();
        Cipher cipher1 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher1.init(Cipher.ENCRYPT_MODE, publicKey);
        String fileA = ""C:/temp/a.txt"";
        String fileB = ""C:/temp/b.txt"";
        String fileC = ""C:/temp/c.txt"";
        FileInputStream fis = new FileInputStream(fileA);
        FileOutputStream fos = new FileOutputStream(fileB, false);
        CipherOutputStream eos = new CipherOutputStream(fos, cipher1, eBlockSize);
        byte[] b = new byte[128];
        int i = fis.read(b);
        while (i != -1) {
            eos.write(b, 0, i);
            i = fis.read(b);
        }
        eos.flush();
        eos.close();
        fos.close();
        Cipher cipher2 = Cipher.getInstance(""RSA/ECB/PKCS1Padding"");
        cipher2.init(Cipher.DECRYPT_MODE, privateKey);
        fis = new FileInputStream(fileB);
        CipherInputStream cis = new CipherInputStream(fis, cipher2, dBlockSize);
        FileOutputStream decodedFile = new FileOutputStream(fileC, false);
        int read = -1;
        while ((read = cis.read()) > -1) {
            decodedFile.write(read);
        }
        decodedFile.close();
        fis.close();
    }
",0.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    public void testSavepoint4() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint4 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        for (int i = 0; i < 3; i++) {
            System.out.println(""iteration: "" + i);
            PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint4 (data) VALUES (?)"");
            pstmt.setInt(1, 1);
            assertTrue(pstmt.executeUpdate() == 1);
            Savepoint savepoint = con.setSavepoint();
            assertNotNull(savepoint);
            assertTrue(savepoint.getSavepointId() == 1);
            try {
                savepoint.getSavepointName();
                assertTrue(false);
            } catch (SQLException e) {
            }
            pstmt.setInt(1, 2);
            assertTrue(pstmt.executeUpdate() == 1);
            pstmt.close();
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            ResultSet rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 3);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback(savepoint);
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 1);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback();
        }
        con.setAutoCommit(true);
    }
",0.0
"    public static String SHAEncrypt(String originalString) {
        String encryptedString = new String("""");
        try {
            MessageDigest md = MessageDigest.getInstance(""SHA-1"");
            md.update(originalString.getBytes());
            byte b[] = md.digest();
            for (int i = 0; i < b.length; i++) {
                char[] digit = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
                char[] ob = new char[2];
                ob[0] = digit[(b[i] >>> 4) & 0X0F];
                ob[1] = digit[b[i] & 0X0F];
                encryptedString += new String(ob);
            }
        } catch (NoSuchAlgorithmException nsae) {
            System.out.println(""the algorithm doesn't exist"");
        }
        return encryptedString;
    }
","    public BufferedImage getImage(String urlStr) throws IOException {
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        InputStream in = null;
        try {
            in = conn.getInputStream();
            return ImageIO.read(in);
        } finally {
            IOUtilities.close(in);
        }
    }
",0.0
"    public String call() throws Exception {
        InputStream stream = url.openStream();
        StringBuffer sb = new StringBuffer();
        BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        String line = null;
        while ((line = reader.readLine()) != null) {
            sb.append(line);
        }
        return sb.toString();
    }
","    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    protected byte[] getTSAResponse(byte[] requestBytes) throws Exception {
        URL url = new URL(tsaURL);
        URLConnection tsaConnection;
        tsaConnection = (URLConnection) url.openConnection();
        tsaConnection.setDoInput(true);
        tsaConnection.setDoOutput(true);
        tsaConnection.setUseCaches(false);
        tsaConnection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");
        tsaConnection.setRequestProperty(""Content-Transfer-Encoding"", ""binary"");
        if ((tsaUsername != null) && !tsaUsername.equals("""")) {
            String userPassword = tsaUsername + "":"" + tsaPassword;
            tsaConnection.setRequestProperty(""Authorization"", ""Basic "" + Base64.encodeBytes(userPassword.getBytes()));
        }
        OutputStream out = tsaConnection.getOutputStream();
        out.write(requestBytes);
        out.close();
        InputStream inp = tsaConnection.getInputStream();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int bytesRead = 0;
        while ((bytesRead = inp.read(buffer, 0, buffer.length)) >= 0) {
            baos.write(buffer, 0, bytesRead);
        }
        byte[] respBytes = baos.toByteArray();
        String encoding = tsaConnection.getContentEncoding();
        if (encoding != null && encoding.equalsIgnoreCase(""base64"")) {
            respBytes = Base64.decode(new String(respBytes));
        }
        return respBytes;
    }
",0.0
"    public static void copy(String path1, String path2) throws IOException {
        FileReader in = new FileReader(path1);
        FileWriter out = new FileWriter(path2);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",1.0
"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
","    public static boolean buildPerMovieDiffBinary(String masterFile) {
        try {
            File inFile = new File(completePath + fSep + ""SmartGRAPE"" + fSep + masterFile);
            FileChannel inC = new FileInputStream(inFile).getChannel();
            System.out.println(inC.size());
            short movie1, movie2;
            int count;
            float diffRating, sumXY, sumX, sumY, sumX2, sumY2, pearsonCorr, adjustedCosineCorr, cosineCorr;
            long position;
            for (long i = 1; i < 17770; i++) {
                File outFile = new File(""C:\\NetflixData\\download\\SmartGrape\\CFItemToItemStats\\Movie--"" + i + ""-MatrixData.txt"");
                FileChannel outC = new FileOutputStream(outFile, true).getChannel();
                ByteBuffer buf = ByteBuffer.allocate(17770 * 44);
                for (long j = 1; j < i; j++) {
                    ByteBuffer bbuf = ByteBuffer.allocate(44);
                    position = 0;
                    position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                    position -= new Long((17769 - (j - 1))).longValue() * new Long((17770 - (j - 1))).longValue() * new Long(22).longValue();
                    position += new Long((i - j - 1) * 44).longValue();
                    inC.position(position);
                    inC.read(bbuf);
                    bbuf.flip();
                    buf.putShort(bbuf.getShort());
                    bbuf.getShort();
                    buf.putInt(bbuf.getInt());
                    buf.putFloat(-bbuf.getInt());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                    buf.putFloat(bbuf.getFloat());
                }
                buf.putShort(new Long(i).shortValue());
                buf.putInt(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                buf.putFloat(0);
                position = 0;
                position += new Long(17769).longValue() * new Long(17770).longValue() * new Long(22).longValue();
                position -= new Long((17769 - (i - 1))).longValue() * new Long((17770 - (i - 1))).longValue() * new Long(22).longValue();
                ByteBuffer remainingBuf = inC.map(FileChannel.MapMode.READ_ONLY, position, (17770 - i) * 44);
                while (remainingBuf.hasRemaining()) {
                    remainingBuf.getShort();
                    buf.putShort(remainingBuf.getShort());
                    buf.putInt(remainingBuf.getInt());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                    buf.putFloat(remainingBuf.getFloat());
                }
                buf.flip();
                outC.write(buf);
                buf.clear();
                outC.close();
            }
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    @Override
    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean found = false;
        String name = getArgument(request.getPathInfo());
        if (StringUtils.contains(name, '/')) {
            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);
            if (file.exists() && file.isFile()) {
                found = true;
                MagicMatch match = Magic.getMagicMatch(file, true);
                response.setContentType(match.getMimeType());
                FileInputStream in = new FileInputStream(file);
                IOUtils.copyLarge(in, response.getOutputStream());
                in.close();
            }
        } else if (!StringUtils.isBlank(name)) {
            int articleId = NumberUtils.toInt(name);
            if (articleId > 0) {
                Article article = articleDao.load(articleId);
                if (article != null) {
                    found = true;
                    sendArticle(request, response, article);
                }
            }
        } else {
            int page = NumberUtils.toInt(request.getParameter(""page""), 0);
            Date fromDate = null;
            String from = request.getParameter(""from"");
            if (StringUtils.isNotBlank(from)) {
                try {
                    fromDate = dayMonthYearEn.parse(from);
                } catch (ParseException e) {
                }
            }
            Date untilDate = null;
            String until = request.getParameter(""until"");
            if (StringUtils.isNotBlank(until)) {
                try {
                    untilDate = dayMonthYearEn.parse(until);
                } catch (ParseException e) {
                }
            }
            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));
            found = true;
        }
        if (found != true) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",1.0
"    public static final String hash(String data) {
        if (digest == null) {
            synchronized (StringUtils.class) {
                if (digest == null) {
                    try {
                        digest = MessageDigest.getInstance(""MD5"");
                    } catch (NoSuchAlgorithmException nsae) {
                    }
                }
            }
        }
        digest.update(data.getBytes());
        return toHex(digest.digest());
    }
","    public void process(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        if (request.getParameter(""acao"").equals(""confirmar"")) {
            String uuid = request.getParameter(""uuid"");
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO empresaDAO = new EmpresaDAO(pm);
            Empresa empresa = empresaDAO.pesquisar(uuid);
            if (empresa != null) {
                empresa.setAtivo(true);
                empresaDAO.criar(empresa);
            }
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_APRESENTACAO);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""logoff"")) {
            HttpSession session = request.getSession();
            session.setAttribute(""autorizado"", new Boolean(""false""));
            HttpServletResponse servletResponse = (HttpServletResponse) response;
            servletResponse.sendRedirect(Pagina.PAGINA_APRESENTACAO);
        } else if (request.getParameter(""acao"").equals(""preparar"")) {
            Empresa objeto = new Empresa();
            request.setAttribute(""objeto"", objeto);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_EMPRESA_CADASTRAR);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""cadastrar"")) {
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO empresaDAO = new EmpresaDAO(pm);
            String cnpj = request.getParameter(""cnpj"");
            String nome = request.getParameter(""nome"");
            String razao = request.getParameter(""razao"");
            String bairro = request.getParameter(""bairro"");
            String cidade = request.getParameter(""cidade"");
            String cep = request.getParameter(""cep"");
            String email = request.getParameter(""email"");
            Integer numero = null;
            if (request.getParameter(""numero"") != null && !request.getParameter(""numero"").equals("""")) {
                numero = new Integer(request.getParameter(""numero""));
            }
            String complemento = request.getParameter(""complemento"");
            String endereco = request.getParameter(""endereco"");
            String senha = request.getParameter(""senha"");
            boolean emailEncontrado = empresaDAO.pesquisarEmail(email);
            boolean cnpjEncontrado = empresaDAO.pesquisarCNPJ(cnpj);
            String uuid = UUID.randomUUID().toString();
            Empresa empresa = new Empresa(nome, razao, email, email, cnpj, endereco, numero, cep, complemento, bairro, cidade, uuid);
            if (!emailEncontrado && !cnpjEncontrado) {
                empresa = empresaDAO.adicionar(empresa);
                Usuario usuario = new Usuario(nome, email, senha, empresa.getId());
                UsuarioDAO usuarioDAO = new UsuarioDAO(pm);
                usuarioDAO.adicionar(usuario);
                StringBuffer corpo = new StringBuffer();
                corpo.append(""<html>"");
                corpo.append(""<head>"");
                corpo.append(""</head>"");
                corpo.append(""<body>"");
                corpo.append(""<body>"");
                corpo.append(""<div style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 13px; margin: 14px';>"");
                corpo.append(""<img src='http://www.appestoque.com.br/img/logo.jpg'/>"");
                corpo.append(""<h2 style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin: 0 0 16px; font-size: 18px; font-weight: normal'>Ol�, "" + empresa.getNome() + "".</h2>"");
                corpo.append(""<p>Por favor, confirme sua conta do Appestoque clicando nesse link:<br>"");
                corpo.append(""<a href='"" + Constantes.URL + Constantes.URI_CONFIRMAR + ""&&uuid="" + empresa.getUuid() + ""'"");
                corpo.append(""target='_blank'>"" + Constantes.URL + Constantes.URI_CONFIRMAR + ""&&uuid="" + empresa.getUuid() + ""</a></p>"");
                corpo.append(""<p>Quando voc� confirmar, voc� ter� acesso total ao Appestoque e todas as notifica��es futuras ser�o enviadas para este endere�o de e-mail.</p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; font-size: 13px; line-height: 18px; border-bottom: 1px solid rgb(238, 238, 238); padding-bottom: 10px; margin: 0 0 10px'>"");
                corpo.append(""<span style='font: italic 13px Georgia, serif; color: rgb(102, 102, 102)'>Equipe do Appestoque</span></p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin-top: 5px; font-size: 10px; color: #888888'>"");
                corpo.append(""Se voc� recebeu essa mensagem por engano e n�o criou uma conta do Appestoque, clique"");
                corpo.append("" <a href='mailto:suporte@appestoque.com.br?subject=[Cadastro]Mensagem por engano&&body='target='_blank'>n�o � minha conta</a>.</p>"");
                corpo.append(""<p style='font-family: 'Helvetica Neue', Arial, Helvetica, sans-serif; margin-top: 5px; font-size: 10px; color: #888888'>"");
                corpo.append(""Por favor n�o responda esta mensagem; ela foi enviada por um endere�o"");
                corpo.append(""de e-mail n�o monitorado. Esta mensagem � relacionada ao seu uso do"");
                corpo.append("" Appestoque. Para mais informa��es sobre a sua conta, por"");
                corpo.append(""favor encaminhe um e-mail para o"");
                corpo.append("" <a href='mailto:suporte@appestoque.com.br' target='_blank'>Suporte do Appestoque</a>.</p>"");
                corpo.append(""</div>"");
                corpo.append(""</body>"");
                corpo.append(""</html>"");
                Util.enviarEmail(email, Constantes.ASSUNTO_CADASTRO, corpo);
                response.sendRedirect(Pagina.PAGINA_APRESENTACAO);
            } else {
                ResourceBundle bundle = ResourceBundle.getBundle(""i18n"", request.getLocale());
                if (emailEncontrado) {
                    request.setAttribute(""mensagem"", bundle.getString(""app.mensagem.email.cadastrado""));
                } else if (cnpjEncontrado) {
                    request.setAttribute(""mensagem"", bundle.getString(""app.mensagem.cnpj.cadastrado""));
                }
                request.setAttribute(""objeto"", empresa);
                RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_EMPRESA_CADASTRAR);
                dispatcher.forward(request, response);
            }
        } else if (request.getParameter(""acao"").equals(""selecionar"")) {
            PersistenceManager pm = PMF.get().getPersistenceManager();
            EmpresaDAO dao = new EmpresaDAO(pm);
            Long id = new Long(request.getParameter(""id""));
            Empresa empresa = dao.pesquisar(id);
            HttpSession session = request.getSession();
            session.setAttribute(""empresa"", empresa);
            RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(Pagina.PAGINA_MENU);
            dispatcher.forward(request, response);
        } else if (request.getParameter(""acao"").equals(""noticia"")) {
            try {
                HttpURLConnection httpSource = null;
                URL url = new URL(""http://feeds.folha.uol.com.br/folha/dinheiro/rss091.xml"");
                httpSource = (HttpURLConnection) url.openConnection();
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(httpSource.getInputStream());
                doc.getDocumentElement().normalize();
                NodeList nList = doc.getElementsByTagName(""item"");
                PrintWriter out = response.getWriter();
                response.setContentType(""text/html"");
                for (int temp = 0; temp < 3; temp++) {
                    Node nNode = nList.item(temp);
                    if (nNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element eElement = (Element) nNode;
                        out.print(getTagValue(""title"", eElement) + ""<br/><br/>"");
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (request.getParameter(""acao"").equals(""pdf"")) {
            try {
                ServletOutputStream servletOutputStream = response.getOutputStream();
                PDF pdf = new PDF(servletOutputStream);
                response.setHeader(""Content-Disposition"", ""attachment; filename=qrcode.pdf"");
                response.setContentType(""application/pdf"");
                Page page = new Page(pdf, Letter.PORTRAIT);
                QRCode qr = null;
                qr = new QRCode();
                qr.setTypeNumber(Mode.MODE_8BIT_BYTE);
                qr.setErrorCorrectLevel(ErrorCorrectLevel.M);
                qr.addData(""Andr� Silva Tricano"");
                qr.make();
                qr.setPosition(200, 100);
                qr.drawOn(page);
                qr = new QRCode();
                qr.setTypeNumber(Mode.MODE_8BIT_BYTE);
                qr.setErrorCorrectLevel(ErrorCorrectLevel.M);
                qr.addData(""Alan Silva Tricano"");
                qr.make();
                qr.setPosition(400, 100);
                qr.drawOn(page);
                pdf.flush();
                servletOutputStream.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (request.getParameter(""acao"").equals(""file"")) {
            try {
                File file = new File(""d:\\MyXMLFile.xml"");
                DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
                DocumentBuilder db = dbf.newDocumentBuilder();
                Document doc = db.parse(file);
                doc.getDocumentElement().normalize();
                System.out.println(""Root element "" + doc.getDocumentElement().getNodeName());
                NodeList nodeLst = doc.getElementsByTagName(""employee"");
                System.out.println(""Information of all employees"");
                for (int s = 0; s < nodeLst.getLength(); s++) {
                    Node fstNode = nodeLst.item(s);
                    if (fstNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element fstElmnt = (Element) fstNode;
                        NodeList fstNmElmntLst = fstElmnt.getElementsByTagName(""firstname"");
                        Element fstNmElmnt = (Element) fstNmElmntLst.item(0);
                        NodeList fstNm = fstNmElmnt.getChildNodes();
                        System.out.println(""First Name : "" + ((Node) fstNm.item(0)).getNodeValue());
                        NodeList lstNmElmntLst = fstElmnt.getElementsByTagName(""lastname"");
                        Element lstNmElmnt = (Element) lstNmElmntLst.item(0);
                        NodeList lstNm = lstNmElmnt.getChildNodes();
                        System.out.println(""Last Name : "" + ((Node) lstNm.item(0)).getNodeValue());
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
",0.0
"    private URLConnection tryOpenConnection(String url) throws RuntimeException {
        URLConnection connection = null;
        try {
            connection = new URL(""https://"" + url).openConnection();
            connection.getInputStream();
            connection = new URL(""https://"" + url).openConnection();
            return connection;
        } catch (Exception e) {
            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);
        }
        try {
            connection = new URL(""http://"" + url).openConnection();
            connection.getInputStream();
            connection = new URL(""http://"" + url).openConnection();
            return connection;
        } catch (Exception e) {
            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);
        }
        return null;
    }
","    private static byte[] getHashBytes(String data, String algorithm) {
        MessageDigest md;
        byte[] digest = null;
        try {
            md = MessageDigest.getInstance(algorithm);
            md.update(data.getBytes(""UTF-8""), 0, data.length());
            digest = md.digest();
        } catch (NoSuchAlgorithmException e) {
        } catch (UnsupportedEncodingException e) {
        }
        return digest;
    }
",0.0
"    public static LinkedList<String> read(URL url) throws IOException {
        LinkedList<String> data = new LinkedList<String>();
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String input = """";
        while (true) {
            input = br.readLine();
            if (input == null) break;
            data.add(input);
        }
        br.close();
        return data;
    }
","    @Override
    public void actionPerformed(ActionEvent e) {
        if (feedbackView.getText().length() <= 0) return;
        try {
            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {

                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                    return null;
                }

                public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }

                public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                }
            } };
            try {
                SSLContext sc = SSLContext.getInstance(""SSL"");
                sc.init(null, trustAllCerts, new java.security.SecureRandom());
                HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            } catch (Exception e3) {
                e3.printStackTrace();
            }
            feedback = """";
            addLine(""Type            : "" + feedbackView.getType());
            addLine(""User            : "" + HIRuntime.getManager().getCurrentUser().getLastName() + "", "" + HIRuntime.getManager().getCurrentUser().getFirstName() + "" ("" + HIRuntime.getManager().getCurrentUser().getUserName() + "") "" + HIRuntime.getManager().getCurrentUser().getEmail());
            addLine(""Project         : P"" + HIRuntime.getManager().getProject().getId() + "" - "" + MetadataHelper.findValue(HIRuntime.getManager().getProject(), HIRuntime.getManager().getProject().getDefaultLanguage().getLanguageId()));
            addLine(""Client Version  : "" + HIRuntime.getClientVersion());
            addLine(""Service URL     : "" + HIRuntime.getManager().getServerURL());
            try {
                addLine(""Service Version : "" + HIRuntime.getManager().getVersionID());
            } catch (HIWebServiceException e1) {
            }
            addLine(""Client OS       : "" + System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version"") + "" ("" + System.getProperty(""os.arch"") + "")"");
            addLine(""Java Version    : "" + System.getProperty(""java.version"") + "" ("" + System.getProperty(""java.vendor"") + "")"");
            if (HIRuntime.getGui().getLastWSError() == null) addLine(""Last WS Error   : -none-""); else {
                HIWebServiceException lastWSError = HIRuntime.getGui().getLastWSError();
                addLine(""Last WS Error   : "" + lastWSError.getCause().getMessage() + "" ("" + lastWSError.getErrorType() + "")"");
                addLine("""");
                addLine(""Stack Trace"");
                addLine(""-----------"");
                ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
                PrintWriter writer = new PrintWriter(byteStream);
                lastWSError.getCause().printStackTrace(writer);
                writer.close();
                addLine(new String(byteStream.toByteArray()));
            }
            addLine("""");
            addLine(""Message"");
            addLine(""-------"");
            feedback = feedback + feedbackView.getText();
            feedback = feedback + ""\n\n"";
            feedback = URLEncoder.encode(feedback, ""UTF-8"");
            URL url = new URL(""https://hyperimage.cms.hu-berlin.de/2.0/wstart/provideFeedback.php"");
            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");
            connection.setDoOutput(true);
            PrintWriter writer = new PrintWriter(connection.getOutputStream());
            writer.write(""raw_fb="" + feedback);
            writer.close();
            connection.connect();
            String response = connection.getResponseMessage();
            if (response.compareTo(""OK"") == 0) {
                HIRuntime.getGui().clearLastWSError();
                HIRuntime.getGui().displayInfoDialog(""Feedback gesendet"", ""Vielen Dank für Ihr Feedback!\n\nIhre Nachricht wurde an die HyperImage Entwickler gesendet."");
            } else HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
            connection.disconnect();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        } catch (IOException e2) {
            e2.printStackTrace();
            HIRuntime.getGui().displayInfoDialog(""Feedback Fehlgeschlagen"", ""Leider konnte Ihr Feedback aufgrund eines Systemfehlers nicht gesendet werden.\n"" + ""Bitte versuchen Sie es später erneut.\n\n"" + ""Sollte das Problem bestehen bleiben wenden Sie sich bitte per mail an die Entwickler.\n\nVielen Dank!"");
        }
        HIRuntime.getGui().deregisterComponent(this, false);
    }
",0.0
"public static String md5(String text) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(text.getBytes(AlipayConfig.input_charset));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] bytes = msgDigest.digest();
        String md5Str = new String(encodeHex(bytes));
        return md5Str;
    }","    public void run() throws Exception {
        logger.debug(""#run enter"");
        PreparedStatement psNextId = null;
        ResultSet rsNextId = null;
        PreparedStatement ps = null;
        try {
            PreparedStatement psCount = connection.prepareStatement(COUNT_ACTIVE_ORDERS);
            psCount.setString(1, login);
            ResultSet rsCount = psCount.executeQuery();
            if (rsCount.next()) {
                Integer count = rsCount.getInt(1);
                if (count > 0) {
                    DBHelper.closeAll(null, rsCount, psCount);
                    throw new RuntimeException(""У вас уже есть один активный заказ. Вы не можете создать второй."");
                }
            }
            connection.setAutoCommit(false);
            psNextId = connection.prepareStatement(NEXT_ORDER);
            rsNextId = psNextId.executeQuery();
            if (rsNextId.next()) {
                orderId = rsNextId.getInt(1);
            }
            rsNextId.close();
            psNextId.close();
            logger.info(""#run orderId  = "" + orderId);
            ps = connection.prepareStatement(INSERT_ORDER);
            ps.setInt(1, orderId);
            if (order.getCustomerId() != null) {
                ps.setInt(2, order.getCustomerId());
            } else {
                ps.setNull(2, Types.INTEGER);
            }
            ps.setString(3, order.getSellerLogin());
            ps.executeUpdate();
            ps.close();
            logger.info(""#run order insert OK"");
            Iterator<OrderLine> lines = order.getLines().iterator();
            while (lines.hasNext()) {
                OrderLine line = lines.next();
                CreateOrderLineAction action = new CreateOrderLineAction();
                action.execute(connection, orderId, line);
            }
            connection.commit();
        } catch (SQLException ex) {
            logger.error(""SQLException"", ex);
            connection.rollback();
            throw new Exception(""Не удалось создать заказ. Ошибка : "" + ex.getMessage());
        } finally {
            connection.setAutoCommit(true);
        }
        logger.debug(""#run exit"");
    }
",0.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    public static JSONObject getFriend(long uid) throws ClientProtocolException, IOException, JSONException {
        HttpClient client = new DefaultHttpClient(params);
        HttpPost post = new HttpPost(FRIENDS_URI);
        List<NameValuePair> parameters = new ArrayList<NameValuePair>();
        parameters.add(new BasicNameValuePair(""uids"", arrayToString(new long[] { uid }, "","")));
        post.setEntity(new UrlEncodedFormEntity(parameters));
        HttpResponse response = client.execute(post);
        if (response.getStatusLine().getStatusCode() == 200) {
            String res = EntityUtils.toString(response.getEntity());
            JSONArray result = new JSONArray(res);
            return result.getJSONObject(0);
        }
        throw new IOException(""bad http response:"" + response.getStatusLine().getReasonPhrase());
    }
",0.0
"    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
","    public void writeTo(OutputStream out) throws IOException {
        if (!closed) {
            throw new IOException(""Stream not closed"");
        }
        if (isInMemory()) {
            memoryOutputStream.writeTo(out);
        } else {
            FileInputStream fis = new FileInputStream(outputFile);
            try {
                IOUtils.copy(fis, out);
            } finally {
                IOUtils.close(fis);
            }
        }
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    @Test
    public void shouldProgateStagingRepoToYumGroupRepo() throws Exception {
        givenGroupRepository(GROUP_REPO_ID, ""maven2yum"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_1, ""4.3.2"");
        givenClosedStagingRepoWithRpm(ARTIFACT_ID_2, ""2.3.4"");
        wait(10, SECONDS);
        final HttpResponse response = executeGetWithResponse(NEXUS_BASE_URL + ""/content/groups/staging-test-group/repodata/primary.xml.gz"");
        final String repoContent = IOUtils.toString(new GZIPInputStream(new ByteArrayInputStream(toByteArray(response.getEntity()))));
        assertThat(response.getStatusLine().getStatusCode(), is(200));
        assertThat(repoContent, containsString(ARTIFACT_ID_1));
        assertThat(repoContent, containsString(ARTIFACT_ID_2));
    }
",0.0
"    public HttpURLConnection getTileUrlConnection(int zoom, int tilex, int tiley) throws IOException {
        String url = getTileUrl(zoom, tilex, tiley);
        if (url == null) return null;
        return (HttpURLConnection) new URL(url).openConnection();
    }
","    @Override
    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {
        String path;
        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();
        try {
            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String data = """";
            while ((inputLine = in.readLine()) != null) data += inputLine;
            Response remoteData = new Response(new String(data));
            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));
            in.close();
            return remoteData;
        } catch (MalformedURLException e) {
            logger.error(""Illegal URL. Cannot connect to this remote object"", e);
            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);
        } catch (IOException e) {
            logger.error(""Cannot read from source. Please check remote object address"", e);
            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);
        }
    }
",0.0
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }
","    public static void copy(String from_name, String to_name, boolean overwriteOk) throws IOException {
        File from_file = new File(from_name);
        File to_file = new File(to_name);
        if (!from_file.exists()) abort(""FileCopy: no such source file: "" + from_name);
        if (!from_file.isFile()) abort(""FileCopy: can't copy directory: "" + from_name);
        if (!from_file.canRead()) abort(""FileCopy: source file is unreadable: "" + from_name);
        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());
        if (to_file.exists()) {
            if (!to_file.canWrite()) abort(""FileCopy: destination file is unwriteable: "" + to_name);
            if (!overwriteOk) {
                System.out.print(""Overwrite existing file "" + to_name + ""? (Y/N): "");
                System.out.flush();
                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                String response = in.readLine();
                if (!response.equals(""Y"") && !response.equals(""y"")) abort(""FileCopy: existing file was not overwritten."");
            }
        } else {
            String parent = to_file.getParent();
            if (parent == null) parent = System.getProperty(""user.dir"");
            File dir = new File(parent);
            if (!dir.exists()) abort(""FileCopy: destination directory doesn't exist: "" + parent);
            if (dir.isFile()) abort(""FileCopy: destination is not a directory: "" + parent);
            if (!dir.canWrite()) abort(""FileCopy: destination directory is unwriteable: "" + parent);
        }
        FileInputStream from = null;
        FileOutputStream to = null;
        try {
            from = new FileInputStream(from_file);
            to = new FileOutputStream(to_file);
            byte[] buffer = new byte[4096];
            int bytes_read;
            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);
        } finally {
            if (from != null) try {
                from.close();
            } catch (IOException e) {
                ;
            }
            if (to != null) try {
                to.close();
            } catch (IOException e) {
                ;
            }
        }
    }
",0.0
"    public String encryptToSHA(String info) {
        byte[] digesta = null;
        try {
            MessageDigest alga = MessageDigest.getInstance(""SHA-1"");
            alga.update(info.getBytes());
            digesta = alga.digest();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        String rs = byte2hex(digesta);
        return rs;
    }
","    public int obtenerCantidad() {
        try {
            BufferedOutputStream dest = null;
            BufferedInputStream is = null;
            ZipEntry entry;
            ZipFile zipfile = new ZipFile(""cantidadArchivos.zip"");
            Enumeration e = zipfile.entries();
            while (e.hasMoreElements()) {
                entry = (ZipEntry) e.nextElement();
                is = new BufferedInputStream(zipfile.getInputStream(entry));
                int count;
                byte data[] = new byte[buffer];
                FileOutputStream fos = new FileOutputStream(entry.getName());
                dest = new BufferedOutputStream(fos, buffer);
                while ((count = is.read(data, 0, buffer)) != -1) dest.write(data, 0, count);
                dest.flush();
                dest.close();
                is.close();
            }
            DataInputStream input = new DataInputStream(new FileInputStream(""cantidadArchivos.txt""));
            int a = Integer.parseInt(input.readLine());
            input.close();
            return (a);
        } catch (Exception e) {
            return (0);
        }
    }
",0.0
"    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug(""File does not exist: "" + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    public static String connRemote(JSONObject jsonObject, String OPCode, List<NameValuePair> nameValuePair) {
        String retSrc = """";
        try {
            HttpClient httpClient = new DefaultHttpClient();
            HttpPost httpPost = new HttpPost(AZConstants.validateURL);
            HttpParams httpParams = new BasicHttpParams();
            nameValuePair.add(new BasicNameValuePair(AZConstants.ACTION_TYPE, OPCode));
            nameValuePair.add(new BasicNameValuePair(AZConstants.PARAM, jsonObject.toString()));
            httpPost.setEntity(new UrlEncodedFormEntity(nameValuePair));
            httpPost.setParams(httpParams);
            HttpResponse response = httpClient.execute(httpPost);
            retSrc = EntityUtils.toString(response.getEntity());
        } catch (Exception e) {
            Log.e(TAG, e.toString());
        }
        return retSrc;
    }
",0.0
"    static int[] bubble(int[] s) {
        boolean f = true;
        while (f) {
            f = false;
            for (int i = 0; i < s.length - 1; i++) {
                if (s[i] > s[i + 1]) {
                    int t = s[i];
                    s[i] = s[i + 1];
                    s[i + 1] = t;
                    f = true;
                }
            }
        }
        return s;
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    private static String calcReturnKey(String key) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""SHA-1"");
        String text = new String();
        byte[] sha1hash = new byte[20];
        text = key + GUUI;
        md.update(text.getBytes(), 0, text.length());
        sha1hash = md.digest();
        return (Helper.getBASE64(sha1hash));
    }
","    public void _jspService(HttpServletRequest request, HttpServletResponse response) throws java.io.IOException, ServletException {
        PageContext pageContext = null;
        HttpSession session = null;
        ServletContext application = null;
        ServletConfig config = null;
        JspWriter out = null;
        Object page = this;
        JspWriter _jspx_out = null;
        PageContext _jspx_page_context = null;
        try {
            response.setContentType(""text/html;charset=UTF-8"");
            pageContext = _jspxFactory.getPageContext(this, request, response, null, true, 8192, true);
            _jspx_page_context = pageContext;
            application = pageContext.getServletContext();
            config = pageContext.getServletConfig();
            session = pageContext.getSession();
            out = pageContext.getOut();
            _jspx_out = out;
            _jspx_resourceInjector = (org.apache.jasper.runtime.ResourceInjector) application.getAttribute(""com.sun.appserv.jsp.resource.injector"");
            out.write(""\n"");
            out.write(""\n"");
            out.write(""\n"");
            String username = ""test"";
            String password = ""test"";
            int providerId = 1;
            if (request.getParameter(""providerId"") != null) providerId = Integer.parseInt(request.getParameter(""providerId""));
            String thisPageContextAddress = ""http://localhost:8080/"" + request.getContextPath();
            String thisPageServingAddress = thisPageContextAddress + ""/index.jsp"";
            String token = """";
            String token_timeout = (String) request.getParameter(""token_timeout"");
            String referer = request.getHeader(""Referer"");
            if (token_timeout != null && token_timeout.equals(""true"")) {
                System.out.println(""token timeout for referer"" + referer);
                if (referer != null) {
                    if (request.getSession().getServletContext().getAttribute(""token_timeout_processing_lock"") == null) {
                        request.getSession().getServletContext().setAttribute(""token_timeout_processing_lock"", true);
                        byte[] buff = null;
                        BufferedInputStream bis = null;
                        URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                        URLConnection urlc = url.openConnection();
                        int length = urlc.getContentLength();
                        InputStream in = urlc.getInputStream();
                        buff = new byte[length];
                        int bytesRead = 0;
                        while (bytesRead < length) {
                            bytesRead += in.read(buff, bytesRead, in.available());
                        }
                        token = new String(buff);
                        token = token.replaceAll(""[\\r\\f]"", """");
                        token = token.trim();
                        request.getSession().getServletContext().setAttribute(""token"", token);
                        out.println(token);
                        request.getSession().getServletContext().removeAttribute(""token_timeout_processing_lock"");
                    } else out.println(""token_timeout_processing_lock"");
                }
            } else {
                if (request.getSession().getServletContext().getAttribute(""token"") == null || request.getSession().getServletContext().getAttribute(""token"").equals("""")) {
                    byte[] buff = null;
                    BufferedInputStream bis = null;
                    URL url = new URL(thisPageContextAddress + ""/ServerAdminServlet?action=login&username="" + username + ""&password="" + password);
                    URLConnection urlc = url.openConnection();
                    int length = urlc.getContentLength();
                    InputStream in = urlc.getInputStream();
                    buff = new byte[length];
                    int bytesRead = 0;
                    while (bytesRead < length) {
                        bytesRead += in.read(buff, bytesRead, in.available());
                    }
                    token = new String(buff);
                    token = token.replaceAll(""[\\r\\f]"", """");
                    token = token.trim();
                    request.getSession().getServletContext().setAttribute(""token"", token);
                }
                out.write(""<html>\n"");
                out.write(""  <head>\n"");
                out.write(""    <title>AJAX test </title>\n"");
                out.write(""    <script type=\""text/javascript\"" src=\""OpenLayers-2.8/OpenLayers.js\""></script>\n"");
                out.write(""    <script type=\""text/javascript\"">\n"");
                out.write(""\n"");
                out.write(""        function init(){\n"");
                out.write(""\n"");
                out.write(""            var token = \"""");
                out.print(request.getSession().getServletContext().getAttribute(""token""));
                out.write(""\"";\n"");
                out.write(""\n"");
                out.write(""            var options = {\n"");
                out.write(""                            maxExtent: new OpenLayers.Bounds(-600, -300, 0, 400),\n"");
                out.write(""                            maxResolution: 4.77730, minRezolution: 78271.517, numZoomLevels: 15, units: 'm'\n"");
                out.write(""                          }\n"");
                out.write(""\n"");
                out.write(""\n"");
                out.write(""            var map = new OpenLayers.Map('map', options);\n"");
                out.write(""            var layer = new OpenLayers.Layer.TMS(\""TMS\"", \""/WebGISTileServer/TMSServletProxy/\"" + token + \""/7/\"",\n"");
                out.write(""                                                { layername: 'TMS', type: 'png' });\n"");
                out.write(""            map.addLayer(layer);\n"");
                out.write(""            map.addControl(new OpenLayers.Control.MousePosition());\n"");
                out.write(""            map.setCenter(new OpenLayers.LonLat(-300, 120), 4);\n"");
                out.write(""        }\n"");
                out.write(""    </script>\n"");
                out.write(""  </head>\n"");
                out.write(""  <body onload=\""init()\"">\n"");
                out.write(""      <H1>TeleAtlas map with TMS</H1>\n"");
                out.write(""      <div id=\""map\"" style=\""width:100%; height:90%\""></div>\n"");
                out.write(""  </body>\n"");
                out.write(""</html>"");
            }
        } catch (Throwable t) {
            if (!(t instanceof SkipPageException)) {
                out = _jspx_out;
                if (out != null && out.getBufferSize() != 0) out.clearBuffer();
                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
            }
        } finally {
            _jspxFactory.releasePageContext(_jspx_page_context);
        }
    }
",0.0
"    public String digestPassword(String password) {
        StringBuffer hexString = new StringBuffer();
        try {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(password.getBytes());
            byte[] messageDigest = algorithm.digest();
            for (byte b : messageDigest) {
                hexString.append(Integer.toHexString(0xFF & b));
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return hexString.toString();
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    public boolean connectyahoo(String login, String password) throws Exception {
        String lapage = new String("""");
        String myargs = new String("""");
        Pattern pat;
        Matcher mat;
        int data;
        URL myurl = new URL(""http://groups.yahoo.com/mygroups"");
        URLConnection conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""login : "");
        InputStream in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        myargs += URLEncoder.encode("".tries"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".src"", ""UTF-8"") + ""="" + URLEncoder.encode(""ygrp"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".md5"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".hash"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".js"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".last"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""promo"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".intl"", ""UTF-8"") + ""="" + URLEncoder.encode(""us"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".bypass"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".partner"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".u\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".u"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".v"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".challenge\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".challenge"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".yplus"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".emailCode"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""pkg"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""stepid"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".ev"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""hasMsgr"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".chkP"", ""UTF-8"") + ""="" + URLEncoder.encode(""Y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".done"", ""UTF-8"") + ""="" + URLEncoder.encode(""http://groups.yahoo.com/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(login, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""passwd"", ""UTF-8"") + ""="" + URLEncoder.encode(password, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".persistent"", ""UTF-8"") + ""="" + URLEncoder.encode(""y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".save"", ""UTF-8"") + ""="" + URLEncoder.encode(""Sign In"", ""UTF-8"");
        myurl = new URL(""http://login.yahoo.com/config/login"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        OutputStream output = conn.getOutputStream();
        PrintStream pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""adult : "");
        in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\""ycb\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode(""ycb"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""dest"", ""UTF-8"") + ""="" + URLEncoder.encode(""/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""accept"", ""UTF-8"") + ""="" + URLEncoder.encode(""I Acce"", ""UTF-8"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        output = conn.getOutputStream();
        pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        return true;
    }
",0.0
"    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File part : parts) {
                setState(part.getName(), BUILDING);
                FileChannel in = new FileInputStream(part).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    public static void copyFile(File in, File out) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            inChannel.transferTo(0, inChannel.size(), outChannel);
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
",1.0
"    public void write(HttpServletResponse res) throws MalformedURLException, IOException {
        if (m_url.equals("""")) {
            return;
        }
        URL url = new URL(m_url);
        URLConnection con = url.openConnection();
        con.setUseCaches(false);
        BufferedInputStream in = new BufferedInputStream(con.getInputStream(), BUF_SIZE);
        BufferedOutputStream out = new BufferedOutputStream(res.getOutputStream());
        byte[] buf = new byte[BUF_SIZE];
        int size = 0;
        String contentType = con.getContentType();
        if (contentType != null) {
            res.setContentType(con.getContentType());
        }
        while ((size = in.read(buf)) > 0) {
            out.write(buf, 0, size);
        }
        out.flush();
        out.close();
        in.close();
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    public void myClickHandler(View view) {
        switch(view.getId()) {
            case R.id.ReadWebPage:
                try {
                    textView.setText("""");
                    URL url = new URL(urlText.getText().toString());
                    BufferedReader rd = new BufferedReader(new InputStreamReader(url.openStream()));
                    String line = """";
                    while ((line = rd.readLine()) != null) {
                        textView.append(line);
                    }
                } catch (Exception e) {
                    System.out.println(""Nay, did not work"");
                    textView.setText(e.getMessage());
                }
                break;
        }
    }
","    protected String saveJar2TmpFile(String jarUrl, boolean reportError) {
        InputStream is = null;
        try {
            URL url = new URL(jad.getJarURL());
            URLConnection conn = url.openConnection();
            if (url.getUserInfo() != null) {
                String userInfo = new String(Base64Coder.encode(url.getUserInfo().getBytes(""UTF-8"")));
                conn.setRequestProperty(""Authorization"", ""Basic "" + userInfo);
            }
            is = conn.getInputStream();
            File tmpDir = null;
            String systemTmpDir = MIDletSystemProperties.getSystemProperty(""java.io.tmpdir"");
            if (systemTmpDir != null) {
                tmpDir = new File(systemTmpDir, ""microemulator-apps"");
                if ((!tmpDir.exists()) && (!tmpDir.mkdirs())) {
                    tmpDir = null;
                }
            }
            File tmp = File.createTempFile(""me2-app-"", "".jar"", tmpDir);
            tmp.deleteOnExit();
            IOUtils.copyToFile(is, tmp);
            return IOUtils.getCanonicalFileClassLoaderURL(tmp);
        } catch (IOException e) {
            if (reportError) {
                Message.error(""Unable to open jar "" + jarUrl, e);
            }
            return null;
        } finally {
            IOUtils.closeQuietly(is);
        }
    }
",0.0
"    public static void readDefault() {
        ClassLoader l = Skeleton.class.getClassLoader();
        URL url;
        if (l != null) {
            url = l.getResource(DEFAULT_LOC);
        } else {
            url = ClassLoader.getSystemResource(DEFAULT_LOC);
        }
        if (url == null) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
        try {
            InputStreamReader reader = new InputStreamReader(url.openStream());
            readSkel(new BufferedReader(reader));
        } catch (IOException e) {
            Out.error(ErrorMessages.SKEL_IO_ERROR_DEFAULT);
            throw new GeneratorException();
        }
    }
","    protected void doBackupOrganize() throws Exception {
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet result = null;
        String strSelQuery = ""SELECT organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y "" + ""FROM "" + Common.ORGANIZE_TABLE;
        String strInsQuery = ""INSERT INTO "" + Common.ORGANIZE_B_TABLE + "" "" + ""(version_no,organize_id,organize_type_id,organize_name,organize_manager,"" + ""organize_describe,work_type,show_order,position_x,position_y) "" + ""VALUES (?,?,?,?,?,?,?,?,?,?)"";
        DBOperation dbo = factory.createDBOperation(POOL_NAME);
        try {
            try {
                con = dbo.getConnection();
                con.setAutoCommit(false);
                ps = con.prepareStatement(strSelQuery);
                result = ps.executeQuery();
                ps = con.prepareStatement(strInsQuery);
                while (result.next()) {
                    ps.setInt(1, this.versionNO);
                    ps.setString(2, result.getString(""organize_id""));
                    ps.setString(3, result.getString(""organize_type_id""));
                    ps.setString(4, result.getString(""organize_name""));
                    ps.setString(5, result.getString(""organize_manager""));
                    ps.setString(6, result.getString(""organize_describe""));
                    ps.setString(7, result.getString(""work_type""));
                    ps.setInt(8, result.getInt(""show_order""));
                    ps.setInt(9, result.getInt(""position_x""));
                    ps.setInt(10, result.getInt(""position_y""));
                    int resultCount = ps.executeUpdate();
                    if (resultCount != 1) {
                        con.rollback();
                        throw new CesSystemException(""Organize_backup.doBackupOrganize(): ERROR Inserting data "" + ""in T_SYS_ORGANIZE_B INSERT !! resultCount = "" + resultCount);
                    }
                }
                con.commit();
            } catch (SQLException se) {
                con.rollback();
                throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException:  "" + se);
            } finally {
                con.setAutoCommit(true);
                close(dbo, ps, result);
            }
        } catch (SQLException se) {
            throw new CesSystemException(""Organize_backup.doBackupOrganize(): SQLException while committing or rollback"");
        }
    }
",0.0
"    private String md5(String input) {
        MessageDigest md5Digest;
        try {
            md5Digest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new UserException(""could not get a md5 message digest"", e);
        }
        md5Digest.update(input.getBytes());
        return new String(md5Digest.digest());
    }
","                public void run() {
                    ShareFolder part = (ShareFolder) ObjectClone.clone(readers[j]);
                    ShareFileReader reader = new ShareFileReader(readers[j], files[0]);
                    ShareFileWriter writer = new ShareFileWriter(part, new File(""Downloads/"" + readers[j].getName()));
                    long tot = 0;
                    byte[] b = new byte[(int) (Math.random() * 10000)];
                    while (tot < readers[j].getSize()) {
                        reader.read(b);
                        byte[] bwrite = new byte[(int) (Math.random() * 10000) + b.length];
                        System.arraycopy(b, 0, bwrite, 0, b.length);
                        writer.write(bwrite, b.length);
                        tot += b.length;
                    }
                    done++;
                    System.out.println((int) (done * 100.0 / PARTS) + ""% Complete"");
                }
",0.0
"    protected Template read(URL url) throws TemplateException {
        String parent = Parent(url);
        TemplateLoaderContext context = new TemplateLoaderContext(this, parent, false);
        String contents;
        InputStream in = null;
        try {
            in = url.openStream();
            contents = this.readToString(new java.io.InputStreamReader(in));
        } catch (IOException exc) {
            throw new TemplateException(url.toString(), exc);
        } finally {
            try {
                in.close();
            } catch (IOException ignore) {
            }
        }
        TemplateParser parser = this.parser;
        if (null == parser) return (new Template(contents, context)); else return (new Template(parser, contents, context));
    }
","    public static void copy(String inputFile, String outputFile) throws EDITSException {
        try {
            FileReader in = new FileReader(inputFile);
            FileWriter out = new FileWriter(outputFile);
            int c;
            while ((c = in.read()) != -1) out.write(c);
            in.close();
            out.close();
        } catch (Exception e) {
            throw new EDITSException(""Could not copy "" + inputFile + "" into "" + outputFile + "" because:\n"" + e.getMessage());
        }
    }
",0.0
"    public static String hash(String text) {
        try {
            MessageDigest md;
            md = MessageDigest.getInstance(""SHA-1"");
            md.update(text.getBytes(""UTF-8""), 0, text.length());
            byte[] md5hash = md.digest();
            return convertToHex(md5hash);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    private JButton getButtonImagen() {
        if (buttonImagen == null) {
            buttonImagen = new JButton();
            buttonImagen.setText(Messages.getString(""gui.AdministracionResorces.6""));
            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetree.png""));
            buttonImagen.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent e) {
                    JFileChooser fc = new JFileChooser();
                    fc.addChoosableFileFilter(new ImageFilter());
                    fc.setAccessory(new ImagePreview(fc));
                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(""gui.AdministracionResorces.8""));
                    if (returnVal == JFileChooser.APPROVE_OPTION) {
                        File file = fc.getSelectedFile();
                        String rutaGlobal = System.getProperty(""user.dir"") + ""/"" + rutaDatos + ""imagenes/"" + file.getName();
                        String rutaRelativa = rutaDatos + ""imagenes/"" + file.getName();
                        try {
                            FileInputStream fis = new FileInputStream(file);
                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);
                            FileChannel canalFuente = fis.getChannel();
                            FileChannel canalDestino = fos.getChannel();
                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);
                            fis.close();
                            fos.close();
                            imagen.setImagenURL(rutaRelativa);
                            gui.getEntrenamientoIzquierdaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesIzquierda().getSelectedItem()).getImagenURL()));
                            gui.getEntrenamientoDerechaLabel().setIcon(gui.getProcesadorDatos().escalaImageIcon(((Imagen) gui.getComboBoxImagenesDerecha().getSelectedItem()).getImagenURL()));
                            buttonImagen.setIcon(new ImageIcon(""data/icons/view_sidetreeOK.png""));
                            labelImagenPreview.setIcon(gui.getProcesadorDatos().escalaImageIcon(imagen.getImagenURL()));
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    } else {
                    }
                }
            });
        }
        return buttonImagen;
    }
",0.0
"    private static byte[] getHashValue(INewEntryDescriptor descriptor) {
        String timeStamp = Calendar.getInstance().getTime().toString();
        MessageDigest sha1;
        byte[] digest = { 0 };
        try {
            sha1 = MessageDigest.getInstance(""SHA-1"");
            sha1.update(descriptor.getContactName().getBytes());
            sha1.update(descriptor.getAlgorithmName().getBytes());
            sha1.update(descriptor.getProvider().getBytes());
            return digest = sha1.digest(timeStamp.getBytes());
        } catch (NoSuchAlgorithmException e) {
            logger.error(""NoSuchAlgorithmException while digesting"", e);
        }
        return digest;
    }
","    public void updateDBModel(Tasks task) throws Exception {
        task.setOperationName(""Updating DB Model.."");
        int localVersion = getLocalModelVersion();
        int currentVersion = 0;
        try {
            currentVersion = getModelVersion();
        } catch (SQLException e) {
            if (e.getErrorCode() != 1146) {
                throw e;
            }
        }
        boolean autoCommit = getConn().getAutoCommit();
        try {
            getConn().setAutoCommit(false);
            for (int version = currentVersion + 1; version <= localVersion; version++) {
                task.setStatus(""Updating to version "" + version);
                InputStream in = EDACCApp.class.getClassLoader().getResourceAsStream(""edacc/resources/db_version/"" + version + "".sql"");
                if (in == null) {
                    throw new SQLQueryFileNotFoundException();
                }
                executeSqlScript(task, in);
                Statement st = getConn().createStatement();
                st.executeUpdate(""INSERT INTO `Version` VALUES ("" + version + "", NOW())"");
                st.close();
            }
        } catch (Exception e) {
            getConn().rollback();
            throw e;
        } finally {
            getConn().setAutoCommit(autoCommit);
        }
    }
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    private static String getToken(HttpClient client) throws Exception {
        String token = null;
        HttpGet httpget = new HttpGet(""https://libsys.arlingtonva.us/iii/cas/login?service=http&scope=1"");
        HttpResponse response = client.execute(httpget);
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            entity = new BufferedHttpEntity(entity);
        }
        if (entity != null) {
            String resp = EntityUtils.toString(entity);
            EntityUtils.consume(entity);
            Pattern pattern = Pattern.compile(""<input .*name=\""lt\"".*value=\""(.*)\"".*/>"");
            Matcher matcher = pattern.matcher(resp);
            if (matcher.find()) {
                token = matcher.group(1);
            }
        }
        return token;
    }
",0.0
"    public static void main(String[] args) {
        URL url = Thread.currentThread().getContextClassLoader().getResource(""org/xul/script/resources/xul.properties"");
        try {
            PropertyResourceBundle prb = new PropertyResourceBundle(url.openStream());
            String version = prb.getString(""version"");
            String date = prb.getString(""date"");
            System.out.println(""javaXUL version "" + version + "" build on "" + date);
            System.out.println(""Distributed under LGPL license"");
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
","    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
",0.0
"    private String hashPassword(String plainTextPassword) {
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
            digest.reset();
            digest.update(plainTextPassword.getBytes());
            BASE64Encoder enc = new BASE64Encoder();
            return enc.encode(digest.digest());
        } catch (NoSuchAlgorithmException e) {
            log.error(e);
            throw new RuntimeException(e);
        }
    }
","    protected HttpResponse doGet(String action, String[][] args) throws IOException {
        long startTime = System.currentTimeMillis();
        String getString = host + ""?"" + ACTION_PARAMETER + ""="" + action;
        if (args != null && args.length != 0) {
            for (int i = 0; i < args.length; i++) {
                if (args[i].length != 0) {
                    getString = getString + ""&"" + args[i][0] + ""="" + encode(args[i][1]);
                }
            }
        }
        HttpGet httpGet = new HttpGet(getString);
        HttpResponse response = getHttpClient().execute(httpGet);
        if (timingsOn) {
            totalCalls++;
            long elapsedTime = (System.currentTimeMillis() - startTime);
            if (totalCalls != 1) {
                totalTime = totalTime + elapsedTime;
                minTime = Math.min(minTime, elapsedTime);
                maxTime = Math.max(maxTime, elapsedTime);
            } else {
                minTime = elapsedTime;
                maxTime = 0L;
            }
            System.out.println(""http get took "" + elapsedTime + "" ms., (calls, min, max, av) = ("" + totalCalls + "", "" + minTime + "", "" + maxTime + "", "" + (totalTime / totalCalls) + "")"");
        }
        return response;
    }
",0.0
"    public static String readRss(String feed, int num) {
        InputStream stream = null;
        try {
            feed = appendParam(feed, ""num"", """" + num);
            System.out.println(""feed="" + feed);
            URL url = new URL(feed);
            URLConnection connection = url.openConnection();
            connection.setRequestProperty(""User-Agent"", RSS_USER_AGENT);
            stream = connection.getInputStream();
            return CFileHelper.readInputStream(stream);
        } catch (Exception e) {
            throw new CException(e);
        } finally {
            CFileHelper.closeStream(stream);
        }
    }
","    protected File extractArchive(File archive) {
        byte buf[] = new byte[BUF_SIZE];
        ZipInputStream zis = null;
        File archiveDirectory = null;
        FileOutputStream fos;
        ZipEntry entry;
        File curEntry;
        int n;
        try {
            zis = new ZipInputStream(new FileInputStream(archive));
            while ((entry = zis.getNextEntry()) != null) {
                curEntry = new File(workingDir, entry.getName());
                if (entry.isDirectory()) {
                    getLogger().info(""skip directory: "" + entry.getName());
                    if (archiveDirectory == null) archiveDirectory = curEntry;
                    continue;
                }
                getLogger().info(""zip-entry (file): "" + entry.getName() + "" ==> real path: "" + curEntry.getAbsolutePath());
                if (!curEntry.getParentFile().exists()) curEntry.getParentFile().mkdirs();
                fos = new FileOutputStream(curEntry);
                while ((n = zis.read(buf, 0, buf.length)) > -1) fos.write(buf, 0, n);
                fos.close();
                zis.closeEntry();
            }
        } catch (Throwable t) {
            t.printStackTrace();
        } finally {
            try {
                if (zis != null) zis.close();
            } catch (Throwable t) {
            }
        }
        return archiveDirectory;
    }
",0.0
"    private void nioBuild() {
        try {
            final ByteBuffer buffer = ByteBuffer.allocateDirect(1024 * 4);
            final FileChannel out = new FileOutputStream(dest).getChannel();
            for (File part : parts) {
                setState(part.getName(), BUILDING);
                FileChannel in = new FileInputStream(part).getChannel();
                while (in.read(buffer) > 0) {
                    buffer.flip();
                    written += out.write(buffer);
                    buffer.clear();
                }
                in.close();
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
","    @Override
    protected String determineDataType() {
        final String spec = getSpec();
        if (spec.endsWith(""=jpeg"")) {
            return ""jpeg"";
        } else if (mimeType != UNSET) {
            return mimeType;
        } else if (spec != SPEC_UNSET && spec.startsWith(""http"") && spec.contains(""fedora"")) {
            if (spec.endsWith(""bdef:AssetDef/getFullView/"")) {
                return ""html"";
            } else {
                String type = getProperty(CONTENT_TYPE);
                if (type == null || type.length() < 1) {
                    try {
                        final URL url = (mURL != null ? mURL : new URL(getSpec()));
                        if (DEBUG.Enabled) out(""polling actual HTTP server for content-type: "" + url);
                        if (!VUE.isApplet()) type = url.openConnection().getHeaderField(""Content-type""); else type = null;
                        if (DEBUG.Enabled) {
                            out(""got contentType "" + url + "" ["" + type + ""]"");
                        }
                        if (type != null && type.length() > 0) setProperty(CONTENT_TYPE, type);
                    } catch (Throwable t) {
                        Log.error(""content-type-fetch: "" + this, t);
                    }
                }
                if (type != null && type.contains(""/"")) {
                    mimeType = type.split(""/"")[1];
                    if (mimeType.indexOf(';') > 0) {
                        mimeType = mimeType.substring(0, mimeType.indexOf(';'));
                    }
                    return mimeType;
                }
            }
        }
        return super.determineDataType();
    }
",0.0
"    private String generate(String value) throws Exception {
        String resStr = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes(""utf-8""), 0, value.length());
            byte[] result = md.digest();
            resStr = FTGenerate.convertToHex(result);
            md.reset();
        } catch (NoSuchAlgorithmException nae) {
            this.getLog().severe(""Hash no funcionando"");
            nae.printStackTrace();
            throw new Exception(""Hash no funcionando"");
        } catch (UnsupportedEncodingException ee) {
            this.getLog().severe(""Encoding no funcionando"");
            ee.printStackTrace();
            throw new Exception(""Encoding no funcionando"");
        }
        return resStr;
    }
","    private String getServerData(String returnString) {
        InputStream is = null;
        String result = """";
        ArrayList<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
        nameValuePairs.add(new BasicNameValuePair(""usuario"", Login.usuario));
        nameValuePairs.add(new BasicNameValuePair(""amigoABorrar"", amigoABorrar.trim()));
        nameValuePairs.add(new BasicNameValuePair(""grupo"", MisGrupos.seleccion.trim()));
        try {
            HttpClient httpclient = new DefaultHttpClient();
            HttpPost httppost = new HttpPost(returnString);
            httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
            HttpResponse response = httpclient.execute(httppost);
            HttpEntity entity = response.getEntity();
            is = entity.getContent();
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error en la conexion http "" + e.toString());
        }
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is, ""iso-8859-1""), 8);
            String line = reader.readLine();
            is.close();
            result = line.trim().toString();
            Log.d(""AmigosPorGrupo"", ""Longitud line: "" + line.trim().length());
        } catch (Exception e) {
            Log.e(""AmigosPorGrupo"", ""Error converting result "" + e.toString());
        }
        Log.d(""AmigosPorGrupo"", ""Funciono json"" + result);
        return result;
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
",0.0
"    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
","    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
",0.0
"    private void serveRedir(OutputStream os, IRequest req) throws IOException {
        String urlString = req.getParameter(""url"");
        URL url = new URL(urlString);
        URLConnection con = url.openConnection();
        InputStream is = new BufferedInputStream(con.getInputStream());
        String ct = con.getContentType();
        int cl = con.getContentLength();
        String jsLink = ""<script language=\""JavaScript1.2\"" src=\""/tddt.js\"" type='text/javascript'></script>\n"";
        int i;
        String head = getHead(""HTTP/1.0 200 OK"", ""Content-Type: "" + ct + ""\nContent-Length: -1"");
        os.write(head.getBytes());
        if (ct != null && ct.indexOf(""html"") != -1) {
            os.write(jsLink.getBytes());
            NetUtils.saveChangeLink(url, os);
        } else {
            int len;
            byte[] b = new byte[1024];
            while ((len = is.read(b)) >= 0) {
                os.write(b, 0, len);
            }
        }
        os.flush();
    }
","    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
",0.0
"    public static String getHashText(String plainText, String algorithm) throws NoSuchAlgorithmException {
        MessageDigest mdAlgorithm = MessageDigest.getInstance(algorithm);
        mdAlgorithm.update(plainText.getBytes());
        byte[] digest = mdAlgorithm.digest();
        StringBuffer hexString = new StringBuffer();
        for (int i = 0; i < digest.length; i++) {
            plainText = Integer.toHexString(0xFF & digest[i]);
            if (plainText.length() < 2) {
                plainText = ""0"" + plainText;
            }
            hexString.append(plainText);
        }
        return hexString.toString();
    }
","    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    @Override
    protected Properties loadFile(String fileName) {
        Properties prop = new Properties();
        try {
            URL url = new File(fileName).toURI().toURL();
            final InputStream input = url.openStream();
            prop.load(input);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return prop;
    }
",0.0
"    private static Set<? extends Class<?>> findEntitiesFromUrl(URL url) {
        try {
            JarEntry entry;
            JarInputStream jarStream = new JarInputStream(url.openStream());
            Set<Class<?>> classes = new HashSet<Class<?>>();
            while ((entry = jarStream.getNextJarEntry()) != null) {
                String name = entry.getName();
                if (!entry.isDirectory() && name.endsWith("".class"")) {
                    addIfEntity(classes, name);
                }
            }
            return classes;
        } catch (IOException ioe) {
            log.error(""Could not search URL '"", url, ""' for entities due to an IOException: "", ioe.getMessage());
        }
        return new HashSet<Class<?>>();
    }
","    @Override
    public void view(HttpServletRequest request, HttpServletResponse response) throws Exception {
        boolean found = false;
        String name = getArgument(request.getPathInfo());
        if (StringUtils.contains(name, '/')) {
            File file = new File(config.getProperty(Config.MULTIMEDIA_PATH) + Config.FILE_SEPARATOR + name);
            if (file.exists() && file.isFile()) {
                found = true;
                MagicMatch match = Magic.getMagicMatch(file, true);
                response.setContentType(match.getMimeType());
                FileInputStream in = new FileInputStream(file);
                IOUtils.copyLarge(in, response.getOutputStream());
                in.close();
            }
        } else if (!StringUtils.isBlank(name)) {
            int articleId = NumberUtils.toInt(name);
            if (articleId > 0) {
                Article article = articleDao.load(articleId);
                if (article != null) {
                    found = true;
                    sendArticle(request, response, article);
                }
            }
        } else {
            int page = NumberUtils.toInt(request.getParameter(""page""), 0);
            Date fromDate = null;
            String from = request.getParameter(""from"");
            if (StringUtils.isNotBlank(from)) {
                try {
                    fromDate = dayMonthYearEn.parse(from);
                } catch (ParseException e) {
                }
            }
            Date untilDate = null;
            String until = request.getParameter(""until"");
            if (StringUtils.isNotBlank(until)) {
                try {
                    untilDate = dayMonthYearEn.parse(until);
                } catch (ParseException e) {
                }
            }
            sendArticleList(request, response, articleDao.list(request.getParameter(""query""), request.getParameter(""author""), request.getParameter(""tags""), request.getParameterValues(""types""), fromDate, untilDate, page, HITS_PER_PAGE, null));
            found = true;
        }
        if (found != true) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
        }
    }
",0.0
"    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter(""path"");
        path = URLDecoder.decode(path, ""UTF-8"");
        String name = req.getParameter(""name"");
        name = new String(name.getBytes(), ""UTF-8"");
        String contentType = req.getParameter(""contentType"");
        if (path == null) {
            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");
            LOG.error(e);
            throw e;
        }
        URL url = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(url, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
","    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""iso-8859-1""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
",0.0
"    static void sort(int[] a) {
        int i = 0;
        while (i < a.length - 1) {
            int j = 0;
            while (j < (a.length - i) - 1) {
                if (a[j] > a[j + 1]) {
                    int aux = a[j];
                    a[j] = a[j + 1];
                    a[j + 1] = aux;
                }
                j = j + 1;
            }
            i = i + 1;
        }
    }
","    private static List<String> loadServicesImplementations(final Class ofClass) {
        List<String> result = new ArrayList<String>();
        String override = System.getProperty(ofClass.getName());
        if (override != null) {
            result.add(override);
        }
        ClassLoader loader = ServiceLib.class.getClassLoader();
        URL url = loader.getResource(""META-INF/services/"" + ofClass.getName());
        if (url == null) {
            return result;
        }
        InputStream inStream = null;
        InputStreamReader reader = null;
        BufferedReader bReader = null;
        try {
            inStream = url.openStream();
            reader = new InputStreamReader(inStream);
            bReader = new BufferedReader(reader);
            String line;
            while ((line = bReader.readLine()) != null) {
                if (!line.matches(""\\s*(#.*)?"")) {
                    result.add(line.trim());
                }
            }
        } catch (IOException iox) {
            LOG.log(Level.WARNING, ""Could not load services descriptor: "" + url.toString(), iox);
        } finally {
            finalClose(bReader);
            finalClose(reader);
            finalClose(inStream);
        }
        return result;
    }
",0.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    private String getImageUrlForComicsJoke(Date date, String baseURL, String imageDefinition, int imagePathStart) throws JokeFinderException {
        String imageUrl = null;
        try {
            imageUrl = getBaseImageComicsJoke(date, baseURL, imageDefinition, imagePathStart);
            URL url = new URL(imageUrl);
            url.openStream();
        } catch (JokeFinderException e) {
            logger.warn(""Couldn't find base URL."", e);
            imageUrl = null;
        } catch (IOException e) {
            logger.warn(""Couldn't find or open image base URL."", e);
            imageUrl = null;
        }
        if (imageUrl == null) {
            throw new JokeFinderException(""Couldn't find joke."");
        }
        return imageUrl;
    }
",0.0
"public static String md5(String text) {
        MessageDigest msgDigest = null;
        try {
            msgDigest = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException(""System doesn't support MD5 algorithm."");
        }
        try {
            msgDigest.update(text.getBytes(AlipayConfig.input_charset));
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(""System doesn't support your  EncodingException."");
        }
        byte[] bytes = msgDigest.digest();
        String md5Str = new String(encodeHex(bytes));
        return md5Str;
    }","    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testBytes = ""testString"".getBytes();
        final InputStream istream = new ByteArrayInputStream(testBytes);
        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);
        IOUtils.copy(teeStream, new NullOutputStream());
        teeStream.close();
        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());
    }
",0.0
"    public void execute(HttpServletRequest req, HttpServletResponse res, HttpServlet parent) throws Exception {
        String path = req.getParameter(""path"");
        path = URLDecoder.decode(path, ""UTF-8"");
        String name = req.getParameter(""name"");
        name = new String(name.getBytes(), ""UTF-8"");
        String contentType = req.getParameter(""contentType"");
        if (path == null) {
            NullPointerException e = new NullPointerException(""The path attribute cannot be retrieved."");
            LOG.error(e);
            throw e;
        }
        URL url = new URL(path);
        InputStream inStream = null;
        try {
            inStream = URLUtils.getFileContent(url, req.getSession().getId());
            res.setContentType(contentType);
            res.addHeader(""Content-Disposition"", ""attachment;filename=\"""" + name + ""\"""");
            ServletOutputStream out = res.getOutputStream();
            IOUtils.copy(inStream, out);
            res.flushBuffer();
        } finally {
            if (inStream != null) {
                inStream.close();
            }
        }
    }
","    private void zip(File input, File output) {
        OutputStream os = null;
        InputStream is = null;
        try {
            os = new GZIPOutputStream(new FileOutputStream(output));
            is = new FileInputStream(input);
            byte[] buffer = new byte[8192];
            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
",1.0
"    private URLConnection getServletConnection(String strServlet_name) throws MalformedURLException, IOException {
        URL urlServlet = null;
        if (strServlet_name == null) {
            urlServlet = m_Url;
        } else {
            urlServlet = new URL(m_Url, strServlet_name);
        }
        URLConnection connection = urlServlet.openConnection();
        connection.setConnectTimeout(180000);
        connection.setDoInput(true);
        connection.setDoOutput(true);
        connection.setUseCaches(false);
        connection.setRequestProperty(""Content-Type"", ""application/x-java-serialized-object"");
        if (m_strJsessionid != null) {
            connection.setRequestProperty(""Cookie"", m_strJsessionid);
        }
        return connection;
    }
","    public static TestResponse get(String urlString, String accept) throws IOException {
        HttpURLConnection httpCon = null;
        byte[] result = null;
        byte[] errorResult = null;
        try {
            URL url = new URL(urlString);
            httpCon = (HttpURLConnection) url.openConnection();
            httpCon.setRequestMethod(""GET"");
            httpCon.setRequestProperty(""Accept"", accept);
            BufferedInputStream in = new BufferedInputStream(httpCon.getInputStream());
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            int next = in.read();
            while (next > -1) {
                os.write(next);
                next = in.read();
            }
            os.flush();
            result = os.toByteArray();
            os.close();
        } catch (IOException e) {
        } finally {
            InputStream errorStream = httpCon.getErrorStream();
            if (errorStream != null) {
                BufferedInputStream errorIn = new BufferedInputStream(errorStream);
                ByteArrayOutputStream errorOs = new ByteArrayOutputStream();
                int errorNext = errorIn.read();
                while (errorNext > -1) {
                    errorOs.write(errorNext);
                    errorNext = errorIn.read();
                }
                errorOs.flush();
                errorResult = errorOs.toByteArray();
                errorOs.close();
            }
            return new TestResponse(httpCon.getResponseCode(), errorResult, result);
        }
    }
",0.0
"    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
","    public static synchronized String encrypt(String x) throws Exception {
        MessageDigest d = MessageDigest.getInstance(""SHA-1"");
        d.reset();
        d.update(String.valueOf(x).getBytes());
        return byteArrayToHexString(d.digest());
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
","    public static void main(String[] args) throws Exception {
        System.setProperty(""debug"", ""debug"");
        OAuthConsumer consumer = new DefaultOAuthConsumer(""YmRF4HDvikvwDxYafsaK"", ""r)q7L!4X$j$nTS0lXAjC=al9Xf*cLOdyFJsy%2OE"");
        consumer.setTokenWithSecret(""5722da60fee79ef9efc2d383f871d550"", ""39142f31ad8a7e6ff7b87f36cc9e8f10"");
        URL url = new URL(""http://api.t.sohu.com/statuses/update.json"");
        HttpURLConnection request = (HttpURLConnection) url.openConnection();
        request.setDoOutput(true);
        request.setRequestMethod(""POST"");
        HttpParameters para = new HttpParameters();
        para.put(""status"", URLEncoder.encode(""中 文"", ""utf-8"").replaceAll(""\\+"", ""%20""));
        consumer.setAdditionalParameters(para);
        consumer.sign(request);
        OutputStream ot = request.getOutputStream();
        ot.write((""status="" + URLEncoder.encode(""1中 文"", ""utf-8"")).replaceAll(""\\+"", ""%20"").getBytes());
        ot.flush();
        ot.close();
        System.out.println(""Sending request..."");
        request.connect();
        System.out.println(""Response: "" + request.getResponseCode() + "" "" + request.getResponseMessage());
        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));
        String b = null;
        while ((b = reader.readLine()) != null) {
            System.out.println(b);
        }
    }
",0.0
"    private String getCoded(String pass) {
        String passSecret = """";
        try {
            MessageDigest m = MessageDigest.getInstance(""MD5"");
            m.update(pass.getBytes(""UTF8""));
            byte s[] = m.digest();
            for (int i = 0; i < s.length; i++) {
                passSecret += Integer.toHexString((0x000000ff & s[i]) | 0xffffff00).substring(6);
            }
        } catch (NoSuchAlgorithmException e1) {
            e1.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return passSecret;
    }
","    @Override
    public void run() {
        try {
            FileChannel out = new FileOutputStream(outputfile).getChannel();
            long pos = 0;
            status.setText(""Slučovač: Proces slučování spuštěn.. Prosím čekejte.."");
            for (int i = 1; i <= noofparts; i++) {
                FileChannel in = new FileInputStream(originalfilename.getAbsolutePath() + ""."" + String.format(""%03d"", i)).getChannel();
                status.setText(""Slučovač: Slučuji část "" + i + "".."");
                this.splitsize = in.size();
                out.transferFrom(in, pos, splitsize);
                pos += splitsize;
                in.close();
                if (deleteOnFinish) new File(originalfilename + String.format("".%03d"", i)).delete();
                pb.setValue(100 * i / noofparts);
            }
            out.close();
            status.setText(""Slučovač: Hotovo.."");
            JOptionPane.showMessageDialog(null, ""Sloučeno!"", ""Slučovač"", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
        }
    }
",0.0
"    public static String send(String purl, String xml) throws Exception {
        URL url = new URL(purl);
        HttpURLConnection httpUrlCon = (HttpURLConnection) url.openConnection();
        httpUrlCon.setRequestMethod(""POST"");
        httpUrlCon.setDoOutput(true);
        PrintWriter writer = new PrintWriter(httpUrlCon.getOutputStream());
        writer.println(xml);
        writer.flush();
        writer.close();
        System.out.println(""Sending: "" + xml);
        StringBuffer response = new StringBuffer();
        InputStreamReader is = null;
        try {
            is = new InputStreamReader(httpUrlCon.getInputStream());
        } catch (Exception e) {
            e.printStackTrace();
            is = new InputStreamReader(httpUrlCon.getErrorStream());
        }
        BufferedReader br = new BufferedReader(is);
        String line = null;
        while ((line = br.readLine()) != null) {
            response.append(line);
            response.append(""\n"");
        }
        String r = response.toString();
        return r;
    }
","    public String getRandomGUID() {
        MessageDigest md5 = null;
        String valueBeforeMD5 = """";
        String retValue = """";
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
        }
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            InetAddress id = InetAddress.getLocalHost();
            long time = System.currentTimeMillis();
            long rand = 0;
            rand = random.nextLong();
            sbValueBeforeMD5.append(id.toString());
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            retValue = sb.toString();
        } catch (UnknownHostException e) {
            System.out.println(""Error:"" + e);
        }
        return retValue;
    }
",0.0
"    protected Template read(URL url) throws TemplateException {
        String parent = Parent(url);
        TemplateLoaderContext context = new TemplateLoaderContext(this, parent, false);
        String contents;
        InputStream in = null;
        try {
            in = url.openStream();
            contents = this.readToString(new java.io.InputStreamReader(in));
        } catch (IOException exc) {
            throw new TemplateException(url.toString(), exc);
        } finally {
            try {
                in.close();
            } catch (IOException ignore) {
            }
        }
        TemplateParser parser = this.parser;
        if (null == parser) return (new Template(contents, context)); else return (new Template(parser, contents, context));
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    private void streamFileFromFileSystem(File file, HttpServletResponse response) throws ServletException, IOException {
        ServletOutputStream out = null;
        InputStream in = null;
        if (file.isDirectory() || !file.canRead()) {
            logger.debug(""File does not exist: "" + file.getAbsolutePath());
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());
        if (mimeType == null) {
            mimeType = WikiFile.UNKNOWN_MIME_TYPE;
        }
        try {
            response.setContentType(mimeType);
            response.setContentLength((int) file.length());
            out = response.getOutputStream();
            in = new FileInputStream(file);
            IOUtils.copy(in, out);
            out.flush();
        } finally {
            IOUtils.closeQuietly(in);
            IOUtils.closeQuietly(out);
        }
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",1.0
"    public static boolean copyFile(File src, File target) throws IOException {
        if (src == null || target == null || !src.exists()) return false;
        if (!target.exists()) if (!createNewFile(target)) return false;
        InputStream ins = new BufferedInputStream(new FileInputStream(src));
        OutputStream ops = new BufferedOutputStream(new FileOutputStream(target));
        int b;
        while (-1 != (b = ins.read())) ops.write(b);
        Streams.safeClose(ins);
        Streams.safeFlush(ops);
        Streams.safeClose(ops);
        return target.setLastModified(src.lastModified());
    }
","    public I18N(JApplet applet) {
        if (prop != null) return;
        String lang = ""en"";
        try {
            Properties userProperties = new Properties();
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + ""logicsim.cfg"");
                userProperties.load(url.openStream());
            } else {
                userProperties.load(new FileInputStream(""logicsim.cfg""));
            }
            if (userProperties.containsKey(""language"")) lang = userProperties.getProperty(""language"");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        prop = new Properties();
        try {
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + ""languages/"" + lang + "".txt"");
                prop.load(url.openStream());
            } else {
                prop.load(new FileInputStream(""languages/"" + lang + "".txt""));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                if (applet != null) {
                    URL url = new URL(applet.getCodeBase() + ""languages/en.txt"");
                    prop.load(url.openStream());
                } else {
                    prop.load(new FileInputStream(""languages/en.txt""));
                }
            } catch (Exception ex2) {
                JOptionPane.showMessageDialog(null, ""Language file languages/en.txt not found.\nPlease run the program from its directory."");
                System.exit(5);
            }
        }
    }
",0.0
"    @Override
    protected void handleCreateEditionForExport(File outputFile, int viewComponentIdWithUnit) throws Exception {
        log.info(""createEditionForExport "");
        InputStream edition = null;
        if (viewComponentIdWithUnit <= 0) {
            edition = getContentServiceSpring().exportEditionFull();
        } else {
            edition = getContentServiceSpring().exportEditionUnit(Integer.valueOf(viewComponentIdWithUnit));
        }
        log.info(""got answer... "");
        if (log.isDebugEnabled()) log.debug(""tmpFile "" + outputFile.getName());
        FileOutputStream fos = new FileOutputStream(outputFile);
        IOUtils.copyLarge(edition, fos);
        IOUtils.closeQuietly(edition);
        IOUtils.closeQuietly(fos);
        outputFile = null;
        System.gc();
    }
","        public void actionPerformed(ActionEvent e) {
            String aboutText = ""Slug application."";
            String aboutURL = System.getProperty(GateConstants.ABOUT_URL_JAVA_PROPERTY_NAME);
            boolean canShowInPane = false;
            if (aboutURL != null) {
                try {
                    URL url = new URL(aboutURL);
                    AboutPaneDialog dlg = new AboutPaneDialog(ShellSlacFrame.this, ""Slug application about"", true);
                    canShowInPane = dlg.setURL(url);
                    if (canShowInPane) {
                        dlg.setSize(300, 200);
                        dlg.setLocationRelativeTo(ShellSlacFrame.this);
                        dlg.setVisible(true);
                    } else {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
                        String line = """";
                        StringBuffer content = new StringBuffer();
                        do {
                            content.append(line);
                            line = reader.readLine();
                        } while (line != null);
                        if (content.length() != 0) {
                            aboutText = content.toString();
                        }
                    }
                } catch (Exception ex) {
                    if (DEBUG) {
                        ex.printStackTrace();
                    }
                }
            }
            if (!canShowInPane) JOptionPane.showMessageDialog(ShellSlacFrame.this, aboutText, ""Slug application about"", JOptionPane.INFORMATION_MESSAGE);
        }
",0.0
"    static void copy(String src, String dest) throws IOException {
        File ifp = new File(src);
        File ofp = new File(dest);
        if (ifp.exists() == false) {
            throw new IOException(""file '"" + src + ""' does not exist"");
        }
        FileInputStream fis = new FileInputStream(ifp);
        FileOutputStream fos = new FileOutputStream(ofp);
        byte[] b = new byte[1024];
        int readBytes;
        while ((readBytes = fis.read(b)) > 0) fos.write(b, 0, readBytes);
        fis.close();
        fos.close();
    }
","    private void getEventHeapsFromWeb() {
        try {
            URL url = getServersURL();
            InputStream in = url.openStream();
            Document doc = factory.newDocumentBuilder().parse(in);
            readFromDocument(doc);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
",0.0
"    @Test
    public void testCopy_readerToOutputStream_Encoding_nullIn() throws Exception {
        ByteArrayOutputStream baout = new ByteArrayOutputStream();
        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);
        try {
            IOUtils.copy((Reader) null, out, ""UTF16"");
            fail();
        } catch (NullPointerException ex) {
        }
    }
","    public synchronized int insertMessage(FrostMessageObject mo) {
        AttachmentList files = mo.getAttachmentsOfType(Attachment.FILE);
        AttachmentList boards = mo.getAttachmentsOfType(Attachment.BOARD);
        Connection conn = AppLayerDatabase.getInstance().getPooledConnection();
        try {
            conn.setAutoCommit(false);
            PreparedStatement ps = conn.prepareStatement(""INSERT INTO "" + getMessageTableName() + "" ("" + ""primkey,messageid,inreplyto,isvalid,invalidreason,msgdatetime,msgindex,board,fromname,subject,recipient,signature,"" + ""signaturestatus,publickey,isdeleted,isnew,isreplied,isjunk,isflagged,isstarred,hasfileattachment,hasboardattachment,idlinepos,idlinelen"" + "") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"");
            Long identity = null;
            Statement stmt = AppLayerDatabase.getInstance().createStatement();
            ResultSet rs = stmt.executeQuery(""select UNIQUEKEY('"" + getMessageTableName() + ""')"");
            if (rs.next()) {
                identity = new Long(rs.getLong(1));
            } else {
                logger.log(Level.SEVERE, ""Could not retrieve a new unique key!"");
            }
            rs.close();
            stmt.close();
            int i = 1;
            ps.setLong(i++, identity.longValue());
            ps.setString(i++, mo.getMessageId());
            ps.setString(i++, mo.getInReplyTo());
            ps.setBoolean(i++, mo.isValid());
            ps.setString(i++, mo.getInvalidReason());
            ps.setLong(i++, mo.getDateAndTime().getMillis());
            ps.setInt(i++, mo.getIndex());
            ps.setInt(i++, mo.getBoard().getPrimaryKey().intValue());
            ps.setString(i++, mo.getFromName());
            ps.setString(i++, mo.getSubject());
            ps.setString(i++, ((mo.getRecipientName() != null && mo.getRecipientName().length() == 0) ? null : mo.getRecipientName()));
            if (mo.getSignatureV2() == null || mo.getSignatureV2().length() == 0) {
                ps.setString(i++, mo.getSignatureV1());
            } else {
                ps.setString(i++, mo.getSignatureV2());
            }
            ps.setInt(i++, mo.getSignatureStatus());
            ps.setString(i++, mo.getPublicKey());
            ps.setBoolean(i++, mo.isDeleted());
            ps.setBoolean(i++, mo.isNew());
            ps.setBoolean(i++, mo.isReplied());
            ps.setBoolean(i++, mo.isJunk());
            ps.setBoolean(i++, mo.isFlagged());
            ps.setBoolean(i++, mo.isStarred());
            ps.setBoolean(i++, (files.size() > 0));
            ps.setBoolean(i++, (boards.size() > 0));
            ps.setInt(i++, mo.getIdLinePos());
            ps.setInt(i++, mo.getIdLineLen());
            int inserted;
            try {
                inserted = ps.executeUpdate();
            } finally {
                ps.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message insert returned 0 !!!"");
                throw new Exception(""message insert returned 0 !!!"");
            }
            mo.setMsgIdentity(identity.longValue());
            PreparedStatement pc = conn.prepareStatement(""INSERT INTO "" + getContentTableName() + "" (msgref,msgcontent) VALUES (?,?)"");
            pc.setLong(1, mo.getMsgIdentity());
            pc.setString(2, mo.getContent());
            try {
                inserted = pc.executeUpdate();
            } finally {
                pc.close();
            }
            if (inserted == 0) {
                logger.log(Level.SEVERE, ""message content insert returned 0 !!!"");
                throw new Exception(""message content insert returned 0 !!!"");
            }
            if (files.size() > 0) {
                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getFileAttachmentsTableName() + "" (msgref,filename,filesize,filekey)"" + "" VALUES (?,?,?,?)"");
                try {
                    for (Iterator it = files.iterator(); it.hasNext(); ) {
                        FileAttachment fa = (FileAttachment) it.next();
                        int ix = 1;
                        p.setLong(ix++, mo.getMsgIdentity());
                        p.setString(ix++, fa.getFilename());
                        p.setLong(ix++, fa.getFileSize());
                        p.setString(ix++, fa.getKey());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""fileattachment insert returned 0 !!!"");
                            throw new Exception(""fileattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            if (boards.size() > 0) {
                PreparedStatement p = conn.prepareStatement(""INSERT INTO "" + getBoardAttachmentsTableName() + "" (msgref,boardname,boardpublickey,boardprivatekey,boarddescription)"" + "" VALUES (?,?,?,?,?)"");
                try {
                    for (Iterator it = boards.iterator(); it.hasNext(); ) {
                        BoardAttachment ba = (BoardAttachment) it.next();
                        Board b = ba.getBoardObj();
                        int ix = 1;
                        p.setLong(ix++, mo.getMsgIdentity());
                        p.setString(ix++, b.getNameLowerCase());
                        p.setString(ix++, b.getPublicKey());
                        p.setString(ix++, b.getPrivateKey());
                        p.setString(ix++, b.getDescription());
                        int ins = p.executeUpdate();
                        if (ins == 0) {
                            logger.log(Level.SEVERE, ""boardattachment insert returned 0 !!!"");
                            throw new Exception(""boardattachment insert returned 0 !!!"");
                        }
                    }
                } finally {
                    p.close();
                }
            }
            conn.commit();
            conn.setAutoCommit(true);
            return INSERT_OK;
        } catch (Throwable t) {
            boolean isDuplicate;
            if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_ID_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate message id, not added to database table: msgid='"" + mo.getMessageId() + ""', board="" + mo.getBoard().getName() + "", date='"" + mo.getDateAndTimeString() + ""', index="" + mo.getIndex());
            } else if (t.getMessage().indexOf(""constraint violation"") > 0 && t.getMessage().indexOf(""MSG_UNIQUE_ONLY"") > 0) {
                isDuplicate = true;
                logger.warning(""Duplicate msgdatetime,index,board, not added to database table: msgid='"" + mo.getMessageId() + ""', board="" + mo.getBoard().getName() + "", date='"" + mo.getDateAndTimeString() + ""', index="" + mo.getIndex());
            } else {
                isDuplicate = false;
                logger.log(Level.SEVERE, ""Exception during insert of message: msgid='"" + mo.getMessageId() + ""', board="" + mo.getBoard().getName() + "", date='"" + mo.getDateAndTimeString() + ""', index="" + mo.getIndex(), t);
                try {
                    conn.rollback();
                } catch (Throwable t1) {
                    logger.log(Level.SEVERE, ""Exception during rollback"", t1);
                }
            }
            try {
                conn.setAutoCommit(true);
            } catch (Throwable t1) {
            }
            if (isDuplicate) {
                return INSERT_DUPLICATE;
            } else {
                return INSERT_ERROR;
            }
        } finally {
            AppLayerDatabase.getInstance().givePooledConnection(conn);
        }
    }
",0.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    public void execute() {
        check();
        FTPClient ftp = new FTPClient();
        try {
            ftp.connect(host, port);
        } catch (IOException ex) {
            throw new BuildException(""FTP connexion failed : IOException caught ("" + ex.getMessage() + "")"");
        }
        if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
            throw new BuildException(""FTP connexion failed : "" + ftp.getReplyString());
        }
        try {
            try {
                if (!ftp.login(userid, password)) {
                    throw new BuildException(""Identification failed"");
                }
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (binary) {
                try {
                    ftp.setFileType(FTP.IMAGE_FILE_TYPE);
                } catch (IOException ex) {
                    throw new BuildException(ex);
                }
                if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                    throw new BuildException(""Transfer type not supported : "" + ftp.getReplyString());
                }
            }
            try {
                ftp.changeWorkingDirectory(remotedir);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""Unacessible remote directory : "" + ftp.getReplyString());
            }
            String localFullFileName = Files.normalizeDirectoryName(localdir) + remotefile;
            String remoteFullFileName = (remotedir.endsWith(serverpathseparator) ? remotedir : remotedir + serverpathseparator) + remotefile;
            BufferedOutputStream outstream = null;
            try {
                outstream = new BufferedOutputStream(new FileOutputStream(localFullFileName));
                ftp.retrieveFile(remoteFullFileName, outstream);
            } catch (IOException ex) {
                throw new BuildException(ex);
            }
            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {
                throw new BuildException(""File retrieval of '"" + localFullFileName + ""' has failed ("" + ftp.getReplyString() + "")"");
            }
        } finally {
            try {
                ftp.disconnect();
            } catch (IOException ex) {
                System.err.println(""Disconnexion from "" + host + "":"" + port + "" failed"");
            }
        }
    }
",1.0
"        private void open() throws IOException {
            if (in != null) return;
            try {
                con = url.openConnection();
                in = con.getInputStream();
            } catch (IOException e) {
                if (cached.exists()) {
                    LOG.fine(""Falling back to cached copy of wiki file "" + url);
                    in = new FileInputStream(cached);
                    con = null;
                    return;
                }
                throw e;
            }
            try {
                tmp = new File(cached.getAbsolutePath() + "".tmp"");
                tmp.getParentFile().mkdirs();
                out = new FileOutputStream(tmp);
            } catch (IOException e) {
                LOG.fine(""can't write cached copy of wiki file "" + url);
            }
        }
","    public void sendPOIGpxNonePOIs() {
        this.myloc = new Position(45.56, 5.9);
        this.left = myloc.getY() - 0.025;
        this.right = myloc.getY() + 0.025;
        this.top = myloc.getX() + 0.03;
        this.bottom = myloc.getX() - 0.03;
        assertEquals(""left test"", left, (5.9 - 0.025));
        assertEquals(""right test"", right, (5.9 + 0.025));
        assertEquals(""top test"", top, (45.56 - 0.025));
        assertEquals(""bottom test"", left, (45.56 + 0.025));
        this.poisCheck.add(""None"");
        try {
            if (this.poisCheck.get(0).compareTo(""None"") == 0) {
                model.setPointsOfInterest(new Items());
            } else {
                this.url = new URL(""http://www.informationfreeway.org/api/0.6/node["" + poisCheck.get(0) + ""=*][bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");
                assertEquals(""url informationfreeway.org test"", url, ""http://www.informationfreeway.org/api/0.6/node[amenity=*]"" + ""[bbox="" + left + "","" + bottom + "","" + right + "","" + top + ""]"");
                SAXParser pars = null;
                ParsePoiGpx gpxHandler = new ParsePoiGpx(poisCheck, this.model.getContext());
                pars = SAXParserFactory.newInstance().newSAXParser();
                pars.getXMLReader().setFeature(""http://xml.org/sax/features/namespaces"", true);
                pars.parse(url.openStream(), gpxHandler);
                this.pois = gpxHandler.getPOIResultsItems();
                assertFalse(""there is some pois"", !this.pois.equals(0));
                assertTrue(""there is some pois"", this.pois.equals(0));
            }
        } catch (Exception e) {
            e.printStackTrace();
            assertFalse(!e.getCause().equals(null));
        }
    }
",0.0
"    public static final String digest(String credentials, String algorithm, String encoding) {
        try {
            MessageDigest md = (MessageDigest) MessageDigest.getInstance(algorithm).clone();
            if (encoding == null) {
                md.update(credentials.getBytes());
            } else {
                md.update(credentials.getBytes(encoding));
            }
            return (convert(md.digest()));
        } catch (Exception ex) {
            tools.util.LogMgr.err(""Crypto.digest "" + ex.toString());
            return credentials;
        }
    }
","    @Override
    public void runTask(HashMap pjobParameters) throws Exception {
        if (hasRequiredResources(isSubTask())) {
            File lfileSource = new File(getSource());
            File lfileTarget = new File(getTarget());
            FileChannel lfisInput = null;
            FileChannel lfosOutput = null;
            try {
                int mbCount = 64;
                boolean lblnDone = false;
                while (!lblnDone) {
                    lfisInput = new FileInputStream(lfileSource).getChannel();
                    lfosOutput = new FileOutputStream(lfileTarget).getChannel();
                    try {
                        int maxCount = (mbCount * 1024 * 1024) - (32 * 1024);
                        long size = lfisInput.size();
                        long position = 0;
                        while (position < size) {
                            position += lfisInput.transferTo(position, maxCount, lfosOutput);
                        }
                        lblnDone = true;
                    } catch (IOException lioXcp) {
                        getLog().warn(lioXcp);
                        if (lioXcp.getMessage().contains(""Insufficient system resources exist to complete the requested servic"")) {
                            mbCount--;
                            getLog().debug(""Dropped resource count down to ["" + mbCount + ""]"");
                            if (mbCount == 0) {
                                lblnDone = true;
                            }
                            if (lfisInput != null) {
                                lfisInput.close();
                            }
                            if (lfosOutput != null) {
                                lfosOutput.close();
                            }
                        } else {
                            throw lioXcp;
                        }
                    }
                }
            } finally {
                if (lfisInput != null) {
                    lfisInput.close();
                }
                if (lfosOutput != null) {
                    lfosOutput.close();
                }
            }
        }
    }
",0.0
"    private String storeProxy(String proxyPath, String userName) throws IOException {
        File inputFile = new File(proxyPath);
        String outfile = slcsFactory.getStoreDirectory() + File.separator + userName + File.separator + PROXYFILENAME;
        File outputFile = new File(outfile);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
        Process p = Runtime.getRuntime().exec(""/bin/chmod 600 "" + outfile);
        try {
            p.waitFor();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        return outfile;
    }
","    public static boolean isImageLinkReachable(WebImage image) {
        if (image.getUrl() == null) return false;
        try {
            URL url = new URL(image.getUrl());
            url.openStream().close();
        } catch (MalformedURLException e) {
            return false;
        } catch (IOException e) {
            return false;
        }
        return true;
    }
",0.0
"    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {
        if (entry.isDirectory()) {
            createDir(new File(outputDir, entry.getName()));
            return;
        }
        File outputFile = new File(outputDir, entry.getName());
        if (!outputFile.getParentFile().exists()) {
            createDir(outputFile.getParentFile());
        }
        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));
        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));
        try {
            IOUtils.copy(inputStream, outputStream);
        } finally {
            outputStream.close();
            inputStream.close();
        }
    }
","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
",0.0
"    public static String generatePassword(String userKey, int applicationId, String applicationKey) {
        String nonce = generateNonce();
        String createDate = fmtDate.format(new Date());
        String keyDigest = null;
        MessageDigest sha1 = null;
        try {
            sha1 = MessageDigest.getInstance(""SHA1"");
            sha1.update(nonce.getBytes(""UTF-8""));
            sha1.update(createDate.getBytes(""UTF-8""));
            sha1.update(userKey.getBytes(""UTF-8""));
            sha1.update(applicationKey.getBytes(""UTF-8""));
            keyDigest = getHexaDecimal(sha1.digest());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        StringBuilder sb = new StringBuilder();
        sb.append(applicationId);
        sb.append(',');
        sb.append(nonce);
        sb.append(',');
        sb.append(createDate);
        sb.append(',');
        sb.append(keyDigest);
        return sb.toString();
    }
","    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
",0.0
"    private InputStream createInputStream(String url) throws MalformedURLException, IOException {
        if (url.startsWith(""classpath://"")) {
            InputStream is = XMLResource.class.getResourceAsStream(url.substring(12));
            if (is == null) throw new IOException(""Couldn't open stream to ["" + url + ""]"");
            return is;
        } else {
            return new URL(url).openStream();
        }
    }
","    private File copyFile(File source, File destiny) {
        try {
            FileInputStream fileinputstream = new FileInputStream(source);
            FileOutputStream fileoutputstream = new FileOutputStream(destiny);
            byte abyte0[] = new byte[4096];
            int i;
            while ((i = fileinputstream.read(abyte0)) != -1) fileoutputstream.write(abyte0, 0, i);
            fileinputstream.close();
            fileoutputstream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            LOGGER.error(e.getMessage());
        }
        return destiny;
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    private String executeUpload(String urlStr, String specification, String filename, String sessionHandle) {
        StringBuffer result = new StringBuffer();
        try {
            URL url = new URL(urlStr);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setDoOutput(true);
            connection.setDoInput(true);
            connection.setRequestMethod(""POST"");
            connection.setRequestProperty(""YAWLSessionHandle"", sessionHandle);
            connection.setRequestProperty(""filename"", filename);
            connection.setRequestProperty(""Content-Type"", ""text/xml"");
            PrintWriter out = new PrintWriter(connection.getOutputStream());
            out.print(specification);
            out.flush();
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                result.append(inputLine);
            }
            in.close();
            out.close();
            connection.disconnect();
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            InterfaceBWebsideController.logContactError(e, _backEndURIStr);
        }
        String msg = result.toString();
        return stripOuterElement(msg);
    }
",0.0
"    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
","    public int setData(String mysql) {
        int mycount = 0;
        try {
            conn.setAutoCommit(false);
            mycount = 0;
            stmt = conn.createStatement();
            mycount = stmt.executeUpdate(mysql);
        } catch (Exception e) {
            mycount = -1;
        } finally {
            if (mycount > 0) {
                try {
                    conn.commit();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    conn.rollback();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        return mycount;
    }
",0.0
"    private static void addFolderToZip(File folder, ZipOutputStream zip, String baseName) throws IOException {
        File[] files = folder.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                addFolderToZip(file, zip, baseName);
            } else {
                String name = file.getAbsolutePath().substring(baseName.length());
                ZipEntry zipEntry = new ZipEntry(name);
                zip.putNextEntry(zipEntry);
                IOUtils.copy(new FileInputStream(file), zip);
                zip.closeEntry();
            }
        }
    }
","    private URLConnection tryOpenConnection(String url) throws RuntimeException {
        URLConnection connection = null;
        try {
            connection = new URL(""https://"" + url).openConnection();
            connection.getInputStream();
            connection = new URL(""https://"" + url).openConnection();
            return connection;
        } catch (Exception e) {
            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);
        }
        try {
            connection = new URL(""http://"" + url).openConnection();
            connection.getInputStream();
            connection = new URL(""http://"" + url).openConnection();
            return connection;
        } catch (Exception e) {
            Log.w(""ERROR"", "" "" + e.getStackTrace()[0]);
        }
        return null;
    }
",0.0
"    public static boolean decodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
","    private static ArrayList<String> YahooSearch(String query) {
        ArrayList<String> yahooSearchResults = new ArrayList<String>();
        try {
            String request = ""http://boss.yahooapis.com/ysearch/web/v1/"" + URLEncoder.encode(""Java example for "" + query, ""UTF-8"") + ""?appid=zfau5aPV34ETbq9mWU0ui5e04y0rIewg1zwvzHb1tGoBFK2nSCU1SKS2D4zphh2rd3Wf"" + ""&format=xml&count=30&type=-msoffice,-pdf"";
            URL url = new URL(request);
            System.out.println(""Host : "" + url.getHost());
            url.openConnection();
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String finalContents = """";
            while ((inputLine = reader.readLine()) != null) {
                finalContents += ""\n"" + inputLine;
            }
            Document doc = Jsoup.parse(finalContents);
            Elements eles = doc.getElementsByTag(""url"");
            for (Element ele : eles) {
                yahooSearchResults.add(ele.text());
                System.out.println(""YahooResult: "" + ele.text());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return yahooSearchResults;
    }
",0.0
"    public static String md5(String text) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(text.getBytes());
            return ForumUtil.bufferToHex(md.digest());
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
","    public static String encipherAMessage(String message) {
        try {
            MessageDigest sha1 = MessageDigest.getInstance(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""SHA1""));
            sha1.update(message.getBytes(java.util.ResourceBundle.getBundle(""com/jjcp/resources/Strings"").getString(""UTF-16LE"")));
            byte[] digest = sha1.digest();
            BASE64Encoder base64encoder = new BASE64Encoder();
            String cipherTextB64 = base64encoder.encode(digest);
            return cipherTextB64;
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(SelectorView.class.getName()).log(Level.SEVERE, null, ex);
        }
        return """";
    }
",1.0
"    private String getJSONScoreStringFromNet(URL urladdress) {
        InputStream instream = null;
        BufferedReader read = null;
        try {
            instream = urladdress.openStream();
            read = new BufferedReader(new InputStreamReader(instream));
            String s = new String("""");
            String line = null;
            while ((line = read.readLine()) != null) {
                s = s + line;
            }
            return s;
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                read.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }
","    public static void copyFile(File from, File to) throws Exception {
        if (!from.exists()) return;
        FileInputStream in = new FileInputStream(from);
        FileOutputStream out = new FileOutputStream(to);
        byte[] buffer = new byte[BUFFER_SIZE];
        int bytes_read;
        while (true) {
            bytes_read = in.read(buffer);
            if (bytes_read == -1) break;
            out.write(buffer, 0, bytes_read);
        }
        out.flush();
        out.close();
        in.close();
    }
",0.0
"    public InputStream openAsStream() throws IOException {
        ClassLoader cl = _preferredClassLoader;
        if (cl == null) {
            cl = Thread.currentThread().getContextClassLoader();
        }
        final URL url = (cl == null) ? null : cl.getResource(_path);
        return (url == null) ? null : url.openStream();
    }
","    public File unpackResource(String resourceName) throws IOException {
        File file = null;
        URL url = getURL(""/"" + resourceName);
        URLConnection urlConn = url.openConnection();
        if (urlConn instanceof JarURLConnection) {
            file = handleJarFile((JarURLConnection) urlConn, resourceName);
        } else if (urlConn instanceof BundleURLConnection) {
            file = handleBundleFile((BundleURLConnection) urlConn);
        } else {
            file = handleClassicFile(resourceName);
        }
        return file;
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public static void copyResource(String src, File dest) throws IOException {
        InputStream fin = ResourceLoader.openResource(src);
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).error(""Failed to load resource '"" + src + ""'"");
            LogFactory.getLog(ResourceLoader.class).info(""Attempting to open file from from file system"");
            fin = new FileInputStream(src);
        }
        if (fin == null) {
            LogFactory.getLog(ResourceLoader.class).warn(""Giving up on copy operation, can't find source '"" + src + ""'"");
            return;
        }
        BufferedOutputStream fout = new BufferedOutputStream(new FileOutputStream(dest));
        byte[] buffer = new byte[COPY_BUFFER_SIZE];
        int readBytes = fin.read(buffer);
        while (readBytes > -1) {
            fout.write(buffer, 0, readBytes);
            readBytes = fin.read(buffer);
        }
        fout.close();
        fin.close();
    }
",0.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    private void checkRoundtrip(byte[] content) throws Exception {
        InputStream in = new ByteArrayInputStream(content);
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        CodecUtil.encodeQuotedPrintable(in, out);
        in = new QuotedPrintableInputStream(new ByteArrayInputStream(out.toByteArray()));
        out = new ByteArrayOutputStream();
        IOUtils.copy(in, out);
        assertEquals(content, out.toByteArray());
    }
",0.0
"    public void send(String payload, TransportReceiver receiver) {
        HttpClient client = new DefaultHttpClient();
        HttpPost post = new HttpPost();
        post.setHeader(""Content-Type"", ""application/json;charset=UTF-8"");
        post.setHeader(""Cookie"", cookie);
        post.setURI(uri);
        Throwable ex;
        try {
            post.setEntity(new StringEntity(payload, ""UTF-8""));
            HttpResponse response = client.execute(post);
            if (200 == response.getStatusLine().getStatusCode()) {
                String contents = readStreamAsString(response.getEntity().getContent());
                receiver.onTransportSuccess(contents);
            } else {
                receiver.onTransportFailure(new ServerFailure(response.getStatusLine().getReasonPhrase()));
            }
            return;
        } catch (UnsupportedEncodingException e) {
            ex = e;
        } catch (ClientProtocolException e) {
            ex = e;
        } catch (IOException e) {
            ex = e;
        }
        receiver.onTransportFailure(new ServerFailure(ex.getMessage()));
    }
","    private static void readAndRewrite(File inFile, File outFile) throws IOException {
        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));
        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);
        Dataset ds = DcmObjectFactory.getInstance().newDataset();
        dcmParser.setDcmHandler(ds.getDcmHandler());
        dcmParser.parseDcmFile(null, Tags.PixelData);
        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        System.out.println(""reading "" + inFile + ""..."");
        pdReader.readPixelData(false);
        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));
        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;
        ds.writeDataset(out, dcmEncParam);
        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());
        System.out.println(""writing "" + outFile + ""..."");
        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());
        pdWriter.writePixelData();
        out.flush();
        out.close();
        System.out.println(""done!"");
    }
",0.0
"    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
","    protected Element downloadAndVerify(Element gElem) throws CacheException {
        try {
            String url = XMLHelper.GetChildText(gElem, ""originalLocation"");
            String id = XMLHelper.GetChildText(gElem, ""id"");
            URLConnection urlC = new URL(url).openConnection();
            String gElemStr = XMLHelper.ToString(gElem);
            int index = gElemStr.indexOf(""</generator>"");
            String cachedFileName = downloadInternal(urlC);
            gElemStr = gElemStr.substring(0, index) + ""<location>"" + cachedFileName + ""</location>"" + gElemStr.substring(index);
            index = gElemStr.indexOf(""</generator>"");
            gElemStr = gElemStr.substring(0, index) + ""<downloadTime>"" + System.currentTimeMillis() + ""</downloadTime>"" + gElemStr.substring(index);
            genHash.put(id, gElemStr);
            writeFile(genHash, genFileName);
            return XMLHelper.GetRootElement(gElemStr);
        } catch (Exception e) {
            throw new CacheException(e);
        }
    }
",0.0
"    public static String getSHA1Digest(String inputStr) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md = null;
        byte[] sha1hash = null;
        md = MessageDigest.getInstance(""SHA"");
        sha1hash = new byte[40];
        md.update(inputStr.getBytes(""iso-8859-1""), 0, inputStr.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    private static String genRandomGUID(boolean secure) {
        String valueBeforeMD5 = """";
        String valueAfterMD5 = """";
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            System.out.println(""Error: "" + e);
            return valueBeforeMD5;
        }
        long time = System.currentTimeMillis();
        long rand = 0;
        if (secure) {
            rand = mySecureRand.nextLong();
        } else {
            rand = myRand.nextLong();
        }
        sbValueBeforeMD5.append(s_id);
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(time));
        sbValueBeforeMD5.append("":"");
        sbValueBeforeMD5.append(Long.toString(rand));
        valueBeforeMD5 = sbValueBeforeMD5.toString();
        md5.update(valueBeforeMD5.getBytes());
        byte[] array = md5.digest();
        String strTemp = """";
        for (int i = 0; i < array.length; i++) {
            strTemp = (Integer.toHexString(array[i] & 0XFF));
            if (strTemp.length() == 1) {
                valueAfterMD5 = valueAfterMD5 + ""0"" + strTemp;
            } else {
                valueAfterMD5 = valueAfterMD5 + strTemp;
            }
        }
        return valueAfterMD5.toUpperCase();
    }
",1.0
"    @Override
    protected String doInBackground(String... params) {
        try {
            URL url = new URL(""http://www.foamsnet.com/smsapi/send.php?username="" + username + ""&password="" + password + ""&to="" + to + ""&msg="" + URLEncoder.encode(msg));
            URLConnection urlc = url.openConnection();
            BufferedReader sin = new BufferedReader(new InputStreamReader(urlc.getInputStream()));
            String inputLine = sin.readLine();
            inputLine = inputLine == null ? ""null"" : inputLine;
            sin.close();
            output = inputLine;
            if (logsent) {
                ContentResolver contentResolver = cr;
                ContentValues values = new ContentValues();
                values.put(""address"", ""+91"" + inputLine.split("" "")[3]);
                values.put(""body"", msg);
                contentResolver.insert(Uri.parse(""content://sms/sent""), values);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
","    protected Reader getText() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
        String readLine;
        do {
            readLine = br.readLine();
        } while (readLine != null && readLine.indexOf(""</table><br clear=all>"") < 0);
        return br;
    }
",1.0
"    public static InputStream getResourceAsStream(String resName, Class<?> clazz) {
        URL url = getResource(resName, clazz);
        try {
            return (url != null) ? url.openStream() : null;
        } catch (IOException e) {
            return null;
        }
    }
","    public static boolean copyFile(final File inFile, final File outFile) {
        try {
            FileChannel ic = new FileInputStream(inFile).getChannel();
            FileChannel oc = new FileOutputStream(outFile).getChannel();
            ic.transferTo(0, ic.size(), oc);
            ic.close();
            oc.close();
            return true;
        } catch (IOException e) {
            SystemUtils.LOG.log(Level.INFO, ""SystemUtils.copyFile() Exception while copy file "" + inFile.getAbsolutePath() + "" to "" + outFile.getAbsolutePath(), e);
            return false;
        }
    }
",0.0
"    public static String generateCode(String seed) {
        try {
            Security.addProvider(new FNVProvider());
            MessageDigest digest = MessageDigest.getInstance(""FNV-1a"");
            digest.update((seed + UUID.randomUUID().toString()).getBytes());
            byte[] hash1 = digest.digest();
            String sHash1 = ""m"" + (new String(LibraryBase64.encode(hash1))).replaceAll(""="", """");
            return sHash1;
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""Internal error:"" + e.getMessage());
            return null;
        }
    }
","    @SuppressWarnings(""deprecation"")
    public void testMemberIterator() throws IOException {
        GZIPMembersInputStream gzin = new GZIPMembersInputStream(new ByteArrayInputStream(allfour_gz));
        Iterator<GZIPMembersInputStream> iter = gzin.memberIterator();
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember0 = iter.next();
        int count0 = IOUtils.copy(gzMember0, new NullOutputStream());
        assertEquals(""wrong 1k member count"", 1024, count0);
        assertEquals(""wrong member number"", 0, gzin.getMemberNumber());
        assertEquals(""wrong member0 start"", 0, gzin.getCurrentMemberStart());
        assertEquals(""wrong member0 end"", noise1k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember1 = iter.next();
        int count1 = IOUtils.copy(gzMember1, new NullOutputStream());
        assertEquals(""wrong 32k member count"", (32 * 1024), count1);
        assertEquals(""wrong member number"", 1, gzin.getMemberNumber());
        assertEquals(""wrong member1 start"", noise1k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member1 end"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember2 = iter.next();
        int count2 = IOUtils.copy(gzMember2, new NullOutputStream());
        assertEquals(""wrong 1-byte member count"", 1, count2);
        assertEquals(""wrong member number"", 2, gzin.getMemberNumber());
        assertEquals(""wrong member2 start"", noise1k_gz.length + noise32k_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member2 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberEnd());
        assertTrue(iter.hasNext());
        GZIPMembersInputStream gzMember3 = iter.next();
        int count3 = IOUtils.copy(gzMember3, new NullOutputStream());
        assertEquals(""wrong 5-byte member count"", 5, count3);
        assertEquals(""wrong member number"", 3, gzin.getMemberNumber());
        assertEquals(""wrong member3 start"", noise1k_gz.length + noise32k_gz.length + a_gz.length, gzin.getCurrentMemberStart());
        assertEquals(""wrong member3 end"", noise1k_gz.length + noise32k_gz.length + a_gz.length + hello_gz.length, gzin.getCurrentMemberEnd());
        assertFalse(iter.hasNext());
    }
",0.0
"    public static final InputStream getInputStream(final String location) {
        final File f = new File(location);
        if (f.exists()) {
            try {
                return new FileInputStream(f);
            } catch (final FileNotFoundException e) {
                throw new Error(e);
            }
        }
        URL url = Iotil.class.getClassLoader().getResource(location);
        try {
            if (url == null) {
                url = new URL(location);
            }
            return url.openStream();
        } catch (final IOException e) {
            throw new RuntimeException(e);
        }
    }
","    public static String hexHash(Object obj) {
        String toHash = obj.toString();
        try {
            MessageDigest dg = MessageDigest.getInstance(""MD5"");
            dg.update(toHash.getBytes(""UTF-8""));
            return bytesToHex(dg.digest());
        } catch (Exception e) {
            throw new RuntimeException(""Error while hashing string: "" + toHash, e);
        }
    }
",0.0
"    public static List getUrlData(URL url) throws IOException {
        List beans = new ArrayList(256);
        System.out.println(""Retreiving content for: "" + url);
        StringBuffer content = new StringBuffer(4096);
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String str;
        while ((str = in.readLine()) != null) {
            if (str.startsWith(""#"")) {
                continue;
            }
            StringTokenizer stringTokenizer = new StringTokenizer(str, ""\t"");
            String InteractionAc = stringTokenizer.nextToken();
            String reactomeId = stringTokenizer.nextToken();
            ReactomeBean reactomeBean = new ReactomeBean();
            reactomeBean.setReactomeID(reactomeId);
            reactomeBean.setInteractionAC(InteractionAc);
            beans.add(reactomeBean);
        }
        in.close();
        return beans;
    }
","    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        ActionMessages errors = new ActionMessages();
        try {
            boolean isMultipart = FileUpload.isMultipartContent(request);
            if (isMultipart) {
                Map fields = new HashMap();
                Vector attachments = new Vector();
                List items = diskFileUpload.parseRequest(request);
                Iterator iter = items.iterator();
                while (iter.hasNext()) {
                    FileItem item = (FileItem) iter.next();
                    if (item.isFormField()) {
                        fields.put(item.getFieldName(), item.getString());
                    } else {
                        if (!StringUtils.isBlank(item.getName())) {
                            ByteArrayOutputStream baos = null;
                            try {
                                baos = new ByteArrayOutputStream();
                                IOUtils.copy(item.getInputStream(), baos);
                                MailPartObj part = new MailPartObj();
                                part.setAttachent(baos.toByteArray());
                                part.setContentType(item.getContentType());
                                part.setName(item.getName());
                                part.setSize(item.getSize());
                                attachments.addElement(part);
                            } catch (Exception ex) {
                            } finally {
                                IOUtils.closeQuietly(baos);
                            }
                        }
                    }
                }
                String body = """";
                if (fields.get(""taBody"") != null) {
                    body = (String) fields.get(""taBody"");
                } else if (fields.get(""taReplyBody"") != null) {
                    body = (String) fields.get(""taReplyBody"");
                }
                Preferences preferencesInstance = getPreferencesInstance(request);
                Send sendInstance = getSendInstance(request);
                String mid = (String) fields.get(""mid"");
                sendInstance.saveDraft(mid, Integer.parseInt((String) fields.get(""identity"")), (String) fields.get(""to""), (String) fields.get(""cc""), (String) fields.get(""bcc""), (String) fields.get(""subject""), body, attachments, preferencesInstance.getPreferences().isHtmlMessage(), Charset.defaultCharset().displayName(), (String) fields.get(""priority""));
            } else {
                errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""mail.send"", ""The form is null""));
                request.setAttribute(""exception"", ""The form is null"");
                request.setAttribute(""newLocation"", null);
                doTrace(request, DLog.ERROR, getClass(), ""The form is null"");
            }
        } catch (Exception ex) {
            String errorMessage = ExceptionUtilities.parseMessage(ex);
            if (errorMessage == null) {
                errorMessage = ""NullPointerException"";
            }
            errors.add(""general"", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + ""general"", errorMessage));
            request.setAttribute(""exception"", errorMessage);
            doTrace(request, DLog.ERROR, getClass(), errorMessage);
        } finally {
        }
        if (errors.isEmpty()) {
            doTrace(request, DLog.INFO, getClass(), ""OK"");
            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);
        } else {
            saveErrors(request, errors);
            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);
        }
    }
",0.0
"        public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
            String resource = schemaMapping.get(systemId);
            if (resource != null) {
                URL url = getClass().getClassLoader().getResource(resource);
                return new InputSource(url.openStream());
            }
            return null;
        }
","    public String getResponse(String URLstring) {
        String str = """";
        try {
            URL url = new URL(URLstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String st = """";
            while ((st = in.readLine()) != null) {
                str += ""\n"" + st;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return str;
    }
",0.0
"    private static void copyFile(File in, File out) throws Exception {
        FileChannel sourceChannel = new FileInputStream(in).getChannel();
        FileChannel destinationChannel = new FileOutputStream(out).getChannel();
        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
        sourceChannel.close();
        destinationChannel.close();
    }
","    @Override
    @RemoteMethod
    public boolean decrypt(int idAnexo) {
        try {
            Anexo anexo = anexoService.selectById(idAnexo);
            aes.init(Cipher.DECRYPT_MODE, aeskeySpec);
            CipherInputStream cis = new CipherInputStream(new FileInputStream(config.baseDir + ""/arquivos_upload_direto/encrypt/"" + anexo.getAnexoCaminho()), aes);
            FileOutputStream fos = new FileOutputStream(config.baseDir + ""/arquivos_upload_direto/decrypt/"" + anexo.getAnexoCaminho());
            IOUtils.copy(cis, fos);
            cis.close();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }
",1.0
"    public void testAddCommandProcessor() throws Exception {
        String host = ""localhost"";
        int port = DEFAULT_PORT;
        URLConnection connection = null;
        URL url = new URL(""http://"" + host + "":"" + port + ""/nonexistant"");
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", new DummyCommandProcessor() }, new String[] { ""java.lang.String"", ""mx4j.tools.adaptor.http.HttpCommandProcessor"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""removeCommandProcessor"", new Object[] { ""nonexistant"" }, new String[] { ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(404, ((HttpURLConnection) connection).getResponseCode());
        server.invoke(name, ""addCommandProcessor"", new Object[] { ""nonexistant"", ""test.mx4j.tools.adaptor.http.HttpAdaptorTest$DummyCommandProcessor"" }, new String[] { ""java.lang.String"", ""java.lang.String"" });
        connection = url.openConnection();
        assertEquals(200, ((HttpURLConnection) connection).getResponseCode());
    }
","    public static void main(String[] args) throws IOException {
        PrintStream filesTxt = new PrintStream(new BufferedOutputStream(new FileOutputStream(""temp/index/files.txt"")));
        String[] files = new File(Constants.INDEX_PATH).list();
        for (int i = 0; i < files.length; i++) {
            String f = files[i];
            if (f.equals(""deletable"") || f.startsWith(""."")) continue;
            FileInputStream in = new FileInputStream(new File(Constants.INDEX_PATH, f));
            FileOutputStream out = new FileOutputStream(new File(targetDir, f + "".t""));
            byte[] buf = new byte[16384];
            int n;
            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);
            in.close();
            out.close();
            filesTxt.println(f);
        }
        filesTxt.close();
    }
",0.0
"    public ContentPackage resolveItem() {
        URL url;
        try {
            url = new URL(itembankURL + ""/"" + deposit.get(""http://www.caret.cam.ac.uk/minibix/metadata/ticket""));
            return new ContentPackage(url.openStream());
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
","    private MailBox authenticate() throws Exception {
        String line = ""POP3 Server Ready"" + ((mChallenge == null) ? """" : ("" "" + mChallenge));
        MailBox mailbox = null;
        mStream.writeOk(line);
        while (mailbox == null) {
            line = mStream.readLine();
            if (isQuit(line)) break;
            String body;
            if ((body = isCommand(line, ""USER"")) != null) {
                String user = body;
                MailBox mb = mRepository.getMailBox(user);
                if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else {
                    mStream.writeOk();
                    String pswd, line2 = mStream.readLine();
                    if (isQuit(line2)) break;
                    if ((pswd = isCommand(line2, ""PASS"")) == null) mStream.writeErr(""Expected PASS but got {"" + line2 + ""}""); else {
                        String realPswd = mb.getPassword();
                        if ((realPswd != null) ? pswd.equals(realPswd) : mb.checkPassword(pswd)) {
                            mailbox = mb;
                            mStream.writeOk();
                        } else mStream.writeErr(""Bad password for "" + user);
                    }
                }
            } else if ((body = isCommand(line, ""APOP"")) != null) {
                if (mChallenge == null) mStream.writeErr(""APOP Not Supported""); else {
                    int space = body.indexOf(' ');
                    if (space < 0) mStream.writeErr(""Bad APOP command {"" + line + ""}""); else {
                        String user = body.substring(0, space);
                        String hash = body.substring(space + 1);
                        MailBox mb = mRepository.getMailBox(user);
                        if (mb == null) mStream.writeErr(""No mailbox for: "" + line); else if (mb.getPassword() == null) mStream.writeErr(""User("" + user + "") cannot login using APOP""); else {
                            String secret = mChallenge + mb.getPassword();
                            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
                            md5.update(secret.getBytes(""UTF-8""));
                            byte[] digest = md5.digest();
                            String digestStr = new String(Hex.encodeHex(digest));
                            if (hash.equalsIgnoreCase(digestStr)) {
                                mailbox = mb;
                                mStream.writeOk();
                            } else mStream.writeErr(""Bad password for "" + user);
                        }
                    }
                }
            } else mStream.writeErr(""Authentication required (got '"" + line + ""')"");
        }
        return mailbox;
    }
",0.0
"    public static String encryptPassword(String password) {
        if (password == null) return null;
        MessageDigest digest = null;
        try {
            digest = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""Algorithm not found"", e);
            return null;
        }
        digest.reset();
        digest.update(password.getBytes());
        return hexValue(digest.digest());
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    String test() throws ServerException, RtmApiException, IOException {
        HttpClient httpclient = new DefaultHttpClient();
        URI uri;
        try {
            uri = new URI(this.request.getUrl());
            HttpPost httppost = new HttpPost(uri);
            HttpResponse response = httpclient.execute(httppost);
            InputStream is = response.getEntity().getContent();
            StringBuilder sb = new StringBuilder();
            BufferedReader r = new BufferedReader(new InputStreamReader(new DoneHandlerInputStream(is)));
            for (String line = r.readLine(); line != null; line = r.readLine()) {
                sb.append(line);
            }
            return sb.toString();
        } catch (URISyntaxException e) {
            throw new RtmApiException(e.getMessage());
        } catch (ClientProtocolException e) {
            throw new RtmApiException(e.getMessage());
        }
    }
","    private final Vector<Class<?>> findSubclasses(URL location, String packageName, Class<?> superClass) {
        synchronized (results) {
            Map<Class<?>, URL> thisResult = new TreeMap<Class<?>, URL>(CLASS_COMPARATOR);
            Vector<Class<?>> v = new Vector<Class<?>>();
            String fqcn = searchClass.getName();
            List<URL> knownLocations = new ArrayList<URL>();
            knownLocations.add(location);
            for (int loc = 0; loc < knownLocations.size(); loc++) {
                URL url = knownLocations.get(loc);
                File directory = new File(url.getFile());
                if (directory.exists()) {
                    String[] files = directory.list();
                    for (int i = 0; i < files.length; i++) {
                        if (files[i].endsWith("".class"")) {
                            String classname = files[i].substring(0, files[i].length() - 6);
                            try {
                                Class<?> c = Class.forName(packageName + ""."" + classname);
                                if (superClass.isAssignableFrom(c) && !fqcn.equals(packageName + ""."" + classname)) {
                                    thisResult.put(c, url);
                                }
                            } catch (ClassNotFoundException cnfex) {
                                errors.add(cnfex);
                            } catch (Exception ex) {
                                errors.add(ex);
                            }
                        }
                    }
                } else {
                    try {
                        JarURLConnection conn = (JarURLConnection) url.openConnection();
                        JarFile jarFile = conn.getJarFile();
                        Enumeration<JarEntry> e = jarFile.entries();
                        while (e.hasMoreElements()) {
                            JarEntry entry = e.nextElement();
                            String entryname = entry.getName();
                            if (!entry.isDirectory() && entryname.endsWith("".class"")) {
                                String classname = entryname.substring(0, entryname.length() - 6);
                                if (classname.startsWith(""/"")) classname = classname.substring(1);
                                classname = classname.replace('/', '.');
                                try {
                                    Class c = Class.forName(classname);
                                    if (superClass.isAssignableFrom(c) && !fqcn.equals(classname)) {
                                        thisResult.put(c, url);
                                    }
                                } catch (ClassNotFoundException cnfex) {
                                    errors.add(cnfex);
                                } catch (NoClassDefFoundError ncdfe) {
                                    errors.add(ncdfe);
                                } catch (UnsatisfiedLinkError ule) {
                                    errors.add(ule);
                                } catch (Exception exception) {
                                    errors.add(exception);
                                } catch (Error error) {
                                    errors.add(error);
                                }
                            }
                        }
                    } catch (IOException ioex) {
                        errors.add(ioex);
                    }
                }
            }
            results.putAll(thisResult);
            Iterator<Class<?>> it = thisResult.keySet().iterator();
            while (it.hasNext()) {
                v.add(it.next());
            }
            return v;
        }
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    private void publish() {
        if (uploadPrototypeBox.isSelected()) {
            try {
                URL url = new URL(prototypeURLField.getText());
                prototypeURLField.recordText();
                PrintStream ps;
                HttpURLConnection huc = null;
                if (url.getProtocol().equals(""file"")) {
                    ps = new PrintStream(new FileOutputStream(url.getFile()));
                } else {
                    URLConnection urlc = url.openConnection();
                    urlc.setDoOutput(true);
                    if (urlc instanceof HttpURLConnection) {
                        huc = ((HttpURLConnection) urlc);
                        huc.setRequestMethod(""PUT"");
                    }
                    ps = new PrintStream(urlc.getOutputStream());
                }
                target.writePrototype(ps);
                if (huc != null) {
                    huc.getResponseCode();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Uploading Prototype"", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (postMetadataBox.isSelected()) {
            try {
                Hashtable env = new Hashtable();
                env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");
                env.put(Context.PROVIDER_URL, directoryURLField.getText());
                env.put(Context.SECURITY_PRINCIPAL, directoryPrincipalField.getText());
                env.put(Context.SECURITY_CREDENTIALS, directoryCredentialsField.getText());
                InitialDirContext dirContext = new InitialDirContext(env);
                Preferences prefs = Preferences.userNodeForPackage(getClass());
                prefs.put(""directoryURL"", directoryURLField.getText());
                prefs.put(""directoryPrincipal"", directoryPrincipalField.getText());
                prefs.put(""directoryCredentials"", directoryCredentialsField.getText());
                BasicAttributes attr = new BasicAttributes();
                attr.put(OBJECT_CLASS, RDS_RESOURCE);
                attr.put(CONTENT_TYPE, PROTOTYPE_TYPE);
                if (uploadPrototypeBox.isSelected()) {
                    attr.put(IMPLEMENTATION_URL, prototypeURLField.getText());
                }
                DefaultTableModel dtm = (DefaultTableModel) attributesTable.getModel();
                Preferences attrPrefs = prefs.node(""attributes"");
                for (int i = 0; i < dtm.getRowCount(); i++) {
                    attr.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                    attrPrefs.put((String) dtm.getValueAt(i, 0), (String) dtm.getValueAt(i, 1));
                }
                NameParser np = dirContext.getNameParser("""");
                Enumeration comps = new ResourceName(prototypeNameField.getText()).getAll();
                prototypeNameField.recordText();
                Name resourcedn = np.parse("""");
                while (comps.hasMoreElements()) {
                    resourcedn.add(RC + ""="" + (String) comps.nextElement());
                    try {
                        dirContext.createSubcontext(resourcedn);
                    } catch (NameAlreadyBoundException nabe) {
                    }
                }
                dirContext.modifyAttributes(resourcedn, DirContext.REPLACE_ATTRIBUTE, attr);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, e, ""Error Posting Metadata"", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
",0.0
"    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
","    public boolean actualizarEstadoEliminacion(int idTorneo) {
        int intResult = 0;
        String sql = ""UPDATE torneo "" + "" SET  terminado = 3 WHERE idTorneo= "" + idTorneo;
        try {
            connection = conexionBD.getConnection();
            connection.setAutoCommit(false);
            ps = connection.prepareStatement(sql);
            intResult = ps.executeUpdate();
            connection.commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException exe) {
                exe.printStackTrace();
            }
        } finally {
            conexionBD.close(ps);
            conexionBD.close(connection);
        }
        return (intResult > 0);
    }
",0.0
"    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    public void setChecksum() {
        try {
            java.security.MessageDigest md5 = java.security.MessageDigest.getInstance(""MD5"");
            String fqn = this.path + this.name;
            md5.update(fqn.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & BYTE_CLEANER_FF;
                if (b < BYTE_CLEANER_10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            this.checksum = sb.toString();
        } catch (java.security.NoSuchAlgorithmException nsae) {
            this.checksum = this.path + this.name;
        }
    }
",1.0
"    protected static File UrlToAFile(File target, String urlSt, String fileName) throws CaughtException {
        try {
            logger.info(""copy from url: "" + urlSt);
            URL url = new URL(urlSt);
            InputStream input = url.openStream();
            File dir = tempDir;
            File tempFile = new File(target, fileName);
            logger.info(""created: "" + tempFile.getAbsolutePath());
            copyFile(tempFile, input);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public String deleteData(String id, DefaultHttpClient httpclient) {
        try {
            HttpDelete del = new HttpDelete(""http://3dforandroid.appspot.com/api/v1/note/delete/"" + id);
            del.setHeader(""Content-Type"", ""application/json"");
            del.setHeader(""Accept"", ""*/*"");
            HttpResponse response = httpclient.execute(del);
            HttpEntity entity = response.getEntity();
            InputStream instream;
            instream = entity.getContent();
            responseMessage = read(instream);
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseMessage;
    }
",0.0
"    public GGLicenses getLicensesInfo() throws IllegalStateException, GGException, Exception {
        List<NameValuePair> qparams = new ArrayList<NameValuePair>();
        qparams.add(new BasicNameValuePair(""method"", ""gg.photos.licenses.getInfo""));
        qparams.add(new BasicNameValuePair(""key"", this.key));
        String url = REST_URL + ""?"" + URLEncodedUtils.format(qparams, ""UTF-8"");
        URI uri = new URI(url);
        HttpGet httpget = new HttpGet(uri);
        HttpResponse response = httpClient.execute(httpget);
        int status = response.getStatusLine().getStatusCode();
        errorCheck(response, status);
        InputStream content = response.getEntity().getContent();
        GGLicenses licenses = JAXB.unmarshal(content, GGLicenses.class);
        return licenses;
    }
","    protected NetQuery(String serviceURL, String query, byte queryType, String defaultGraph, int timeout) {
        String urlString = null;
        try {
            queryString = query;
            char delim = serviceURL.indexOf('?') == -1 ? '?' : '&';
            if (queryType == Query.UPDATE_TYPE) urlString = serviceURL; else {
                urlString = serviceURL + delim + ""query="" + URLEncoder.encode(query, ""UTF-8"");
                delim = '&';
                if (defaultGraph != null) urlString += delim + ""default-graph-uri="" + defaultGraph;
            }
            URL url = new URL(urlString);
            conn = (HttpURLConnection) url.openConnection();
            configureConnection(query, queryType, timeout, defaultGraph);
        } catch (UnsupportedEncodingException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        } catch (MalformedURLException e) {
            System.err.println(e.toString() + "" for URL: "" + urlString);
            System.err.println(serviceURL);
            e.printStackTrace();
            System.exit(-1);
        } catch (IOException e) {
            System.err.println(e.toString());
            e.printStackTrace();
            System.exit(-1);
        }
    }
",0.0
"    public void insert() throws Exception {
        Connection con = DbUtil.connectToDb();
        PreparedStatement pStmt = null;
        try {
            pStmt = con.prepareStatement(""INSERT INTO "" + Constants.TABLENAME + "" (name,phone,address)"" + "" values(?,?,?)"");
            con.setAutoCommit(false);
            pStmt.setString(1, name);
            pStmt.setString(2, phone);
            pStmt.setString(3, address);
            int j = pStmt.executeUpdate();
            con.commit();
        } catch (Exception ex) {
            try {
                con.rollback();
            } catch (SQLException sqlex) {
                sqlex.printStackTrace(System.out);
            }
            throw ex;
        } finally {
            try {
                pStmt.close();
                con.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
",1.0
"    private URLConnection openConnection(URL url) throws MalformedURLException, IOException {
        URLConnection connection = url.openConnection();
        if (connection instanceof HttpURLConnection) ((HttpURLConnection) connection).setInstanceFollowRedirects(false);
        connection.setUseCaches(false);
        return connection;
    }
","    @LargeTest
    public void testHttpPostsWithExpectationVerification() throws Exception {
        int reqNo = 3;
        this.server.registerHandler(""*"", new HttpRequestHandler() {

            public void handle(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException, IOException {
                StringEntity outgoing = new StringEntity(""No content"");
                response.setEntity(outgoing);
            }
        });
        this.server.setExpectationVerifier(new HttpExpectationVerifier() {

            public void verify(final HttpRequest request, final HttpResponse response, final HttpContext context) throws HttpException {
                Header someheader = request.getFirstHeader(""Secret"");
                if (someheader != null) {
                    int secretNumber;
                    try {
                        secretNumber = Integer.parseInt(someheader.getValue());
                    } catch (NumberFormatException ex) {
                        response.setStatusCode(HttpStatus.SC_BAD_REQUEST);
                        return;
                    }
                    if (secretNumber < 2) {
                        response.setStatusCode(HttpStatus.SC_EXPECTATION_FAILED);
                        ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes(""Wrong secret number""));
                        response.setEntity(outgoing);
                    }
                }
            }
        });
        this.server.start();
        this.client.getParams().setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);
        DefaultHttpClientConnection conn = new DefaultHttpClientConnection();
        HttpHost host = new HttpHost(""localhost"", this.server.getPort());
        try {
            for (int r = 0; r < reqNo; r++) {
                if (!conn.isOpen()) {
                    Socket socket = new Socket(host.getHostName(), host.getPort());
                    conn.bind(socket, this.client.getParams());
                }
                BasicHttpEntityEnclosingRequest post = new BasicHttpEntityEnclosingRequest(""POST"", ""/"");
                post.addHeader(""Secret"", Integer.toString(r));
                ByteArrayEntity outgoing = new ByteArrayEntity(EncodingUtils.getAsciiBytes(""No content""));
                post.setEntity(outgoing);
                HttpResponse response = this.client.execute(post, host, conn);
                HttpEntity entity = response.getEntity();
                assertNotNull(entity);
                entity.consumeContent();
                if (r < 2) {
                    assertEquals(HttpStatus.SC_EXPECTATION_FAILED, response.getStatusLine().getStatusCode());
                } else {
                    assertEquals(HttpStatus.SC_OK, response.getStatusLine().getStatusCode());
                }
                if (!this.client.keepAlive(response)) {
                    conn.close();
                }
            }
            HttpConnectionMetrics cm = conn.getMetrics();
            assertEquals(reqNo, cm.getRequestCount());
            assertEquals(reqNo, cm.getResponseCount());
        } finally {
            conn.close();
            this.server.shutdown();
        }
    }
",0.0
"    public void reqservmodif(HttpServletRequest req, HttpServletResponse resp, SessionCommand command) {
        setHeader(resp);
        try {
            logger.debug(""SeMo: Requesting server modification for session "" + command.getSession());
            File tempFile = new File(getSyncWorkDirectory(req), command.getSession() + "".smodif"");
            OutputStream fos = new FileOutputStream(tempFile);
            syncServer.getServerModifications(command.getSession(), fos);
            InputStream fis = new FileInputStream(tempFile);
            resp.setContentLength(fis.available());
            while (fis.available() > 0) {
                resp.getOutputStream().write(fis.read());
            }
            resp.getOutputStream().flush();
            resp.flushBuffer();
        } catch (IOException ioe) {
            logger.error(ioe.getMessage());
        } catch (ImogSerializationException ex) {
            logger.error(ex.getMessage());
        }
    }
","    public static SlimModCollection parseSlimModification(URL url) {
        try {
            Scanner scanner = new Scanner(url.openStream());
            return parseSlimModification(scanner);
        } catch (IOException e) {
            throw new IllegalStateException(""Error reading slim file: "" + e.getMessage(), e);
        }
    }
",0.0
"    protected static File UrlGzipToFile(File dir, String urlSt, String suffix) throws CaughtException {
        try {
            URL url = new URL(urlSt);
            InputStream zipped = url.openStream();
            InputStream unzipped = new GZIPInputStream(zipped);
            File tempFile = File.createTempFile(""input"", suffix, dir);
            copyFile(tempFile, unzipped);
            return tempFile;
        } catch (IOException e) {
            throw new CaughtException(e, logger);
        }
    }
","    public void put(File fileToPut) throws IOException {
        FTPClient ftp = new FTPClient();
        try {
            int reply;
            ftp.connect(this.endpointURL, Config.getFtpPort());
            log.debug(""Ftp put reply: "" + ftp.getReplyString());
            reply = ftp.getReplyCode();
            if (!FTPReply.isPositiveCompletion(reply)) {
                ftp.disconnect();
                throw new IOException(""Ftp put server refused connection."");
            }
            if (!ftp.login(""anonymous"", """")) {
                ftp.logout();
                throw new IOException(""FTP: server wrong passwd"");
            }
            ftp.setFileType(FTP.BINARY_FILE_TYPE);
            ftp.enterLocalPassiveMode();
            InputStream input = new FileInputStream(fileToPut);
            if (ftp.storeFile(fileToPut.getName(), input) != true) {
                ftp.logout();
                input.close();
                throw new IOException(""FTP put exception"");
            }
            input.close();
            ftp.logout();
        } catch (Exception e) {
            log.error(""Ftp client exception: "" + e.getMessage(), e);
            throw new IOException(e.getMessage());
        }
    }
",0.0
"    private void copyFile(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);
        in.close();
        out.close();
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String develBuild = null;
            String stableBuild = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".build"")) develBuild = line.substring(6).trim(); else if (line.startsWith("".stablebuild"")) stableBuild = line.substring(12).trim();
            }
            bin.close();
            if (develBuild != null && stableBuild != null) {
                doVersionCheck(view, stableBuild, develBuild);
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
","    public String sendGetRequest(String endpoint, String requestParameters, String username, String password) throws Exception {
        String result = null;
        if (endpoint.startsWith(""http://"")) {
            try {
                String urlStr = endpoint;
                if (requestParameters != null && requestParameters.length() > 0) {
                    urlStr += ""?"" + requestParameters;
                }
                URL url = new URL(urlStr);
                URLConnection conn = url.openConnection();
                String userPassword = username + "":"" + password;
                byte[] encoding = org.apache.commons.codec.binary.Base64.encodeBase64(userPassword.getBytes());
                String authStringEnc = new String(encoding);
                log.debug(""Base64 encoded auth string: '"" + authStringEnc + ""'"");
                conn.setRequestProperty(""Authorization"", ""Basic "" + authStringEnc);
                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                StringBuffer sb = new StringBuffer();
                String line;
                while ((line = rd.readLine()) != null) {
                    sb.append(line);
                }
                rd.close();
                result = sb.toString();
            } catch (Throwable e) {
                throw new Exception(""problem issuing get to URL"", e);
            }
        }
        return result;
    }
",1.0
"    static int[] bubble(int[] s) {
        boolean f = true;
        while (f) {
            f = false;
            for (int i = 0; i < s.length - 1; i++) {
                if (s[i] > s[i + 1]) {
                    int t = s[i];
                    s[i] = s[i + 1];
                    s[i + 1] = t;
                    f = true;
                }
            }
        }
        return s;
    }
","    public void testRetrieve() throws DigitalObjectManager.DigitalObjectNotFoundException, URISyntaxException, IOException {
        DigitalObjectManager man = new FedoraObjectManager(""fedoraAdmin"", ""fedoraAdminPass"", ""http://localhost:7910/fedora"");
        DigitalObject r = man.retrieve(new URI(""demo:dc2mods.1""));
        String title = r.getTitle();
        List<Metadata> met = r.getMetadata();
        InputStream content = r.getContent().read();
        StringWriter theString = new StringWriter();
        IOUtils.copy(content, theString);
        assertNotNull(theString.toString(), ""Content should not be null"");
        assertNotNull(title, ""The title should be set"");
        assertNotNull(met.get(0).getContent(), ""There should be some metadata"");
    }
",0.0
"    public static void main(String[] args) {
        FTPClient client = new FTPClient();
        try {
            client.connect(""ftp.domain.com"");
            client.login(""admin"", ""secret"");
            String filename = ""/testing/data.txt"";
            boolean deleted = client.deleteFile(filename);
            if (deleted) {
                System.out.println(""File deleted..."");
            }
            client.logout();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                client.disconnect();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    private void importUrl(String str) throws Exception {
        URL url = new URL(str);
        InputStream xmlStream = url.openStream();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        MessageHolder messages = MessageHolder.getInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(xmlStream);
        Element rootElement = document.getDocumentElement();
        EntrySetParser entrySetParser = new EntrySetParser();
        EntrySetTag entrySet = entrySetParser.process(rootElement);
        UpdateProteinsI proteinFactory = new UpdateProteins();
        BioSourceFactory bioSourceFactory = new BioSourceFactory();
        ControlledVocabularyRepository.check();
        EntrySetChecker.check(entrySet, proteinFactory, bioSourceFactory);
        if (messages.checkerMessageExists()) {
            MessageHolder.getInstance().printCheckerReport(System.err);
        } else {
            EntrySetPersister.persist(entrySet);
            if (messages.checkerMessageExists()) {
                MessageHolder.getInstance().printPersisterReport(System.err);
            } else {
                System.out.println(""The data have been successfully saved in your Intact node."");
            }
        }
    }
",0.0
"    public static String sha1(String input) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""SHA-1"");
        byte[] sha1hash = new byte[40];
        md.update(input.getBytes(""UTF-8""), 0, input.length());
        sha1hash = md.digest();
        return convertToHex(sha1hash);
    }
","    @Override
    public Response callService(RemoteCallUrl urlModel) throws RemoteCallFailedException {
        String path;
        if (urlModel.getRootPath() != null) path = urlModel.getRootPath() + urlModel.getServicePath(); else path = urlModel.getServicePath();
        try {
            URL url = new URL(HTTP_PROTOCOL, urlModel.getHost(), urlModel.getPort(), path);
            URLConnection urlConnection = url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String inputLine;
            String data = """";
            while ((inputLine = in.readLine()) != null) data += inputLine;
            Response remoteData = new Response(new String(data));
            remoteData.setStatus(urlConnection.getHeaderField(Response.RPC_STATUS_NAME));
            in.close();
            return remoteData;
        } catch (MalformedURLException e) {
            logger.error(""Illegal URL. Cannot connect to this remote object"", e);
            throw new RemoteCallFailedException(""Illegal URL:"" + e.getMessage(), e);
        } catch (IOException e) {
            logger.error(""Cannot read from source. Please check remote object address"", e);
            throw new RemoteCallFailedException(""Fatal transport error:"" + e.getMessage(), e);
        }
    }
",0.0
"    private String calculateMD5(String input) throws NoSuchAlgorithmException {
        MessageDigest digest = MessageDigest.getInstance(""MD5"");
        digest.reset();
        digest.update(input.getBytes());
        byte[] md5 = digest.digest();
        String tmp = """";
        String res = """";
        for (int i = 0; i < md5.length; i++) {
            tmp = (Integer.toHexString(0xFF & md5[i]));
            if (tmp.length() == 1) {
                res += ""0"" + tmp;
            } else {
                res += tmp;
            }
        }
        return res;
    }
","    public static boolean sendInformation(String reportType, HashMap<String, String> data) {
        if (Activator.getDefault().getPreferenceStore().getBoolean(PreferenceConstants.P_UDC)) {
            logger.debug(""Report usage information to devs..."");
            String transferData = ""reportType="" + reportType;
            transferData += ""&build="" + Platform.getBundle(""de.uni_mannheim.swt.codeconjurer"").getHeaders().get(""Bundle-Version"");
            transferData += ""&Suppl-Server="" + Activator.getDefault().getPreferenceStore().getString(PreferenceConstants.P_SERVER);
            for (String key : data.keySet()) {
                transferData += ""&Suppl-"" + key + ""="" + data.get(key);
            }
            try {
                URL url = new URL(""http://www.merobase.com:7777/org.code_conjurer.udc/UsageReport"");
                URLConnection conn = url.openConnection();
                conn.setDoOutput(true);
                OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());
                writer.write(transferData);
                writer.flush();
                StringBuffer answer = new StringBuffer();
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    answer.append(line + ""\r\n"");
                }
                writer.close();
                reader.close();
                logger.debug(""UDC Server answer: "" + answer.toString());
            } catch (Exception e) {
                CrashReporter.reportException(e);
                logger.debug(""Could not report usage data: "" + e.toString());
                return false;
            }
            return true;
        } else {
            logger.debug(""Reporting not wished!"");
            return false;
        }
    }
",0.0
"    private String hashPassword(String password) {
        String passwordHash = """";
        try {
            MessageDigest md5 = MessageDigest.getInstance(""MD5"");
            md5.update(password.getBytes());
            BigInteger hash = new BigInteger(1, md5.digest());
            passwordHash = hash.toString(16);
            if (passwordHash.length() == 31) {
                passwordHash = ""0"" + passwordHash;
            }
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return passwordHash;
    }
","    public static HttpsURLConnection createRequest(String feedUrl, String httpMethod, Map<String, String> headers) throws BuzzIOException {
        HttpsURLConnection con;
        try {
            URL url = new URL(feedUrl);
            con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod(httpMethod);
            if (headers != null && !headers.isEmpty()) {
                for (String key : headers.keySet()) {
                    con.setRequestProperty(key, headers.get(key));
                }
            }
        } catch (IOException e) {
            throw new BuzzIOException(e);
        }
        return con;
    }
",0.0
"    public static int[] simplex_reverse_sort(int[] vertices) {
        if (vertices.length <= 1) return vertices;
        for (int j = vertices.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                if (vertices[i + 1] > vertices[i]) {
                    int dummy = vertices[i];
                    vertices[i] = vertices[i + 1];
                    vertices[i + 1] = dummy;
                }
            }
        }
        return vertices;
    }
","    public void convert(File src, File dest) throws IOException {
        InputStream in = new BufferedInputStream(new FileInputStream(src));
        DcmParser p = pfact.newDcmParser(in);
        Dataset ds = fact.newDataset();
        p.setDcmHandler(ds.getDcmHandler());
        try {
            FileFormat format = p.detectFileFormat();
            if (format != FileFormat.ACRNEMA_STREAM) {
                System.out.println(""\n"" + src + "": not an ACRNEMA stream!"");
                return;
            }
            p.parseDcmFile(format, Tags.PixelData);
            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {
                System.out.println(""\n"" + src + "": contains UIDs!"" + "" => probable already DICOM - do not convert"");
                return;
            }
            boolean hasPixelData = p.getReadTag() == Tags.PixelData;
            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;
            int pxlen = p.getReadLength();
            if (hasPixelData) {
                if (inflate) {
                    ds.putUS(Tags.BitsAllocated, 16);
                    pxlen = pxlen * 4 / 3;
                }
                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {
                    System.out.println(""\n"" + src + "": mismatch pixel data length!"" + "" => do not convert"");
                    return;
                }
            }
            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));
            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));
            ds.putUI(Tags.SOPInstanceUID, uid(instUID));
            ds.putUI(Tags.SOPClassUID, classUID);
            if (!ds.contains(Tags.NumberOfSamples)) {
                ds.putUS(Tags.NumberOfSamples, 1);
            }
            if (!ds.contains(Tags.PhotometricInterpretation)) {
                ds.putCS(Tags.PhotometricInterpretation, ""MONOCHROME2"");
            }
            if (fmi) {
                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));
            }
            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            try {
            } finally {
                ds.writeFile(out, encodeParam());
                if (hasPixelData) {
                    if (!skipGroupLen) {
                        out.write(PXDATA_GROUPLEN);
                        int grlen = pxlen + 8;
                        out.write((byte) grlen);
                        out.write((byte) (grlen >> 8));
                        out.write((byte) (grlen >> 16));
                        out.write((byte) (grlen >> 24));
                    }
                    out.write(PXDATA_TAG);
                    out.write((byte) pxlen);
                    out.write((byte) (pxlen >> 8));
                    out.write((byte) (pxlen >> 16));
                    out.write((byte) (pxlen >> 24));
                }
                if (inflate) {
                    int b2, b3;
                    for (; pxlen > 0; pxlen -= 3) {
                        out.write(in.read());
                        b2 = in.read();
                        b3 = in.read();
                        out.write(b2 & 0x0f);
                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));
                        out.write(b3 >> 4);
                    }
                } else {
                    for (; pxlen > 0; --pxlen) {
                        out.write(in.read());
                    }
                }
                out.close();
            }
            System.out.print('.');
        } finally {
            in.close();
        }
    }
",0.0
"    public void restoreBackup(File backupFile, File destDir, boolean replaceExistingFile) throws BackupException, FileAlreadyExistsException {
        try {
            File databaseEncryptionFile = new File(destDir.getPath() + File.separator + getDatabase() + DATABASE_FILE_END);
            if (databaseEncryptionFile.exists() == true && replaceExistingFile == false) {
                throw new FileAlreadyExistsException(""File "" + databaseEncryptionFile.getName() + ""already exists"");
            }
            IOUtils.copy(FileUtils.openInputStream(backupFile), FileUtils.openOutputStream(databaseEncryptionFile));
        } catch (FileNotFoundException e) {
            throw new BackupException(e);
        } catch (IOException e) {
            throw new BackupException(e);
        }
    }
","    private void download(Downloadable downloadable, HttpServletResponse response) throws Exception {
        String contentType = downloadable.getContentType();
        try {
            response.setContentType(contentType);
            response.setHeader(""Content-Disposition"", ""attachment;"" + "" filename="" + new String(downloadable.getName().getBytes(), ""ISO-8859-1""));
            OutputStream os = response.getOutputStream();
            IOUtils.copy(downloadable.getInputStream(), os);
            os.flush();
        } catch (IOException e) {
        }
    }
",1.0
"    public static boolean isImageLinkReachable(WebImage image) {
        if (image.getUrl() == null) return false;
        try {
            URL url = new URL(image.getUrl());
            url.openStream().close();
        } catch (MalformedURLException e) {
            return false;
        } catch (IOException e) {
            return false;
        }
        return true;
    }
","    private static File copyFileTo(File file, File directory) throws IOException {
        File newFile = new File(directory, file.getName());
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(file);
            fos = new FileOutputStream(newFile);
            byte buff[] = new byte[1024];
            int val;
            while ((val = fis.read(buff)) > 0) fos.write(buff, 0, val);
        } finally {
            if (fis != null) fis.close();
            if (fos != null) fos.close();
        }
        return newFile;
    }
",0.0
"    public static int[] sortDescending(double input[]) {
        int[] order = new int[input.length];
        for (int i = 0; i < order.length; i++) order[i] = i;
        for (int i = input.length; --i >= 0; ) {
            for (int j = 0; j < i; j++) {
                if (input[j] < input[j + 1]) {
                    double mem = input[j];
                    input[j] = input[j + 1];
                    input[j + 1] = mem;
                    int id = order[j];
                    order[j] = order[j + 1];
                    order[j + 1] = id;
                }
            }
        }
        return order;
    }
","    public static String MD5(String plainTxt) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainTxt.getBytes());
            byte[] b = md.digest();
            int i = 0;
            StringBuffer buffer = new StringBuffer();
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i += 256;
                }
                if (i < 16) {
                    buffer.append(""0"");
                }
                buffer.append(Integer.toHexString(i));
            }
            return buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return ""ERROR"";
        }
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
",1.0
"    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
","        private void compileJarFile() {
            String javaFileName = jarFileName + "".java"";
            try {
                File pluginWorkDirectory = new File(CastadivaModel.PLUGIN_WORKFOLDER);
                pluginWorkDirectory.mkdirs();
                File pluginsDir = new File(pluginWorkDirectory.getPath() + ""/castadiva/Plugins"");
                pluginsDir.mkdirs();
                BufferedWriter bout = new BufferedWriter(new FileWriter(pluginWorkDirectory.getPath() + ""/castadiva/Plugins/"" + javaFileName));
                bout.write(""package castadiva.Plugins;\n"");
                bout.write(""import java.io.*;\n"");
                bout.write(""import java.util.zip.ZipEntry;\n"");
                bout.write(""import java.util.jar.JarFile;\n"");
                bout.write(""import lib.IPluginCastadiva;\n"");
                bout.write(""public class "" + jarFileName + "" implements IPluginCastadiva {\n"");
                bout.write(""    public String getBin() {\n"");
                bout.write(""        return \"""" + binaryFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getFlags() {\n"");
                bout.write(""        return \"""" + protocolFlags + ""\""; \n    }\n"");
                bout.write(""    public String getPathConf() {\n"");
                bout.write(""        return \"""" + configurationFilePath + ""\""; \n    }\n"");
                bout.write(""    public String getConfContent(){\n"");
                bout.write(""        BufferedReader confFileReader;\n"");
                bout.write(""        try {\n"");
                bout.write(""            JarFile jar = new JarFile(\"""" + CastadivaModel.PLUGIN_JAR_FOLDER + ""/"" + jarFileName + "".jar\"");\n"");
                bout.write(""            ZipEntry entry = jar.getEntry(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""            confFileReader = new BufferedReader(new InputStreamReader(jar.getInputStream(entry)));\n"");
                bout.write(""            String confFile = \""\"";\n"");
                bout.write(""            String confFileLine;\n"");
                bout.write(""            while((confFileLine = confFileReader.readLine()) != null){\n"");
                bout.write(""                 confFile+=\""\\n\""+confFileLine;\n"");
                bout.write(""            }\n"");
                bout.write(""            return(confFile);\n"");
                bout.write(""        } catch (Exception ex) {\n"");
                bout.write(""            System.out.println(ex);\n"");
                bout.write(""        }\n"");
                bout.write(""        return(null);\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getConf(){\n"");
                bout.write(""        return(\"""" + configurationFilename[configurationFilename.length - 1] + ""\"");\n"");
                bout.write(""    }\n"");
                bout.write(""    public String getKillInstruction() {\n"");
                bout.write(""        return  \""killall "" + binFileName[binFileName.length - 1] + "" 2>/dev/null\"""" + "";\n    }\n}"");
                bout.close();
                BufferedWriter confFileWriter = new BufferedWriter(new FileWriter(CastadivaModel.PLUGIN_WORKFOLDER + ""/"" + configurationFilename[configurationFilename.length - 1]));
                confFileWriter.write(protocolConfiguration);
                confFileWriter.close();
            } catch (IOException ex) {
                Logger.getLogger(ProtocolsGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
",0.0
"    public static NodeId generateTopicId(String topicName) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA"");
        } catch (NoSuchAlgorithmException e) {
            System.err.println(""No SHA support!"");
        }
        md.update(topicName.getBytes());
        byte[] digest = md.digest();
        NodeId newId = new NodeId(digest);
        return newId;
    }
","    private StylingEngine createStyling() {
        StylingFactory stylingFactory = StylingFactory.getDefaultInstance();
        StyleSheetCompilerFactory inlineCompilerFactory = new InlineStyleSheetCompilerFactory(null);
        StylingEngine stylingEngine = stylingFactory.createStylingEngine(inlineCompilerFactory);
        CSSCompilerBuilder builder = new CSSCompilerBuilder();
        builder.setStyleSheetCompilerFactory(DefaultStyleSheetCompilerFactory.getDefaultInstance());
        CSSCompiler cssCompiler = builder.getCSSCompiler();
        CompiledStyleSheet defaultCompiledStyleSheet;
        try {
            URL url = getClass().getResource(""/com/volantis/mcs/runtime/default.css"");
            InputStream stream = url.openStream();
            defaultCompiledStyleSheet = cssCompiler.compile(new InputStreamReader(stream), null);
        } catch (IOException e) {
            throw new ExtendedRuntimeException(e);
        }
        stylingEngine.pushStyleSheet(defaultCompiledStyleSheet);
        if (protocol != null && protocol.getCompiledDefaultStyleSheet() != null) {
            stylingEngine.pushStyleSheet(protocol.getCompiledDefaultStyleSheet());
        }
        return stylingEngine;
    }
",0.0
"    public void CopyFile(File source, File destination) throws Exception {
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(source);
            fos = new FileOutputStream(destination);
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
                if (fos != null) {
                    fos.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
","    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
",0.0
"    public ContentPackage resolveItem() {
        URL url;
        try {
            url = new URL(itembankURL + ""/"" + deposit.get(""http://www.caret.cam.ac.uk/minibix/metadata/ticket""));
            return new ContentPackage(url.openStream());
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
","    public static void doVersionCheck(View view) {
        view.showWaitCursor();
        try {
            URL url = new URL(jEdit.getProperty(""version-check.url""));
            InputStream in = url.openStream();
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String line;
            String version = null;
            String build = null;
            while ((line = bin.readLine()) != null) {
                if (line.startsWith("".version"")) version = line.substring(8).trim(); else if (line.startsWith("".build"")) build = line.substring(6).trim();
            }
            bin.close();
            if (version != null && build != null) {
                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {
                    GUIUtilities.message(view, ""version-check"" + "".up-to-date"", new String[0]);
                }
            }
        } catch (IOException e) {
            String[] args = { jEdit.getProperty(""version-check.url""), e.toString() };
            GUIUtilities.error(view, ""read-error"", args);
        }
        view.hideWaitCursor();
    }
",0.0
"    public void testParts() throws Exception {
        URL url = getClass().getClassLoader().getResource(""de/schlund/pfixxml/parts.xml"");
        InputSource source = new InputSource(url.openStream());
        source.setSystemId(url.toString());
        IncludePartsInfo info = IncludePartsInfoParser.parse(source);
        Map<String, IncludePartInfo> parts = info.getParts();
        assertEquals(3, parts.size());
        assertTrue(parts.containsKey(""aaa""));
        assertTrue(parts.containsKey(""bbb""));
        assertFalse(parts.containsKey(""ccc""));
        assertTrue(parts.containsKey(""ddd""));
    }
","    public void run() {
        StringBuffer xml;
        String tabName;
        Element guiElement;
        setBold(monitor.getReading());
        setBold(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Working"");
        HttpMethod method = null;
        xml = new StringBuffer();
        File tempfile = new File(url);
        if (tempfile.exists()) {
            try {
                InputStream in = new FileInputStream(tempfile);
                int temp;
                while ((temp = in.read()) != -1) {
                    xml.append((char) temp);
                }
                in.close();
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading XML file from local file"");
                e.printStackTrace(System.err);
                return;
            }
        } else {
            try {
                HttpClient client = new HttpClient();
                method = new GetMethod(url);
                int response = client.executeMethod(method);
                if (response == 200) {
                    InputStream in = method.getResponseBodyAsStream();
                    int temp;
                    while ((temp = in.read()) != -1) {
                        xml.append((char) temp);
                    }
                    in.close();
                } else {
                    if (method != null) {
                        method.releaseConnection();
                    }
                    System.out.println(""Loading Monitor Failed. Incorrect response from HTTP Server "" + response);
                    return;
                }
            } catch (IOException e) {
                if (method != null) {
                    method.releaseConnection();
                }
                System.out.println(""Loading Monitor Failed, error while reading XML file from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        setPlain(monitor.getReading());
        setPlain(monitor.getReadingStatus());
        monitor.getReadingStatus().setText(""      Done"");
        setBold(monitor.getValidating());
        setBold(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Working"");
        DocumentBuilderFactoryImpl factory = new DocumentBuilderFactoryImpl();
        try {
            DocumentBuilder parser = factory.newDocumentBuilder();
            Document document = parser.parse(new ByteArrayInputStream(xml.toString().getBytes()));
            if (method != null) {
                method.releaseConnection();
            }
            Element root = document.getDocumentElement();
            NodeList temp = root.getElementsByTagName(""resource"");
            for (int j = 0; j < temp.getLength(); j++) {
                Element resource = (Element) temp.item(j);
                resources.add(new URL(resource.getAttribute(""url"")));
            }
            NodeList connections = root.getElementsByTagName(""jmxserver"");
            for (int j = 0; j < connections.getLength(); j++) {
                Element connection = (Element) connections.item(j);
                String name = connection.getAttribute(""name"");
                String tempUrl = connection.getAttribute(""url"");
                if (tempUrl.indexOf(""${host}"") != -1) {
                    HostDialog dialog = new HostDialog(Config.getHosts());
                    String host = dialog.showDialog();
                    if (host == null) {
                        System.out.println(""Host can not be null, unable to create panel."");
                        return;
                    }
                    tempUrl = tempUrl.replaceAll(""\\$\\{host\\}"", host);
                    Config.addHost(host);
                }
                JMXServiceURL jmxUrl = new JMXServiceURL(tempUrl);
                JmxServerGraph server = new JmxServerGraph(name, jmxUrl, new JmxWorker(false));
                servers.put(name, server);
                NodeList listeners = connection.getElementsByTagName(""listener"");
                for (int i = 0; i < listeners.getLength(); i++) {
                    Element attribute = (Element) listeners.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String filtertype = attribute.getAttribute(""filterType"");
                    TaskNotificationListener listener = new TaskNotificationListener();
                    NotificationFilterSupport filter = new NotificationFilterSupport();
                    if (filtertype == null || """".equals(filtertype)) {
                        filter = null;
                    } else {
                        filter.enableType(filtertype);
                    }
                    Task task = new Task(-1, Task.LISTEN, server);
                    task.setMbean(mbean);
                    task.setListener(listener);
                    task.setFilter(filter);
                    server.getWorker().addTask(task);
                    if (tasks.get(taskname) != null) {
                        System.out.println(""Task "" + taskname + "" already exists."");
                        return;
                    }
                    List<Task> hashTempList = new ArrayList<Task>();
                    hashTempList.add(task);
                    tasks.put(taskname, hashTempList);
                }
                NodeList attributes = connection.getElementsByTagName(""attribute"");
                for (int i = 0; i < attributes.getLength(); i++) {
                    Element attribute = (Element) attributes.item(i);
                    String taskname = attribute.getAttribute(""taskname"");
                    MBean mbean = new MBean(attribute.getAttribute(""mbean""), null);
                    String attributename = attribute.getAttribute(""attributename"");
                    String frequency = attribute.getAttribute(""frequency"");
                    String onEvent = attribute.getAttribute(""onEvent"");
                    if (frequency.equalsIgnoreCase(""onchange"")) {
                        TaskNotificationListener listener = new TaskNotificationListener();
                        AttributeChangeNotificationFilter filter = new AttributeChangeNotificationFilter();
                        filter.enableAttribute(attributename);
                        Task task = new Task(-1, Task.LISTEN, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        task.setListener(listener);
                        task.setFilter(filter);
                        server.getWorker().addTask(task);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        Task task2 = new Task(-1, Task.GET_ATTRIBUTE, server);
                        task2.setAttribute(att);
                        task2.setMbean(mbean);
                        server.getWorker().addTask(task2);
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        hashTempList.add(task2);
                        tasks.put(taskname, hashTempList);
                    } else {
                        int frequency2 = Integer.parseInt(frequency);
                        Task task = new Task(frequency2, Task.GET_ATTRIBUTE, server);
                        MBeanAttribute att = new MBeanAttribute(mbean, attributename);
                        task.setAttribute(att);
                        task.setMbean(mbean);
                        if (tasks.get(taskname) != null) {
                            System.out.println(""Task "" + taskname + "" already exists."");
                            return;
                        }
                        List<Task> hashTempList = new ArrayList<Task>();
                        hashTempList.add(task);
                        tasks.put(taskname, hashTempList);
                        TaskNotificationListener listener = null;
                        if (onEvent != null && !"""".equals(onEvent)) {
                            Task tempTask = tasks.get(onEvent).get(0);
                            if (tempTask == null) {
                                System.out.println(onEvent + "" was not found."");
                                return;
                            } else {
                                listener = (TaskNotificationListener) tempTask.getListener();
                            }
                        }
                        if (listener == null) {
                            server.getWorker().addTask(task);
                        } else {
                            listener.addTask(task);
                        }
                    }
                }
            }
            NodeList guiTemp = root.getElementsByTagName(""gui"");
            guiElement = (Element) guiTemp.item(0);
            tabName = guiElement.getAttribute(""name"");
            if (MonitorServer.contains(tabName)) {
                JOptionPane.showMessageDialog(null, ""This panel is already open, stoping creating of panel."", ""Panel already exists"", JOptionPane.ERROR_MESSAGE);
                return;
            }
            for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
                if (monitor.getTab().getComponent(i).equals(monitor)) {
                    monitor.getTab().setTitleAt(i, tabName);
                    break;
                }
            }
            NodeList tempBindings = root.getElementsByTagName(""binding"");
            for (int i = 0; i < tempBindings.getLength(); i++) {
                Element binding = (Element) tempBindings.item(i);
                String guiname = binding.getAttribute(""guiname"");
                String tmethod = binding.getAttribute(""method"");
                String taskname = binding.getAttribute(""taskname"");
                String formater = binding.getAttribute(""formater"");
                BindingContainer tempBinding;
                if (formater == null || (formater != null && formater.equals(""""))) {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname);
                } else {
                    tempBinding = new BindingContainer(guiname, tmethod, taskname, formater);
                }
                bindings.add(tempBinding);
            }
        } catch (Exception e) {
            System.err.println(""Exception message: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, couldnt parse XML file."");
            e.printStackTrace(System.err);
            return;
        }
        setPlain(monitor.getValidating());
        setPlain(monitor.getValidatingStatus());
        monitor.getValidatingStatus().setText(""      Done"");
        setBold(monitor.getDownload());
        setBold(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Working"");
        List<File> jarFiles = new ArrayList<File>();
        File cacheDir = new File(Config.getCacheDir());
        if (!cacheDir.exists()) {
            cacheDir.mkdir();
        }
        for (URL resUrl : resources) {
            try {
                HttpClient client = new HttpClient();
                HttpMethod methodRes = new GetMethod(resUrl.toString());
                int response = client.executeMethod(methodRes);
                if (response == 200) {
                    int index = resUrl.toString().lastIndexOf(""/"") + 1;
                    File file = new File(Config.getCacheDir() + resUrl.toString().substring(index));
                    FileOutputStream out = new FileOutputStream(file);
                    InputStream in = methodRes.getResponseBodyAsStream();
                    int readTemp = 0;
                    while ((readTemp = in.read()) != -1) {
                        out.write(readTemp);
                    }
                    System.out.println(file.getName() + "" downloaded."");
                    methodRes.releaseConnection();
                    if (file.getName().endsWith("".jar"")) {
                        jarFiles.add(file);
                    }
                } else {
                    methodRes.releaseConnection();
                    System.out.println(""Loading Monitor Failed. Unable to get resource "" + url);
                    return;
                }
            } catch (IOException e) {
                System.out.println(""Loading Monitor Failed, error while reading resource file from HTTP Server"");
                e.printStackTrace(System.err);
                return;
            }
        }
        URL[] urls = new URL[jarFiles.size()];
        try {
            for (int i = 0; i < jarFiles.size(); i++) {
                File file = jarFiles.get(i);
                File newFile = new File(Config.getCacheDir() + ""/"" + System.currentTimeMillis() + file.getName());
                FileInputStream in = new FileInputStream(file);
                FileOutputStream out = new FileOutputStream(newFile);
                int n = 0;
                byte[] buf = new byte[1024];
                while ((n = in.read(buf, 0, 1024)) > -1) {
                    out.write(buf, 0, n);
                }
                out.close();
                out.close();
                in.close();
                urls[i] = new URL(""file:"" + newFile.getAbsolutePath());
            }
        } catch (Exception e1) {
            System.out.println(""Unable to load jar files."");
            e1.printStackTrace();
        }
        URLClassLoader loader = new URLClassLoader(urls);
        engine.setClassLoader(loader);
        setPlain(monitor.getDownload());
        setPlain(monitor.getDownloadStatus());
        monitor.getDownloadStatus().setText(""      Done"");
        setBold(monitor.getGui());
        setBold(monitor.getGuiStatus());
        monitor.getGuiStatus().setText(""      Working"");
        Container container;
        try {
            String tempXml = xml.toString();
            int start = tempXml.indexOf(""<gui"");
            start = tempXml.indexOf('>', start) + 1;
            int end = tempXml.indexOf(""</gui>"");
            container = engine.render(new StringReader(tempXml.substring(start, end)));
        } catch (Exception e) {
            e.printStackTrace(System.err);
            System.err.println(""Exception msg: "" + e.getMessage());
            System.out.println(""Loading Monitor Failed, error creating gui."");
            return;
        }
        for (BindingContainer bcon : bindings) {
            for (Task task : tasks.get(bcon.getTask())) {
                if (task != null) {
                    Object comp = engine.find(bcon.getComponent());
                    if (comp != null) {
                        if (task.getTaskType() == Task.LISTEN && task.getFilter() instanceof AttributeChangeNotificationFilter) {
                            TaskNotificationListener listener = (TaskNotificationListener) task.getListener();
                            if (bcon.getFormater() == null) {
                                listener.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                listener.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        } else {
                            if (bcon.getFormater() == null) {
                                task.addResultListener(new Binding(comp, bcon.getMethod()));
                            } else {
                                task.addResultListener(new Binding(comp, bcon.getMethod(), bcon.getFormater(), loader));
                            }
                        }
                    } else {
                        System.out.println(""Refering to gui name, "" + bcon.getComponent() + "", that doesnt exist. Unable to create monitor."");
                        return;
                    }
                } else {
                    System.out.println(""Refering to task name, "" + bcon.getTask() + "", that doesnt exist. Unable to create monitor."");
                    return;
                }
            }
        }
        for (int i = 0; i < monitor.getTab().getTabCount(); i++) {
            if (monitor.getTab().getComponent(i).equals(monitor)) {
                monitor.getTab().setComponentAt(i, new MonitorContainerPanel(container, this));
                break;
            }
        }
        System.out.println(""Connecting to server(s)."");
        Enumeration<JmxServerGraph> e = servers.elements();
        List<JmxWorker> list = new ArrayList<JmxWorker>();
        while (e.hasMoreElements()) {
            JmxWorker worker = e.nextElement().getWorker();
            worker.setRunning(true);
            worker.start();
            list.add(worker);
        }
        MonitorServer.add(tabName, list);
        Config.addUrl(url);
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public static String MD5(String plainTxt) {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(plainTxt.getBytes());
            byte[] b = md.digest();
            int i = 0;
            StringBuffer buffer = new StringBuffer();
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0) {
                    i += 256;
                }
                if (i < 16) {
                    buffer.append(""0"");
                }
                buffer.append(Integer.toHexString(i));
            }
            return buffer.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return ""ERROR"";
        }
    }
",0.0
"    public String loadURL(URL url) {
        String retVal = """";
        try {
            InputStream inputStream = url.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = bufferedReader.readLine();
            retVal += line + ""\n"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) retVal += line + ""\n"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            retVal = e.getMessage();
        }
        return retVal;
    }
","    public String getSHA1Hex(String original) {
        MessageDigest digest;
        String result = """";
        try {
            digest = MessageDigest.getInstance(""sha1"");
            digest.reset();
            digest.update(original.getBytes());
            byte[] dig = digest.digest();
            String hexStr = """";
            for (int i = 0; i < dig.length; i++) {
                hexStr += Integer.toString((dig[i] & 0xff) + 0x100, 16).substring(1);
            }
            result = hexStr;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return result;
    }
",0.0
"    public InputStream getImageAsStream(Photo photo, int size) throws IOException, FlickrException {
        String urlStr = """";
        if (size == Size.SQUARE) {
            urlStr = photo.getSmallSquareUrl();
        } else if (size == Size.THUMB) {
            urlStr = photo.getThumbnailUrl();
        } else if (size == Size.SMALL) {
            urlStr = photo.getSmallUrl();
        } else if (size == Size.MEDIUM) {
            urlStr = photo.getMediumUrl();
        } else if (size == Size.LARGE) {
            urlStr = photo.getLargeUrl();
        } else if (size == Size.ORIGINAL) {
            urlStr = photo.getOriginalUrl();
        } else {
            throw new FlickrException(""0"", ""Unknown Photo-size"");
        }
        URL url = new URL(urlStr);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        if (transport instanceof REST) {
            if (((REST) transport).isProxyAuth()) {
                conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + ((REST) transport).getProxyCredentials());
            }
        }
        conn.connect();
        return conn.getInputStream();
    }
","    @Test
    public void testRoundTrip() {
        try {
            URL url = new URL(""http://localhost:8192/OMFHTTPJMSRoundtripService/"");
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());
            wr.write(testMessageHeader + testMessage);
            wr.flush();
            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                logger.debug(""Line: "" + line);
            }
            wr.close();
            rd.close();
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            logger.error(""InterruptedException caught trying to sleep test: "" + e.getMessage());
        }
        boolean messageReceived = false;
        ArrayList<String> messages = testJMSListener.getReceivedMessages();
        for (Iterator<String> iterator = messages.iterator(); iterator.hasNext(); ) {
            String string = (String) iterator.next();
            logger.debug(""String received: "" + string);
            if (testMessage.equals(string)) messageReceived = true;
        }
        assertTrue(""Message should have been received"", messageReceived);
    }
",0.0
"    public static Image getPluginImage(Object plugin, String name) {
        try {
            try {
                URL url = getPluginImageURL(plugin, name);
                if (mURLImageMap.containsKey(url)) {
                    return mURLImageMap.get(url);
                }
                InputStream is = url.openStream();
                Image image;
                try {
                    image = getImage(is);
                    mURLImageMap.put(url, image);
                } finally {
                    is.close();
                }
                return image;
            } catch (Throwable e) {
                LOG.debug(""Ignore any exceptions"");
            }
        } catch (Throwable e) {
            LOG.debug(""Ignore any exceptions"");
        }
        return null;
    }
","    public I18N(JApplet applet) {
        if (prop != null) return;
        String lang = ""en"";
        try {
            Properties userProperties = new Properties();
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + ""logicsim.cfg"");
                userProperties.load(url.openStream());
            } else {
                userProperties.load(new FileInputStream(""logicsim.cfg""));
            }
            if (userProperties.containsKey(""language"")) lang = userProperties.getProperty(""language"");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        prop = new Properties();
        try {
            if (applet != null) {
                URL url = new URL(applet.getCodeBase() + ""languages/"" + lang + "".txt"");
                prop.load(url.openStream());
            } else {
                prop.load(new FileInputStream(""languages/"" + lang + "".txt""));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            try {
                if (applet != null) {
                    URL url = new URL(applet.getCodeBase() + ""languages/en.txt"");
                    prop.load(url.openStream());
                } else {
                    prop.load(new FileInputStream(""languages/en.txt""));
                }
            } catch (Exception ex2) {
                JOptionPane.showMessageDialog(null, ""Language file languages/en.txt not found.\nPlease run the program from its directory."");
                System.exit(5);
            }
        }
    }
",0.0
"    @Override
    public InputStream getInputStream() throws IOException {
        if (dfos == null) {
            int deferredOutputStreamThreshold = Config.getInstance().getDeferredOutputStreamThreshold();
            dfos = new DeferredFileOutputStream(deferredOutputStreamThreshold, Definitions.PROJECT_NAME, ""."" + Definitions.TMP_EXTENSION);
            try {
                IOUtils.copy(is, dfos);
            } finally {
                dfos.close();
            }
        }
        return dfos.getDeferredInputStream();
    }
","    public void copyRes(long mailId1, long mailId2) throws Exception {
        File file1 = new File(this.getResDir(mailId1));
        File file2 = new File(this.getResDir(mailId2));
        this.recursiveDir(file2);
        if (file1.isDirectory()) {
            File[] files = file1.listFiles();
            if (files != null) {
                for (int i = 0; i < files.length; i++) {
                    if (files[i].isFile()) {
                        File file2s = new File(file2.getAbsolutePath() + ""/"" + files[i].getName());
                        if (!file2s.exists()) {
                            file2s.createNewFile();
                            BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2s));
                            BufferedInputStream in = new BufferedInputStream(new FileInputStream(files[i]));
                            int read;
                            while ((read = in.read()) != -1) {
                                out.write(read);
                            }
                            out.flush();
                            if (in != null) {
                                try {
                                    in.close();
                                } catch (IOException ex1) {
                                    ex1.printStackTrace();
                                }
                            }
                            if (out != null) {
                                try {
                                    out.close();
                                } catch (IOException ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
    }
",1.0
"    public ArrayList loadData(String address) {
        URL url;
        BufferedReader bf_in = null;
        ArrayList a = new ArrayList();
        String line;
        try {
            url = new URL(address);
            bf_in = new BufferedReader(new InputStreamReader(url.openStream()));
            while (((line = bf_in.readLine()) != null)) {
                if (line.startsWith(""Date"")) {
                    continue;
                }
                if (line != null && line.length() > 0) {
                    a.add(line);
                }
            }
            bf_in.close();
        } catch (Exception e) {
            System.out.println(""StockValumeHistory:loadData:Error:"" + e);
        }
        return a;
    }
","    public static final String hash(String password) {
        MessageDigest md = null;
        try {
            md = MessageDigest.getInstance(""SHA-512"");
            password = password + salt;
            md.update(password.getBytes(""utf8""));
            byte[] b = md.digest();
            StringBuilder output = new StringBuilder(32);
            for (int i = 0; i < b.length; i++) {
                String temp = Integer.toHexString(b[i] & 0xff);
                if (temp.length() < 2) {
                    output.append(""0"");
                }
                output.append(temp);
            }
            return output.toString();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
",0.0
"    @Override
    public void copy(File source, File dest) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = (new FileInputStream(source)).getChannel();
            out = (new FileOutputStream(dest)).getChannel();
            in.transferTo(0, source.length(), out);
        } catch (FileNotFoundException e) {
            throw new IOException(""Wrong source or destination path for backup operation!"");
        } finally {
            if (out != null) {
                out.close();
            }
            if (in != null) {
                in.close();
            }
        }
    }
","    public void fetchFile(String ID) {
        String url = ""http://www.nal.usda.gov/cgi-bin/agricola-ind?bib="" + ID + ""&conf=010000++++++++++++++&screen=MA"";
        System.out.println(url);
        try {
            PrintWriter pw = new PrintWriter(new FileWriter(""MARC"" + ID + "".txt""));
            if (!id.contains(""MARC"" + ID + "".txt"")) {
                id.add(""MARC"" + ID + "".txt"");
            }
            in = new BufferedReader(new InputStreamReader((new URL(url)).openStream()));
            in.readLine();
            String inputLine, stx = """";
            StringBuffer sb = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                if (inputLine.startsWith(""<TR><TD><B>"")) {
                    String sts = (inputLine.substring(inputLine.indexOf(""B>"") + 2, inputLine.indexOf(""</"")));
                    int i = 0;
                    try {
                        i = Integer.parseInt(sts);
                    } catch (NumberFormatException nfe) {
                    }
                    if (i > 0) {
                        stx = stx + ""\n"" + sts + "" - "";
                    } else {
                        stx += sts;
                    }
                }
                if (!(inputLine.startsWith(""<"") || inputLine.startsWith("" <"") || inputLine.startsWith("">""))) {
                    String tx = inputLine.trim();
                    stx += tx;
                }
            }
            pw.println(stx);
            pw.close();
        } catch (Exception e) {
            System.out.println(""Couldn't open stream"");
            System.out.println(e);
        }
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        InputStream urlStream = null;
        BufferedInputStream bis = null;
        AudioFileFormat fileFormat = null;
        urlStream = url.openStream();
        AudioInputStream result = null;
        try {
            bis = new BufferedInputStream(urlStream, bisBufferSize);
            result = getAudioInputStream((InputStream) bis);
        } finally {
            if (result == null) {
                urlStream.close();
            }
        }
        return result;
    }
","    @SuppressWarnings(""unchecked"")
    public static <T> List<T> getServices(String service) {
        String serviceUri = ""META-INF/services/"" + service;
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        try {
            Enumeration<URL> urls = loader.getResources(serviceUri);
            if (urls.hasMoreElements()) {
                List<T> services = new ArrayList<T>(1);
                do {
                    URL url = urls.nextElement();
                    _LOG.finest(""Processing:{0}"", url);
                    try {
                        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
                        try {
                            while (true) {
                                String line = in.readLine();
                                if (line == null) break;
                                T instance = (T) _parseLine(loader, line);
                                if (instance != null) services.add(instance);
                            }
                        } finally {
                            in.close();
                        }
                    } catch (Exception e) {
                        _LOG.warning(""ERR_PARSING_URL"", url);
                        _LOG.warning(e);
                    }
                } while (urls.hasMoreElements());
                if (services.size() == 1) return Collections.singletonList(services.get(0));
                return Collections.unmodifiableList(services);
            }
        } catch (IOException e) {
            _LOG.severe(""ERR_LOADING_RESROUCE"", serviceUri);
            _LOG.severe(e);
        }
        return Collections.emptyList();
    }
",0.0
"    private String generate(String value) throws Exception {
        String resStr = null;
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            md.update(value.getBytes(""utf-8""), 0, value.length());
            byte[] result = md.digest();
            resStr = FTGenerate.convertToHex(result);
            md.reset();
        } catch (NoSuchAlgorithmException nae) {
            this.getLog().severe(""Hash no funcionando"");
            nae.printStackTrace();
            throw new Exception(""Hash no funcionando"");
        } catch (UnsupportedEncodingException ee) {
            this.getLog().severe(""Encoding no funcionando"");
            ee.printStackTrace();
            throw new Exception(""Encoding no funcionando"");
        }
        return resStr;
    }
","        public static int simpleUpdate(String query) throws SQLException {
            Connection conn = null;
            Statement st = null;
            try {
                conn = dataSource.getConnection();
                st = conn.createStatement();
                int res = st.executeUpdate(query);
                conn.commit();
                return res;
            } catch (SQLException e) {
                try {
                    conn.rollback();
                } catch (Exception e1) {
                }
                throw e;
            } finally {
                try {
                    st.close();
                } catch (Exception e) {
                }
                try {
                    conn.close();
                } catch (Exception e) {
                }
            }
        }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","                @Override
                protected URLConnection openConnection(URL url) throws IOException {
                    return new URLConnection(url) {

                        @Override
                        public void connect() throws IOException {
                        }

                        @Override
                        public InputStream getInputStream() throws IOException {
                            ThemeResource f = getFacelet(getURL().getFile());
                            return new ByteArrayInputStream(f.getText().getBytes());
                        }
                    };
                }
",0.0
"    public static void copyFile(String file1, String file2) {
        File filedata1 = new java.io.File(file1);
        if (filedata1.exists()) {
            try {
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file2));
                BufferedInputStream in = new BufferedInputStream(new FileInputStream(file1));
                try {
                    int read;
                    while ((read = in.read()) != -1) {
                        out.write(read);
                    }
                    out.flush();
                } catch (IOException ex1) {
                    ex1.printStackTrace();
                } finally {
                    out.close();
                    in.close();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
","        public void valueChanged(ListSelectionEvent e) {
            if (e.getValueIsAdjusting()) return;
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();
            if (lsm.isSelectionEmpty()) {
            } else {
                int selectedRow = lsm.getMinSelectionIndex();
                ChemModel model = modelContent.getValueAt(sortedModelContent.getSortedIndex(selectedRow));
                DADMLResult resource = (DADMLResult) model.getProperty(""org.openscience.cdk.internet.DADMLResult"");
                URL url = resource.getURL();
                try {
                    URLConnection connection = url.openConnection();
                    InputStreamReader input = new InputStreamReader(connection.getInputStream());
                    if (APIVersionTester.isBiggerOrEqual(""1.8"", editBus.getAPIVersion())) {
                        try {
                            editBus.showChemFile(input);
                            return;
                        } catch (Exception exception) {
                            logger.error(""EditBus error: "", exception.getMessage());
                            logger.debug(exception);
                        }
                    }
                    IChemObjectReader reader = readerFactory.createReader(input);
                    ChemFile chemFile = (ChemFile) reader.read(new ChemFile());
                    editBus.showChemFile(chemFile);
                } catch (FileNotFoundException exception) {
                    String error = ""Resource not found: "" + url;
                    logger.error(error);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                } catch (Exception exception) {
                    String error = ""Error while reading file: "" + exception.getMessage();
                    logger.error(error);
                    logger.debug(exception);
                    JOptionPane.showMessageDialog(null, error);
                    return;
                }
                logger.warn(""Not displaying model with unknown content"");
            }
        }
",0.0
"    public static void copyFile(File from, File to) throws IOException {
        FileInputStream in = null;
        FileOutputStream out = null;
        try {
            in = new FileInputStream(from);
            out = new FileOutputStream(to);
            byte[] bytes = new byte[1024 * 4];
            int len = 0;
            while ((len = in.read(bytes)) >= 0) out.write(bytes, 0, len);
        } finally {
            Streams.closeQuietly(in);
            Streams.closeQuietly(out);
        }
    }
","    @org.junit.Test
    public void testReadWrite() throws Exception {
        final byte[] testBytes = ""testString"".getBytes();
        final InputStream istream = new ByteArrayInputStream(testBytes);
        final ByteArrayOutputStream destination = new ByteArrayOutputStream();
        final InputStream teeStream = new TeeInputStreamOutputStream(istream, destination);
        IOUtils.copy(teeStream, new NullOutputStream());
        teeStream.close();
        assertArrayEquals(""array are equals"", testBytes, destination.toByteArray());
    }
",1.0
"    protected String readContent(URL url, int width) {
        StringBuffer content = new StringBuffer("""");
        String line = """";
        try {
            BufferedReader f = new BufferedReader(new InputStreamReader(url.openStream()));
            while ((line = f.readLine()) != null) content.append(line + ""\n"");
            f.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (width >= 0) {
            String width_old = ""width=\""xxx\"""";
            String width_new = ""width=\"""" + width + ""\"""";
            int v0 = content.indexOf(width_old);
            int v1 = v0 + width_old.length();
            content.replace(v0, v1, width_new);
        }
        return content.toString();
    }
","    private static boolean renderStaticResource(final String requestedResource, HttpServletResponse servletResponse) throws IOException {
        boolean successfull = true;
        String fileName = PathTool.getFSPathOfResource(requestedResource);
        File file = new File(fileName);
        if (!file.exists()) {
            logger.error(""Static resource not found: "" + fileName);
            return false;
        }
        if (fileName.endsWith(""xml"") || fileName.endsWith(""asp"")) servletResponse.setContentType(""text/xml""); else if (fileName.endsWith(""css"")) servletResponse.setContentType(""text/css""); else if (fileName.endsWith(""js"")) servletResponse.setContentType(""text/javascript"");
        InputStream in = null;
        try {
            in = new BufferedInputStream(new FileInputStream(file));
            IOUtils.copy(in, servletResponse.getOutputStream());
            logger.debug(""Static resource rendered: "".concat(fileName));
        } catch (FileNotFoundException e) {
            logger.error(""Static resource not found: "" + fileName);
            successfull = false;
        } finally {
            IOUtils.closeQuietly(in);
        }
        return successfull;
    }
",0.0
"    public String deleteData(String id, DefaultHttpClient httpclient) {
        try {
            HttpDelete del = new HttpDelete(""http://3dforandroid.appspot.com/api/v1/note/delete/"" + id);
            del.setHeader(""Content-Type"", ""application/json"");
            del.setHeader(""Accept"", ""*/*"");
            HttpResponse response = httpclient.execute(del);
            HttpEntity entity = response.getEntity();
            InputStream instream;
            instream = entity.getContent();
            responseMessage = read(instream);
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return responseMessage;
    }
","    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
",0.0
"    public static boolean encodeFileToFile(String infile, String outfile) {
        boolean success = false;
        java.io.InputStream in = null;
        java.io.OutputStream out = null;
        try {
            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);
            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));
            byte[] buffer = new byte[65536];
            int read = -1;
            while ((read = in.read(buffer)) >= 0) {
                out.write(buffer, 0, read);
            }
            success = true;
        } catch (java.io.IOException exc) {
            exc.printStackTrace();
        } finally {
            try {
                in.close();
            } catch (Exception exc) {
            }
            try {
                out.close();
            } catch (Exception exc) {
            }
        }
        return success;
    }
","    public void doQuery(String keyword, final int page) {
        this.keyword = keyword;
        keyword = keyword.replace(' ', '+');
        commentText = new JTextArea(10, 80);
        final Vector commentVector = new Vector();
        int matchingDocCount = 0;
        int hitCount = 0;
        getContentPane().removeAll();
        Vector linkVector = new Vector();
        try {
            String featureid = keyword;
            URL connectURL = new URL(""http://www.ensembl.org/Homo_sapiens/textview?idx=External&q="" + keyword + ""&page="" + page);
            InputStream urlStream = connectURL.openStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(urlStream));
            String line, link, content, label, head = null;
            Box tabBox = null;
            String linkstr;
            String comment = """";
            int EnsExtCount;
            int EnsGeneCount;
            while ((line = reader.readLine()) != null) {
                if (line.indexOf(""documents match your query"") != -1) {
                    matchingDocCount = Integer.parseInt(line.substring(line.indexOf(""<B>"") + 3, line.indexOf(""</B>"")));
                    continue;
                }
                if (line.indexOf(""matches in the Ensembl External index"") != -1) {
                }
                if (line.indexOf(""matches in the Ensembl Gene index:"") != -1) {
                }
                if (line.indexOf(""Homo_sapiens/geneview?gene"") != -1) {
                    if (line.indexOf(""www.ensembl.org"") != -1) {
                        line = line.substring(line.indexOf(""www.ensembl.org""));
                        line = line.substring(line.indexOf(""</A>"") + 4);
                    }
                    int linkStart = line.indexOf(""Homo_sapiens/geneview?gene"");
                    if (linkStart == -1) break;
                    linkstr = ""http://www.ensembl.org/"" + line.substring(linkStart, line.indexOf(""\"">""));
                    line = line.substring(line.indexOf(""</A>"") + 4);
                    StringBuffer chars = new StringBuffer(line.length());
                    boolean inTag = false;
                    boolean inEntity = false;
                    boolean firstBRTossed = false;
                    line = line.substring(line.indexOf(""<""));
                    for (int ch = 0; ch < line.length(); ch++) {
                        if (line.charAt(ch) == '<') {
                            inTag = true;
                            if ((line.charAt(ch + 1) == 'b' || line.charAt(ch + 1) == 'B') && (line.charAt(ch + 2) == 'r' || line.charAt(ch + 2) == 'R')) {
                                if (firstBRTossed) {
                                    chars.append(""\n"");
                                } else {
                                    firstBRTossed = true;
                                }
                            }
                        }
                        if (line.charAt(ch) == '&') inEntity = true;
                        if (!inTag && !inEntity) chars.append(line.charAt(ch));
                        if (line.charAt(ch) == ';') inEntity = false;
                        if (line.charAt(ch) == '>') inTag = false;
                    }
                    comment = chars.toString();
                    commentVector.add(comment);
                    linkVector.add(linkstr);
                    hitCount++;
                }
            }
            if (hitCount == 0) commentText.setText(""No Matches Found for "" + keyword);
            commentText.setLineWrap(true);
            commentText.setWrapStyleWord(true);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, ""No Matches Found for "" + keyword);
            return;
        }
        final JList lst = new JList(linkVector);
        lst.addListSelectionListener(new ListSelectionListener() {

            public void valueChanged(ListSelectionEvent e) {
                int ind = lst.getSelectedIndex();
                commentText.setText((String) commentVector.elementAt(ind));
                commentText.select(0, 0);
            }
        });
        MouseListener mouseListener = new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    int index = lst.locationToIndex(e.getPoint());
                    extractEnsemblCoords((String) lst.getModel().getElementAt(index));
                }
            }
        };
        lst.addMouseListener(mouseListener);
        lst.setSelectedIndex(0);
        scrollPane = new JScrollPane(commentText);
        JPanel pagePanel = new JPanel();
        final JButton prevBttn = new JButton(""<="");
        final JButton nextBttn = new JButton(""=>"");
        prevBttn.setEnabled(page > 1);
        nextBttn.setEnabled(page + hitCount < matchingDocCount);
        ActionListener pageHandler = new ActionListener() {

            public void actionPerformed(ActionEvent ae) {
                if (ae.getSource() == prevBttn) {
                    doQuery(EnsemblLookup.this.keyword, page - 20);
                } else {
                    doQuery(EnsemblLookup.this.keyword, page + 20);
                }
            }
        };
        pagePanel.add(prevBttn);
        prevBttn.addActionListener(pageHandler);
        pagePanel.add(nextBttn);
        nextBttn.addActionListener(pageHandler);
        JPanel hitsAndTextPanel = new JPanel();
        hitsAndTextPanel.setLayout(new GridLayout(2, 1));
        hitsAndTextPanel.add(new JScrollPane(lst));
        hitsAndTextPanel.add(scrollPane);
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(hitsAndTextPanel, BorderLayout.CENTER);
        getContentPane().add(pagePanel, BorderLayout.SOUTH);
        setTitle(""Results for "" + keyword + ""  Displaying "" + (page + 1) + ((hitCount > 1) ? ("" - "" + (page + hitCount)) : """") + "" of "" + matchingDocCount);
        show();
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","    public String loadURL(URL url) {
        String retVal = """";
        try {
            InputStream inputStream = url.openStream();
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
            String line = bufferedReader.readLine();
            retVal += line + ""\n"";
            while (line != null) {
                System.out.println(line);
                line = bufferedReader.readLine();
                if (line != null) retVal += line + ""\n"";
            }
            bufferedReader.close();
        } catch (MalformedURLException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (IOException e) {
            e.printStackTrace();
            retVal = e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            retVal = e.getMessage();
        }
        return retVal;
    }
",0.0
"    public int getResponseCode(URI uri) {
        int response = -1;
        try {
            URL url = uri.toURL();
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            response = connection.getResponseCode();
        } catch (MalformedURLException m) {
            throw new MalformedURLException(""URL not correct"");
        } catch (IOException e) {
            throw new IOException(""can open connection"");
        } finally {
            return response;
        }
    }
","    protected void fetchDicomSopInstance(File result) throws Exception {
        try {
            URL url = new URL(this.config.getUrl(""wadoserver.url"").toString() + ""?requestType=WADO&contentType=text/xml"" + ""&studyUID="" + publicationProperties.getProperty(""studyUID"") + ""&seriesUID="" + publicationProperties.getProperty(""seriesUID"") + ""&objectUID="" + publicationProperties.getProperty(""objectUID""));
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            OutputStream ostream;
            InputStream istream;
            connection.setUseCaches(false);
            connection.setRequestProperty(""accept"", ""text/xml"");
            connection.connect();
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                throw new Exception(""Error fetching DICOM SOP instance ("" + connection.getResponseCode() + "" "" + connection.getResponseMessage() + "")"");
            }
            ostream = new BufferedOutputStream(new FileOutputStream(result));
            try {
                istream = connection.getInputStream();
                Utilities.copyStream(istream, ostream);
            } finally {
                ostream.close();
            }
        } catch (Exception e) {
            throw new Exception(""Error fetching DICOM SOP instance."", e);
        }
    }
",0.0
"    public MetaService() {
        super();
        URL url = this.getClass().getResource(Resource);
        if (null != url) {
            this.location = url;
            String value = null;
            try {
                InputStream in = url.openStream();
                try {
                    value = (new java.io.DataInputStream(in).readLine());
                    if (null != value) {
                        value = value.trim();
                        if (1 > value.length()) value = null;
                    }
                } finally {
                    in.close();
                }
            } catch (IOException exc) {
                exc.printStackTrace();
            }
            this.value = value;
        } else {
            this.location = null;
            this.value = null;
        }
    }
","    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
",0.0
"    @SuppressWarnings(""unchecked"")
    public InputStream openStream(URL url) throws IOException {
        List<String> lines = IOUtils.readLines(url.openStream());
        for (String line : lines) {
            Matcher m = PATTERN.matcher(line);
            if (m.matches()) {
                String origUrl = m.group(1);
                log.info(""Loading content from: "" + origUrl);
                return new HttpUtil<InputStream>() {

                    @Override
                    public InputStream handleResponse(InputStream response) throws IOException {
                        return new ByteArrayInputStream(IOUtils.toByteArray(response));
                    }
                }.get(new URL(origUrl));
            }
        }
        log.error(""No origUrl found for url: "" + url);
        return null;
    }
","    private void displayDiffResults() throws IOException {
        File outFile = File.createTempFile(""diff"", "".htm"");
        outFile.deleteOnExit();
        FileOutputStream outStream = new FileOutputStream(outFile);
        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));
        out.write(""<html><head><title>LOC Differences</title>\n"" + SCRIPT + ""</head>\n"" + ""<body bgcolor='#ffffff'>\n"" + ""<div onMouseOver=\""window.defaultStatus='Metrics'\"">\n"");
        if (addedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Added:</th>"" + ""<th>Add</th><th>Type</th></tr>"");
            out.write(addedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (modifiedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Modified:</th>"" + ""<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>"" + ""<th>Total</th><th>Type</th></tr>"");
            out.write(modifiedTable.toString());
            out.write(""</table><br><br>"");
        }
        if (deletedTable.length() > 0) {
            out.write(""<table border><tr><th>Files Deleted:</th>"" + ""<th>Del</th><th>Type</th></tr>"");
            out.write(deletedTable.toString());
            out.write(""</table><br><br>"");
        }
        out.write(""<table name=METRICS BORDER>\n"");
        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {
            out.write(""<tr><td>Base:&nbsp;</td><td>"");
            out.write(Long.toString(base));
            out.write(""</td></tr>\n<tr><td>Deleted:&nbsp;</td><td>"");
            out.write(Long.toString(deleted));
            out.write(""</td></tr>\n<tr><td>Modified:&nbsp;</td><td>"");
            out.write(Long.toString(modified));
            out.write(""</td></tr>\n<tr><td>Added:&nbsp;</td><td>"");
            out.write(Long.toString(added));
            out.write(""</td></tr>\n<tr><td>New & Changed:&nbsp;</td><td>"");
            out.write(Long.toString(added + modified));
            out.write(""</td></tr>\n"");
        }
        out.write(""<tr><td>Total:&nbsp;</td><td>"");
        out.write(Long.toString(total));
        out.write(""</td></tr>\n</table></div>"");
        redlinesOut.close();
        out.flush();
        InputStream redlines = new FileInputStream(redlinesTempFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);
        outStream.write(""</BODY></HTML>"".getBytes());
        outStream.close();
        Browser.launch(outFile.toURL().toString());
    }
",0.0
"    public static void main(String[] args) throws Exception {
        URL url = new URL(""http://localhost:9090/node/Insert/"" + args[0] + ""?address=blah"");
        URLConnection conn = url.openConnection();
        conn.setDoOutput(true);
        OutputStream os = conn.getOutputStream();
        Conduit.pump(System.in, os);
        Conduit.pump(conn.getInputStream(), System.out);
        System.out.println(""done"");
    }
","    public static String encodePassword(String plainTextPassword) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        StringBuffer sb = new StringBuffer();
        MessageDigest messageDigest = MessageDigest.getInstance(""SHA-512"");
        messageDigest.update(plainTextPassword.getBytes(""UTF-8""));
        byte[] digestBytes = messageDigest.digest();
        String hex = null;
        for (int i = 0; i < digestBytes.length; i++) {
            hex = Integer.toHexString(0xFF & digestBytes[i]);
            if (hex.length() < 2) sb.append(""0"");
            sb.append(hex);
        }
        return new String(sb);
    }
",0.0
"    private void initializeSecretKey() {
        String baseKey = """" + SystemClock.currentThreadTimeMillis() + new Random().nextInt();
        MessageDigest digest;
        String secretKey;
        try {
            digest = java.security.MessageDigest.getInstance(""MD5"");
            digest.reset();
            digest.update(baseKey.getBytes());
            byte messageDigest[] = digest.digest();
            int len = messageDigest.length;
            StringBuilder sb = new StringBuilder(len << 1);
            for (int i = 0; i < len; i++) {
                sb.append(Character.forDigit((messageDigest[i] & 0xf0) >> 4, 16));
                sb.append(Character.forDigit(messageDigest[i] & 0x0f, 16));
            }
            secretKey = sb.substring(0, 32);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        this.setSecretKey(secretKey);
    }
","    public static String readUrl(String urlString) {
        try {
            java.net.URL url = new java.net.URL(urlString);
            BufferedReader br = null;
            if (url != null) {
                br = new BufferedReader(new InputStreamReader(url.openStream()));
            }
            StringBuffer fileString = new StringBuffer();
            while (true) {
                String line = br.readLine();
                if (line == null) {
                    break;
                }
                fileString.append(line + ""\n"");
            }
            return fileString.toString();
        } catch (Exception e) {
            return null;
        }
    }
",0.0
"    public static void main(String[] args) throws Exception {
        String uri = args[0];
        Configuration conf = new Configuration();
        FileSystem fs = FileSystem.get(URI.create(uri), conf);
        Path inputPath = new Path(uri);
        CompressionCodecFactory factory = new CompressionCodecFactory(conf);
        CompressionCodec codec = factory.getCodec(inputPath);
        if (codec == null) {
            System.err.println(""No codec found for "" + uri);
            System.exit(1);
        }
        String outputUri = CompressionCodecFactory.removeSuffix(uri, codec.getDefaultExtension());
        InputStream in = null;
        OutputStream out = null;
        try {
            in = codec.createInputStream(fs.open(inputPath));
            out = fs.create(new Path(outputUri));
            IOUtils.copyBytes(in, out, conf);
        } finally {
            IOUtils.closeStream(in);
            IOUtils.closeStream(out);
        }
    }
","    public static String encrypt(String data) throws IOException, NoSuchAlgorithmException {
        Properties props = Configuration.getInstance().getProperties();
        String algorithm = props.getProperty(""com.makeabyte.jhosting.server.persistence.security.algorithm"");
        String encryptedData = data;
        boolean encrypt = Boolean.parseBoolean(props.getProperty(""com.makeabyte.jhosting.server.persistence.security.encrypt""));
        if (encrypt) {
            if (algorithm.equalsIgnoreCase(""UTF-16LE"")) return encryptActiveDirectory(data);
            MessageDigest md = java.security.MessageDigest.getInstance(algorithm);
            md.reset();
            md.update(data.getBytes());
            encryptedData = md.digest().toString();
        }
        return encryptedData;
    }
",0.0
"    public static String getMyGlobalIP() {
        try {
            URL url = new URL(IPSERVER);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String ip = in.readLine();
            in.close();
            con.disconnect();
            return ip;
        } catch (Exception e) {
            return null;
        }
    }
","    @Override
    protected URLConnection openConnection(URL url) throws IOException {
        if (url.getQuery() == null) throw new IllegalStateException(""Missing TemplateAccount number in rest URL "" + url);
        MSResource msResource = null;
        try {
            long templateAccountId = Long.parseLong(url.getQuery());
            msResource = menuBean.findMSResource(templateAccountId, url.getPath());
        } catch (Exception e) {
            throw new IllegalStateException(""Resource not found in database: "" + url, e);
        }
        ByteArrayInputStream bais = new ByteArrayInputStream(msResource.getValue());
        return new RestConnection(url, bais);
    }
",0.0
"    public boolean testConnection(FTPSite site) throws IOException {
        FTPClient testclient = new FTPClient();
        testclient.connect(site.getHost(), site.getPort());
        boolean check = testclient.login(site.getUser(), site.getPassword());
        testclient.disconnect();
        return check;
    }
","        private String download(MacroManagerProgress progress, String fileName, String url) throws Exception {
            URLConnection conn = new URL(url).openConnection();
            progress.setMaximum(Math.max(0, conn.getContentLength()));
            String path = MiscUtilities.constructPath(installDirectory, fileName);
            if (!copy(progress, conn.getInputStream(), new FileOutputStream(path), true, true)) return null;
            if (archive_zip) {
                Enumeration entries;
                ZipFile zipFile;
                try {
                    File tempFile = new File(path);
                    zipFile = new ZipFile(tempFile);
                    entries = zipFile.entries();
                    while (entries.hasMoreElements()) {
                        ZipEntry entry = (ZipEntry) entries.nextElement();
                        if (entry.isDirectory()) {
                            String dpath = MiscUtilities.constructPath(installDirectory, entry.getName());
                            (new File(dpath)).mkdir();
                            continue;
                        }
                        progress.setMaximum((int) entry.getSize());
                        String ePath = MiscUtilities.constructPath(installDirectory, entry.getName());
                        copy(progress, zipFile.getInputStream(entry), new BufferedOutputStream(new FileOutputStream(ePath)), true, true);
                    }
                    zipFile.close();
                    tempFile.delete();
                } catch (IOException ioe) {
                    ioe.printStackTrace();
                }
            } else if (archive_gzip) {
                File srce = new File(path);
                GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(srce));
                File temp = File.createTempFile(""macro"", ""mgr"");
                progress.setMaximum((int) srce.length());
                copy(progress, gzis, new BufferedOutputStream(new FileOutputStream(temp)), true, true);
                TarArchive tarc = new TarArchive(new FileInputStream(temp));
                tarc.extractContents(new File(installDirectory));
                tarc.closeArchive();
                (new File(path)).delete();
            }
            return path;
        }
",0.0
"    public static ArrayList<Principal> importPrincipals(String urlString) {
        ArrayList<Principal> results = new ArrayList<Principal>();
        try {
            URL url = new URL(urlString);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buff = new StringBuffer();
            String line;
            while ((line = in.readLine()) != null) {
                buff.append(line);
                if (line.equals(""</Principal>"")) {
                    Principal principal = ProfileParser.parsePrincipal(buff.toString());
                    results.add(principal);
                    buff = new StringBuffer();
                } else {
                    buff.append(NL);
                }
            }
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        } catch (ParsingException e) {
        }
        return results;
    }
","    public void testSavepoint4() throws Exception {
        Statement stmt = con.createStatement();
        stmt.execute(""CREATE TABLE #savepoint4 (data int)"");
        stmt.close();
        con.setAutoCommit(false);
        for (int i = 0; i < 3; i++) {
            System.out.println(""iteration: "" + i);
            PreparedStatement pstmt = con.prepareStatement(""INSERT INTO #savepoint4 (data) VALUES (?)"");
            pstmt.setInt(1, 1);
            assertTrue(pstmt.executeUpdate() == 1);
            Savepoint savepoint = con.setSavepoint();
            assertNotNull(savepoint);
            assertTrue(savepoint.getSavepointId() == 1);
            try {
                savepoint.getSavepointName();
                assertTrue(false);
            } catch (SQLException e) {
            }
            pstmt.setInt(1, 2);
            assertTrue(pstmt.executeUpdate() == 1);
            pstmt.close();
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            ResultSet rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 3);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback(savepoint);
            pstmt = con.prepareStatement(""SELECT SUM(data) FROM #savepoint4"");
            rs = pstmt.executeQuery();
            assertTrue(rs.next());
            assertTrue(rs.getInt(1) == 1);
            assertTrue(!rs.next());
            pstmt.close();
            rs.close();
            con.rollback();
        }
        con.setAutoCommit(true);
    }
",0.0
"    public static final void copyFile(File source, File target) {
        try {
            FileChannel srcChannel = new FileInputStream(source).getChannel();
            FileChannel dstChannel = new FileOutputStream(target).getChannel();
            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());
            srcChannel.close();
            dstChannel.close();
        } catch (java.io.IOException e) {
        }
    }
","    public String getResponse(String URLstring) {
        String str = """";
        try {
            URL url = new URL(URLstring);
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String st = """";
            while ((st = in.readLine()) != null) {
                str += ""\n"" + st;
            }
            in.close();
        } catch (MalformedURLException e) {
        } catch (IOException e) {
        }
        return str;
    }
",0.0
"    @Override
    protected byte[] computeHash() {
        try {
            final MessageDigest inputHash = MessageDigest.getInstance(""SHA"");
            inputHash.update(bufferFileData().getBytes());
            return inputHash.digest();
        } catch (final NoSuchAlgorithmException nsae) {
            lastException = nsae;
            return new byte[0];
        } catch (final IOException ioe) {
            lastException = ioe;
            return new byte[0];
        }
    }
","    private void delete(String location) throws Exception {
        URL url = new URL(location);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(""DELETE"");
        conn.connect();
        int responseCode = conn.getResponseCode();
        if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NO_CONTENT) {
            String response = ""location "" + location + "" responded: "" + conn.getResponseMessage() + "" ("" + responseCode + "")"";
            fail(response);
        }
    }
",0.0
"    private List<String> readCredits() {
        URL url = SpriteStore.get().getResourceURL(""games/midhedava/client/gui/credits.txt"");
        List<String> res = new LinkedList<String>();
        try {
            BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = br.readLine();
            while (line != null) {
                res.add(line);
                line = br.readLine();
            }
            br.close();
        } catch (IOException e) {
            res.add(0, ""credits.txt not found"");
        }
        return res;
    }
","    public static void copy(final File src, File dst, final boolean overwrite) throws IOException, IllegalArgumentException {
        if (!src.isFile() || !src.exists()) {
            throw new IllegalArgumentException(""Source file '"" + src.getAbsolutePath() + ""' not found!"");
        }
        if (dst.exists()) {
            if (dst.isDirectory()) {
                dst = new File(dst, src.getName());
            } else if (dst.isFile()) {
                if (!overwrite) {
                    throw new IllegalArgumentException(""Destination file '"" + dst.getAbsolutePath() + ""' already exists!"");
                }
            } else {
                throw new IllegalArgumentException(""Invalid destination object '"" + dst.getAbsolutePath() + ""'!"");
            }
        }
        final File dstParent = dst.getParentFile();
        if (!dstParent.exists()) {
            if (!dstParent.mkdirs()) {
                throw new IOException(""Failed to create directory "" + dstParent.getAbsolutePath());
            }
        }
        long fileSize = src.length();
        if (fileSize > 20971520l) {
            final FileInputStream in = new FileInputStream(src);
            final FileOutputStream out = new FileOutputStream(dst);
            try {
                int doneCnt = -1;
                final int bufSize = 32768;
                final byte buf[] = new byte[bufSize];
                while ((doneCnt = in.read(buf, 0, bufSize)) >= 0) {
                    if (doneCnt == 0) {
                        Thread.yield();
                    } else {
                        out.write(buf, 0, doneCnt);
                    }
                }
                out.flush();
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
            }
        } else {
            final FileInputStream fis = new FileInputStream(src);
            final FileOutputStream fos = new FileOutputStream(dst);
            final FileChannel in = fis.getChannel(), out = fos.getChannel();
            try {
                long offs = 0, doneCnt = 0;
                final long copyCnt = Math.min(65536, fileSize);
                do {
                    doneCnt = in.transferTo(offs, copyCnt, out);
                    offs += doneCnt;
                    fileSize -= doneCnt;
                } while (fileSize > 0);
            } finally {
                try {
                    in.close();
                } catch (final IOException e) {
                }
                try {
                    out.close();
                } catch (final IOException e) {
                }
                try {
                    fis.close();
                } catch (final IOException e) {
                }
                try {
                    fos.close();
                } catch (final IOException e) {
                }
            }
        }
    }
",0.0
"    public static String MD5(String text) throws Exception {
        MessageDigest md = MessageDigest.getInstance(""MD5"");
        md.update(text.getBytes());
        byte[] md5hash = md.digest();
        return convertToHex(md5hash);
    }
","	public FTPClient sample3b(String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
		FTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);
		ftpClient.connect(ftpserver);
		ftpClient.login(username, password);
		return ftpClient;
	}
",0.0
"    public static void copyFile(File in, File out, boolean copyModified) throws IOException {
        FileChannel inChannel = new FileInputStream(in).getChannel();
        FileChannel outChannel = new FileOutputStream(out).getChannel();
        try {
            int maxCount = (64 * 1024 * 1024) - (32 * 1024);
            long size = inChannel.size();
            long position = 0;
            while (position < size) {
                position += inChannel.transferTo(position, maxCount, outChannel);
            }
            if (copyModified) out.setLastModified(in.lastModified());
        } catch (IOException e) {
            throw e;
        } finally {
            if (inChannel != null) inChannel.close();
            if (outChannel != null) outChannel.close();
        }
    }
","    public static void ToHTML(GeoSciML_Mapping mapping, String strTemplate, String strRequest, String lang, PrintWriter sortie) throws Exception {
        String level = ""info."";
        if (ConnectorServlet.debug) level = ""debug."";
        Log log = LogFactory.getLog(level + ""fr.brgm.exows.gml2gsml.Gml2Gsml"");
        String tagFeature = ""FIELDS"";
        URL url2Request = new URL(strRequest);
        URLConnection conn = url2Request.openConnection();
        Date dDebut = new Date();
        BufferedReader buffin = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        String strLine = null;
        int nbFeatures = 0;
        Template template = VelocityCreator.createTemplate(""/fr/brgm/exows/gml2gsml/templates/"" + strTemplate);
        while ((strLine = buffin.readLine()) != null) {
            if (strLine.indexOf(tagFeature) != -1) {
                nbFeatures++;
                GSMLFeatureGeneric feature = createGSMLFeatureFromGMLFeatureString(mapping, strLine);
                VelocityContext context = new VelocityContext();
                context.put(""feature"", feature);
                context.put(""lang"", lang);
                context.put(""vocabularies"", new Vocabularies());
                String outputFeatureMember = VelocityCreator.createXMLbyContext(context, template);
                sortie.println(outputFeatureMember);
            }
        }
        buffin.close();
        Date dFin = new Date();
        String output = ""GEOSCIML : "" + nbFeatures + "" features handled - time : "" + (dFin.getTime() - dDebut.getTime()) / 1000 + "" ["" + dDebut + "" // "" + dFin + ""]"";
        log.trace(output);
    }
",0.0
"    public static InputStream getPropertyFileInputStream(String propertyFileURLStr) {
        InputStream in = null;
        String errmsg = ""Fatal error: Unable to open specified properties file: "" + propertyFileURLStr;
        try {
            URL url = new URL(propertyFileURLStr);
            in = url.openStream();
        } catch (IOException e) {
            throw new IllegalArgumentException(errmsg);
        }
        return (in);
    }
","    private void getRandomGUID(boolean secure) {
        MessageDigest md5 = null;
        StringBuffer sbValueBeforeMD5 = new StringBuffer();
        try {
            md5 = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            log.error(e.getMessage());
        }
        try {
            long time = System.currentTimeMillis();
            long rand = 0;
            if (secure) {
                rand = mySecureRand.nextLong();
            } else {
                rand = myRand.nextLong();
            }
            sbValueBeforeMD5.append(s_id);
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(time));
            sbValueBeforeMD5.append("":"");
            sbValueBeforeMD5.append(Long.toString(rand));
            valueBeforeMD5 = sbValueBeforeMD5.toString();
            md5.update(valueBeforeMD5.getBytes());
            byte[] array = md5.digest();
            StringBuffer sb = new StringBuffer();
            for (int j = 0; j < array.length; ++j) {
                int b = array[j] & 0xFF;
                if (b < 0x10) {
                    sb.append('0');
                }
                sb.append(Integer.toHexString(b));
            }
            valueAfterMD5 = sb.toString();
        } catch (Exception e) {
            log.error(e.getMessage());
        }
    }
",0.0
"    public boolean testConnection(FTPSite site) throws IOException {
        FTPClient testclient = new FTPClient();
        testclient.connect(site.getHost(), site.getPort());
        boolean check = testclient.login(site.getUser(), site.getPassword());
        testclient.disconnect();
        return check;
    }
","    public ContentPackage resolveItem() {
        URL url;
        try {
            url = new URL(itembankURL + ""/"" + deposit.get(""http://www.caret.cam.ac.uk/minibix/metadata/ticket""));
            return new ContentPackage(url.openStream());
        } catch (MalformedURLException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
",0.0
"    @Override
    protected void doRequest(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String reqPath = req.getPathInfo();
        if (reqPath.startsWith(""/"")) reqPath = reqPath.substring(1);
        ZipEntry entry = zipInfo.get(reqPath);
        if (entry == null) {
            logger.debug(Utils.join(""Requested path not found: ["", reqPath, ""]""));
            resp.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        logger.debug(Utils.join(""Requested path: ["", reqPath, ""]""));
        ServletUtils.establishContentType(reqPath, resp);
        InputStream in = null;
        try {
            in = new BufferedInputStream(zipFile.getInputStream(entry));
            IOUtils.copy(in, resp.getOutputStream());
            logger.debug(""Rendered: "" + reqPath);
        } catch (FileNotFoundException e) {
            logger.error(""zipped resource not found: "" + reqPath);
        } finally {
            IOUtils.closeQuietly(in);
        }
    }
","    public static void copyFile(File source, File destination) throws IOException {
        FileChannel in = null;
        FileChannel out = null;
        try {
            in = new FileInputStream(source).getChannel();
            out = new FileOutputStream(destination).getChannel();
            long size = in.size();
            MappedByteBuffer buffer = in.map(FileChannel.MapMode.READ_ONLY, 0, size);
            out.write(buffer);
        } finally {
            if (in != null) {
                in.close();
            }
            if (out != null) {
                out.close();
            }
        }
    }
",1.0
"    public static String sha1(String src) {
        MessageDigest md1 = null;
        try {
            md1 = MessageDigest.getInstance(""SHA-1"");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        try {
            md1.update(src.getBytes(""UTF-8""));
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return hex(md1.digest());
    }
","    public void elimina(Pedido pe) throws errorSQL, errorConexionBD {
        System.out.println(""GestorPedido.elimina()"");
        int id = pe.getId();
        String sql;
        Statement stmt = null;
        try {
            gd.begin();
            sql = ""DELETE FROM pedido WHERE id="" + id;
            System.out.println(""Ejecutando: "" + sql);
            stmt = gd.getConexion().createStatement();
            stmt.executeUpdate(sql);
            System.out.println(""executeUpdate"");
            gd.commit();
            System.out.println(""commit"");
            stmt.close();
        } catch (SQLException e) {
            gd.rollback();
            throw new errorSQL(e.toString());
        } catch (errorConexionBD e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        } catch (errorSQL e) {
            System.err.println(""Error en GestorPedido.elimina(): "" + e);
        }
    }
",0.0
"	public static void BubbleSortShort1(short[] num) {
		boolean flag = true; // set flag to true to begin first pass
		short temp; // holding variable

		while (flag) {
			flag = false; // set flag to false awaiting a possible swap
			for (int j = 0; j < num.length - 1; j++) {
				if (num[j] > num[j + 1]) // change to > for ascending sort
				{
					temp = num[j]; // swap elements
					num[j] = num[j + 1];
					num[j + 1] = temp;
					flag = true; // shows a swap occurred
				}
			}
		}
	}
","    public static byte[] encode(String cryptPassword, byte[] credentials, byte[] salt) {
        try {
            MessageDigest digester = MessageDigest.getInstance(DIGEST);
            SecureRandom random = SecureRandom.getInstance(RANDOM);
            digester.reset();
            for (int i = 0; i < ITERATIONS; i++) {
                digester.update(salt);
                digester.update(cryptPassword.getBytes(""UTF-8""));
            }
            byte[] hash = digester.digest();
            random.setSeed(hash);
            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);
            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);
            generator.init(maxKeySize, random);
            SecretKey key = generator.generateKey();
            Cipher cipher = Cipher.getInstance(CIPHER);
            cipher.init(Cipher.ENCRYPT_MODE, key);
            byte[] cipherOut = cipher.doFinal(credentials);
            byte[] ret = new byte[salt.length + cipherOut.length];
            System.arraycopy(salt, 0, ret, 0, salt.length);
            System.arraycopy(cipherOut, 0, ret, salt.length, cipherOut.length);
            return ret;
        } catch (Exception e) {
            StorePlugin.getDefault().log(e);
        }
        return new byte[0];
    }
",0.0
"    private String httpGet(String endpoint, String requestParameters) throws IOException {
        String urlStr = endpoint;
        if (requestParameters != null && requestParameters.length() > 0) {
            urlStr += ""?"" + requestParameters;
        }
        URL url = new URL(urlStr);
        URLConnection conn = url.openConnection();
        BufferedReader rd = null;
        StringBuffer sb = new StringBuffer();
        try {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = rd.readLine()) != null) {
                sb.append(line);
            }
        } finally {
            if (rd != null) {
                rd.close();
            }
        }
        return sb.toString();
    }
","    private static byte[] getKey(String password) throws UnsupportedEncodingException, NoSuchAlgorithmException {
        MessageDigest messageDigest = MessageDigest.getInstance(Constants.HASH_FUNCTION);
        messageDigest.update(password.getBytes(Constants.ENCODING));
        byte[] hashValue = messageDigest.digest();
        int keyLengthInbytes = Constants.ENCRYPTION_KEY_LENGTH / 8;
        byte[] result = new byte[keyLengthInbytes];
        System.arraycopy(hashValue, 0, result, 0, keyLengthInbytes);
        return result;
    }
",0.0
"    private URLConnection getURLConnection(String str) {
        try {
            if (isHttps) {
                System.setProperty(""java.protocol.handler.pkgs"", ""com.sun.net.ssl.internal.www.protocol"");
                if (isProxy) {
                    System.setProperty(""https.proxyHost"", proxyHost);
                    System.setProperty(""https.proxyPort"", proxyPort);
                }
            } else {
                if (isProxy) {
                    System.setProperty(""http.proxyHost"", proxyHost);
                    System.setProperty(""http.proxyPort"", proxyPort);
                }
            }
            URL url = new URL(str);
            return (url.openConnection());
        } catch (MalformedURLException me) {
            System.out.println(""Malformed URL"");
            me.printStackTrace();
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
","    private File copyFile(File currFile) throws IOException {
        String relativePath = currFile.getPath().substring(_distDir.length() + 1);
        File targetFile = new File(_installDir, relativePath);
        if (targetFile.exists()) {
            log(targetFile.getPath() + "" already exists, skipping libcopy"", Project.MSG_INFO);
            return targetFile;
        } else {
            if (!targetFile.getParentFile().exists()) {
                if (!targetFile.getParentFile().mkdirs()) {
                    log(""Unable to create target dir tree for "" + targetFile.getPath(), Project.MSG_ERR);
                    throw new IOException();
                }
            }
        }
        FileInputStream fis = null;
        FileOutputStream fos = null;
        try {
            fis = new FileInputStream(currFile);
        } catch (FileNotFoundException e) {
            log(""Library from plugin manifest appears to have been deleted: "" + currFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        try {
            fos = new FileOutputStream(targetFile);
        } catch (FileNotFoundException e) {
            log(""Unable to create target file to write to: "" + targetFile.getPath(), Project.MSG_ERR);
            throw new IOException();
        }
        BufferedInputStream bis = new BufferedInputStream(fis);
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        int read = 0;
        byte[] buff = new byte[65536];
        boolean success = true;
        while (read != -1 && success) {
            try {
                read = bis.read(buff, 0, 65536);
            } catch (IOException e) {
                log(""Read error whilst reading from: "" + currFile.getPath(), Project.MSG_ERR);
                success = false;
            }
            if (read != -1 && success) {
                try {
                    bos.write(buff, 0, read);
                } catch (IOException e) {
                    log(""Write error whilst writing to: "" + targetFile.getPath(), Project.MSG_ERR);
                    success = false;
                }
            }
        }
        try {
            bis.close();
        } catch (IOException e) {
        }
        try {
            bos.close();
        } catch (IOException e) {
        }
        try {
            fis.close();
        } catch (IOException e) {
        }
        try {
            fos.close();
        } catch (IOException e) {
        }
        if (!success) {
            throw new IOException();
        }
        return targetFile;
    }
",0.0
"    public static void fileCopy(String fromPath, String toPath) throws IOException {
        File inputFile = new File(fromPath);
        File outputFile = new File(toPath);
        FileReader in = new FileReader(inputFile);
        FileWriter out = new FileWriter(outputFile);
        int c;
        while ((c = in.read()) != -1) out.write(c);
        in.close();
        out.close();
    }
","    private void uploadConfiguration(URL url, IUser iUser) throws IOException, ContributionServiceException {
        StringBuilder sb = new StringBuilder();
        BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), ""UTF-8""));
        String line;
        while ((line = reader.readLine()) != null) {
            sb.append(line).append(System.getProperty(""line.separator""));
        }
        SYSTEM_SETTINGS_SVC.setElementMetadata(sb.toString(), iUser);
        GetSystemScriptServlet.resetScript();
    }
",0.0
"    public AudioInputStream getAudioInputStream(URL url) throws UnsupportedAudioFileException, IOException {
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): begin"");
        }
        long lFileLengthInBytes = AudioSystem.NOT_SPECIFIED;
        InputStream inputStream = url.openStream();
        AudioInputStream audioInputStream = null;
        try {
            audioInputStream = getAudioInputStream(inputStream, lFileLengthInBytes);
        } catch (UnsupportedAudioFileException e) {
            inputStream.close();
            throw e;
        } catch (IOException e) {
            inputStream.close();
            throw e;
        }
        if (TDebug.TraceAudioFileReader) {
            TDebug.out(""TAudioFileReader.getAudioInputStream(URL): end"");
        }
        return audioInputStream;
    }
","    public void write(String resource, String destinationPath) throws IOException, CoreException {
        OutputStream output = null;
        InputStream contentStream = null;
        try {
            contentStream = new BufferedInputStream(new FileInputStream(resource));
            output = new BufferedOutputStream(new FileOutputStream(destinationPath));
            int available = contentStream.available();
            available = available <= 0 ? DEFAULT_BUFFER_SIZE : available;
            int chunkSize = Math.min(DEFAULT_BUFFER_SIZE, available);
            byte[] readBuffer = new byte[chunkSize];
            int n = contentStream.read(readBuffer);
            while (n > 0) {
                output.write(readBuffer, 0, n);
                n = contentStream.read(readBuffer);
            }
        } finally {
            if (contentStream != null) {
                try {
                    contentStream.close();
                } catch (IOException e) {
                    IDEWorkbenchPlugin.log(""Error closing input stream for file: "" + resource, e);
                }
            }
            if (output != null) {
                output.close();
            }
        }
    }
",0.0
"    private FTPClient connectFtps() throws NoSuchAlgorithmException, IOException {
        FTPClient apacheClient;
        if (isSecure) {
            apacheClient = new FTPSClient(true);
        } else {
            apacheClient = new FTPClient();
        }
        apacheClient.addProtocolCommandListener(new LogFtpListener(LOG));
        if (isSecure) {
            apacheClient.connect(host, 990);
        } else {
            apacheClient.connect(host);
        }
        if (!apacheClient.login(user, pass)) {
            throw new IllegalArgumentException(""Unrecognized Username/Password"");
        }
        apacheClient.setFileType(FTPClient.BINARY_FILE_TYPE);
        apacheClient.getStatus();
        apacheClient.help();
        apacheClient.enterLocalPassiveMode();
        return apacheClient;
    }
","    private final String encryptPassword(final String password) throws EncryptionExecption {
        if ((password == null) || (password.length() == 0)) {
            throw new NullPointerException();
        }
        try {
            final MessageDigest md = MessageDigest.getInstance(""SHA"");
            md.update((password).getBytes(""UTF-8""));
            return new BASE64Encoder().encode(md.digest());
        } catch (NoSuchAlgorithmException e) {
            throw new EncryptionExecption(e);
        } catch (UnsupportedEncodingException e) {
            throw new EncryptionExecption(e);
        }
    }
",0.0
"    public static Image getImage(URL url) throws IOException {
        InputStream is = null;
        try {
            is = url.openStream();
            Image img = getImage(is);
            img.setUrl(url);
            return img;
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
","    public boolean import_pieces(String filename) {
        int pieceId;
        int i;
        int n;
        int[] color;
        boolean byurl = true;
        e2piece temppiece;
        color = new int[4];
        BufferedReader entree;
        try {
            if (byurl == true) {
                URL url = new URL(baseURL, filename);
                InputStream in = url.openStream();
                entree = new BufferedReader(new InputStreamReader(in));
            } else {
                entree = new BufferedReader(new FileReader(filename));
            }
            pieceId = 0;
            while (true) {
                String lineread = entree.readLine();
                if (lineread == null) {
                    break;
                }
                StringTokenizer tok = new StringTokenizer(lineread, "" "");
                n = tok.countTokens();
                if (n == 2) {
                } else {
                    for (i = 0; i < 4; i++) {
                        color[i] = Integer.parseInt(tok.nextToken());
                    }
                    pieceId++;
                    System.out.println(""Read Piece : "" + pieceId + "":"" + color[0] + "" "" + color[1] + "" "" + color[2] + "" "" + color[3]);
                    temppiece = new e2piece(pieceId, color[0] + 1, color[1] + 1, color[2] + 1, color[3] + 1);
                    allpieces.add_piece(temppiece);
                    unplacedpieces.add_piece(temppiece);
                }
            }
            return true;
        } catch (IOException err) {
            return false;
        }
    }
",0.0
"    public static final void connectExecuteDisconnect(String url, HttpProcess<?> process) throws IOException {
        URL urlObj = null;
        HttpURLConnection urlCon = null;
        try {
            urlObj = new URL(url);
            urlCon = (HttpURLConnection) urlObj.openConnection();
            process.apply(urlCon);
        } finally {
            disconnect(urlCon);
        }
    }
","    public List<String> getLinks(String url) {
        List<String> links = new ArrayList<String>();
        try {
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(new URL(url).openStream()));
            String s;
            StringBuilder builder = new StringBuilder();
            while ((s = bufferedReader.readLine()) != null) {
                builder.append(s);
            }
            Matcher tagmatch = htmltag.matcher(builder.toString());
            while (tagmatch.find()) {
                Matcher matcher = link.matcher(tagmatch.group());
                matcher.find();
                String link = matcher.group().replaceFirst(""href=\"""", """").replaceFirst(""\"">"", """");
                if (valid(link)) {
                    links.add(makeAbsolute(url, link));
                }
            }
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return links;
    }
",0.0
"    private String crypt(String s) throws BaseException, NoSuchAlgorithmException {
        if (s != null && s.length() > 0) {
            MessageDigest algorithm = MessageDigest.getInstance(""MD5"");
            algorithm.reset();
            algorithm.update(s.getBytes());
            byte messageDigest[] = algorithm.digest();
            StringBuffer hexString = new StringBuffer();
            for (int i = 0; i < messageDigest.length; i++) {
                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));
            }
            return hexString.toString();
        } else {
            throw new BaseException(ErrorCodes.CODE_2100);
        }
    }
","    public boolean connectyahoo(String login, String password) throws Exception {
        String lapage = new String("""");
        String myargs = new String("""");
        Pattern pat;
        Matcher mat;
        int data;
        URL myurl = new URL(""http://groups.yahoo.com/mygroups"");
        URLConnection conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""login : "");
        InputStream in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        myargs += URLEncoder.encode("".tries"", ""UTF-8"") + ""="" + URLEncoder.encode(""1"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".src"", ""UTF-8"") + ""="" + URLEncoder.encode(""ygrp"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".md5"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".hash"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".js"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".last"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""promo"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".intl"", ""UTF-8"") + ""="" + URLEncoder.encode(""us"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".bypass"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".partner"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".u\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".u"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".v"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\"".challenge\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode("".challenge"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".yplus"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".emailCode"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""pkg"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""stepid"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".ev"", ""UTF-8"") + ""="" + URLEncoder.encode("""", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""hasMsgr"", ""UTF-8"") + ""="" + URLEncoder.encode(""0"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".chkP"", ""UTF-8"") + ""="" + URLEncoder.encode(""Y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".done"", ""UTF-8"") + ""="" + URLEncoder.encode(""http://groups.yahoo.com/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""login"", ""UTF-8"") + ""="" + URLEncoder.encode(login, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""passwd"", ""UTF-8"") + ""="" + URLEncoder.encode(password, ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".persistent"", ""UTF-8"") + ""="" + URLEncoder.encode(""y"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode("".save"", ""UTF-8"") + ""="" + URLEncoder.encode(""Sign In"", ""UTF-8"");
        myurl = new URL(""http://login.yahoo.com/config/login"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        OutputStream output = conn.getOutputStream();
        PrintStream pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.connect();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.print(""adult : "");
        in = conn.getInputStream();
        lapage = """";
        for (data = in.read(); data != -1; data = in.read()) lapage += (char) data;
        myargs = """";
        pat = Pattern.compile(""<input type=\""hidden\"" name=\""ycb\"" value=\""(.+?)\"">"");
        mat = pat.matcher(lapage);
        mat.find();
        myargs += URLEncoder.encode(""ycb"", ""UTF-8"") + ""="" + URLEncoder.encode(mat.group(1), ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""dest"", ""UTF-8"") + ""="" + URLEncoder.encode(""/mygroups"", ""UTF-8"") + ""&"";
        myargs += URLEncoder.encode(""accept"", ""UTF-8"") + ""="" + URLEncoder.encode(""I Acce"", ""UTF-8"");
        myurl = new URL(""http://groups.yahoo.com/adultconf"");
        conn = myurl.openConnection();
        conn.setDoInput(true);
        conn.setDoOutput(true);
        output = conn.getOutputStream();
        pout = new PrintStream(output);
        pout.print(myargs);
        pout.close();
        if (!Pattern.matches(""HTTP/... 2.. .*"", conn.getHeaderField(0).toString())) {
            System.out.println(conn.getHeaderField(0).toString());
            return false;
        }
        System.out.println(""OK"");
        return true;
    }
",0.0
"    public static String encodeMD5(String s) throws NoSuchAlgorithmException {
        MessageDigest m = null;
        String result = null;
        m = MessageDigest.getInstance(""MD5"");
        m.update(s.getBytes(), 0, s.length());
        result = new BigInteger(1, m.digest()).toString(16);
        if (result.length() == 31) {
            result = ""0"" + result;
        }
        return result;
    }
","    @SuppressWarnings({ ""ResultOfMethodCallIgnored"" })
    public static Node combineCss(URL base, List<Node> linkCss, List<File> newFiles) throws IOException {
        File dir = File.createTempFile(""css"", """" + System.currentTimeMillis());
        StringBuilder name = new StringBuilder();
        try {
            if (dir.delete() && dir.mkdirs()) {
                File minDir = new File(dir, ""min"");
                minDir.mkdir();
                File combineFile = new File(minDir, ""style.css"");
                Writer writer = new FileWriter(combineFile);
                boolean first = true;
                for (Node link : linkCss) {
                    String path = ((Element) link).getAttribute(""href"");
                    URL url = new URL(buildUrl(base, path));
                    InputStream inputStream = url.openStream();
                    File cssFile = new File(dir, fileName(url));
                    FileOutputStream outputStream = new FileOutputStream(cssFile);
                    IOUtils.copy(inputStream, outputStream);
                    outputStream.close();
                    inputStream.close();
                    if (!first) {
                        writer.write('\n');
                    } else {
                        first = false;
                    }
                    Reader reader = new FileReader(cssFile);
                    if (Configuration.cssMinification()) {
                        CssCompressor cssCompressor = new CssCompressor(reader);
                        cssCompressor.compress(writer, 0);
                    } else {
                        IOUtils.copy(reader, writer);
                    }
                    reader.close();
                    String fileName = cssFile.getName();
                    int pos = fileName.lastIndexOf('.');
                    if (pos >= 0) {
                        fileName = fileName.substring(0, pos);
                    }
                    name.append(fileName).append("","");
                }
                writer.close();
                FileReader reader = new FileReader(combineFile);
                name.append(hashCode(IOUtils.toString(reader))).append("".css"");
                reader.close();
                File targetFile = new File(Configuration.getCssLocalDir(), name.toString());
                if (!targetFile.exists()) {
                    targetFile.getParentFile().mkdirs();
                    FileUtils.copyFile(combineFile, targetFile);
                    newFiles.add(targetFile);
                    logger.info(""Combined several css files into the single "" + targetFile + "" [size="" + targetFile.length() + ""]."");
                }
            }
        } finally {
            FileUtils.deleteQuietly(dir);
        }
        if (name.length() != 0) {
            Element element = (Element) linkCss.get(0);
            element.setAttribute(""href"", Configuration.getCssUrlPrefix() + name.toString());
            return element;
        } else {
            return null;
        }
    }
",0.0
"    public static void copyFiles(File src, File dest) throws IOException {
        if (src.isDirectory()) {
            dest.mkdirs();
            for (String f : src.list()) {
                String df = dest.getPath() + File.separator + f;
                String sf = src.getPath() + File.separator + f;
                copyFiles(new File(sf), new File(df));
            }
        } else {
            FileInputStream fin = new FileInputStream(src);
            FileOutputStream fout = new FileOutputStream(dest);
            int c;
            while ((c = fin.read()) >= 0) fout.write(c);
            fin.close();
            fout.close();
        }
    }
","    public boolean checkWebsite(String URL, String content) {
        boolean run = false;
        try {
            URL url = new URL(URL + ""?a="" + Math.random());
            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = """";
            while ((line = reader.readLine()) != null) {
                if (line.contains(content)) {
                    run = true;
                }
            }
        } catch (Exception e) {
            run = false;
        }
        return run;
    }
",0.0
"    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {
        MessageDigest md;
        md = MessageDigest.getInstance(""MD5"");
        byte[] md5hash = new byte[32];
        md.update(text.getBytes(""UTF-8""), 0, text.length());
        md5hash = md.digest();
        return convertToHex(md5hash);
    }
","    private String load(URL url) {
        BufferedReader r = null;
        try {
            r = new BufferedReader(new InputStreamReader(url.openStream()));
            StringBuffer buf = new StringBuffer();
            while (r.ready()) {
                buf.append(r.readLine()).append('\n');
            }
            r.close();
            return buf.toString();
        } catch (IOException e) {
            logger.severe(""Could not load shader program: "" + e);
            logger.logp(Level.SEVERE, getClass().getName(), ""load(URL)"", ""Exception"", e);
            return null;
        }
    }
",0.0
